
SmartEGAT_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f98  08000f98  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000f98  08000f98  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f98  08000f98  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f98  08000f98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000008  08000fa8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000fa8  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005588  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e86  00000000  00000000  000255b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000268  00000000  00000000  00026440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  000266a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bdf  00000000  00000000  00026898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002cd0  00000000  00000000  00029477  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a7a5  00000000  00000000  0002c147  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000368ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000077c  00000000  00000000  00036968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f50 	.word	0x08000f50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000f50 	.word	0x08000f50

08000170 <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_Config_t* ADCCfg){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	// Enable Clocks for ADC and GPIO.
	RCC_GPIOA_CLk_EN();
 8000178:	4b43      	ldr	r3, [pc, #268]	; (8000288 <ADC_Init+0x118>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a42      	ldr	r2, [pc, #264]	; (8000288 <ADC_Init+0x118>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
	RCC_ADC1_CLK_EN();
 8000184:	4b40      	ldr	r3, [pc, #256]	; (8000288 <ADC_Init+0x118>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a3f      	ldr	r2, [pc, #252]	; (8000288 <ADC_Init+0x118>)
 800018a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800018e:	6193      	str	r3, [r2, #24]

	// Configure GPIO Pins PA0 and PA1 for analog Input.
	// Reset the first 8-bits in the CRL Register.
	GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000190:	4b3e      	ldr	r3, [pc, #248]	; (800028c <ADC_Init+0x11c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a3d      	ldr	r2, [pc, #244]	; (800028c <ADC_Init+0x11c>)
 8000196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800019a:	6013      	str	r3, [r2, #0]

	/******** ADC Configuration ***********/
	// Enable ADC.
	ADC1->CR2 |= (1 << 0);
 800019c:	4b3c      	ldr	r3, [pc, #240]	; (8000290 <ADC_Init+0x120>)
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	4a3b      	ldr	r2, [pc, #236]	; (8000290 <ADC_Init+0x120>)
 80001a2:	f043 0301 	orr.w	r3, r3, #1
 80001a6:	6093      	str	r3, [r2, #8]

	// Input Channels.
	ADC1->SQR3 = ADCCfg->channels;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	785a      	ldrb	r2, [r3, #1]
 80001ac:	4b38      	ldr	r3, [pc, #224]	; (8000290 <ADC_Init+0x120>)
 80001ae:	635a      	str	r2, [r3, #52]	; 0x34

	// ADC Mode.
	ADC1->CR1 |= ADCCfg->mode;
 80001b0:	4b37      	ldr	r3, [pc, #220]	; (8000290 <ADC_Init+0x120>)
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	7812      	ldrb	r2, [r2, #0]
 80001b8:	4611      	mov	r1, r2
 80001ba:	4a35      	ldr	r2, [pc, #212]	; (8000290 <ADC_Init+0x120>)
 80001bc:	430b      	orrs	r3, r1
 80001be:	6053      	str	r3, [r2, #4]

	G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	4a33      	ldr	r2, [pc, #204]	; (8000294 <ADC_Init+0x124>)
 80001c6:	6013      	str	r3, [r2, #0]

	// ADC Converstion Mode (CONT - Single).
	if(ADCCfg->convMode == ADC_Conv_CONT_MODE){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	78db      	ldrb	r3, [r3, #3]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d106      	bne.n	80001de <ADC_Init+0x6e>
		ADC1->CR2 |= (1 << 1);
 80001d0:	4b2f      	ldr	r3, [pc, #188]	; (8000290 <ADC_Init+0x120>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	4a2e      	ldr	r2, [pc, #184]	; (8000290 <ADC_Init+0x120>)
 80001d6:	f043 0302 	orr.w	r3, r3, #2
 80001da:	6093      	str	r3, [r2, #8]
 80001dc:	e009      	b.n	80001f2 <ADC_Init+0x82>
	}else if(ADCCfg->convMode == ADC_Conv_Single_MODE){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	78db      	ldrb	r3, [r3, #3]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d105      	bne.n	80001f2 <ADC_Init+0x82>
		ADC1->CR2 &= ~(1 << 1);
 80001e6:	4b2a      	ldr	r3, [pc, #168]	; (8000290 <ADC_Init+0x120>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a29      	ldr	r2, [pc, #164]	; (8000290 <ADC_Init+0x120>)
 80001ec:	f023 0302 	bic.w	r3, r3, #2
 80001f0:	6093      	str	r3, [r2, #8]
	}else{}

	// Data Alignment
	if(ADCCfg->dataAlginement == ADC_DataAlign_Right){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	791b      	ldrb	r3, [r3, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d106      	bne.n	8000208 <ADC_Init+0x98>
		ADC1->CR2 &= ~(1 << 11);
 80001fa:	4b25      	ldr	r3, [pc, #148]	; (8000290 <ADC_Init+0x120>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4a24      	ldr	r2, [pc, #144]	; (8000290 <ADC_Init+0x120>)
 8000200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000204:	6093      	str	r3, [r2, #8]
 8000206:	e009      	b.n	800021c <ADC_Init+0xac>
	}else if(ADCCfg->dataAlginement == ADC_DataAlign_Left){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d105      	bne.n	800021c <ADC_Init+0xac>
		ADC1->CR2 |= (1 << 11);
 8000210:	4b1f      	ldr	r3, [pc, #124]	; (8000290 <ADC_Init+0x120>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <ADC_Init+0x120>)
 8000216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800021a:	6093      	str	r3, [r2, #8]
	}else{}

	// ADC Converstion Complete Interrupt Enable (EOCIE).
	if(ADCCfg->IRQ_Enable == ADC_IRQ_Enable){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	795b      	ldrb	r3, [r3, #5]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d10c      	bne.n	800023e <ADC_Init+0xce>
		NVIC_IRQ18_ADC_Enable;
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <ADC_Init+0x128>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <ADC_Init+0x128>)
 800022a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]
		ADC1->CR1 |= (1 << 5);
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <ADC_Init+0x120>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <ADC_Init+0x120>)
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	6053      	str	r3, [r2, #4]
 800023c:	e009      	b.n	8000252 <ADC_Init+0xe2>
	}else if(ADCCfg->IRQ_Enable == ADC_IRQ_Disable){
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	795b      	ldrb	r3, [r3, #5]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d105      	bne.n	8000252 <ADC_Init+0xe2>
		ADC1->CR1 &= ~(1 << 5);
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <ADC_Init+0x120>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a11      	ldr	r2, [pc, #68]	; (8000290 <ADC_Init+0x120>)
 800024c:	f023 0320 	bic.w	r3, r3, #32
 8000250:	6053      	str	r3, [r2, #4]
	}

	// Start Conversion.
	// Small Delay(tSTAB).
	for(int i = 0; i <= 1000; i++);
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e002      	b.n	800025e <ADC_Init+0xee>
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3301      	adds	r3, #1
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000264:	ddf8      	ble.n	8000258 <ADC_Init+0xe8>
	// Set ADON again to start conversion.
	ADC1->CR2 |= (1 << 0);
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <ADC_Init+0x120>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a09      	ldr	r2, [pc, #36]	; (8000290 <ADC_Init+0x120>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6093      	str	r3, [r2, #8]
	// Set SWSTART Bit to start trigger by SW (best for operation).
	ADC1->CR2 |= (0b111 << 17);
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <ADC_Init+0x120>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a06      	ldr	r2, [pc, #24]	; (8000290 <ADC_Init+0x120>)
 8000278:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800027c:	6093      	str	r3, [r2, #8]
}
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40021000 	.word	0x40021000
 800028c:	40010800 	.word	0x40010800
 8000290:	40012400 	.word	0x40012400
 8000294:	2000002c 	.word	0x2000002c
 8000298:	e000e100 	.word	0xe000e100

0800029c <ADC1_2_IRQHandler>:
	RCC_ADC1_CLK_DIS();
	NVIC_IRQ18_ADC_Disable;
	ADC1->CR2 &= (1 << 0);
}

void ADC1_2_IRQHandler(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <ADC1_2_IRQHandler+0x24>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <ADC1_2_IRQHandler+0x24>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <ADC1_2_IRQHandler+0x28>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <ADC1_2_IRQHandler+0x28>)
 80002b4:	f023 0302 	bic.w	r3, r3, #2
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	40012400 	.word	0x40012400

080002c8 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI0_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI0_IRQHandler+0x1c>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI0_IRQHandler+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000030 	.word	0x20000030

080002ec <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI1_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI1_IRQHandler+0x1c>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI1_IRQHandler+0x20>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000030 	.word	0x20000030

08000310 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI2_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI2_IRQHandler+0x1c>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI2_IRQHandler+0x20>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000030 	.word	0x20000030

08000334 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI3_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI3_IRQHandler+0x1c>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI3_IRQHandler+0x20>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000030 	.word	0x20000030

08000358 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <EXTI4_IRQHandler+0x1c>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <EXTI4_IRQHandler+0x1c>)
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <EXTI4_IRQHandler+0x20>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4798      	blx	r3
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010400 	.word	0x40010400
 8000378:	20000030 	.word	0x20000030

0800037c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	2b00      	cmp	r3, #0
 800038a:	d008      	beq.n	800039e <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a22      	ldr	r2, [pc, #136]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 8000398:	4b21      	ldr	r3, [pc, #132]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d008      	beq.n	80003bc <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a1b      	ldr	r2, [pc, #108]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b4:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d008      	beq.n	80003da <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d008      	beq.n	80003f8 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a0c      	ldr	r2, [pc, #48]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 80003f4:	6a1b      	ldr	r3, [r3, #32]
 80003f6:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000400:	2b00      	cmp	r3, #0
 8000402:	d008      	beq.n	8000416 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <EXTI9_5_IRQHandler+0xa0>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <EXTI9_5_IRQHandler+0xa4>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	4798      	blx	r3
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010400 	.word	0x40010400
 8000420:	20000030 	.word	0x20000030

08000424 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 8000428:	4b35      	ldr	r3, [pc, #212]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a31      	ldr	r2, [pc, #196]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 800043a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 8000442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000444:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 8000446:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8000452:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a2a      	ldr	r2, [pc, #168]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 8000460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000462:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046c:	2b00      	cmp	r3, #0
 800046e:	d008      	beq.n	8000482 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8000470:	4b23      	ldr	r3, [pc, #140]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a22      	ldr	r2, [pc, #136]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 800047e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000480:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8000482:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d008      	beq.n	80004a0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 8000494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000498:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 80004a0:	4b17      	ldr	r3, [pc, #92]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d008      	beq.n	80004be <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 80004ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004bc:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d008      	beq.n	80004dc <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d4:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 80004d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004da:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d008      	beq.n	80004fa <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <EXTI15_10_IRQHandler+0xdc>)
 80004ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <EXTI15_10_IRQHandler+0xe0>)
 80004f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f8:	4798      	blx	r3
	}
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40010400 	.word	0x40010400
 8000504:	20000030 	.word	0x20000030

08000508 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	2b80      	cmp	r3, #128	; 0x80
 8000516:	d042      	beq.n	800059e <getCRLHPinPos+0x96>
 8000518:	2b80      	cmp	r3, #128	; 0x80
 800051a:	dc11      	bgt.n	8000540 <getCRLHPinPos+0x38>
 800051c:	2b08      	cmp	r3, #8
 800051e:	d036      	beq.n	800058e <getCRLHPinPos+0x86>
 8000520:	2b08      	cmp	r3, #8
 8000522:	dc06      	bgt.n	8000532 <getCRLHPinPos+0x2a>
 8000524:	2b02      	cmp	r3, #2
 8000526:	d02e      	beq.n	8000586 <getCRLHPinPos+0x7e>
 8000528:	2b04      	cmp	r3, #4
 800052a:	d02e      	beq.n	800058a <getCRLHPinPos+0x82>
 800052c:	2b01      	cmp	r3, #1
 800052e:	d028      	beq.n	8000582 <getCRLHPinPos+0x7a>
 8000530:	e047      	b.n	80005c2 <getCRLHPinPos+0xba>
 8000532:	2b20      	cmp	r3, #32
 8000534:	d02f      	beq.n	8000596 <getCRLHPinPos+0x8e>
 8000536:	2b40      	cmp	r3, #64	; 0x40
 8000538:	d02f      	beq.n	800059a <getCRLHPinPos+0x92>
 800053a:	2b10      	cmp	r3, #16
 800053c:	d029      	beq.n	8000592 <getCRLHPinPos+0x8a>
 800053e:	e040      	b.n	80005c2 <getCRLHPinPos+0xba>
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d033      	beq.n	80005ae <getCRLHPinPos+0xa6>
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	dc09      	bgt.n	8000560 <getCRLHPinPos+0x58>
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d029      	beq.n	80005a6 <getCRLHPinPos+0x9e>
 8000552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000556:	d028      	beq.n	80005aa <getCRLHPinPos+0xa2>
 8000558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055c:	d021      	beq.n	80005a2 <getCRLHPinPos+0x9a>
 800055e:	e030      	b.n	80005c2 <getCRLHPinPos+0xba>
 8000560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000564:	d027      	beq.n	80005b6 <getCRLHPinPos+0xae>
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056a:	dc03      	bgt.n	8000574 <getCRLHPinPos+0x6c>
 800056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000570:	d01f      	beq.n	80005b2 <getCRLHPinPos+0xaa>
 8000572:	e026      	b.n	80005c2 <getCRLHPinPos+0xba>
 8000574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000578:	d01f      	beq.n	80005ba <getCRLHPinPos+0xb2>
 800057a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800057e:	d01e      	beq.n	80005be <getCRLHPinPos+0xb6>
 8000580:	e01f      	b.n	80005c2 <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e01e      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 8000586:	2304      	movs	r3, #4
 8000588:	e01c      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 800058a:	2308      	movs	r3, #8
 800058c:	e01a      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 800058e:	230c      	movs	r3, #12
 8000590:	e018      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8000592:	2310      	movs	r3, #16
 8000594:	e016      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 8000596:	2314      	movs	r3, #20
 8000598:	e014      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 800059a:	2318      	movs	r3, #24
 800059c:	e012      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 800059e:	231c      	movs	r3, #28
 80005a0:	e010      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e00e      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	e00c      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 80005aa:	2308      	movs	r3, #8
 80005ac:	e00a      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 80005ae:	230c      	movs	r3, #12
 80005b0:	e008      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 80005b2:	2310      	movs	r3, #16
 80005b4:	e006      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 80005b6:	2314      	movs	r3, #20
 80005b8:	e004      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 80005ba:	2318      	movs	r3, #24
 80005bc:	e002      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 80005be:	231c      	movs	r3, #28
 80005c0:	e000      	b.n	80005c4 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 80005ce:	b590      	push	{r4, r7, lr}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b80      	cmp	r3, #128	; 0x80
 80005e6:	d902      	bls.n	80005ee <MCAL_GPIO_Init+0x20>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3304      	adds	r3, #4
 80005ec:	e000      	b.n	80005f0 <MCAL_GPIO_Init+0x22>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff86 	bl	8000508 <getCRLHPinPos>
 80005fc:	4602      	mov	r2, r0
 80005fe:	230f      	movs	r3, #15
 8000600:	4093      	lsls	r3, r2
 8000602:	43da      	mvns	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	401a      	ands	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	2b04      	cmp	r3, #4
 8000614:	d00b      	beq.n	800062e <MCAL_GPIO_Init+0x60>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b05      	cmp	r3, #5
 800061c:	d007      	beq.n	800062e <MCAL_GPIO_Init+0x60>
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b06      	cmp	r3, #6
 8000624:	d003      	beq.n	800062e <MCAL_GPIO_Init+0x60>
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d10e      	bne.n	800064c <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	3b04      	subs	r3, #4
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	b25a      	sxtb	r2, r3
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e039      	b.n	80006c0 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d003      	beq.n	800065c <MCAL_GPIO_Init+0x8e>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10c      	bne.n	8000676 <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	b25b      	sxtb	r3, r3
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	b25a      	sxtb	r2, r3
 800066a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066e:	4313      	orrs	r3, r2
 8000670:	b25b      	sxtb	r3, r3
 8000672:	73fb      	strb	r3, [r7, #15]
 8000674:	e024      	b.n	80006c0 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b08      	cmp	r3, #8
 800067c:	d104      	bne.n	8000688 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e01b      	b.n	80006c0 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	789b      	ldrb	r3, [r3, #2]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d107      	bne.n	80006a8 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	e00b      	b.n	80006c0 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	789b      	ldrb	r3, [r3, #2]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d107      	bne.n	80006c0 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	401a      	ands	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80006c0:	7bfc      	ldrb	r4, [r7, #15]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff1e 	bl	8000508 <getCRLHPinPos>
 80006cc:	4603      	mov	r3, r0
 80006ce:	fa04 f203 	lsl.w	r2, r4, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	431a      	orrs	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]

}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d006      	beq.n	8000704 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d302      	bcc.n	8000700 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d004      	beq.n	8000708 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 80006fe:	e005      	b.n	800070c <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8000702:	e004      	b.n	800070e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8000706:	e002      	b.n	800070e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 800070a:	e000      	b.n	800070e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	007a1200 	.word	0x007a1200
 8000720:	00186a00 	.word	0x00186a00
 8000724:	00f42400 	.word	0x00f42400

08000728 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 800072c:	f7ff ffda 	bl	80006e4 <MCAL_RCC_GET_SYS_CLKFreq>
 8000730:	4601      	mov	r1, r0
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <MCAL_RCC_GET_HCLKFreq+0x24>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	08000f84 	.word	0x08000f84

08000750 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8000754:	f7ff ffe8 	bl	8000728 <MCAL_RCC_GET_HCLKFreq>
 8000758:	4601      	mov	r1, r0
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	f003 0307 	and.w	r3, r3, #7
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800076c:	4618      	mov	r0, r3
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40021000 	.word	0x40021000
 8000774:	08000f7c 	.word	0x08000f7c

08000778 <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 800077c:	f7ff ffd4 	bl	8000728 <MCAL_RCC_GET_HCLKFreq>
 8000780:	4601      	mov	r1, r0
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	0adb      	lsrs	r3, r3, #11
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <MCAL_RCC_GET_PCLK2Freq+0x24>)
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	08000f7c 	.word	0x08000f7c

080007a0 <delay>:
}




void delay(uint16_t time, uint8_t unit, uint32_t clk){
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	603a      	str	r2, [r7, #0]
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	460b      	mov	r3, r1
 80007ae:	717b      	strb	r3, [r7, #5]
	delayFlag = 1;
 80007b0:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <delay+0x150>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
	// disable NVIC Interrupt
	//NVIC_IRQ28_TIM2_Disable;
	// Enable Clock For Selected Timer
	RCC_TIM2_CLk_EN();
 80007b6:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <delay+0x154>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <delay+0x154>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	61d3      	str	r3, [r2, #28]

	// Timer off (be sure that is configured from the off state (Optional))
	TIM2->CR1 &= ~(1 << 0);
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6013      	str	r3, [r2, #0]

	uint8_t  userFlag = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	77fb      	strb	r3, [r7, #31]
	uint32_t userTop  = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
	uint32_t userPre  = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
	uint32_t timeUnit = 1000;
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	613b      	str	r3, [r7, #16]
	uint8_t  increase = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	73fb      	strb	r3, [r7, #15]

	if(unit == 0){
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10d      	bne.n	800080a <delay+0x6a>
		timeUnit = 1000;
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	613b      	str	r3, [r7, #16]
		if(time > 3000){
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d902      	bls.n	8000804 <delay+0x64>
			increase = 100;
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e030      	b.n	8000866 <delay+0xc6>
		}else{
			increase = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e02d      	b.n	8000866 <delay+0xc6>
		}
	}else {
		timeUnit = 1000000;
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <delay+0x158>)
 800080c:	613b      	str	r3, [r7, #16]
		if(time > 3000){
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000814:	4293      	cmp	r3, r2
 8000816:	d902      	bls.n	800081e <delay+0x7e>
			increase = 10;
 8000818:	230a      	movs	r3, #10
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e023      	b.n	8000866 <delay+0xc6>
		}else {
			increase = 5;
 800081e:	2305      	movs	r3, #5
 8000820:	73fb      	strb	r3, [r7, #15]
		}
	}

	while(userFlag == 1){
 8000822:	e020      	b.n	8000866 <delay+0xc6>

		userTop = (clk/timeUnit*time)/(userPre);
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	fbb2 f3f3 	udiv	r3, r2, r3
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	fb02 f203 	mul.w	r2, r2, r3
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	fbb2 f3f3 	udiv	r3, r2, r3
 8000838:	61bb      	str	r3, [r7, #24]
		//7272 = (8000000/1000*time)/10;
		//7272 = (8000 * time)/10;
		//72720 / 8000 =

		if(userTop >= 32000){
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000840:	d30f      	bcc.n	8000862 <delay+0xc2>
			if(userPre > 65530){
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8000848:	4293      	cmp	r3, r2
 800084a:	d905      	bls.n	8000858 <delay+0xb8>
				userPre = 65530;
 800084c:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000850:	617b      	str	r3, [r7, #20]
				userFlag = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	77fb      	strb	r3, [r7, #31]
 8000856:	e006      	b.n	8000866 <delay+0xc6>
			}else {
				userPre += increase;
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e001      	b.n	8000866 <delay+0xc6>
			}
		}else {
			userFlag = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	77fb      	strb	r3, [r7, #31]
	while(userFlag == 1){
 8000866:	7ffb      	ldrb	r3, [r7, #31]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d0db      	beq.n	8000824 <delay+0x84>
		}
	}

	// Timer Off
	TIM2->CR1 &= ~(1<<CEN);
 800086c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]
	 * 0: Any of the following events generate an update interrupt or DMA request if enabled.
	 * These events can be:
	 * Counter overflow/underflow
	 */
	// Only counter overflow/underflow generates an update
	TIM2->CR1 |= (1 << URS);
 800087c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6013      	str	r3, [r2, #0]
	 * Bit 0  UIE: Update interrupt enable
	 *0: Update interrupt disabled.
	 *1: Update interrupt enabled.
	 */
	// update interrupt enabled
	TIM2->DIER |= (1 << UIE);
 800088c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	60d3      	str	r3, [r2, #12]

	TIM2->ARR = userTop;
 800089c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->PSC = (userPre - 1);
 80008a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6293      	str	r3, [r2, #40]	; 0x28
	// Re-Initialize the counter and generates an update of the registers.
	TIM2->EGR |= (1 << 0);
 80008ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6153      	str	r3, [r2, #20]
	// Enable Timer
	TIM2->CR1 |= (1 << CEN);
 80008be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6013      	str	r3, [r2, #0]

	NVIC_IRQ28_TIM2_Enable; 
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <delay+0x15c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <delay+0x15c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6013      	str	r3, [r2, #0]

	while(delayFlag);
 80008da:	bf00      	nop
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <delay+0x150>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1fb      	bne.n	80008dc <delay+0x13c>
}
 80008e4:	bf00      	nop
 80008e6:	3724      	adds	r7, #36	; 0x24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	40021000 	.word	0x40021000
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	e000e100 	.word	0xe000e100

08000900 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(){
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1 << 0); // Update Interrupt Flag
 8000904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6113      	str	r3, [r2, #16]
	delayFlag = 0;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <TIM2_IRQHandler+0x34>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<CEN);
 800091a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000000 	.word	0x20000000

08000938 <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler() {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <TIM1_UP_IRQHandler+0x24>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <TIM1_UP_IRQHandler+0x24>)
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <TIM1_UP_IRQHandler+0x28>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <TIM1_UP_IRQHandler+0x28>)
 8000952:	801a      	strh	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40012c00 	.word	0x40012c00
 8000960:	20000028 	.word	0x20000028

08000964 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <TIM3_IRQHandler+0x24>)
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <TIM3_IRQHandler+0x24>)
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <TIM3_IRQHandler+0x28>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <TIM3_IRQHandler+0x28>)
 800097e:	801a      	strh	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40000400 	.word	0x40000400
 800098c:	20000026 	.word	0x20000026

08000990 <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <TIM4_IRQHandler+0x24>)
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <TIM4_IRQHandler+0x24>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <TIM4_IRQHandler+0x28>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <TIM4_IRQHandler+0x28>)
 80009aa:	801a      	strh	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40000800 	.word	0x40000800
 80009b8:	20000024 	.word	0x20000024

080009bc <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a5d      	ldr	r2, [pc, #372]	; (8000b40 <MCAL_UART_Init+0x184>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d109      	bne.n	80009e2 <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 80009ce:	4a5d      	ldr	r2, [pc, #372]	; (8000b44 <MCAL_UART_Init+0x188>)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 80009d4:	4b5c      	ldr	r3, [pc, #368]	; (8000b48 <MCAL_UART_Init+0x18c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <MCAL_UART_Init+0x18c>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	e01a      	b.n	8000a18 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a59      	ldr	r2, [pc, #356]	; (8000b4c <MCAL_UART_Init+0x190>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d109      	bne.n	80009fe <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 80009ea:	4a56      	ldr	r2, [pc, #344]	; (8000b44 <MCAL_UART_Init+0x188>)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 80009f0:	4b55      	ldr	r3, [pc, #340]	; (8000b48 <MCAL_UART_Init+0x18c>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <MCAL_UART_Init+0x18c>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	61d3      	str	r3, [r2, #28]
 80009fc:	e00c      	b.n	8000a18 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <MCAL_UART_Init+0x194>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d108      	bne.n	8000a18 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8000a06:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <MCAL_UART_Init+0x188>)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8000a0c:	4b4e      	ldr	r3, [pc, #312]	; (8000b48 <MCAL_UART_Init+0x18c>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <MCAL_UART_Init+0x18c>)
 8000a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a16:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	7a12      	ldrb	r2, [r2, #8]
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	7a52      	ldrb	r2, [r2, #9]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	691b      	ldr	r3, [r3, #16]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	7a92      	ldrb	r2, [r2, #10]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	7ad2      	ldrb	r2, [r2, #11]
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a34      	ldr	r2, [pc, #208]	; (8000b40 <MCAL_UART_Init+0x184>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d105      	bne.n	8000a7e <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 8000a72:	f7ff fe81 	bl	8000778 <MCAL_RCC_GET_PCLK2Freq>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <MCAL_UART_Init+0x198>)
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e004      	b.n	8000a88 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 8000a7e:	f7ff fe67 	bl	8000750 <MCAL_RCC_GET_PCLK1Freq>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b33      	ldr	r3, [pc, #204]	; (8000b54 <MCAL_UART_Init+0x198>)
 8000a86:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 8000a88:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <MCAL_UART_Init+0x198>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	0119      	lsls	r1, r3, #4
 8000a98:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MCAL_UART_Init+0x198>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009a      	lsls	r2, r3, #2
 8000aa4:	441a      	add	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MCAL_UART_Init+0x198>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8000abe:	2064      	movs	r0, #100	; 0x64
 8000ac0:	fb00 f303 	mul.w	r3, r0, r3
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MCAL_UART_Init+0x19c>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <MCAL_UART_Init+0x1a0>)
 8000ad8:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MCAL_UART_Init+0x1a0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	7b1b      	ldrb	r3, [r3, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d026      	beq.n	8000b38 <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	7b12      	ldrb	r2, [r2, #12]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <MCAL_UART_Init+0x184>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d106      	bne.n	8000b0e <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 8000b0c:	e014      	b.n	8000b38 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <MCAL_UART_Init+0x190>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	e009      	b.n	8000b38 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <MCAL_UART_Init+0x194>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d105      	bne.n	8000b38 <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <MCAL_UART_Init+0x1a4>)
 8000b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40013800 	.word	0x40013800
 8000b44:	20000078 	.word	0x20000078
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40014800 	.word	0x40014800
 8000b54:	20000074 	.word	0x20000074
 8000b58:	51eb851f 	.word	0x51eb851f
 8000b5c:	20000070 	.word	0x20000070
 8000b60:	e000e104 	.word	0xe000e104

08000b64 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint8_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	461a      	mov	r2, r3
 8000b72:	460b      	mov	r3, r1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	4613      	mov	r3, r2
 8000b78:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.


	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <MCAL_UART_SendData+0xb4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d103      	bne.n	8000b8e <MCAL_UART_SendData+0x2a>
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	7a1b      	ldrb	r3, [r3, #8]
 8000b8c:	e00a      	b.n	8000ba4 <MCAL_UART_SendData+0x40>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <MCAL_UART_SendData+0xbc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d103      	bne.n	8000b9e <MCAL_UART_SendData+0x3a>
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	e002      	b.n	8000ba4 <MCAL_UART_SendData+0x40>
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	7a1b      	ldrb	r3, [r3, #8]
 8000ba4:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MCAL_UART_SendData+0xb4>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d103      	bne.n	8000bb6 <MCAL_UART_SendData+0x52>
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7a5b      	ldrb	r3, [r3, #9]
 8000bb4:	e00a      	b.n	8000bcc <MCAL_UART_SendData+0x68>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <MCAL_UART_SendData+0xbc>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d103      	bne.n	8000bc6 <MCAL_UART_SendData+0x62>
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	7a5b      	ldrb	r3, [r3, #9]
 8000bc4:	e002      	b.n	8000bcc <MCAL_UART_SendData+0x68>
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MCAL_UART_SendData+0xb8>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	7a5b      	ldrb	r3, [r3, #9]
 8000bcc:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d11c      	bne.n	8000c0e <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	e015      	b.n	8000c06 <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}
			if (pollingEn == enable) {
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <MCAL_UART_SendData+0x90>
					while (!(uartx->SR & 1 << 7));
 8000be6:	bf00      	nop
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <MCAL_UART_SendData+0x84>
			}
			uartx->DR = data;
 8000bf4:	7d7a      	ldrb	r2, [r7, #21]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	3301      	adds	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dbe5      	blt.n	8000bda <MCAL_UART_SendData+0x76>
		}
	}

}
 8000c0e:	bf00      	nop
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40013800 	.word	0x40013800
 8000c1c:	20000078 	.word	0x20000078
 8000c20:	40004400 	.word	0x40004400

08000c24 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <MCAL_UART_GPIO_SetPins+0xb8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d118      	bne.n	8000c66 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c38:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	4825      	ldr	r0, [pc, #148]	; (8000ce0 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000c4a:	f7ff fcc0 	bl	80005ce <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000c54:	2308      	movs	r3, #8
 8000c56:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000c60:	f7ff fcb5 	bl	80005ce <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8000c64:	e036      	b.n	8000cd4 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <MCAL_UART_GPIO_SetPins+0xc0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d116      	bne.n	8000c9c <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000c72:	2306      	movs	r3, #6
 8000c74:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000c82:	f7ff fca4 	bl	80005ce <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000c86:	2308      	movs	r3, #8
 8000c88:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000c96:	f7ff fc9a 	bl	80005ce <MCAL_GPIO_Init>
}
 8000c9a:	e01b      	b.n	8000cd4 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MCAL_UART_GPIO_SetPins+0xc4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d117      	bne.n	8000cd4 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000caa:	2306      	movs	r3, #6
 8000cac:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MCAL_UART_GPIO_SetPins+0xc8>)
 8000cba:	f7ff fc88 	bl	80005ce <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc2:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MCAL_UART_GPIO_SetPins+0xc8>)
 8000cd0:	f7ff fc7d 	bl	80005ce <MCAL_GPIO_Init>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40014800 	.word	0x40014800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <USART1_IRQHandler+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	4798      	blx	r3
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000078 	.word	0x20000078

08000d04 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	4798      	blx	r3
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000078 	.word	0x20000078

08000d18 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <USART3_IRQHandler+0x10>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	4798      	blx	r3
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000078 	.word	0x20000078

08000d2c <ADC_Callback>:
// ------------------------------------------------------------------
// Global functions
// ------------------------------------------------------------------


void ADC_Callback(){
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	sensorValues[currentChannel] = ADC1->DR;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <ADC_Callback+0x44>)
 8000d32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <ADC_Callback+0x48>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	b289      	uxth	r1, r1
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <ADC_Callback+0x4c>)
 8000d40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	currentChannel = (currentChannel + 1) % 2;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <ADC_Callback+0x48>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	bfb8      	it	lt
 8000d54:	425b      	neglt	r3, r3
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <ADC_Callback+0x48>)
 8000d5a:	701a      	strb	r2, [r3, #0]
	gVar += 20;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <ADC_Callback+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3314      	adds	r3, #20
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <ADC_Callback+0x50>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40012400 	.word	0x40012400
 8000d74:	2000002a 	.word	0x2000002a
 8000d78:	20000084 	.word	0x20000084
 8000d7c:	20000004 	.word	0x20000004

08000d80 <clockInit>:

void clockInit(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <clockInit+0x24>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <clockInit+0x24>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <clockInit+0x24>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <clockInit+0x24>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6193      	str	r3, [r2, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <main>:
// Main Function
// ------------------------------------------------------------------


int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b090      	sub	sp, #64	; 0x40
 8000dac:	af00      	add	r7, sp, #0
	// Clock Initialization
	clockInit();
 8000dae:	f7ff ffe7 	bl	8000d80 <clockInit>
	// UART Configuration.
	UART_Config_t uartCfg;
	uartCfg.BaudRate = UART_BaudRate_9600;
 8000db2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartCfg.IRQ_Enable = UART_IRQ_Eanble_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uartCfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uartCfg.Parity = UART_Parity_NONE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uartCfg.Mode = UART_Mode_TX_RX;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCfg.Payload = UART_PayloadLength_8B;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uartCfg.StopBits = UART_StopBits_One;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uartCfg.P_IRQ_Callback = NULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
	MCAL_UART_Init(UART1, &uartCfg);
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4619      	mov	r1, r3
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <main+0xf4>)
 8000de8:	f7ff fde8 	bl	80009bc <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(UART1);
 8000dec:	482b      	ldr	r0, [pc, #172]	; (8000e9c <main+0xf4>)
 8000dee:	f7ff ff19 	bl	8000c24 <MCAL_UART_GPIO_SetPins>

	uint8_t data[] = "Mohamed ";
 8000df2:	4a2b      	ldr	r2, [pc, #172]	; (8000ea0 <main+0xf8>)
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dfa:	c303      	stmia	r3!, {r0, r1}
 8000dfc:	701a      	strb	r2, [r3, #0]
	MCAL_UART_SendData(UART1, data, 8, enable);
 8000dfe:	f107 011c 	add.w	r1, r7, #28
 8000e02:	2300      	movs	r3, #0
 8000e04:	2208      	movs	r2, #8
 8000e06:	4825      	ldr	r0, [pc, #148]	; (8000e9c <main+0xf4>)
 8000e08:	f7ff feac 	bl	8000b64 <MCAL_UART_SendData>

	// ADC Configuration.
	ADC_Config_t ADCCfg;
	ADCCfg.mode = ADC_SCAN_MODE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	743b      	strb	r3, [r7, #16]
	ADCCfg.channels = ADC_1_2_SequenceChannels;
 8000e10:	2320      	movs	r3, #32
 8000e12:	747b      	strb	r3, [r7, #17]
	ADCCfg.convMode = ADC_Conv_Single_MODE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	74fb      	strb	r3, [r7, #19]
	ADCCfg.conversions = ADC_NumOfConvs_2;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	74bb      	strb	r3, [r7, #18]
	ADCCfg.dataAlginement = ADC_DataAlign_Right;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	753b      	strb	r3, [r7, #20]
	ADCCfg.IRQ_Enable = ADC_IRQ_Enable;
 8000e20:	2301      	movs	r3, #1
 8000e22:	757b      	strb	r3, [r7, #21]
	ADCCfg.P_IRQ_Callback = ADC_Callback;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <main+0xfc>)
 8000e26:	61bb      	str	r3, [r7, #24]
	ADC_Init(&ADCCfg);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f99f 	bl	8000170 <ADC_Init>


	int shift = 8;
 8000e32:	2308      	movs	r3, #8
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t data1[] = "Magdi\n";
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <main+0x100>)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e40:	6018      	str	r0, [r3, #0]
 8000e42:	3304      	adds	r3, #4
 8000e44:	8019      	strh	r1, [r3, #0]
 8000e46:	3302      	adds	r3, #2
 8000e48:	0c0a      	lsrs	r2, r1, #16
 8000e4a:	701a      	strb	r2, [r3, #0]
	MCAL_UART_SendData(UART1, data1, 6, enable);
 8000e4c:	f107 0108 	add.w	r1, r7, #8
 8000e50:	2300      	movs	r3, #0
 8000e52:	2206      	movs	r2, #6
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <main+0xf4>)
 8000e56:	f7ff fe85 	bl	8000b64 <MCAL_UART_SendData>
    /* Loop forever */
	while(1){
		if(shift == 8){
 8000e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d102      	bne.n	8000e66 <main+0xbe>
			shift = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e64:	e001      	b.n	8000e6a <main+0xc2>
		}else{
			shift = 8;
 8000e66:	2308      	movs	r3, #8
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		uint8_t ch = ((uint16_t)((sensorValues[0] << shift) + 48));
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <main+0x104>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3330      	adds	r3, #48	; 0x30
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	71fb      	strb	r3, [r7, #7]
		MCAL_UART_SendData(UART1, &ch, 1, enable);
 8000e80:	1df9      	adds	r1, r7, #7
 8000e82:	2300      	movs	r3, #0
 8000e84:	2201      	movs	r2, #1
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <main+0xf4>)
 8000e88:	f7ff fe6c 	bl	8000b64 <MCAL_UART_SendData>
		delay(1000, U_ms, clk);
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <main+0x108>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	f7ff fc84 	bl	80007a0 <delay>
	while(1){
 8000e98:	e7df      	b.n	8000e5a <main+0xb2>
 8000e9a:	bf00      	nop
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	08000f68 	.word	0x08000f68
 8000ea4:	08000d2d 	.word	0x08000d2d
 8000ea8:	08000f74 	.word	0x08000f74
 8000eac:	20000084 	.word	0x20000084
 8000eb0:	007a1200 	.word	0x007a1200

08000eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eb8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ee2:	f000 f811 	bl	8000f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff ff5f 	bl	8000da8 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000ef8:	08000fa0 	.word	0x08000fa0
  ldr r2, =_sbss
 8000efc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f00:	20000088 	.word	0x20000088

08000f04 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC3_IRQHandler>
	...

08000f08 <__libc_init_array>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	4e0c      	ldr	r6, [pc, #48]	; (8000f40 <__libc_init_array+0x38>)
 8000f0e:	4c0d      	ldr	r4, [pc, #52]	; (8000f44 <__libc_init_array+0x3c>)
 8000f10:	1ba4      	subs	r4, r4, r6
 8000f12:	10a4      	asrs	r4, r4, #2
 8000f14:	42a5      	cmp	r5, r4
 8000f16:	d109      	bne.n	8000f2c <__libc_init_array+0x24>
 8000f18:	f000 f81a 	bl	8000f50 <_init>
 8000f1c:	2500      	movs	r5, #0
 8000f1e:	4e0a      	ldr	r6, [pc, #40]	; (8000f48 <__libc_init_array+0x40>)
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <__libc_init_array+0x44>)
 8000f22:	1ba4      	subs	r4, r4, r6
 8000f24:	10a4      	asrs	r4, r4, #2
 8000f26:	42a5      	cmp	r5, r4
 8000f28:	d105      	bne.n	8000f36 <__libc_init_array+0x2e>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f30:	4798      	blx	r3
 8000f32:	3501      	adds	r5, #1
 8000f34:	e7ee      	b.n	8000f14 <__libc_init_array+0xc>
 8000f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f3a:	4798      	blx	r3
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	e7f2      	b.n	8000f26 <__libc_init_array+0x1e>
 8000f40:	08000f98 	.word	0x08000f98
 8000f44:	08000f98 	.word	0x08000f98
 8000f48:	08000f98 	.word	0x08000f98
 8000f4c:	08000f9c 	.word	0x08000f9c

08000f50 <_init>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	bf00      	nop
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr

08000f5c <_fini>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr
