
SmartEGAT_Task.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000786c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  080079a0  080079a0  000179a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f34  08007f34  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f34  08007f34  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f34  08007f34  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  200001e4  08008120  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200006b4  08008120  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca4a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ea9  00000000  00000000  0002cc57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002eb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000780  00000000  00000000  0002f2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000038f4  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074ea  00000000  00000000  00033344  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000fd93  00000000  00000000  0003a82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004a5c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  0004a63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e4 	.word	0x200001e4
 800014c:	00000000 	.word	0x00000000
 8000150:	08007984 	.word	0x08007984

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e8 	.word	0x200001e8
 800016c:	08007984 	.word	0x08007984

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_frsub>:
 8000b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba0:	e002      	b.n	8000ba8 <__addsf3>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fsub>:
 8000ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba8 <__addsf3>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	bf1f      	itttt	ne
 8000bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb0:	ea92 0f03 	teqne	r2, r3
 8000bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbc:	d06a      	beq.n	8000c94 <__addsf3+0xec>
 8000bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc6:	bfc1      	itttt	gt
 8000bc8:	18d2      	addgt	r2, r2, r3
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	4048      	eorgt	r0, r1
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	bf88      	it	hi
 8000bd8:	4770      	bxhi	lr
 8000bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4249      	negne	r1, r1
 8000bfa:	ea92 0f03 	teq	r2, r3
 8000bfe:	d03f      	beq.n	8000c80 <__addsf3+0xd8>
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	fa41 fc03 	asr.w	ip, r1, r3
 8000c08:	eb10 000c 	adds.w	r0, r0, ip
 8000c0c:	f1c3 0320 	rsb	r3, r3, #32
 8000c10:	fa01 f103 	lsl.w	r1, r1, r3
 8000c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__addsf3+0x78>
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c24:	d313      	bcc.n	8000c4e <__addsf3+0xa6>
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d306      	bcc.n	8000c3a <__addsf3+0x92>
 8000c2c:	0840      	lsrs	r0, r0, #1
 8000c2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c32:	f102 0201 	add.w	r2, r2, #1
 8000c36:	2afe      	cmp	r2, #254	; 0xfe
 8000c38:	d251      	bcs.n	8000cde <__addsf3+0x136>
 8000c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c42:	bf08      	it	eq
 8000c44:	f020 0001 	biceq.w	r0, r0, #1
 8000c48:	ea40 0003 	orr.w	r0, r0, r3
 8000c4c:	4770      	bx	lr
 8000c4e:	0049      	lsls	r1, r1, #1
 8000c50:	eb40 0000 	adc.w	r0, r0, r0
 8000c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	d1ed      	bne.n	8000c3a <__addsf3+0x92>
 8000c5e:	fab0 fc80 	clz	ip, r0
 8000c62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c66:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6e:	bfaa      	itet	ge
 8000c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c74:	4252      	neglt	r2, r2
 8000c76:	4318      	orrge	r0, r3
 8000c78:	bfbc      	itt	lt
 8000c7a:	40d0      	lsrlt	r0, r2
 8000c7c:	4318      	orrlt	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	f092 0f00 	teq	r2, #0
 8000c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c88:	bf06      	itte	eq
 8000c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8e:	3201      	addeq	r2, #1
 8000c90:	3b01      	subne	r3, #1
 8000c92:	e7b5      	b.n	8000c00 <__addsf3+0x58>
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d021      	beq.n	8000ce8 <__addsf3+0x140>
 8000ca4:	ea92 0f03 	teq	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__addsf3+0x10c>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	bf08      	it	eq
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea90 0f01 	teq	r0, r1
 8000cb8:	bf1c      	itt	ne
 8000cba:	2000      	movne	r0, #0
 8000cbc:	4770      	bxne	lr
 8000cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc2:	d104      	bne.n	8000cce <__addsf3+0x126>
 8000cc4:	0040      	lsls	r0, r0, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	bf3c      	itt	cc
 8000cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bxcc	lr
 8000cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	4770      	bx	lr
 8000ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cec:	bf16      	itet	ne
 8000cee:	4608      	movne	r0, r1
 8000cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf4:	4601      	movne	r1, r0
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	bf06      	itte	eq
 8000cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfe:	ea90 0f01 	teqeq	r0, r1
 8000d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_ui2f>:
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e004      	b.n	8000d18 <__aeabi_i2f+0x8>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_i2f>:
 8000d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	bf48      	it	mi
 8000d16:	4240      	negmi	r0, r0
 8000d18:	ea5f 0c00 	movs.w	ip, r0
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d24:	4601      	mov	r1, r0
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	e01c      	b.n	8000d66 <__aeabi_l2f+0x2a>

08000d2c <__aeabi_ul2f>:
 8000d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e00a      	b.n	8000d50 <__aeabi_l2f+0x14>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_l2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_l2f+0x14>
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d50:	ea5f 0c01 	movs.w	ip, r1
 8000d54:	bf02      	ittt	eq
 8000d56:	4684      	moveq	ip, r0
 8000d58:	4601      	moveq	r1, r0
 8000d5a:	2000      	moveq	r0, #0
 8000d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d60:	bf08      	it	eq
 8000d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6a:	fabc f28c 	clz	r2, ip
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d74:	db10      	blt.n	8000d98 <__aeabi_l2f+0x5c>
 8000d76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d88:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f102 0220 	add.w	r2, r2, #32
 8000d9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fmul>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d06f      	beq.n	8000eb0 <__aeabi_fmul+0xf8>
 8000dd0:	441a      	add	r2, r3
 8000dd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dde:	d01e      	beq.n	8000e1e <__aeabi_fmul+0x66>
 8000de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dec:	fba0 3101 	umull	r3, r1, r0, r1
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df8:	bf3e      	ittt	cc
 8000dfa:	0049      	lslcc	r1, r1, #1
 8000dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e00:	005b      	lslcc	r3, r3, #1
 8000e02:	ea40 0001 	orr.w	r0, r0, r1
 8000e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0a:	2afd      	cmp	r2, #253	; 0xfd
 8000e0c:	d81d      	bhi.n	8000e4a <__aeabi_fmul+0x92>
 8000e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e16:	bf08      	it	eq
 8000e18:	f020 0001 	biceq.w	r0, r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e26:	bf08      	it	eq
 8000e28:	0249      	lsleq	r1, r1, #9
 8000e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e32:	3a7f      	subs	r2, #127	; 0x7f
 8000e34:	bfc2      	ittt	gt
 8000e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3e:	4770      	bxgt	lr
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	dc5d      	bgt.n	8000f08 <__aeabi_fmul+0x150>
 8000e4c:	f112 0f19 	cmn.w	r2, #25
 8000e50:	bfdc      	itt	le
 8000e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	4770      	bxle	lr
 8000e58:	f1c2 0200 	rsb	r2, r2, #0
 8000e5c:	0041      	lsls	r1, r0, #1
 8000e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e62:	f1c2 0220 	rsb	r2, r2, #32
 8000e66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6e:	f140 0000 	adc.w	r0, r0, #0
 8000e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e76:	bf08      	it	eq
 8000e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7c:	4770      	bx	lr
 8000e7e:	f092 0f00 	teq	r2, #0
 8000e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0040      	lsleq	r0, r0, #1
 8000e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8e:	3a01      	subeq	r2, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fmul+0xce>
 8000e92:	ea40 000c 	orr.w	r0, r0, ip
 8000e96:	f093 0f00 	teq	r3, #0
 8000e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0049      	lsleq	r1, r1, #1
 8000ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea6:	3b01      	subeq	r3, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xe6>
 8000eaa:	ea41 010c 	orr.w	r1, r1, ip
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_fmul+0x18>
 8000eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	bf18      	it	ne
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d00a      	beq.n	8000ed6 <__aeabi_fmul+0x11e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1d8      	bne.n	8000e7e <__aeabi_fmul+0xc6>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	bf17      	itett	ne
 8000edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee0:	4608      	moveq	r0, r1
 8000ee2:	f091 0f00 	teqne	r1, #0
 8000ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eea:	d014      	beq.n	8000f16 <__aeabi_fmul+0x15e>
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fmul+0x13e>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d10f      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000ef6:	ea93 0f0c 	teq	r3, ip
 8000efa:	d103      	bne.n	8000f04 <__aeabi_fmul+0x14c>
 8000efc:	024b      	lsls	r3, r1, #9
 8000efe:	bf18      	it	ne
 8000f00:	4608      	movne	r0, r1
 8000f02:	d108      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_fdiv>:
 8000f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f28:	bf1e      	ittt	ne
 8000f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2e:	ea92 0f0c 	teqne	r2, ip
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d069      	beq.n	800100c <__aeabi_fdiv+0xec>
 8000f38:	eba2 0203 	sub.w	r2, r2, r3
 8000f3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f46:	d037      	beq.n	8000fb8 <__aeabi_fdiv+0x98>
 8000f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf38      	it	cc
 8000f5c:	005b      	lslcc	r3, r3, #1
 8000f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f66:	428b      	cmp	r3, r1
 8000f68:	bf24      	itt	cs
 8000f6a:	1a5b      	subcs	r3, r3, r1
 8000f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f82:	bf24      	itt	cs
 8000f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f90:	bf24      	itt	cs
 8000f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	bf18      	it	ne
 8000f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa2:	d1e0      	bne.n	8000f66 <__aeabi_fdiv+0x46>
 8000fa4:	2afd      	cmp	r2, #253	; 0xfd
 8000fa6:	f63f af50 	bhi.w	8000e4a <__aeabi_fmul+0x92>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	bfc2      	ittt	gt
 8000fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fcc:	4770      	bxgt	lr
 8000fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	e737      	b.n	8000e4a <__aeabi_fmul+0x92>
 8000fda:	f092 0f00 	teq	r2, #0
 8000fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe2:	bf02      	ittt	eq
 8000fe4:	0040      	lsleq	r0, r0, #1
 8000fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fea:	3a01      	subeq	r2, #1
 8000fec:	d0f9      	beq.n	8000fe2 <__aeabi_fdiv+0xc2>
 8000fee:	ea40 000c 	orr.w	r0, r0, ip
 8000ff2:	f093 0f00 	teq	r3, #0
 8000ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0049      	lsleq	r1, r1, #1
 8000ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001002:	3b01      	subeq	r3, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xda>
 8001006:	ea41 010c 	orr.w	r1, r1, ip
 800100a:	e795      	b.n	8000f38 <__aeabi_fdiv+0x18>
 800100c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001010:	ea92 0f0c 	teq	r2, ip
 8001014:	d108      	bne.n	8001028 <__aeabi_fdiv+0x108>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	f47f af7d 	bne.w	8000f16 <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	f47f af70 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 8001024:	4608      	mov	r0, r1
 8001026:	e776      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	d104      	bne.n	8001038 <__aeabi_fdiv+0x118>
 800102e:	024b      	lsls	r3, r1, #9
 8001030:	f43f af4c 	beq.w	8000ecc <__aeabi_fmul+0x114>
 8001034:	4608      	mov	r0, r1
 8001036:	e76e      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800103c:	bf18      	it	ne
 800103e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001042:	d1ca      	bne.n	8000fda <__aeabi_fdiv+0xba>
 8001044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001048:	f47f af5c 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 800104c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001050:	f47f af3c 	bne.w	8000ecc <__aeabi_fmul+0x114>
 8001054:	e75f      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001056:	bf00      	nop

08001058 <__gesf2>:
 8001058:	f04f 3cff 	mov.w	ip, #4294967295
 800105c:	e006      	b.n	800106c <__cmpsf2+0x4>
 800105e:	bf00      	nop

08001060 <__lesf2>:
 8001060:	f04f 0c01 	mov.w	ip, #1
 8001064:	e002      	b.n	800106c <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__cmpsf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	bf18      	it	ne
 800107e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001082:	d011      	beq.n	80010a8 <__cmpsf2+0x40>
 8001084:	b001      	add	sp, #4
 8001086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108a:	bf18      	it	ne
 800108c:	ea90 0f01 	teqne	r0, r1
 8001090:	bf58      	it	pl
 8001092:	ebb2 0003 	subspl.w	r0, r2, r3
 8001096:	bf88      	it	hi
 8001098:	17c8      	asrhi	r0, r1, #31
 800109a:	bf38      	it	cc
 800109c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a0:	bf18      	it	ne
 80010a2:	f040 0001 	orrne.w	r0, r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__cmpsf2+0x4c>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d105      	bne.n	80010c0 <__cmpsf2+0x58>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d1e4      	bne.n	8001084 <__cmpsf2+0x1c>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d0e1      	beq.n	8001084 <__cmpsf2+0x1c>
 80010c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d2:	f7ff ffc9 	bl	8001068 <__cmpsf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf48      	it	mi
 80010da:	f110 0f00 	cmnmi.w	r0, #0
 80010de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff fff4 	bl	80010d0 <__aeabi_cfcmpeq>
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmplt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffea 	bl	80010d0 <__aeabi_cfcmpeq>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmple>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffe0 	bl	80010d0 <__aeabi_cfcmpeq>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpge>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffd2 	bl	80010c8 <__aeabi_cfrcmple>
 8001124:	bf94      	ite	ls
 8001126:	2001      	movls	r0, #1
 8001128:	2000      	movhi	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmpgt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffc8 	bl	80010c8 <__aeabi_cfrcmple>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <Calculate_LightIntensityPercentage>:

#include "LDR_Light_Sensor.h"

// Local Functions

float Calculate_LightIntensityPercentage(uint16_t adcValue) {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08d      	sub	sp, #52	; 0x34
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
    // Constants
    const float Vcc = 3.3;       // Supply voltage
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <Calculate_LightIntensityPercentage+0x124>)
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    const float R_fixed = 10000; // Fixed resistor value (10kΩ)
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <Calculate_LightIntensityPercentage+0x128>)
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    const float R_min = 100;     // Minimum LDR resistance (100Ω)
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001158:	623b      	str	r3, [r7, #32]
    const float R_max = 200000;  // Maximum LDR resistance (200kΩ)
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <Calculate_LightIntensityPercentage+0x130>)
 800115c:	61fb      	str	r3, [r7, #28]

    // Calculate Vout from ADC value
    float Vout = (adcValue * Vcc) / 4096.0;
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fdd5 	bl	8000d10 <__aeabi_i2f>
 8001166:	4603      	mov	r3, r0
 8001168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe24 	bl	8000db8 <__aeabi_fmul>
 8001170:	4603      	mov	r3, r0
 8001172:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fed2 	bl	8000f20 <__aeabi_fdiv>
 800117c:	4603      	mov	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]

    // Calculate LDR resistance
    float R_LDR = R_fixed * ((Vcc / Vout) - 1);
 8001180:	69b9      	ldr	r1, [r7, #24]
 8001182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001184:	f7ff fecc 	bl	8000f20 <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
 800118a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd08 	bl	8000ba4 <__aeabi_fsub>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119a:	f7ff fe0d 	bl	8000db8 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

    // Apply a logarithmic scale
    float log_R_LDR = log(R_LDR);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff f95a 	bl	800045c <__aeabi_f2d>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	4618      	mov	r0, r3
 80011ae:	4621      	mov	r1, r4
 80011b0:	f006 f9b2 	bl	8007518 <log>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fc9e 	bl	8000afc <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]
    float log_R_min = log(R_min);
 80011c4:	6a38      	ldr	r0, [r7, #32]
 80011c6:	f7ff f949 	bl	800045c <__aeabi_f2d>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f006 f9a1 	bl	8007518 <log>
 80011d6:	4603      	mov	r3, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	4618      	mov	r0, r3
 80011dc:	4621      	mov	r1, r4
 80011de:	f7ff fc8d 	bl	8000afc <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
    float log_R_max = log(R_max);
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f7ff f938 	bl	800045c <__aeabi_f2d>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	f006 f990 	bl	8007518 <log>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f7ff fc7c 	bl	8000afc <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	60bb      	str	r3, [r7, #8]
    float intensityPercentage = ((log_R_LDR - log_R_min) / (log_R_max - log_R_min)) * 100;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	6938      	ldr	r0, [r7, #16]
 800120c:	f7ff fcca 	bl	8000ba4 <__aeabi_fsub>
 8001210:	4603      	mov	r3, r0
 8001212:	461c      	mov	r4, r3
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fcc4 	bl	8000ba4 <__aeabi_fsub>
 800121c:	4603      	mov	r3, r0
 800121e:	4619      	mov	r1, r3
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe7d 	bl	8000f20 <__aeabi_fdiv>
 8001226:	4603      	mov	r3, r0
 8001228:	4911      	ldr	r1, [pc, #68]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fdc4 	bl	8000db8 <__aeabi_fmul>
 8001230:	4603      	mov	r3, r0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Clamp percentage to [0, 100] to avoid invalid values
    if (intensityPercentage > 100) {
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001238:	f7ff ff7a 	bl	8001130 <__aeabi_fcmpgt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <Calculate_LightIntensityPercentage+0x104>
        intensityPercentage = 100;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001246:	e00a      	b.n	800125e <Calculate_LightIntensityPercentage+0x11a>
    } else if (intensityPercentage < 0) {
 8001248:	f04f 0100 	mov.w	r1, #0
 800124c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800124e:	f7ff ff51 	bl	80010f4 <__aeabi_fcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <Calculate_LightIntensityPercentage+0x11a>
        intensityPercentage = 0;
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return intensityPercentage;
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001260:	4618      	mov	r0, r3
 8001262:	3734      	adds	r7, #52	; 0x34
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40533333 	.word	0x40533333
 800126c:	461c4000 	.word	0x461c4000
 8001270:	42c80000 	.word	0x42c80000
 8001274:	48435000 	.word	0x48435000

08001278 <HAL_LDR_Init>:



// APIs
void HAL_LDR_Init(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	// ADC Configuration
		ADC_Config_t ADCCfg = {
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
				.conversions = ADC_NumOfConvs_1,
				.dataAlginement = ADC_DataAlign_Right,
				.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
				.P_IRQ_Callback = NULL
		};
		ADC_Init(ADC1, &ADCCfg, GPIO_PIN_1);
 800128a:	463b      	mov	r3, r7
 800128c:	2202      	movs	r2, #2
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_LDR_Init+0x30>)
 8001292:	f001 faa5 	bl	80027e0 <ADC_Init>

		// Perform a Dummy Read.
		HAL_LDR_Read_Intensity();
 8001296:	f000 f809 	bl	80012ac <HAL_LDR_Read_Intensity>
		wait(50);
 800129a:	2032      	movs	r0, #50	; 0x32
 800129c:	f001 fd96 	bl	8002dcc <wait>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40012400 	.word	0x40012400

080012ac <HAL_LDR_Read_Intensity>:


float HAL_LDR_Read_Intensity(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	uint16_t adcValue = ADC_Read_SingleChannel(ADC1, LDR_ADC_CH);
 80012b2:	2101      	movs	r1, #1
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <HAL_LDR_Read_Intensity+0x28>)
 80012b6:	f001 fb3b 	bl	8002930 <ADC_Read_SingleChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
	// Calculate Intensity as a Percentage.
	float intensity = Calculate_LightIntensityPercentage(adcValue);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff3f 	bl	8001144 <Calculate_LightIntensityPercentage>
 80012c6:	6038      	str	r0, [r7, #0]

	return intensity;
 80012c8:	683b      	ldr	r3, [r7, #0]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40012400 	.word	0x40012400

080012d8 <HAL_LM35_Init>:
 */

#include "LM35_Temp_Sensor.h"

// APIs
void HAL_LM35_Init(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
	// ADC Configuration
	ADC_Config_t ADCCfg = {
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
			.conversions = ADC_NumOfConvs_1,
			.dataAlginement = ADC_DataAlign_Right,
			.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
			.P_IRQ_Callback = NULL
	};
	ADC_Init(ADC1, &ADCCfg, GPIO_PIN_0);
 80012ea:	463b      	mov	r3, r7
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_LM35_Init+0x30>)
 80012f2:	f001 fa75 	bl	80027e0 <ADC_Init>

	// Perform a Dummy Read.
	HAL_LM35_Read();
 80012f6:	f000 f80b 	bl	8001310 <HAL_LM35_Read>
	wait(50);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f001 fd66 	bl	8002dcc <wait>
}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40012400 	.word	0x40012400
 800130c:	00000000 	.word	0x00000000

08001310 <HAL_LM35_Read>:


float HAL_LM35_Read(){
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
	uint16_t adcValue = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	81fb      	strh	r3, [r7, #14]

	adcValue = ADC_Read_SingleChannel(ADC1, LM35_ADC_CH);
 800131a:	2100      	movs	r1, #0
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <HAL_LM35_Read+0x68>)
 800131e:	f001 fb07 	bl	8002930 <ADC_Read_SingleChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	81fb      	strh	r3, [r7, #14]
	float voltage = (adcValue * 3.3) / 4096.0;
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f885 	bl	8000438 <__aeabi_i2d>
 800132e:	a310      	add	r3, pc, #64	; (adr r3, 8001370 <HAL_LM35_Read+0x60>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f8ea 	bl	800050c <__aeabi_dmul>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	4618      	mov	r0, r3
 800133e:	4621      	mov	r1, r4
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_LM35_Read+0x6c>)
 8001346:	f7ff fa0b 	bl	8000760 <__aeabi_ddiv>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	4618      	mov	r0, r3
 8001350:	4621      	mov	r1, r4
 8001352:	f7ff fbd3 	bl	8000afc <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	60bb      	str	r3, [r7, #8]
	float temperature = voltage * 100.0;
 800135a:	4909      	ldr	r1, [pc, #36]	; (8001380 <HAL_LM35_Read+0x70>)
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff fd2b 	bl	8000db8 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	607b      	str	r3, [r7, #4]

	return temperature;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	66666666 	.word	0x66666666
 8001374:	400a6666 	.word	0x400a6666
 8001378:	40012400 	.word	0x40012400
 800137c:	40b00000 	.word	0x40b00000
 8001380:	42c80000 	.word	0x42c80000

08001384 <HAL_Relay_Init>:

#include "Relay_5V_Actuator.h"



void HAL_Relay_Init(GPIO_TYPE_DEF* gpio, uint16_t GPIO_PIN_NUM){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
	GPIO_PinConfig_t gpioCfg;
	gpioCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001390:	2304      	movs	r3, #4
 8001392:	73bb      	strb	r3, [r7, #14]
	gpioCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 8001394:	2302      	movs	r3, #2
 8001396:	73fb      	strb	r3, [r7, #15]
	gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(gpio, &gpioCfg);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f001 fc87 	bl	8002cb6 <MCAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <case_insensitive_strcmp+0x16>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e05e      	b.n	8001488 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d10d      	bne.n	80013ee <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e058      	b.n	8001488 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e052      	b.n	8001488 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3301      	adds	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	f002 f9ea 	bl	80037cc <__locale_ctype_ptr>
 80013f8:	4602      	mov	r2, r0
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d103      	bne.n	8001412 <case_insensitive_strcmp+0x62>
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f103 0420 	add.w	r4, r3, #32
 8001410:	e000      	b.n	8001414 <case_insensitive_strcmp+0x64>
 8001412:	7bfc      	ldrb	r4, [r7, #15]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	73bb      	strb	r3, [r7, #14]
 800141a:	f002 f9d7 	bl	80037cc <__locale_ctype_ptr>
 800141e:	4602      	mov	r2, r0
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	3301      	adds	r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <case_insensitive_strcmp+0x86>
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	3320      	adds	r3, #32
 8001434:	e000      	b.n	8001438 <case_insensitive_strcmp+0x88>
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	429c      	cmp	r4, r3
 800143a:	d0cc      	beq.n	80013d6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	737b      	strb	r3, [r7, #13]
 8001442:	f002 f9c3 	bl	80037cc <__locale_ctype_ptr>
 8001446:	4602      	mov	r2, r0
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	3301      	adds	r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d103      	bne.n	8001460 <case_insensitive_strcmp+0xb0>
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	f103 0420 	add.w	r4, r3, #32
 800145e:	e000      	b.n	8001462 <case_insensitive_strcmp+0xb2>
 8001460:	7b7c      	ldrb	r4, [r7, #13]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	733b      	strb	r3, [r7, #12]
 8001468:	f002 f9b0 	bl	80037cc <__locale_ctype_ptr>
 800146c:	4602      	mov	r2, r0
 800146e:	7b3b      	ldrb	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b01      	cmp	r3, #1
 800147c:	d102      	bne.n	8001484 <case_insensitive_strcmp+0xd4>
 800147e:	7b3b      	ldrb	r3, [r7, #12]
 8001480:	3320      	adds	r3, #32
 8001482:	e000      	b.n	8001486 <case_insensitive_strcmp+0xd6>
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	1ae3      	subs	r3, r4, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	4798      	blx	r3
 80014a0:	60f8      	str	r0, [r7, #12]
    if (node)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80014a8:	2228      	movs	r2, #40	; 0x28
 80014aa:	2100      	movs	r1, #0
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f002 f9c8 	bl	8003842 <memset>
    }

    return node;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80014c8:	e03d      	b.n	8001546 <cJSON_Delete+0x8a>
    {
        next = item->next;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d108      	bne.n	80014ee <cJSON_Delete+0x32>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffe7 	bl	80014bc <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <cJSON_Delete+0x58>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <cJSON_Delete+0x98>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6912      	ldr	r2, [r2, #16]
 800150a:	4610      	mov	r0, r2
 800150c:	4798      	blx	r3
            item->valuestring = NULL;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <cJSON_Delete+0x7e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <cJSON_Delete+0x98>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6a12      	ldr	r2, [r2, #32]
 8001530:	4610      	mov	r0, r2
 8001532:	4798      	blx	r3
            item->string = NULL;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <cJSON_Delete+0x98>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
        item = next;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1be      	bne.n	80014ca <cJSON_Delete+0xe>
    }
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000

08001558 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800155c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
	...

08001568 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f04f 0400 	mov.w	r4, #0
 800157a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001582:	f7ff ffe9 	bl	8001558 <get_decimal_point>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <parse_number+0x36>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <parse_number+0x3a>
    {
        return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e104      	b.n	80017ac <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015a6:	e09f      	b.n	80016e8 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b2:	440b      	add	r3, r1
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3b2b      	subs	r3, #43	; 0x2b
 80015ba:	2b3a      	cmp	r3, #58	; 0x3a
 80015bc:	f200 80a4 	bhi.w	8001708 <parse_number+0x1a0>
 80015c0:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <parse_number+0x60>)
 80015c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c6:	bf00      	nop
 80015c8:	080016b5 	.word	0x080016b5
 80015cc:	08001709 	.word	0x08001709
 80015d0:	080016b5 	.word	0x080016b5
 80015d4:	080016d3 	.word	0x080016d3
 80015d8:	08001709 	.word	0x08001709
 80015dc:	080016b5 	.word	0x080016b5
 80015e0:	080016b5 	.word	0x080016b5
 80015e4:	080016b5 	.word	0x080016b5
 80015e8:	080016b5 	.word	0x080016b5
 80015ec:	080016b5 	.word	0x080016b5
 80015f0:	080016b5 	.word	0x080016b5
 80015f4:	080016b5 	.word	0x080016b5
 80015f8:	080016b5 	.word	0x080016b5
 80015fc:	080016b5 	.word	0x080016b5
 8001600:	080016b5 	.word	0x080016b5
 8001604:	08001709 	.word	0x08001709
 8001608:	08001709 	.word	0x08001709
 800160c:	08001709 	.word	0x08001709
 8001610:	08001709 	.word	0x08001709
 8001614:	08001709 	.word	0x08001709
 8001618:	08001709 	.word	0x08001709
 800161c:	08001709 	.word	0x08001709
 8001620:	08001709 	.word	0x08001709
 8001624:	08001709 	.word	0x08001709
 8001628:	08001709 	.word	0x08001709
 800162c:	08001709 	.word	0x08001709
 8001630:	080016b5 	.word	0x080016b5
 8001634:	08001709 	.word	0x08001709
 8001638:	08001709 	.word	0x08001709
 800163c:	08001709 	.word	0x08001709
 8001640:	08001709 	.word	0x08001709
 8001644:	08001709 	.word	0x08001709
 8001648:	08001709 	.word	0x08001709
 800164c:	08001709 	.word	0x08001709
 8001650:	08001709 	.word	0x08001709
 8001654:	08001709 	.word	0x08001709
 8001658:	08001709 	.word	0x08001709
 800165c:	08001709 	.word	0x08001709
 8001660:	08001709 	.word	0x08001709
 8001664:	08001709 	.word	0x08001709
 8001668:	08001709 	.word	0x08001709
 800166c:	08001709 	.word	0x08001709
 8001670:	08001709 	.word	0x08001709
 8001674:	08001709 	.word	0x08001709
 8001678:	08001709 	.word	0x08001709
 800167c:	08001709 	.word	0x08001709
 8001680:	08001709 	.word	0x08001709
 8001684:	08001709 	.word	0x08001709
 8001688:	08001709 	.word	0x08001709
 800168c:	08001709 	.word	0x08001709
 8001690:	08001709 	.word	0x08001709
 8001694:	08001709 	.word	0x08001709
 8001698:	08001709 	.word	0x08001709
 800169c:	08001709 	.word	0x08001709
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001709 	.word	0x08001709
 80016a8:	08001709 	.word	0x08001709
 80016ac:	08001709 	.word	0x08001709
 80016b0:	080016b5 	.word	0x080016b5
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	6899      	ldr	r1, [r3, #8]
 80016bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016be:	440b      	add	r3, r1
 80016c0:	4413      	add	r3, r2
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	f107 0208 	add.w	r2, r7, #8
 80016c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ca:	4413      	add	r3, r2
 80016cc:	460a      	mov	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
                break;
 80016d0:	e007      	b.n	80016e2 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d8:	4413      	add	r3, r2
 80016da:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80016de:	701a      	strb	r2, [r3, #0]
                break;
 80016e0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80016e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e4:	3301      	adds	r3, #1
 80016e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ea:	2b3e      	cmp	r3, #62	; 0x3e
 80016ec:	d80e      	bhi.n	800170c <parse_number+0x1a4>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <parse_number+0x1a4>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fa:	441a      	add	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	f4ff af51 	bcc.w	80015a8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001706:	e001      	b.n	800170c <parse_number+0x1a4>
                goto loop_end;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <parse_number+0x1a6>
loop_end:
 800170c:	bf00      	nop
    number_c_string[i] = '\0';
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001714:	4413      	add	r3, r2
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800171a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fca7 	bl	8005078 <strtod>
 800172a:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800172e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	429a      	cmp	r2, r3
 8001736:	d101      	bne.n	800173c <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001738:	2300      	movs	r3, #0
 800173a:	e037      	b.n	80017ac <parse_number+0x244>
    }

    item->valuedouble = number;
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001742:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001746:	a31c      	add	r3, pc, #112	; (adr r3, 80017b8 <parse_number+0x250>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001750:	f7ff f962 	bl	8000a18 <__aeabi_dcmpge>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	e015      	b.n	8001790 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <parse_number+0x258>)
 800176a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800176e:	f7ff f949 	bl	8000a04 <__aeabi_dcmple>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	e006      	b.n	8001790 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8001782:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001786:	f7ff f971 	bl	8000a6c <__aeabi_d2iz>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2208      	movs	r2, #8
 8001794:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800179c:	4611      	mov	r1, r2
 800179e:	f107 0208 	add.w	r2, r7, #8
 80017a2:	1a8a      	subs	r2, r1, r2
 80017a4:	441a      	add	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	609a      	str	r2, [r3, #8]
    return true;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3764      	adds	r7, #100	; 0x64
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	ffc00000 	.word	0xffc00000
 80017bc:	41dfffff 	.word	0x41dfffff
 80017c0:	c1e00000 	.word	0xc1e00000

080017c4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	e04c      	b.n	8001874 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b2f      	cmp	r3, #47	; 0x2f
 80017e4:	d90f      	bls.n	8001806 <parse_hex4+0x42>
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b39      	cmp	r3, #57	; 0x39
 80017f0:	d809      	bhi.n	8001806 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	3b30      	subs	r3, #48	; 0x30
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e02d      	b.n	8001862 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b40      	cmp	r3, #64	; 0x40
 8001810:	d90f      	bls.n	8001832 <parse_hex4+0x6e>
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b46      	cmp	r3, #70	; 0x46
 800181c:	d809      	bhi.n	8001832 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	3b37      	subs	r3, #55	; 0x37
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e017      	b.n	8001862 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b60      	cmp	r3, #96	; 0x60
 800183c:	d90f      	bls.n	800185e <parse_hex4+0x9a>
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b66      	cmp	r3, #102	; 0x66
 8001848:	d809      	bhi.n	800185e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	3b57      	subs	r3, #87	; 0x57
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e001      	b.n	8001862 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800185e:	2300      	movs	r3, #0
 8001860:	e00c      	b.n	800187c <parse_hex4+0xb8>
        }

        if (i < 3)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d802      	bhi.n	800186e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	3301      	adds	r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9af      	bls.n	80017da <parse_hex4+0x16>
        }
    }

    return h;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
	...

08001888 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b05      	cmp	r3, #5
 80018c0:	f340 80b7 	ble.w	8001a32 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3302      	adds	r3, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff7b 	bl	80017c4 <parse_hex4>
 80018ce:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018d6:	d304      	bcc.n	80018e2 <utf16_literal_to_utf8+0x5a>
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80018de:	f0c0 80aa 	bcc.w	8001a36 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80018e8:	d337      	bcc.n	800195a <utf16_literal_to_utf8+0xd2>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80018f0:	d233      	bcs.n	800195a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	3306      	adds	r3, #6
 80018f6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018fc:	230c      	movs	r3, #12
 80018fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b05      	cmp	r3, #5
 800190a:	f340 8096 	ble.w	8001a3a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b5c      	cmp	r3, #92	; 0x5c
 8001914:	f040 8093 	bne.w	8001a3e <utf16_literal_to_utf8+0x1b6>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b75      	cmp	r3, #117	; 0x75
 8001920:	f040 808d 	bne.w	8001a3e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3302      	adds	r3, #2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff4b 	bl	80017c4 <parse_hex4>
 800192e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001936:	f0c0 8082 	bcc.w	8001a3e <utf16_literal_to_utf8+0x1b6>
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001940:	d27d      	bcs.n	8001a3e <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	029a      	lsls	r2, r3, #10
 8001946:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <utf16_literal_to_utf8+0x1c8>)
 8001948:	4013      	ands	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001950:	4313      	orrs	r3, r2
 8001952:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001958:	e004      	b.n	8001964 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800195a:	2306      	movs	r3, #6
 800195c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d803      	bhi.n	8001972 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001970:	e01f      	b.n	80019b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001978:	d206      	bcs.n	8001988 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800197a:	2302      	movs	r3, #2
 800197c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001980:	23c0      	movs	r3, #192	; 0xc0
 8001982:	f887 3020 	strb.w	r3, [r7, #32]
 8001986:	e014      	b.n	80019b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d206      	bcs.n	800199e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001990:	2303      	movs	r3, #3
 8001992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001996:	23e0      	movs	r3, #224	; 0xe0
 8001998:	f887 3020 	strb.w	r3, [r7, #32]
 800199c:	e009      	b.n	80019b2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019a4:	d24d      	bcs.n	8001a42 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019a6:	2304      	movs	r3, #4
 80019a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019ac:	23f0      	movs	r3, #240	; 0xf0
 80019ae:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019bc:	e015      	b.n	80019ea <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019d0:	440b      	add	r3, r1
 80019d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019e4:	3b01      	subs	r3, #1
 80019e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1e5      	bne.n	80019be <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d909      	bls.n	8001a0e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2d9      	uxtb	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a26:	441a      	add	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a30:	e009      	b.n	8001a46 <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001a32:	bf00      	nop
 8001a34:	e006      	b.n	8001a44 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a36:	bf00      	nop
 8001a38:	e004      	b.n	8001a44 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001a3a:	bf00      	nop
 8001a3c:	e002      	b.n	8001a44 <utf16_literal_to_utf8+0x1bc>

fail:
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a42:	bf00      	nop
    return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	000ffc00 	.word	0x000ffc00

08001a54 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b22      	cmp	r3, #34	; 0x22
 8001a90:	f040 816c 	bne.w	8001d6c <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a9c:	e018      	b.n	8001ad0 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b5c      	cmp	r3, #92	; 0x5c
 8001aa4:	d111      	bne.n	8001aca <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f080 8159 	bcs.w	8001d70 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	3301      	adds	r3, #1
 8001ace:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d203      	bcs.n	8001aea <parse_string+0x96>
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b22      	cmp	r3, #34	; 0x22
 8001ae8:	d1d9      	bne.n	8001a9e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f080 813b 	bcs.w	8001d74 <parse_string+0x320>
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b22      	cmp	r3, #34	; 0x22
 8001b04:	f040 8136 	bne.w	8001d74 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	6811      	ldr	r1, [r2, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6892      	ldr	r2, [r2, #8]
 8001b12:	440a      	add	r2, r1
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	461a      	mov	r2, r3
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	3201      	adds	r2, #1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4798      	blx	r3
 8001b2a:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8122 	beq.w	8001d78 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b38:	e0fc      	b.n	8001d34 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b5c      	cmp	r3, #92	; 0x5c
 8001b40:	d008      	beq.n	8001b54 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b44:	1c53      	adds	r3, r2, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	60f9      	str	r1, [r7, #12]
 8001b4e:	7812      	ldrb	r2, [r2, #0]
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e0ef      	b.n	8001d34 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f340 810c 	ble.w	8001d7c <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3301      	adds	r3, #1
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3b22      	subs	r3, #34	; 0x22
 8001b6c:	2b53      	cmp	r3, #83	; 0x53
 8001b6e:	f200 8107 	bhi.w	8001d80 <parse_string+0x32c>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <parse_string+0x124>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001d05 	.word	0x08001d05
 8001b7c:	08001d81 	.word	0x08001d81
 8001b80:	08001d81 	.word	0x08001d81
 8001b84:	08001d81 	.word	0x08001d81
 8001b88:	08001d81 	.word	0x08001d81
 8001b8c:	08001d81 	.word	0x08001d81
 8001b90:	08001d81 	.word	0x08001d81
 8001b94:	08001d81 	.word	0x08001d81
 8001b98:	08001d81 	.word	0x08001d81
 8001b9c:	08001d81 	.word	0x08001d81
 8001ba0:	08001d81 	.word	0x08001d81
 8001ba4:	08001d81 	.word	0x08001d81
 8001ba8:	08001d81 	.word	0x08001d81
 8001bac:	08001d05 	.word	0x08001d05
 8001bb0:	08001d81 	.word	0x08001d81
 8001bb4:	08001d81 	.word	0x08001d81
 8001bb8:	08001d81 	.word	0x08001d81
 8001bbc:	08001d81 	.word	0x08001d81
 8001bc0:	08001d81 	.word	0x08001d81
 8001bc4:	08001d81 	.word	0x08001d81
 8001bc8:	08001d81 	.word	0x08001d81
 8001bcc:	08001d81 	.word	0x08001d81
 8001bd0:	08001d81 	.word	0x08001d81
 8001bd4:	08001d81 	.word	0x08001d81
 8001bd8:	08001d81 	.word	0x08001d81
 8001bdc:	08001d81 	.word	0x08001d81
 8001be0:	08001d81 	.word	0x08001d81
 8001be4:	08001d81 	.word	0x08001d81
 8001be8:	08001d81 	.word	0x08001d81
 8001bec:	08001d81 	.word	0x08001d81
 8001bf0:	08001d81 	.word	0x08001d81
 8001bf4:	08001d81 	.word	0x08001d81
 8001bf8:	08001d81 	.word	0x08001d81
 8001bfc:	08001d81 	.word	0x08001d81
 8001c00:	08001d81 	.word	0x08001d81
 8001c04:	08001d81 	.word	0x08001d81
 8001c08:	08001d81 	.word	0x08001d81
 8001c0c:	08001d81 	.word	0x08001d81
 8001c10:	08001d81 	.word	0x08001d81
 8001c14:	08001d81 	.word	0x08001d81
 8001c18:	08001d81 	.word	0x08001d81
 8001c1c:	08001d81 	.word	0x08001d81
 8001c20:	08001d81 	.word	0x08001d81
 8001c24:	08001d81 	.word	0x08001d81
 8001c28:	08001d81 	.word	0x08001d81
 8001c2c:	08001d81 	.word	0x08001d81
 8001c30:	08001d81 	.word	0x08001d81
 8001c34:	08001d81 	.word	0x08001d81
 8001c38:	08001d81 	.word	0x08001d81
 8001c3c:	08001d81 	.word	0x08001d81
 8001c40:	08001d81 	.word	0x08001d81
 8001c44:	08001d81 	.word	0x08001d81
 8001c48:	08001d81 	.word	0x08001d81
 8001c4c:	08001d81 	.word	0x08001d81
 8001c50:	08001d81 	.word	0x08001d81
 8001c54:	08001d81 	.word	0x08001d81
 8001c58:	08001d81 	.word	0x08001d81
 8001c5c:	08001d81 	.word	0x08001d81
 8001c60:	08001d05 	.word	0x08001d05
 8001c64:	08001d81 	.word	0x08001d81
 8001c68:	08001d81 	.word	0x08001d81
 8001c6c:	08001d81 	.word	0x08001d81
 8001c70:	08001d81 	.word	0x08001d81
 8001c74:	08001d81 	.word	0x08001d81
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001d81 	.word	0x08001d81
 8001c80:	08001d81 	.word	0x08001d81
 8001c84:	08001d81 	.word	0x08001d81
 8001c88:	08001cd5 	.word	0x08001cd5
 8001c8c:	08001d81 	.word	0x08001d81
 8001c90:	08001d81 	.word	0x08001d81
 8001c94:	08001d81 	.word	0x08001d81
 8001c98:	08001d81 	.word	0x08001d81
 8001c9c:	08001d81 	.word	0x08001d81
 8001ca0:	08001d81 	.word	0x08001d81
 8001ca4:	08001d81 	.word	0x08001d81
 8001ca8:	08001ce1 	.word	0x08001ce1
 8001cac:	08001d81 	.word	0x08001d81
 8001cb0:	08001d81 	.word	0x08001d81
 8001cb4:	08001d81 	.word	0x08001d81
 8001cb8:	08001ced 	.word	0x08001ced
 8001cbc:	08001d81 	.word	0x08001d81
 8001cc0:	08001cf9 	.word	0x08001cf9
 8001cc4:	08001d13 	.word	0x08001d13
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60fa      	str	r2, [r7, #12]
 8001cce:	2208      	movs	r2, #8
 8001cd0:	701a      	strb	r2, [r3, #0]
                    break;
 8001cd2:	e02b      	b.n	8001d2c <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60fa      	str	r2, [r7, #12]
 8001cda:	220c      	movs	r2, #12
 8001cdc:	701a      	strb	r2, [r3, #0]
                    break;
 8001cde:	e025      	b.n	8001d2c <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60fa      	str	r2, [r7, #12]
 8001ce6:	220a      	movs	r2, #10
 8001ce8:	701a      	strb	r2, [r3, #0]
                    break;
 8001cea:	e01f      	b.n	8001d2c <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60fa      	str	r2, [r7, #12]
 8001cf2:	220d      	movs	r2, #13
 8001cf4:	701a      	strb	r2, [r3, #0]
                    break;
 8001cf6:	e019      	b.n	8001d2c <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60fa      	str	r2, [r7, #12]
 8001cfe:	2209      	movs	r2, #9
 8001d00:	701a      	strb	r2, [r3, #0]
                    break;
 8001d02:	e013      	b.n	8001d2c <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60fa      	str	r2, [r7, #12]
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	7852      	ldrb	r2, [r2, #1]
 8001d0e:	701a      	strb	r2, [r3, #0]
                    break;
 8001d10:	e00c      	b.n	8001d2c <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	461a      	mov	r2, r3
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d1c:	f7ff fdb4 	bl	8001888 <utf16_literal_to_utf8>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d02c      	beq.n	8001d84 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001d2a:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	4413      	add	r3, r2
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f4ff aefe 	bcc.w	8001b3a <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2210      	movs	r2, #16
 8001d48:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	609a      	str	r2, [r3, #8]

    return true;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e020      	b.n	8001dae <parse_string+0x35a>
        goto fail;
 8001d6c:	bf00      	nop
 8001d6e:	e00a      	b.n	8001d86 <parse_string+0x332>
                    goto fail;
 8001d70:	bf00      	nop
 8001d72:	e008      	b.n	8001d86 <parse_string+0x332>

fail:
 8001d74:	bf00      	nop
 8001d76:	e006      	b.n	8001d86 <parse_string+0x332>
            goto fail; /* allocation failure */
 8001d78:	bf00      	nop
 8001d7a:	e004      	b.n	8001d86 <parse_string+0x332>
                goto fail;
 8001d7c:	bf00      	nop
 8001d7e:	e002      	b.n	8001d86 <parse_string+0x332>
                    goto fail;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <parse_string+0x332>
                        goto fail;
 8001d84:	bf00      	nop
    if (output != NULL)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <parse_string+0x344>
    {
        input_buffer->hooks.deallocate(output);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	69f8      	ldr	r0, [r7, #28]
 8001d92:	4798      	blx	r3
        output = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <parse_string+0x358>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop

08001db8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <buffer_skip_whitespace+0x16>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e02c      	b.n	8001e2c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <buffer_skip_whitespace+0x2c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d306      	bcc.n	8001df2 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	e021      	b.n	8001e2c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00d      	beq.n	8001e14 <buffer_skip_whitespace+0x5c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <buffer_skip_whitespace+0x5c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d9e9      	bls.n	8001de8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d104      	bne.n	8001e2a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <skip_utf8_bom+0x1e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <skip_utf8_bom+0x1e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e01c      	b.n	8001e94 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d018      	beq.n	8001e92 <skip_utf8_bom+0x5a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	1d1a      	adds	r2, r3, #4
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d211      	bcs.n	8001e92 <skip_utf8_bom+0x5a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <skip_utf8_bom+0x64>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fac6 	bl	800440e <strncmp>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	1cda      	adds	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e92:	687b      	ldr	r3, [r7, #4]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	080079d8 	.word	0x080079d8

08001ea0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e00c      	b.n	8001ed0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7fe f964 	bl	8000184 <strlen>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f805 	bl	8001ed8 <cJSON_ParseWithLengthOpts>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
 8001ee4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <cJSON_ParseWithLengthOpts+0x128>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f04:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <cJSON_ParseWithLengthOpts+0x128>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d042      	beq.n	8001f96 <cJSON_ParseWithLengthOpts+0xbe>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03f      	beq.n	8001f96 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f28:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f2e:	4835      	ldr	r0, [pc, #212]	; (8002004 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f30:	f7ff faae 	bl	8001490 <cJSON_New_Item>
 8001f34:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d02e      	beq.n	8001f9a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff79 	bl	8001e38 <skip_utf8_bom>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff35 	bl	8001db8 <buffer_skip_whitespace>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4619      	mov	r1, r3
 8001f52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f54:	f000 f866 	bl	8002024 <parse_value>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01f      	beq.n	8001f9e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff25 	bl	8001db8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001f6e:	6a3a      	ldr	r2, [r7, #32]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d20f      	bcs.n	8001f96 <cJSON_ParseWithLengthOpts+0xbe>
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f94:	e02f      	b.n	8001ff6 <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001f96:	bf00      	nop
 8001f98:	e002      	b.n	8001fa0 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001f9a:	bf00      	nop
 8001f9c:	e000      	b.n	8001fa0 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001f9e:	bf00      	nop
    if (item != NULL)
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001fa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fa8:	f7ff fa88 	bl	80014bc <cJSON_Delete>
    }

    if (value != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d202      	bcs.n	8001fc8 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e005      	b.n	8001fd4 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	441a      	add	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <cJSON_ParseWithLengthOpts+0x128>)
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ff0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3738      	adds	r7, #56	; 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000200 	.word	0x20000200
 8002004:	20000000 	.word	0x20000000

08002008 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff43 	bl	8001ea0 <cJSON_ParseWithOpts>
 800201a:	4603      	mov	r3, r0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <parse_value+0x18>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <parse_value+0x1c>
    {
        return false; /* no input */
 800203c:	2300      	movs	r3, #0
 800203e:	e0d2      	b.n	80021e6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01d      	beq.n	8002082 <parse_value+0x5e>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	1d1a      	adds	r2, r3, #4
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d816      	bhi.n	8002082 <parse_value+0x5e>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4413      	add	r3, r2
 800205e:	2204      	movs	r2, #4
 8002060:	4963      	ldr	r1, [pc, #396]	; (80021f0 <parse_value+0x1cc>)
 8002062:	4618      	mov	r0, r3
 8002064:	f002 f9d3 	bl	800440e <strncmp>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	1d1a      	adds	r2, r3, #4
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	609a      	str	r2, [r3, #8]
        return true;
 800207e:	2301      	movs	r3, #1
 8002080:	e0b1      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01d      	beq.n	80020c4 <parse_value+0xa0>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	1d5a      	adds	r2, r3, #5
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d816      	bhi.n	80020c4 <parse_value+0xa0>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4413      	add	r3, r2
 80020a0:	2205      	movs	r2, #5
 80020a2:	4954      	ldr	r1, [pc, #336]	; (80021f4 <parse_value+0x1d0>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 f9b2 	bl	800440e <strncmp>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	1d5a      	adds	r2, r3, #5
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	609a      	str	r2, [r3, #8]
        return true;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e090      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <parse_value+0xe8>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	1d1a      	adds	r2, r3, #4
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d819      	bhi.n	800210c <parse_value+0xe8>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	2204      	movs	r2, #4
 80020e4:	4944      	ldr	r1, [pc, #272]	; (80021f8 <parse_value+0x1d4>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 f991 	bl	800440e <strncmp>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10c      	bne.n	800210c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	609a      	str	r2, [r3, #8]
        return true;
 8002108:	2301      	movs	r3, #1
 800210a:	e06c      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d013      	beq.n	800213a <parse_value+0x116>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d20d      	bcs.n	800213a <parse_value+0x116>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b22      	cmp	r3, #34	; 0x22
 800212c:	d105      	bne.n	800213a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fc8f 	bl	8001a54 <parse_string>
 8002136:	4603      	mov	r3, r0
 8002138:	e055      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <parse_value+0x164>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d21d      	bcs.n	8002188 <parse_value+0x164>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b2d      	cmp	r3, #45	; 0x2d
 800215a:	d00f      	beq.n	800217c <parse_value+0x158>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b2f      	cmp	r3, #47	; 0x2f
 800216a:	d90d      	bls.n	8002188 <parse_value+0x164>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b39      	cmp	r3, #57	; 0x39
 800217a:	d805      	bhi.n	8002188 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff f9f2 	bl	8001568 <parse_number>
 8002184:	4603      	mov	r3, r0
 8002186:	e02e      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d013      	beq.n	80021b6 <parse_value+0x192>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20d      	bcs.n	80021b6 <parse_value+0x192>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b5b      	cmp	r3, #91	; 0x5b
 80021a8:	d105      	bne.n	80021b6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f825 	bl	80021fc <parse_array>
 80021b2:	4603      	mov	r3, r0
 80021b4:	e017      	b.n	80021e6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <parse_value+0x1c0>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d20d      	bcs.n	80021e4 <parse_value+0x1c0>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b7b      	cmp	r3, #123	; 0x7b
 80021d6:	d105      	bne.n	80021e4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8d2 	bl	8002384 <parse_object>
 80021e0:	4603      	mov	r3, r0
 80021e2:	e000      	b.n	80021e6 <parse_value+0x1c2>
    }

    return false;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	080079ac 	.word	0x080079ac
 80021f4:	080079dc 	.word	0x080079dc
 80021f8:	080079e4 	.word	0x080079e4

080021fc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002216:	d301      	bcc.n	800221c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002218:	2300      	movs	r3, #0
 800221a:	e0af      	b.n	800237c <parse_array+0x180>
    }
    input_buffer->depth++;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b5b      	cmp	r3, #91	; 0x5b
 8002234:	f040 8094 	bne.w	8002360 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	f7ff fdb8 	bl	8001db8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <parse_array+0x6e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d207      	bcs.n	800226a <parse_array+0x6e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b5d      	cmp	r3, #93	; 0x5d
 8002268:	d061      	beq.n	800232e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <parse_array+0x80>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d305      	bcc.n	8002288 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	609a      	str	r2, [r3, #8]
        goto fail;
 8002286:	e072      	b.n	800236e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	3310      	adds	r3, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f8fa 	bl	8001490 <cJSON_New_Item>
 800229c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05f      	beq.n	8002364 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e007      	b.n	80022c4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f7ff fd72 	bl	8001db8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80022d4:	6839      	ldr	r1, [r7, #0]
 80022d6:	6938      	ldr	r0, [r7, #16]
 80022d8:	f7ff fea4 	bl	8002024 <parse_value>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d042      	beq.n	8002368 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80022e2:	6838      	ldr	r0, [r7, #0]
 80022e4:	f7ff fd68 	bl	8001db8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <parse_array+0x10e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d207      	bcs.n	800230a <parse_array+0x10e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b2c      	cmp	r3, #44	; 0x2c
 8002308:	d0c3      	beq.n	8002292 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02d      	beq.n	800236c <parse_array+0x170>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d227      	bcs.n	800236c <parse_array+0x170>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b5d      	cmp	r3, #93	; 0x5d
 800232a:	d11f      	bne.n	800236c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800232c:	e000      	b.n	8002330 <parse_array+0x134>
        goto success;
 800232e:	bf00      	nop
    input_buffer->depth--;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <parse_array+0x14a>
        head->prev = current_item;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2220      	movs	r2, #32
 800234a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	609a      	str	r2, [r3, #8]

    return true;
 800235c:	2301      	movs	r3, #1
 800235e:	e00d      	b.n	800237c <parse_array+0x180>
        goto fail;
 8002360:	bf00      	nop
 8002362:	e004      	b.n	800236e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002364:	bf00      	nop
 8002366:	e002      	b.n	800236e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002368:	bf00      	nop
 800236a:	e000      	b.n	800236e <parse_array+0x172>

fail:
 800236c:	bf00      	nop
    if (head != NULL)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002374:	6978      	ldr	r0, [r7, #20]
 8002376:	f7ff f8a1 	bl	80014bc <cJSON_Delete>
    }

    return false;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d301      	bcc.n	80023a4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80023a0:	2300      	movs	r3, #0
 80023a2:	e0f0      	b.n	8002586 <parse_object+0x202>
    }
    input_buffer->depth++;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80da 	beq.w	800256a <parse_object+0x1e6>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	f080 80d3 	bcs.w	800256a <parse_object+0x1e6>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b7b      	cmp	r3, #123	; 0x7b
 80023d2:	f040 80ca 	bne.w	800256a <parse_object+0x1e6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	f7ff fce9 	bl	8001db8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00e      	beq.n	800240a <parse_object+0x86>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d208      	bcs.n	800240a <parse_object+0x86>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b7d      	cmp	r3, #125	; 0x7d
 8002406:	f000 8097 	beq.w	8002538 <parse_object+0x1b4>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <parse_object+0x98>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	d305      	bcc.n	8002428 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	609a      	str	r2, [r3, #8]
        goto fail;
 8002426:	e0a7      	b.n	8002578 <parse_object+0x1f4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3310      	adds	r3, #16
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff f82a 	bl	8001490 <cJSON_New_Item>
 800243c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8094 	beq.w	800256e <parse_object+0x1ea>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e007      	b.n	8002466 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d07e      	beq.n	800256a <parse_object+0x1e6>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d277      	bcs.n	800256a <parse_object+0x1e6>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f7ff fc97 	bl	8001db8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	6938      	ldr	r0, [r7, #16]
 800248e:	f7ff fae1 	bl	8001a54 <parse_string>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d06c      	beq.n	8002572 <parse_object+0x1ee>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002498:	6838      	ldr	r0, [r7, #0]
 800249a:	f7ff fc8d 	bl	8001db8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d05b      	beq.n	800256a <parse_object+0x1e6>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d255      	bcs.n	800256a <parse_object+0x1e6>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b3a      	cmp	r3, #58	; 0x3a
 80024cc:	d14d      	bne.n	800256a <parse_object+0x1e6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80024d8:	6838      	ldr	r0, [r7, #0]
 80024da:	f7ff fc6d 	bl	8001db8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80024de:	6839      	ldr	r1, [r7, #0]
 80024e0:	6938      	ldr	r0, [r7, #16]
 80024e2:	f7ff fd9f 	bl	8002024 <parse_value>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d044      	beq.n	8002576 <parse_object+0x1f2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	f7ff fc63 	bl	8001db8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <parse_object+0x190>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <parse_object+0x190>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4413      	add	r3, r2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b2c      	cmp	r3, #44	; 0x2c
 8002512:	d08e      	beq.n	8002432 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d027      	beq.n	800256a <parse_object+0x1e6>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d221      	bcs.n	800256a <parse_object+0x1e6>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b7d      	cmp	r3, #125	; 0x7d
 8002534:	d119      	bne.n	800256a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002536:	e000      	b.n	800253a <parse_object+0x1b6>
        goto success; /* empty object */
 8002538:	bf00      	nop
    input_buffer->depth--;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	1e5a      	subs	r2, r3, #1
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <parse_object+0x1cc>
        head->prev = current_item;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	609a      	str	r2, [r3, #8]
    return true;
 8002566:	2301      	movs	r3, #1
 8002568:	e00d      	b.n	8002586 <parse_object+0x202>

fail:
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <parse_object+0x1f4>
            goto fail; /* allocation failure */
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <parse_object+0x1f4>
            goto fail; /* failed to parse name */
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <parse_object+0x1f4>
            goto fail; /* failed to parse value */
 8002576:	bf00      	nop
    if (head != NULL)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <parse_object+0x200>
    {
        cJSON_Delete(head);
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7fe ff9c 	bl	80014bc <cJSON_Delete>
    }

    return false;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <get_object_item+0x1c>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <get_object_item+0x20>
    {
        return NULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e033      	b.n	8002616 <get_object_item+0x88>
    }

    current_element = object->child;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d017      	beq.n	80025ea <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80025ba:	e002      	b.n	80025c2 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01c      	beq.n	8002602 <get_object_item+0x74>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d018      	beq.n	8002602 <get_object_item+0x74>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4619      	mov	r1, r3
 80025d6:	68b8      	ldr	r0, [r7, #8]
 80025d8:	f7fd fdca 	bl	8000170 <strcmp>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ec      	bne.n	80025bc <get_object_item+0x2e>
 80025e2:	e00e      	b.n	8002602 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <get_object_item+0x74>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4619      	mov	r1, r3
 80025f6:	68b8      	ldr	r0, [r7, #8]
 80025f8:	f7fe feda 	bl	80013b0 <case_insensitive_strcmp>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <get_object_item+0x82>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <get_object_item+0x86>
        return NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <get_object_item+0x88>
    }

    return current_element;
 8002614:	697b      	ldr	r3, [r7, #20]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002628:	2201      	movs	r2, #1
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ffae 	bl	800258e <get_object_item>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <cJSON_IsNull>:
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
}
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <cJSON_IsNull+0x12>
    {
        return false;
 800264a:	2300      	movs	r3, #0
 800264c:	e007      	b.n	800265e <cJSON_IsNull+0x22>
    }

    return (item->type & 0xFF) == cJSON_NULL;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b04      	cmp	r3, #4
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <cJSON_IsString+0x12>
    {
        return false;
 8002676:	2300      	movs	r3, #0
 8002678:	e007      	b.n	800268a <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b10      	cmp	r3, #16
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <Parse_Command>:

    cJSON_Delete(json);
}


void Parse_Command(const char *json_msg, COMMAND_TYPE* currCommand) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_msg);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fcb2 	bl	8002008 <cJSON_Parse>
 80026a4:	61f8      	str	r0, [r7, #28]
    if (!root) {
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <Parse_Command+0x20>
        printf("Error: JSON Parse Failed\r\n");
 80026ac:	4832      	ldr	r0, [pc, #200]	; (8002778 <Parse_Command+0xe4>)
 80026ae:	f001 fe23 	bl	80042f8 <puts>
        return;
 80026b2:	e05e      	b.n	8002772 <Parse_Command+0xde>
    }

    cJSON *command = cJSON_GetObjectItemCaseSensitive(root, "command");
 80026b4:	4931      	ldr	r1, [pc, #196]	; (800277c <Parse_Command+0xe8>)
 80026b6:	69f8      	ldr	r0, [r7, #28]
 80026b8:	f7ff ffb1 	bl	800261e <cJSON_GetObjectItemCaseSensitive>
 80026bc:	61b8      	str	r0, [r7, #24]
    cJSON *nodeID = cJSON_GetObjectItemCaseSensitive(root, "nodeID");
 80026be:	4930      	ldr	r1, [pc, #192]	; (8002780 <Parse_Command+0xec>)
 80026c0:	69f8      	ldr	r0, [r7, #28]
 80026c2:	f7ff ffac 	bl	800261e <cJSON_GetObjectItemCaseSensitive>
 80026c6:	6178      	str	r0, [r7, #20]
    cJSON *data = cJSON_GetObjectItemCaseSensitive(root, "data");
 80026c8:	492e      	ldr	r1, [pc, #184]	; (8002784 <Parse_Command+0xf0>)
 80026ca:	69f8      	ldr	r0, [r7, #28]
 80026cc:	f7ff ffa7 	bl	800261e <cJSON_GetObjectItemCaseSensitive>
 80026d0:	6138      	str	r0, [r7, #16]

    if(cJSON_IsString(command)  && cJSON_IsString(nodeID)){
 80026d2:	69b8      	ldr	r0, [r7, #24]
 80026d4:	f7ff ffc8 	bl	8002668 <cJSON_IsString>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02f      	beq.n	800273e <Parse_Command+0xaa>
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ffc2 	bl	8002668 <cJSON_IsString>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d029      	beq.n	800273e <Parse_Command+0xaa>
        //MCAL_UART_SendData(UART1, (uint8_t*)command, 3, enable);

    	strcpy(currCommand->cmd, command->valuestring);
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f001 fe83 	bl	80043fe <strcpy>
    	strcpy(currCommand->nodeID, nodeID->valuestring);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1d5a      	adds	r2, r3, #5
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f001 fe7b 	bl	80043fe <strcpy>
    	if(cJSON_IsNull(data) || !data){
 8002708:	6938      	ldr	r0, [r7, #16]
 800270a:	f7ff ff97 	bl	800263c <cJSON_IsNull>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <Parse_Command+0x86>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <Parse_Command+0x96>
    		strcpy(currCommand->data, "null");
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	330a      	adds	r3, #10
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <Parse_Command+0xf4>)
 8002720:	6810      	ldr	r0, [r2, #0]
 8002722:	6018      	str	r0, [r3, #0]
 8002724:	7912      	ldrb	r2, [r2, #4]
 8002726:	711a      	strb	r2, [r3, #4]
    	if(cJSON_IsNull(data) || !data){
 8002728:	e020      	b.n	800276c <Parse_Command+0xd8>
    	}else{
    		strcpy(currCommand->data, data->valuestring);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f103 020a 	add.w	r2, r3, #10
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f001 fe61 	bl	80043fe <strcpy>
    	if(cJSON_IsNull(data) || !data){
 800273c:	e016      	b.n	800276c <Parse_Command+0xd8>
    	}
    }else{
		char *buffer = "\r\nError: Command too long!\r\n";
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <Parse_Command+0xf8>)
 8002740:	60fb      	str	r3, [r7, #12]
		MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7fd fd1e 	bl	8000184 <strlen>
 8002748:	4603      	mov	r3, r0
 800274a:	b2da      	uxtb	r2, r3
 800274c:	2300      	movs	r3, #0
 800274e:	68f9      	ldr	r1, [r7, #12]
 8002750:	480f      	ldr	r0, [pc, #60]	; (8002790 <Parse_Command+0xfc>)
 8002752:	f000 fce5 	bl	8003120 <MCAL_UART_SendData>
		strcpy(currCommand->cmd, "");
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
		strcpy(currCommand->nodeID, "");
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3305      	adds	r3, #5
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
		strcpy(currCommand->data, "");
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	330a      	adds	r3, #10
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    }

    cJSON_Delete(root);
 800276c:	69f8      	ldr	r0, [r7, #28]
 800276e:	f7fe fea5 	bl	80014bc <cJSON_Delete>
//            }
//        }
//    }

    // Free memory
}
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	08007a14 	.word	0x08007a14
 800277c:	08007a30 	.word	0x08007a30
 8002780:	08007a38 	.word	0x08007a38
 8002784:	08007a40 	.word	0x08007a40
 8002788:	08007a48 	.word	0x08007a48
 800278c:	08007a50 	.word	0x08007a50
 8002790:	40013800 	.word	0x40013800

08002794 <Validate_JSON_Format>:

int Validate_JSON_Format(const char *json_msg) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    cJSON *root = cJSON_Parse(json_msg);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fc33 	bl	8002008 <cJSON_Parse>
 80027a2:	60f8      	str	r0, [r7, #12]
    if (!root) {
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <Validate_JSON_Format+0x32>
        char* buffer = "\r\nError: Invalid JSON format!\r\n";
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <Validate_JSON_Format+0x44>)
 80027ac:	60bb      	str	r3, [r7, #8]
		MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 80027ae:	68b8      	ldr	r0, [r7, #8]
 80027b0:	f7fd fce8 	bl	8000184 <strlen>
 80027b4:	4603      	mov	r3, r0
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	2300      	movs	r3, #0
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <Validate_JSON_Format+0x48>)
 80027be:	f000 fcaf 	bl	8003120 <MCAL_UART_SendData>
        return 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e003      	b.n	80027ce <Validate_JSON_Format+0x3a>
    }
    cJSON_Delete(root);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7fe fe78 	bl	80014bc <cJSON_Delete>
    return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08007a70 	.word	0x08007a70
 80027dc:	40013800 	.word	0x40013800

080027e0 <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_TYPE_DEF* ADC , ADC_Config_t* ADCCfg, uint16_t GPIO_PIN_NUM) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
    // Enable clocks for ADC and GPIO
    RCC_GPIOA_CLk_EN();
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <ADC_Init+0x138>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <ADC_Init+0x138>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6193      	str	r3, [r2, #24]
    if(ADC == ADC1){
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a47      	ldr	r2, [pc, #284]	; (800291c <ADC_Init+0x13c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d106      	bne.n	8002810 <ADC_Init+0x30>
    	RCC_ADC1_CLK_EN();
 8002802:	4b45      	ldr	r3, [pc, #276]	; (8002918 <ADC_Init+0x138>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	4a44      	ldr	r2, [pc, #272]	; (8002918 <ADC_Init+0x138>)
 8002808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280c:	6193      	str	r3, [r2, #24]
 800280e:	e009      	b.n	8002824 <ADC_Init+0x44>
    }else if(ADC == ADC2){
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a43      	ldr	r2, [pc, #268]	; (8002920 <ADC_Init+0x140>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d105      	bne.n	8002824 <ADC_Init+0x44>
    	RCC_ADC2_CLK_EN();
 8002818:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <ADC_Init+0x138>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a3e      	ldr	r2, [pc, #248]	; (8002918 <ADC_Init+0x138>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6193      	str	r3, [r2, #24]
    }

    GPIO_PinConfig_t gpioCfg;
    gpioCfg.GPIO_MODE = GPIO_MODE_ANALOG;
 8002824:	2300      	movs	r3, #0
 8002826:	74bb      	strb	r3, [r7, #18]
    gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	823b      	strh	r3, [r7, #16]

    // Channel Pin Analog Mode Initilization.
    MCAL_GPIO_Init(GPIOA, &gpioCfg);
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4619      	mov	r1, r3
 8002832:	483c      	ldr	r0, [pc, #240]	; (8002924 <ADC_Init+0x144>)
 8002834:	f000 fa3f 	bl	8002cb6 <MCAL_GPIO_Init>

    // Configure GPIO Pins PA0 and PA1 for analog input (reset to analog mode)
    GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <ADC_Init+0x144>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a39      	ldr	r2, [pc, #228]	; (8002924 <ADC_Init+0x144>)
 800283e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002842:	6013      	str	r3, [r2, #0]

    // Enable ADC by setting ADON bit
    ADC->CR2 |= (1 << 0);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f043 0201 	orr.w	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]

    // SCAN mode Enabled
    ADC->CR1 |= ADCCfg->mode;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

    // Set continuous or single conversion mode
    if (ADCCfg->convMode == ADC_Conv_CONT_MODE) {
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	799b      	ldrb	r3, [r3, #6]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d106      	bne.n	8002874 <ADC_Init+0x94>
        ADC->CR2 |= (1 << 1); // Enable continuous mode
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f043 0202 	orr.w	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	e009      	b.n	8002888 <ADC_Init+0xa8>
    } else if (ADCCfg->convMode == ADC_Conv_Single_MODE) {
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	799b      	ldrb	r3, [r3, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <ADC_Init+0xa8>
        ADC->CR2 &= ~(1 << 1); // Disable continuous mode (single conversion)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 0202 	bic.w	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]
    }

    // Configure data alignment (right or left)
    if (ADCCfg->dataAlginement == ADC_DataAlign_Right) {
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	79db      	ldrb	r3, [r3, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <ADC_Init+0xbe>
        ADC->CR2 &= ~(1 << 11); // Right alignment
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	e009      	b.n	80028b2 <ADC_Init+0xd2>
    } else if (ADCCfg->dataAlginement == ADC_DataAlign_Left) {
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	79db      	ldrb	r3, [r3, #7]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <ADC_Init+0xd2>
        ADC->CR2 |= (1 << 11); // Left alignment
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	609a      	str	r2, [r3, #8]
    }

    // Enable or disable End of Conversion (EOC) interrupt
    if (ADCCfg->IRQ_Enable == ADC_IRQ_Enable) {
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	7a1b      	ldrb	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10c      	bne.n	80028d4 <ADC_Init+0xf4>
        NVIC_IRQ18_ADC_Enable; // Enable ADC interrupt in NVIC
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <ADC_Init+0x148>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <ADC_Init+0x148>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
        ADC->CR1 |= (1 << 5); // Enable EOC interrupt
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f043 0220 	orr.w	r2, r3, #32
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	e009      	b.n	80028e8 <ADC_Init+0x108>
    } else if (ADCCfg->IRQ_Enable == ADC_IRQ_Disable) {
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	7a1b      	ldrb	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <ADC_Init+0x108>
        ADC->CR1 &= ~(1 << 5); // Disable EOC interrupt
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 0220 	bic.w	r2, r3, #32
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
    }

    // Set ADC callback if interrupt mode is enabled
    G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <ADC_Init+0x14c>)
 80028ee:	6013      	str	r3, [r2, #0]

    // Wait for ADC stabilization (tSTAB)
    for (int i = 0; i <= 1000; i++);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e002      	b.n	80028fc <ADC_Init+0x11c>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002902:	ddf8      	ble.n	80028f6 <ADC_Init+0x116>

    // Set ADON again to start the ADC
    ADC->CR2 |= (1 << 0);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	40012400 	.word	0x40012400
 8002920:	40012800 	.word	0x40012800
 8002924:	40010800 	.word	0x40010800
 8002928:	e000e100 	.word	0xe000e100
 800292c:	20000224 	.word	0x20000224

08002930 <ADC_Read_SingleChannel>:


uint16_t ADC_Read_SingleChannel(ADC_TYPE_DEF* ADC, uint16_t channel) {
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]

	uint16_t adcValue = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	81fb      	strh	r3, [r7, #14]
    // Select the ADC channel
    ADC->SQR3 = channel;
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the conversion
    ADC->CR2 |= ADC_CR2_SWSTART;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]

    // Wait for the End of  First Conversion Conversion (EOC) flag
    while (!(ADC->SR & ADC_SR_EOC));
 8002952:	bf00      	nop
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f9      	beq.n	8002954 <ADC_Read_SingleChannel+0x24>
    // Read the ADC value For Channel 1.
    adcValue = ADC->DR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	81fb      	strh	r3, [r7, #14]

    return adcValue;
 8002966:	89fb      	ldrh	r3, [r7, #14]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <ADC1_2_IRQHandler>:
	 ADC->CR2 = 0;                  // Clear control register 2


}

void ADC1_2_IRQHandler(){
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <ADC1_2_IRQHandler+0x30>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <ADC1_2_IRQHandler+0x30>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <ADC1_2_IRQHandler+0x34>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <ADC1_2_IRQHandler+0x34>)
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	6013      	str	r3, [r2, #0]
	ADC2->SR &= ~(1 << 1);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <ADC1_2_IRQHandler+0x38>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a05      	ldr	r2, [pc, #20]	; (80029ac <ADC1_2_IRQHandler+0x38>)
 8002998:	f023 0302 	bic.w	r3, r3, #2
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000224 	.word	0x20000224
 80029a8:	40012400 	.word	0x40012400
 80029ac:	40012800 	.word	0x40012800

080029b0 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <EXTI0_IRQHandler+0x1c>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <EXTI0_IRQHandler+0x1c>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <EXTI0_IRQHandler+0x20>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4798      	blx	r3
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40010400 	.word	0x40010400
 80029d0:	20000228 	.word	0x20000228

080029d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <EXTI1_IRQHandler+0x1c>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <EXTI1_IRQHandler+0x1c>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <EXTI1_IRQHandler+0x20>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4798      	blx	r3
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40010400 	.word	0x40010400
 80029f4:	20000228 	.word	0x20000228

080029f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <EXTI2_IRQHandler+0x1c>)
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <EXTI2_IRQHandler+0x1c>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <EXTI2_IRQHandler+0x20>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4798      	blx	r3
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40010400 	.word	0x40010400
 8002a18:	20000228 	.word	0x20000228

08002a1c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <EXTI3_IRQHandler+0x1c>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <EXTI3_IRQHandler+0x1c>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <EXTI3_IRQHandler+0x20>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4798      	blx	r3
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40010400 	.word	0x40010400
 8002a3c:	20000228 	.word	0x20000228

08002a40 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <EXTI4_IRQHandler+0x1c>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <EXTI4_IRQHandler+0x1c>)
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <EXTI4_IRQHandler+0x20>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4798      	blx	r3
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40010400 	.word	0x40010400
 8002a60:	20000228 	.word	0x20000228

08002a64 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a7a:	f043 0320 	orr.w	r3, r3, #32
 8002a7e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <EXTI9_5_IRQHandler+0xa4>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <EXTI9_5_IRQHandler+0xa4>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <EXTI9_5_IRQHandler+0xa4>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <EXTI9_5_IRQHandler+0xa4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <EXTI9_5_IRQHandler+0xa0>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <EXTI9_5_IRQHandler+0xa4>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	4798      	blx	r3
	}
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40010400 	.word	0x40010400
 8002b08:	20000228 	.word	0x20000228

08002b0c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b26:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8002b28:	4b30      	ldr	r3, [pc, #192]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8002b3a:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b44:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b62:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b80:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002b9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b9e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <EXTI15_10_IRQHandler+0xdc>)
 8002bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bda:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <EXTI15_10_IRQHandler+0xe0>)
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	4798      	blx	r3
	}
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40010400 	.word	0x40010400
 8002bec:	20000228 	.word	0x20000228

08002bf0 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b80      	cmp	r3, #128	; 0x80
 8002bfe:	d042      	beq.n	8002c86 <getCRLHPinPos+0x96>
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	dc11      	bgt.n	8002c28 <getCRLHPinPos+0x38>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d036      	beq.n	8002c76 <getCRLHPinPos+0x86>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	dc06      	bgt.n	8002c1a <getCRLHPinPos+0x2a>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d02e      	beq.n	8002c6e <getCRLHPinPos+0x7e>
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d02e      	beq.n	8002c72 <getCRLHPinPos+0x82>
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d028      	beq.n	8002c6a <getCRLHPinPos+0x7a>
 8002c18:	e047      	b.n	8002caa <getCRLHPinPos+0xba>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d02f      	beq.n	8002c7e <getCRLHPinPos+0x8e>
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d02f      	beq.n	8002c82 <getCRLHPinPos+0x92>
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d029      	beq.n	8002c7a <getCRLHPinPos+0x8a>
 8002c26:	e040      	b.n	8002caa <getCRLHPinPos+0xba>
 8002c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2c:	d033      	beq.n	8002c96 <getCRLHPinPos+0xa6>
 8002c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c32:	dc09      	bgt.n	8002c48 <getCRLHPinPos+0x58>
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d029      	beq.n	8002c8e <getCRLHPinPos+0x9e>
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d028      	beq.n	8002c92 <getCRLHPinPos+0xa2>
 8002c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c44:	d021      	beq.n	8002c8a <getCRLHPinPos+0x9a>
 8002c46:	e030      	b.n	8002caa <getCRLHPinPos+0xba>
 8002c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4c:	d027      	beq.n	8002c9e <getCRLHPinPos+0xae>
 8002c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c52:	dc03      	bgt.n	8002c5c <getCRLHPinPos+0x6c>
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d01f      	beq.n	8002c9a <getCRLHPinPos+0xaa>
 8002c5a:	e026      	b.n	8002caa <getCRLHPinPos+0xba>
 8002c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c60:	d01f      	beq.n	8002ca2 <getCRLHPinPos+0xb2>
 8002c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c66:	d01e      	beq.n	8002ca6 <getCRLHPinPos+0xb6>
 8002c68:	e01f      	b.n	8002caa <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e01e      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e01c      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 8002c72:	2308      	movs	r3, #8
 8002c74:	e01a      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8002c76:	230c      	movs	r3, #12
 8002c78:	e018      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	e016      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 8002c7e:	2314      	movs	r3, #20
 8002c80:	e014      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 8002c82:	2318      	movs	r3, #24
 8002c84:	e012      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8002c86:	231c      	movs	r3, #28
 8002c88:	e010      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e00e      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e00c      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 8002c92:	2308      	movs	r3, #8
 8002c94:	e00a      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8002c96:	230c      	movs	r3, #12
 8002c98:	e008      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	e006      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	e004      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 8002ca2:	2318      	movs	r3, #24
 8002ca4:	e002      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 8002ca6:	231c      	movs	r3, #28
 8002ca8:	e000      	b.n	8002cac <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8002cb6:	b590      	push	{r4, r7, lr}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d902      	bls.n	8002cd6 <MCAL_GPIO_Init+0x20>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	e000      	b.n	8002cd8 <MCAL_GPIO_Init+0x22>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff86 	bl	8002bf0 <getCRLHPinPos>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	230f      	movs	r3, #15
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	789b      	ldrb	r3, [r3, #2]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00b      	beq.n	8002d16 <MCAL_GPIO_Init+0x60>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	789b      	ldrb	r3, [r3, #2]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d007      	beq.n	8002d16 <MCAL_GPIO_Init+0x60>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	789b      	ldrb	r3, [r3, #2]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d003      	beq.n	8002d16 <MCAL_GPIO_Init+0x60>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	2b07      	cmp	r3, #7
 8002d14:	d10e      	bne.n	8002d34 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	789b      	ldrb	r3, [r3, #2]
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	b25a      	sxtb	r2, r3
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	78db      	ldrb	r3, [r3, #3]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e039      	b.n	8002da8 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d003      	beq.n	8002d44 <MCAL_GPIO_Init+0x8e>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	789b      	ldrb	r3, [r3, #2]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10c      	bne.n	8002d5e <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	789b      	ldrb	r3, [r3, #2]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	b25a      	sxtb	r2, r3
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e024      	b.n	8002da8 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	789b      	ldrb	r3, [r3, #2]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d104      	bne.n	8002d70 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	f043 0304 	orr.w	r3, r3, #4
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e01b      	b.n	8002da8 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	789b      	ldrb	r3, [r3, #2]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d107      	bne.n	8002d90 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	8812      	ldrh	r2, [r2, #0]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e00b      	b.n	8002da8 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	789b      	ldrb	r3, [r3, #2]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	8812      	ldrh	r2, [r2, #0]
 8002da0:	43d2      	mvns	r2, r2
 8002da2:	401a      	ands	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8002da8:	7bfc      	ldrb	r4, [r7, #15]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff1e 	bl	8002bf0 <getCRLHPinPos>
 8002db4:	4603      	mov	r3, r0
 8002db6:	fa04 f203 	lsl.w	r2, r4, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	601a      	str	r2, [r3, #0]

}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}

08002dcc <wait>:
}

// Execution Time (seconds) = (time * 255 * 4) / F_CPU
// when time = 1, It takes 1 Melli-seconds.
void wait(uint32_t time)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e00b      	b.n	8002df2 <wait+0x26>
	{
		for (j = 0; j < 255; j++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	e002      	b.n	8002de6 <wait+0x1a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2bfe      	cmp	r3, #254	; 0xfe
 8002dea:	d9f9      	bls.n	8002de0 <wait+0x14>
	for (i = 0; i < time; i++)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3ef      	bcc.n	8002dda <wait+0xe>
		;
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d006      	beq.n	8002e24 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d302      	bcc.n	8002e20 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d004      	beq.n	8002e28 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8002e1e:	e005      	b.n	8002e2c <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8002e22:	e004      	b.n	8002e2e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8002e26:	e002      	b.n	8002e2e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 8002e2a:	e000      	b.n	8002e2e <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	007a1200 	.word	0x007a1200
 8002e40:	00186a00 	.word	0x00186a00
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8002e4c:	f7ff ffda 	bl	8002e04 <MCAL_RCC_GET_SYS_CLKFreq>
 8002e50:	4601      	mov	r1, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <MCAL_RCC_GET_HCLKFreq+0x24>)
 8002e5e:	5cd3      	ldrb	r3, [r2, r3]
 8002e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08007c08 	.word	0x08007c08

08002e70 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8002e74:	f7ff ffe8 	bl	8002e48 <MCAL_RCC_GET_HCLKFreq>
 8002e78:	4601      	mov	r1, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08007c00 	.word	0x08007c00

08002e98 <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8002e9c:	f7ff ffd4 	bl	8002e48 <MCAL_RCC_GET_HCLKFreq>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	0adb      	lsrs	r3, r3, #11
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <MCAL_RCC_GET_PCLK2Freq+0x24>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08007c00 	.word	0x08007c00

08002ec0 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(void) {
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
    if (TIM2->SR & (1 << 0)) { // Check update interrupt flag
 8002ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <TIM2_IRQHandler+0x28>
        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
 8002ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6113      	str	r3, [r2, #16]
        delayFlag = 0;           // Signal delay completion
 8002ee2:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <TIM2_IRQHandler+0x30>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    }
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler() {
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <TIM1_UP_IRQHandler+0x24>)
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <TIM1_UP_IRQHandler+0x24>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <TIM1_UP_IRQHandler+0x28>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <TIM1_UP_IRQHandler+0x28>)
 8002f0e:	801a      	strh	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	2000020c 	.word	0x2000020c

08002f20 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <TIM3_IRQHandler+0x24>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <TIM3_IRQHandler+0x24>)
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <TIM3_IRQHandler+0x28>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <TIM3_IRQHandler+0x28>)
 8002f3a:	801a      	strh	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40000400 	.word	0x40000400
 8002f48:	2000020a 	.word	0x2000020a

08002f4c <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <TIM4_IRQHandler+0x24>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <TIM4_IRQHandler+0x24>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <TIM4_IRQHandler+0x28>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <TIM4_IRQHandler+0x28>)
 8002f66:	801a      	strh	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40000800 	.word	0x40000800
 8002f74:	20000208 	.word	0x20000208

08002f78 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a5d      	ldr	r2, [pc, #372]	; (80030fc <MCAL_UART_Init+0x184>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d109      	bne.n	8002f9e <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 8002f8a:	4a5d      	ldr	r2, [pc, #372]	; (8003100 <MCAL_UART_Init+0x188>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a5b      	ldr	r2, [pc, #364]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	e01a      	b.n	8002fd4 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a59      	ldr	r2, [pc, #356]	; (8003108 <MCAL_UART_Init+0x190>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d109      	bne.n	8002fba <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 8002fa6:	4a56      	ldr	r2, [pc, #344]	; (8003100 <MCAL_UART_Init+0x188>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 8002fac:	4b55      	ldr	r3, [pc, #340]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb6:	61d3      	str	r3, [r2, #28]
 8002fb8:	e00c      	b.n	8002fd4 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	; (800310c <MCAL_UART_Init+0x194>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8002fc2:	4a4f      	ldr	r2, [pc, #316]	; (8003100 <MCAL_UART_Init+0x188>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4a4d      	ldr	r2, [pc, #308]	; (8003104 <MCAL_UART_Init+0x18c>)
 8002fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd2:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	7a12      	ldrb	r2, [r2, #8]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	7a52      	ldrb	r2, [r2, #9]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	7a92      	ldrb	r2, [r2, #10]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	7ad2      	ldrb	r2, [r2, #11]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a34      	ldr	r2, [pc, #208]	; (80030fc <MCAL_UART_Init+0x184>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d105      	bne.n	800303a <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 800302e:	f7ff ff33 	bl	8002e98 <MCAL_RCC_GET_PCLK2Freq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b36      	ldr	r3, [pc, #216]	; (8003110 <MCAL_UART_Init+0x198>)
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e004      	b.n	8003044 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 800303a:	f7ff ff19 	bl	8002e70 <MCAL_RCC_GET_PCLK1Freq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b33      	ldr	r3, [pc, #204]	; (8003110 <MCAL_UART_Init+0x198>)
 8003042:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <MCAL_UART_Init+0x198>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	0119      	lsls	r1, r3, #4
 8003054:	4b2e      	ldr	r3, [pc, #184]	; (8003110 <MCAL_UART_Init+0x198>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fbb2 f2f3 	udiv	r2, r2, r3
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <MCAL_UART_Init+0x198>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	2064      	movs	r0, #100	; 0x64
 800307c:	fb00 f303 	mul.w	r3, r0, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <MCAL_UART_Init+0x19c>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	430b      	orrs	r3, r1
 8003092:	4a21      	ldr	r2, [pc, #132]	; (8003118 <MCAL_UART_Init+0x1a0>)
 8003094:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <MCAL_UART_Init+0x1a0>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7b1b      	ldrb	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d026      	beq.n	80030f4 <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	7b12      	ldrb	r2, [r2, #12]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <MCAL_UART_Init+0x184>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d106      	bne.n	80030ca <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a16      	ldr	r2, [pc, #88]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 80030c8:	e014      	b.n	80030f4 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <MCAL_UART_Init+0x190>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d106      	bne.n	80030e0 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a11      	ldr	r2, [pc, #68]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030dc:	6013      	str	r3, [r2, #0]
}
 80030de:	e009      	b.n	80030f4 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <MCAL_UART_Init+0x194>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d105      	bne.n	80030f4 <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <MCAL_UART_Init+0x1a4>)
 80030ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013800 	.word	0x40013800
 8003100:	20000270 	.word	0x20000270
 8003104:	40021000 	.word	0x40021000
 8003108:	40004400 	.word	0x40004400
 800310c:	40014800 	.word	0x40014800
 8003110:	2000026c 	.word	0x2000026c
 8003114:	51eb851f 	.word	0x51eb851f
 8003118:	20000268 	.word	0x20000268
 800311c:	e000e104 	.word	0xe000e104

08003120 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint8_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	460b      	mov	r3, r1
 8003130:	71fb      	strb	r3, [r7, #7]
 8003132:	4613      	mov	r3, r2
 8003134:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.


	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <MCAL_UART_SendData+0xb4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d103      	bne.n	800314a <MCAL_UART_SendData+0x2a>
 8003142:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	7a1b      	ldrb	r3, [r3, #8]
 8003148:	e00a      	b.n	8003160 <MCAL_UART_SendData+0x40>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <MCAL_UART_SendData+0xbc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d103      	bne.n	800315a <MCAL_UART_SendData+0x3a>
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	7a1b      	ldrb	r3, [r3, #8]
 8003158:	e002      	b.n	8003160 <MCAL_UART_SendData+0x40>
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	7a1b      	ldrb	r3, [r3, #8]
 8003160:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <MCAL_UART_SendData+0xb4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d103      	bne.n	8003172 <MCAL_UART_SendData+0x52>
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	7a5b      	ldrb	r3, [r3, #9]
 8003170:	e00a      	b.n	8003188 <MCAL_UART_SendData+0x68>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <MCAL_UART_SendData+0xbc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d103      	bne.n	8003182 <MCAL_UART_SendData+0x62>
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	7a5b      	ldrb	r3, [r3, #9]
 8003180:	e002      	b.n	8003188 <MCAL_UART_SendData+0x68>
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <MCAL_UART_SendData+0xb8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	7a5b      	ldrb	r3, [r3, #9]
 8003188:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11c      	bne.n	80031ca <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e015      	b.n	80031c2 <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}
			if (pollingEn == enable) {
 800319c:	79bb      	ldrb	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <MCAL_UART_SendData+0x90>
					while (!(uartx->SR & 1 << 7));
 80031a2:	bf00      	nop
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f9      	beq.n	80031a4 <MCAL_UART_SendData+0x84>
			}
			uartx->DR = data;
 80031b0:	7d7a      	ldrb	r2, [r7, #21]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3301      	adds	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dbe5      	blt.n	8003196 <MCAL_UART_SendData+0x76>
		}
	}

}
 80031ca:	bf00      	nop
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	40013800 	.word	0x40013800
 80031d8:	20000270 	.word	0x20000270
 80031dc:	40004400 	.word	0x40004400

080031e0 <MCAL_UART_ReceiveData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_ReceiveData (UART_TYPE_DEF* uartx, uint8_t* pRxBuffer, enum Polling_Mechanism pollingEn){
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	4613      	mov	r3, r2
 80031ec:	71fb      	strb	r3, [r7, #7]
	if(pollingEn == enable){
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <MCAL_UART_ReceiveData+0x22>
		while (!(uartx->SR & 1 << 5));
 80031f4:	bf00      	nop
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f9      	beq.n	80031f6 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t payLoad = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <MCAL_UART_ReceiveData+0xa4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d103      	bne.n	8003212 <MCAL_UART_ReceiveData+0x32>
 800320a:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	7a1b      	ldrb	r3, [r3, #8]
 8003210:	e00a      	b.n	8003228 <MCAL_UART_ReceiveData+0x48>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a1d      	ldr	r2, [pc, #116]	; (800328c <MCAL_UART_ReceiveData+0xac>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d103      	bne.n	8003222 <MCAL_UART_ReceiveData+0x42>
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	7a1b      	ldrb	r3, [r3, #8]
 8003220:	e002      	b.n	8003228 <MCAL_UART_ReceiveData+0x48>
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	7a1b      	ldrb	r3, [r3, #8]
 8003228:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a15      	ldr	r2, [pc, #84]	; (8003284 <MCAL_UART_ReceiveData+0xa4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d103      	bne.n	800323a <MCAL_UART_ReceiveData+0x5a>
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	7a5b      	ldrb	r3, [r3, #9]
 8003238:	e00a      	b.n	8003250 <MCAL_UART_ReceiveData+0x70>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a13      	ldr	r2, [pc, #76]	; (800328c <MCAL_UART_ReceiveData+0xac>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d103      	bne.n	800324a <MCAL_UART_ReceiveData+0x6a>
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	7a5b      	ldrb	r3, [r3, #9]
 8003248:	e002      	b.n	8003250 <MCAL_UART_ReceiveData+0x70>
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <MCAL_UART_ReceiveData+0xa8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	7a5b      	ldrb	r3, [r3, #9]
 8003250:	75bb      	strb	r3, [r7, #22]
		if(parity == UART_Parity_NONE){
			*((uint16_t*) pRxBuffer) = uartx->DR;
		}else{
			*((uint16_t*) pRxBuffer) = (uartx->DR & (uint8_t)0xFF);
		}
	}else if (payLoad == UART_PayloadLength_8B){
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d110      	bne.n	800327a <MCAL_UART_ReceiveData+0x9a>
		if(parity == UART_Parity_NONE){
 8003258:	7dbb      	ldrb	r3, [r7, #22]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <MCAL_UART_ReceiveData+0x8a>
			*((uint8_t*) pRxBuffer) = uartx->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	701a      	strb	r2, [r3, #0]
		}else{
			*((uint8_t*) pRxBuffer) = (uartx->DR & (uint8_t)0x7F);
		}
	}
}
 8003268:	e007      	b.n	800327a <MCAL_UART_ReceiveData+0x9a>
			*((uint8_t*) pRxBuffer) = (uartx->DR & (uint8_t)0x7F);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	701a      	strb	r2, [r3, #0]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40013800 	.word	0x40013800
 8003288:	20000270 	.word	0x20000270
 800328c:	40004400 	.word	0x40004400

08003290 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2b      	ldr	r2, [pc, #172]	; (8003348 <MCAL_UART_GPIO_SetPins+0xb8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d118      	bne.n	80032d2 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80032a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80032a6:	2306      	movs	r3, #6
 80032a8:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80032ae:	f107 030c 	add.w	r3, r7, #12
 80032b2:	4619      	mov	r1, r3
 80032b4:	4825      	ldr	r0, [pc, #148]	; (800334c <MCAL_UART_GPIO_SetPins+0xbc>)
 80032b6:	f7ff fcfe 	bl	8002cb6 <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80032ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032be:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80032c0:	2308      	movs	r3, #8
 80032c2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	4820      	ldr	r0, [pc, #128]	; (800334c <MCAL_UART_GPIO_SetPins+0xbc>)
 80032cc:	f7ff fcf3 	bl	8002cb6 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 80032d0:	e036      	b.n	8003340 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <MCAL_UART_GPIO_SetPins+0xc0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d116      	bne.n	8003308 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80032da:	2304      	movs	r3, #4
 80032dc:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80032de:	2306      	movs	r3, #6
 80032e0:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80032e2:	2301      	movs	r3, #1
 80032e4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	4619      	mov	r1, r3
 80032ec:	4817      	ldr	r0, [pc, #92]	; (800334c <MCAL_UART_GPIO_SetPins+0xbc>)
 80032ee:	f7ff fce2 	bl	8002cb6 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80032f2:	2308      	movs	r3, #8
 80032f4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80032f6:	2308      	movs	r3, #8
 80032f8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4619      	mov	r1, r3
 8003300:	4812      	ldr	r0, [pc, #72]	; (800334c <MCAL_UART_GPIO_SetPins+0xbc>)
 8003302:	f7ff fcd8 	bl	8002cb6 <MCAL_GPIO_Init>
}
 8003306:	e01b      	b.n	8003340 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <MCAL_UART_GPIO_SetPins+0xc4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d117      	bne.n	8003340 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003314:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8003316:	2306      	movs	r3, #6
 8003318:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4619      	mov	r1, r3
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003326:	f7ff fcc6 	bl	8002cb6 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800332a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8003330:	2308      	movs	r3, #8
 8003332:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	4619      	mov	r1, r3
 800333a:	4807      	ldr	r0, [pc, #28]	; (8003358 <MCAL_UART_GPIO_SetPins+0xc8>)
 800333c:	f7ff fcbb 	bl	8002cb6 <MCAL_GPIO_Init>
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40013800 	.word	0x40013800
 800334c:	40010800 	.word	0x40010800
 8003350:	40004400 	.word	0x40004400
 8003354:	40014800 	.word	0x40014800
 8003358:	40010c00 	.word	0x40010c00

0800335c <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <USART1_IRQHandler+0x10>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	4798      	blx	r3
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000270 	.word	0x20000270

08003370 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <USART2_IRQHandler+0x10>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	4798      	blx	r3
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000270 	.word	0x20000270

08003384 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 8003388:	4b02      	ldr	r3, [pc, #8]	; (8003394 <USART3_IRQHandler+0x10>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	4798      	blx	r3
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000270 	.word	0x20000270

08003398 <UART1_Recieve_JsonCommand>:

int i = 0;

char newCommandFlag = 0;

void UART1_Recieve_JsonCommand(){
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
	char ch;

	MCAL_UART_ReceiveData(UART1, (uint8_t*)&ch, disable);
 800339e:	1dfb      	adds	r3, r7, #7
 80033a0:	2201      	movs	r2, #1
 80033a2:	4619      	mov	r1, r3
 80033a4:	4844      	ldr	r0, [pc, #272]	; (80034b8 <UART1_Recieve_JsonCommand+0x120>)
 80033a6:	f7ff ff1b 	bl	80031e0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(UART1, (uint8_t*)&ch, 1, enable);
 80033aa:	1df9      	adds	r1, r7, #7
 80033ac:	2300      	movs	r3, #0
 80033ae:	2201      	movs	r2, #1
 80033b0:	4841      	ldr	r0, [pc, #260]	; (80034b8 <UART1_Recieve_JsonCommand+0x120>)
 80033b2:	f7ff feb5 	bl	8003120 <MCAL_UART_SendData>

	if(ch == '\b' || ch == 127){
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d002      	beq.n	80033c2 <UART1_Recieve_JsonCommand+0x2a>
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b7f      	cmp	r3, #127	; 0x7f
 80033c0:	d10e      	bne.n	80033e0 <UART1_Recieve_JsonCommand+0x48>
			if(i > 0){
 80033c2:	4b3e      	ldr	r3, [pc, #248]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	dd71      	ble.n	80034ae <UART1_Recieve_JsonCommand+0x116>
				i--;
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033d2:	6013      	str	r3, [r2, #0]
				rxBuffer[i] = '\0';
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 80033da:	2100      	movs	r1, #0
 80033dc:	54d1      	strb	r1, [r2, r3]
			if(i > 0){
 80033de:	e066      	b.n	80034ae <UART1_Recieve_JsonCommand+0x116>
			}
	}else if(ch == '}'){
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2b7d      	cmp	r3, #125	; 0x7d
 80033e4:	d13e      	bne.n	8003464 <UART1_Recieve_JsonCommand+0xcc>
		if(i < (MAX_CMD_LENGTH - 1)){
 80033e6:	4b35      	ldr	r3, [pc, #212]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	dc22      	bgt.n	8003434 <UART1_Recieve_JsonCommand+0x9c>
			rxBuffer[i++] = ch;
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	4931      	ldr	r1, [pc, #196]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 80033f6:	600a      	str	r2, [r1, #0]
 80033f8:	79f9      	ldrb	r1, [r7, #7]
 80033fa:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 80033fc:	54d1      	strb	r1, [r2, r3]
			rxBuffer[i] = '\0';
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 8003404:	2100      	movs	r1, #0
 8003406:	54d1      	strb	r1, [r2, r3]
			if(!(Validate_JSON_Format(rxBuffer))){
 8003408:	482d      	ldr	r0, [pc, #180]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 800340a:	f7ff f9c3 	bl	8002794 <Validate_JSON_Format>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <UART1_Recieve_JsonCommand+0x8e>
				newCommandFlag = 0;
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <UART1_Recieve_JsonCommand+0x12c>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
				memset(rxBuffer, 0, MAX_CMD_LENGTH);
 800341a:	2232      	movs	r2, #50	; 0x32
 800341c:	2100      	movs	r1, #0
 800341e:	4828      	ldr	r0, [pc, #160]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 8003420:	f000 fa0f 	bl	8003842 <memset>
 8003424:	e002      	b.n	800342c <UART1_Recieve_JsonCommand+0x94>
			}else{
				newCommandFlag = 1;
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <UART1_Recieve_JsonCommand+0x12c>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
			}
			i = 0;
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
			MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
			memset(rxBuffer, 0, MAX_CMD_LENGTH);
		}

	}
}
 8003432:	e03c      	b.n	80034ae <UART1_Recieve_JsonCommand+0x116>
			i = 0;
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
			newCommandFlag = 0;
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <UART1_Recieve_JsonCommand+0x12c>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
			char *buffer = "\r\nError: Command too long!\r\n";
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <UART1_Recieve_JsonCommand+0x130>)
 8003442:	60bb      	str	r3, [r7, #8]
			MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	f7fc fe9d 	bl	8000184 <strlen>
 800344a:	4603      	mov	r3, r0
 800344c:	b2da      	uxtb	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4819      	ldr	r0, [pc, #100]	; (80034b8 <UART1_Recieve_JsonCommand+0x120>)
 8003454:	f7ff fe64 	bl	8003120 <MCAL_UART_SendData>
			memset(rxBuffer, 0, MAX_CMD_LENGTH);
 8003458:	2232      	movs	r2, #50	; 0x32
 800345a:	2100      	movs	r1, #0
 800345c:	4818      	ldr	r0, [pc, #96]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 800345e:	f000 f9f0 	bl	8003842 <memset>
}
 8003462:	e024      	b.n	80034ae <UART1_Recieve_JsonCommand+0x116>
		if(i < (MAX_CMD_LENGTH - 1)){
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	dc08      	bgt.n	800347e <UART1_Recieve_JsonCommand+0xe6>
			rxBuffer[i++] = ch;
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	4912      	ldr	r1, [pc, #72]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 8003474:	600a      	str	r2, [r1, #0]
 8003476:	79f9      	ldrb	r1, [r7, #7]
 8003478:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 800347a:	54d1      	strb	r1, [r2, r3]
}
 800347c:	e017      	b.n	80034ae <UART1_Recieve_JsonCommand+0x116>
			i = 0;
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <UART1_Recieve_JsonCommand+0x124>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
			newCommandFlag = 0;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <UART1_Recieve_JsonCommand+0x12c>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
			char *buffer = "\r\nError: Command too long!\r\n";
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <UART1_Recieve_JsonCommand+0x130>)
 800348c:	60fb      	str	r3, [r7, #12]
			MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7fc fe78 	bl	8000184 <strlen>
 8003494:	4603      	mov	r3, r0
 8003496:	b2da      	uxtb	r2, r3
 8003498:	2300      	movs	r3, #0
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	4806      	ldr	r0, [pc, #24]	; (80034b8 <UART1_Recieve_JsonCommand+0x120>)
 800349e:	f7ff fe3f 	bl	8003120 <MCAL_UART_SendData>
			memset(rxBuffer, 0, MAX_CMD_LENGTH);
 80034a2:	2232      	movs	r2, #50	; 0x32
 80034a4:	2100      	movs	r1, #0
 80034a6:	4806      	ldr	r0, [pc, #24]	; (80034c0 <UART1_Recieve_JsonCommand+0x128>)
 80034a8:	f000 f9cb 	bl	8003842 <memset>
}
 80034ac:	e7ff      	b.n	80034ae <UART1_Recieve_JsonCommand+0x116>
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40013800 	.word	0x40013800
 80034bc:	20000210 	.word	0x20000210
 80034c0:	2000067c 	.word	0x2000067c
 80034c4:	20000214 	.word	0x20000214
 80034c8:	08007ba4 	.word	0x08007ba4

080034cc <UART_RX_Callback>:

void UART_RX_Callback(){
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	UART1_Recieve_JsonCommand();
 80034d0:	f7ff ff62 	bl	8003398 <UART1_Recieve_JsonCommand>
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <clockInit>:


void clockInit(){
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <clockInit+0x24>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a06      	ldr	r2, [pc, #24]	; (80034fc <clockInit+0x24>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <clockInit+0x24>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <clockInit+0x24>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6193      	str	r3, [r2, #24]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40021000 	.word	0x40021000

08003500 <main>:
// ------------------------------------------------------------------
// Main Function
// ------------------------------------------------------------------


int main(void) {
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b09a      	sub	sp, #104	; 0x68
 8003504:	af02      	add	r7, sp, #8
    // Clock Initialization
    clockInit();
 8003506:	f7ff ffe7 	bl	80034d8 <clockInit>
    //GPIOAInit();
    //LCDInit();

    // UART Configuration
    UART_Config_t uartCfg = {
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <main+0xcc>)
 800350c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8003510:	461d      	mov	r5, r3
 8003512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	6023      	str	r3, [r4, #0]
        .Mode = UART_Mode_TX_RX,
        .Payload = UART_PayloadLength_8B,
        .StopBits = UART_StopBits_One,
        .P_IRQ_Callback = UART_RX_Callback
    };
    MCAL_UART_Init(UART1, &uartCfg);
 800351a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800351e:	4619      	mov	r1, r3
 8003520:	482b      	ldr	r0, [pc, #172]	; (80035d0 <main+0xd0>)
 8003522:	f7ff fd29 	bl	8002f78 <MCAL_UART_Init>
    MCAL_UART_GPIO_SetPins(UART1);
 8003526:	482a      	ldr	r0, [pc, #168]	; (80035d0 <main+0xd0>)
 8003528:	f7ff feb2 	bl	8003290 <MCAL_UART_GPIO_SetPins>

    GPIO_PinConfig_t gpioCfg;
    gpioCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800352c:	2304      	movs	r3, #4
 800352e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    gpioCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 8003532:	2302      	movs	r3, #2
 8003534:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    gpioCfg.GPIO_PinNumber = GPIO_PIN_11;
 8003538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    MCAL_GPIO_Init(GPIOA, &gpioCfg);
 8003540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003544:	4619      	mov	r1, r3
 8003546:	4823      	ldr	r0, [pc, #140]	; (80035d4 <main+0xd4>)
 8003548:	f7ff fbb5 	bl	8002cb6 <MCAL_GPIO_Init>


    // Initialize LM35 with ADC1 ch0.
    HAL_LM35_Init();
 800354c:	f7fd fec4 	bl	80012d8 <HAL_LM35_Init>

    // Initialize LDR with ADC1 ch1.
    HAL_LDR_Init();
 8003550:	f7fd fe92 	bl	8001278 <HAL_LDR_Init>

    // Initialize Relay Actuator.
    HAL_Relay_Init(GPIOA, GPIO_PIN_11);
 8003554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003558:	481e      	ldr	r0, [pc, #120]	; (80035d4 <main+0xd4>)
 800355a:	f7fd ff13 	bl	8001384 <HAL_Relay_Init>
    	//HAL_LM35_UART_SendDAta();

        //HAL_LDR_UART_SendData();
    	//delay(500, U_ms, clk);
        //HAL_Control_Relay_Light();
    	if(newCommandFlag){
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <main+0xd8>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0fb      	beq.n	800355e <main+0x5e>
    		Parse_Command((const char*)rxBuffer, &command);
 8003566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800356a:	4619      	mov	r1, r3
 800356c:	481b      	ldr	r0, [pc, #108]	; (80035dc <main+0xdc>)
 800356e:	f7ff f891 	bl	8002694 <Parse_Command>
    		sprintf(buffer, "\r\nCommand: %s, nodeID: %s, data: %s\r\n", command.cmd, command.nodeID, command.data);
 8003572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003576:	1d59      	adds	r1, r3, #5
 8003578:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800357c:	1d38      	adds	r0, r7, #4
 800357e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003582:	330a      	adds	r3, #10
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	460b      	mov	r3, r1
 8003588:	4915      	ldr	r1, [pc, #84]	; (80035e0 <main+0xe0>)
 800358a:	f000 fed5 	bl	8004338 <siprintf>
    		MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc fdf7 	bl	8000184 <strlen>
 8003596:	4603      	mov	r3, r0
 8003598:	b2da      	uxtb	r2, r3
 800359a:	1d39      	adds	r1, r7, #4
 800359c:	2300      	movs	r3, #0
 800359e:	480c      	ldr	r0, [pc, #48]	; (80035d0 <main+0xd0>)
 80035a0:	f7ff fdbe 	bl	8003120 <MCAL_UART_SendData>
    		newCommandFlag = 0;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <main+0xd8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
			memset(rxBuffer, 0, MAX_CMD_LENGTH);
 80035aa:	2232      	movs	r2, #50	; 0x32
 80035ac:	2100      	movs	r1, #0
 80035ae:	480b      	ldr	r0, [pc, #44]	; (80035dc <main+0xdc>)
 80035b0:	f000 f947 	bl	8003842 <memset>
			memset(buffer, 0, strlen(buffer));
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc fde4 	bl	8000184 <strlen>
 80035bc:	4602      	mov	r2, r0
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f93d 	bl	8003842 <memset>
    	if(newCommandFlag){
 80035c8:	e7c9      	b.n	800355e <main+0x5e>
 80035ca:	bf00      	nop
 80035cc:	08007bec 	.word	0x08007bec
 80035d0:	40013800 	.word	0x40013800
 80035d4:	40010800 	.word	0x40010800
 80035d8:	20000214 	.word	0x20000214
 80035dc:	2000067c 	.word	0x2000067c
 80035e0:	08007bc4 	.word	0x08007bc4

080035e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e00a      	b.n	800360c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035f6:	f3af 8000 	nop.w
 80035fa:	4601      	mov	r1, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60ba      	str	r2, [r7, #8]
 8003602:	b2ca      	uxtb	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	dbf0      	blt.n	80035f6 <_read+0x12>
	}

return len;
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e009      	b.n	8003644 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	60ba      	str	r2, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf1      	blt.n	8003630 <_write+0x12>
	}
	return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_close>:

int _close(int file)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	return -1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800367c:	605a      	str	r2, [r3, #4]
	return 0;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <_isatty>:

int _isatty(int file)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	return 1;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
	return 0;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f000 f846 	bl	8003778 <__errno>
 80036ec:	4602      	mov	r2, r0
 80036ee:	230c      	movs	r3, #12
 80036f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20005000 	.word	0x20005000
 8003718:	00000800 	.word	0x00000800
 800371c:	20000218 	.word	0x20000218
 8003720:	200006b8 	.word	0x200006b8

08003724 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003724:	480d      	ldr	r0, [pc, #52]	; (800375c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003726:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003728:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800372c:	480c      	ldr	r0, [pc, #48]	; (8003760 <LoopForever+0x6>)
  ldr r1, =_edata
 800372e:	490d      	ldr	r1, [pc, #52]	; (8003764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <LoopForever+0xe>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003734:	e002      	b.n	800373c <LoopCopyDataInit>

08003736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373a:	3304      	adds	r3, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800373c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003740:	d3f9      	bcc.n	8003736 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003744:	4c0a      	ldr	r4, [pc, #40]	; (8003770 <LoopForever+0x16>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003748:	e001      	b.n	800374e <LoopFillZerobss>

0800374a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800374c:	3204      	adds	r2, #4

0800374e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003750:	d3fb      	bcc.n	800374a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003752:	f000 f817 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003756:	f7ff fed3 	bl	8003500 <main>

0800375a <LoopForever>:

LoopForever:
    b LoopForever
 800375a:	e7fe      	b.n	800375a <LoopForever>
  ldr   r0, =_estack
 800375c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003764:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003768:	08007f3c 	.word	0x08007f3c
  ldr r2, =_sbss
 800376c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003770:	200006b4 	.word	0x200006b4

08003774 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003774:	e7fe      	b.n	8003774 <ADC3_IRQHandler>
	...

08003778 <__errno>:
 8003778:	4b01      	ldr	r3, [pc, #4]	; (8003780 <__errno+0x8>)
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000010 	.word	0x20000010

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	2500      	movs	r5, #0
 8003788:	4e0c      	ldr	r6, [pc, #48]	; (80037bc <__libc_init_array+0x38>)
 800378a:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378c:	1ba4      	subs	r4, r4, r6
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	42a5      	cmp	r5, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	f004 f8f6 	bl	8007984 <_init>
 8003798:	2500      	movs	r5, #0
 800379a:	4e0a      	ldr	r6, [pc, #40]	; (80037c4 <__libc_init_array+0x40>)
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <__libc_init_array+0x44>)
 800379e:	1ba4      	subs	r4, r4, r6
 80037a0:	10a4      	asrs	r4, r4, #2
 80037a2:	42a5      	cmp	r5, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ac:	4798      	blx	r3
 80037ae:	3501      	adds	r5, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b6:	4798      	blx	r3
 80037b8:	3501      	adds	r5, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	08007f34 	.word	0x08007f34
 80037c0:	08007f34 	.word	0x08007f34
 80037c4:	08007f34 	.word	0x08007f34
 80037c8:	08007f38 	.word	0x08007f38

080037cc <__locale_ctype_ptr>:
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__locale_ctype_ptr+0x14>)
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <__locale_ctype_ptr+0x18>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf08      	it	eq
 80037d8:	4613      	moveq	r3, r2
 80037da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80037de:	4770      	bx	lr
 80037e0:	20000010 	.word	0x20000010
 80037e4:	20000074 	.word	0x20000074

080037e8 <malloc>:
 80037e8:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <malloc+0xc>)
 80037ea:	4601      	mov	r1, r0
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f000 b87d 	b.w	80038ec <_malloc_r>
 80037f2:	bf00      	nop
 80037f4:	20000010 	.word	0x20000010

080037f8 <free>:
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <free+0xc>)
 80037fa:	4601      	mov	r1, r0
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	f000 b829 	b.w	8003854 <_free_r>
 8003802:	bf00      	nop
 8003804:	20000010 	.word	0x20000010

08003808 <__ascii_mbtowc>:
 8003808:	b082      	sub	sp, #8
 800380a:	b901      	cbnz	r1, 800380e <__ascii_mbtowc+0x6>
 800380c:	a901      	add	r1, sp, #4
 800380e:	b142      	cbz	r2, 8003822 <__ascii_mbtowc+0x1a>
 8003810:	b14b      	cbz	r3, 8003826 <__ascii_mbtowc+0x1e>
 8003812:	7813      	ldrb	r3, [r2, #0]
 8003814:	600b      	str	r3, [r1, #0]
 8003816:	7812      	ldrb	r2, [r2, #0]
 8003818:	1c10      	adds	r0, r2, #0
 800381a:	bf18      	it	ne
 800381c:	2001      	movne	r0, #1
 800381e:	b002      	add	sp, #8
 8003820:	4770      	bx	lr
 8003822:	4610      	mov	r0, r2
 8003824:	e7fb      	b.n	800381e <__ascii_mbtowc+0x16>
 8003826:	f06f 0001 	mvn.w	r0, #1
 800382a:	e7f8      	b.n	800381e <__ascii_mbtowc+0x16>

0800382c <memcpy>:
 800382c:	b510      	push	{r4, lr}
 800382e:	1e43      	subs	r3, r0, #1
 8003830:	440a      	add	r2, r1
 8003832:	4291      	cmp	r1, r2
 8003834:	d100      	bne.n	8003838 <memcpy+0xc>
 8003836:	bd10      	pop	{r4, pc}
 8003838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800383c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003840:	e7f7      	b.n	8003832 <memcpy+0x6>

08003842 <memset>:
 8003842:	4603      	mov	r3, r0
 8003844:	4402      	add	r2, r0
 8003846:	4293      	cmp	r3, r2
 8003848:	d100      	bne.n	800384c <memset+0xa>
 800384a:	4770      	bx	lr
 800384c:	f803 1b01 	strb.w	r1, [r3], #1
 8003850:	e7f9      	b.n	8003846 <memset+0x4>
	...

08003854 <_free_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4605      	mov	r5, r0
 8003858:	2900      	cmp	r1, #0
 800385a:	d043      	beq.n	80038e4 <_free_r+0x90>
 800385c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003860:	1f0c      	subs	r4, r1, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	bfb8      	it	lt
 8003866:	18e4      	addlt	r4, r4, r3
 8003868:	f003 f899 	bl	800699e <__malloc_lock>
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <_free_r+0x94>)
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	4610      	mov	r0, r2
 8003872:	b933      	cbnz	r3, 8003882 <_free_r+0x2e>
 8003874:	6063      	str	r3, [r4, #4]
 8003876:	6014      	str	r4, [r2, #0]
 8003878:	4628      	mov	r0, r5
 800387a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800387e:	f003 b88f 	b.w	80069a0 <__malloc_unlock>
 8003882:	42a3      	cmp	r3, r4
 8003884:	d90b      	bls.n	800389e <_free_r+0x4a>
 8003886:	6821      	ldr	r1, [r4, #0]
 8003888:	1862      	adds	r2, r4, r1
 800388a:	4293      	cmp	r3, r2
 800388c:	bf01      	itttt	eq
 800388e:	681a      	ldreq	r2, [r3, #0]
 8003890:	685b      	ldreq	r3, [r3, #4]
 8003892:	1852      	addeq	r2, r2, r1
 8003894:	6022      	streq	r2, [r4, #0]
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6004      	str	r4, [r0, #0]
 800389a:	e7ed      	b.n	8003878 <_free_r+0x24>
 800389c:	4613      	mov	r3, r2
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	b10a      	cbz	r2, 80038a6 <_free_r+0x52>
 80038a2:	42a2      	cmp	r2, r4
 80038a4:	d9fa      	bls.n	800389c <_free_r+0x48>
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	1858      	adds	r0, r3, r1
 80038aa:	42a0      	cmp	r0, r4
 80038ac:	d10b      	bne.n	80038c6 <_free_r+0x72>
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	4401      	add	r1, r0
 80038b2:	1858      	adds	r0, r3, r1
 80038b4:	4282      	cmp	r2, r0
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	d1de      	bne.n	8003878 <_free_r+0x24>
 80038ba:	6810      	ldr	r0, [r2, #0]
 80038bc:	6852      	ldr	r2, [r2, #4]
 80038be:	4401      	add	r1, r0
 80038c0:	6019      	str	r1, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e7d8      	b.n	8003878 <_free_r+0x24>
 80038c6:	d902      	bls.n	80038ce <_free_r+0x7a>
 80038c8:	230c      	movs	r3, #12
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	e7d4      	b.n	8003878 <_free_r+0x24>
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1821      	adds	r1, r4, r0
 80038d2:	428a      	cmp	r2, r1
 80038d4:	bf01      	itttt	eq
 80038d6:	6811      	ldreq	r1, [r2, #0]
 80038d8:	6852      	ldreq	r2, [r2, #4]
 80038da:	1809      	addeq	r1, r1, r0
 80038dc:	6021      	streq	r1, [r4, #0]
 80038de:	6062      	str	r2, [r4, #4]
 80038e0:	605c      	str	r4, [r3, #4]
 80038e2:	e7c9      	b.n	8003878 <_free_r+0x24>
 80038e4:	bd38      	pop	{r3, r4, r5, pc}
 80038e6:	bf00      	nop
 80038e8:	2000021c 	.word	0x2000021c

080038ec <_malloc_r>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	1ccd      	adds	r5, r1, #3
 80038f0:	f025 0503 	bic.w	r5, r5, #3
 80038f4:	3508      	adds	r5, #8
 80038f6:	2d0c      	cmp	r5, #12
 80038f8:	bf38      	it	cc
 80038fa:	250c      	movcc	r5, #12
 80038fc:	2d00      	cmp	r5, #0
 80038fe:	4606      	mov	r6, r0
 8003900:	db01      	blt.n	8003906 <_malloc_r+0x1a>
 8003902:	42a9      	cmp	r1, r5
 8003904:	d903      	bls.n	800390e <_malloc_r+0x22>
 8003906:	230c      	movs	r3, #12
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	2000      	movs	r0, #0
 800390c:	bd70      	pop	{r4, r5, r6, pc}
 800390e:	f003 f846 	bl	800699e <__malloc_lock>
 8003912:	4a21      	ldr	r2, [pc, #132]	; (8003998 <_malloc_r+0xac>)
 8003914:	6814      	ldr	r4, [r2, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	b991      	cbnz	r1, 8003940 <_malloc_r+0x54>
 800391a:	4c20      	ldr	r4, [pc, #128]	; (800399c <_malloc_r+0xb0>)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	b91b      	cbnz	r3, 8003928 <_malloc_r+0x3c>
 8003920:	4630      	mov	r0, r6
 8003922:	f000 fcf9 	bl	8004318 <_sbrk_r>
 8003926:	6020      	str	r0, [r4, #0]
 8003928:	4629      	mov	r1, r5
 800392a:	4630      	mov	r0, r6
 800392c:	f000 fcf4 	bl	8004318 <_sbrk_r>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d124      	bne.n	800397e <_malloc_r+0x92>
 8003934:	230c      	movs	r3, #12
 8003936:	4630      	mov	r0, r6
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	f003 f831 	bl	80069a0 <__malloc_unlock>
 800393e:	e7e4      	b.n	800390a <_malloc_r+0x1e>
 8003940:	680b      	ldr	r3, [r1, #0]
 8003942:	1b5b      	subs	r3, r3, r5
 8003944:	d418      	bmi.n	8003978 <_malloc_r+0x8c>
 8003946:	2b0b      	cmp	r3, #11
 8003948:	d90f      	bls.n	800396a <_malloc_r+0x7e>
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	18cc      	adds	r4, r1, r3
 800394e:	50cd      	str	r5, [r1, r3]
 8003950:	4630      	mov	r0, r6
 8003952:	f003 f825 	bl	80069a0 <__malloc_unlock>
 8003956:	f104 000b 	add.w	r0, r4, #11
 800395a:	1d23      	adds	r3, r4, #4
 800395c:	f020 0007 	bic.w	r0, r0, #7
 8003960:	1ac3      	subs	r3, r0, r3
 8003962:	d0d3      	beq.n	800390c <_malloc_r+0x20>
 8003964:	425a      	negs	r2, r3
 8003966:	50e2      	str	r2, [r4, r3]
 8003968:	e7d0      	b.n	800390c <_malloc_r+0x20>
 800396a:	684b      	ldr	r3, [r1, #4]
 800396c:	428c      	cmp	r4, r1
 800396e:	bf16      	itet	ne
 8003970:	6063      	strne	r3, [r4, #4]
 8003972:	6013      	streq	r3, [r2, #0]
 8003974:	460c      	movne	r4, r1
 8003976:	e7eb      	b.n	8003950 <_malloc_r+0x64>
 8003978:	460c      	mov	r4, r1
 800397a:	6849      	ldr	r1, [r1, #4]
 800397c:	e7cc      	b.n	8003918 <_malloc_r+0x2c>
 800397e:	1cc4      	adds	r4, r0, #3
 8003980:	f024 0403 	bic.w	r4, r4, #3
 8003984:	42a0      	cmp	r0, r4
 8003986:	d005      	beq.n	8003994 <_malloc_r+0xa8>
 8003988:	1a21      	subs	r1, r4, r0
 800398a:	4630      	mov	r0, r6
 800398c:	f000 fcc4 	bl	8004318 <_sbrk_r>
 8003990:	3001      	adds	r0, #1
 8003992:	d0cf      	beq.n	8003934 <_malloc_r+0x48>
 8003994:	6025      	str	r5, [r4, #0]
 8003996:	e7db      	b.n	8003950 <_malloc_r+0x64>
 8003998:	2000021c 	.word	0x2000021c
 800399c:	20000220 	.word	0x20000220

080039a0 <__cvt>:
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a6:	461e      	mov	r6, r3
 80039a8:	bfbb      	ittet	lt
 80039aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80039ae:	461e      	movlt	r6, r3
 80039b0:	2300      	movge	r3, #0
 80039b2:	232d      	movlt	r3, #45	; 0x2d
 80039b4:	b088      	sub	sp, #32
 80039b6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80039b8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80039bc:	f027 0720 	bic.w	r7, r7, #32
 80039c0:	2f46      	cmp	r7, #70	; 0x46
 80039c2:	4614      	mov	r4, r2
 80039c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80039c6:	700b      	strb	r3, [r1, #0]
 80039c8:	d004      	beq.n	80039d4 <__cvt+0x34>
 80039ca:	2f45      	cmp	r7, #69	; 0x45
 80039cc:	d100      	bne.n	80039d0 <__cvt+0x30>
 80039ce:	3501      	adds	r5, #1
 80039d0:	2302      	movs	r3, #2
 80039d2:	e000      	b.n	80039d6 <__cvt+0x36>
 80039d4:	2303      	movs	r3, #3
 80039d6:	aa07      	add	r2, sp, #28
 80039d8:	9204      	str	r2, [sp, #16]
 80039da:	aa06      	add	r2, sp, #24
 80039dc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80039e0:	e9cd 3500 	strd	r3, r5, [sp]
 80039e4:	4622      	mov	r2, r4
 80039e6:	4633      	mov	r3, r6
 80039e8:	f001 fcd6 	bl	8005398 <_dtoa_r>
 80039ec:	2f47      	cmp	r7, #71	; 0x47
 80039ee:	4680      	mov	r8, r0
 80039f0:	d102      	bne.n	80039f8 <__cvt+0x58>
 80039f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039f4:	07db      	lsls	r3, r3, #31
 80039f6:	d526      	bpl.n	8003a46 <__cvt+0xa6>
 80039f8:	2f46      	cmp	r7, #70	; 0x46
 80039fa:	eb08 0905 	add.w	r9, r8, r5
 80039fe:	d111      	bne.n	8003a24 <__cvt+0x84>
 8003a00:	f898 3000 	ldrb.w	r3, [r8]
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d10a      	bne.n	8003a1e <__cvt+0x7e>
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4631      	mov	r1, r6
 8003a10:	f7fc ffe4 	bl	80009dc <__aeabi_dcmpeq>
 8003a14:	b918      	cbnz	r0, 8003a1e <__cvt+0x7e>
 8003a16:	f1c5 0501 	rsb	r5, r5, #1
 8003a1a:	f8ca 5000 	str.w	r5, [sl]
 8003a1e:	f8da 3000 	ldr.w	r3, [sl]
 8003a22:	4499      	add	r9, r3
 8003a24:	2200      	movs	r2, #0
 8003a26:	2300      	movs	r3, #0
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	f7fc ffd6 	bl	80009dc <__aeabi_dcmpeq>
 8003a30:	b938      	cbnz	r0, 8003a42 <__cvt+0xa2>
 8003a32:	2230      	movs	r2, #48	; 0x30
 8003a34:	9b07      	ldr	r3, [sp, #28]
 8003a36:	454b      	cmp	r3, r9
 8003a38:	d205      	bcs.n	8003a46 <__cvt+0xa6>
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	9107      	str	r1, [sp, #28]
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e7f8      	b.n	8003a34 <__cvt+0x94>
 8003a42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a46:	4640      	mov	r0, r8
 8003a48:	9b07      	ldr	r3, [sp, #28]
 8003a4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a4c:	eba3 0308 	sub.w	r3, r3, r8
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	b008      	add	sp, #32
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a58 <__exponent>:
 8003a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5a:	2900      	cmp	r1, #0
 8003a5c:	bfb4      	ite	lt
 8003a5e:	232d      	movlt	r3, #45	; 0x2d
 8003a60:	232b      	movge	r3, #43	; 0x2b
 8003a62:	4604      	mov	r4, r0
 8003a64:	bfb8      	it	lt
 8003a66:	4249      	neglt	r1, r1
 8003a68:	2909      	cmp	r1, #9
 8003a6a:	f804 2b02 	strb.w	r2, [r4], #2
 8003a6e:	7043      	strb	r3, [r0, #1]
 8003a70:	dd21      	ble.n	8003ab6 <__exponent+0x5e>
 8003a72:	f10d 0307 	add.w	r3, sp, #7
 8003a76:	461f      	mov	r7, r3
 8003a78:	260a      	movs	r6, #10
 8003a7a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003a7e:	fb06 1115 	mls	r1, r6, r5, r1
 8003a82:	2d09      	cmp	r5, #9
 8003a84:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003a88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a8c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003a90:	4629      	mov	r1, r5
 8003a92:	dc09      	bgt.n	8003aa8 <__exponent+0x50>
 8003a94:	3130      	adds	r1, #48	; 0x30
 8003a96:	3b02      	subs	r3, #2
 8003a98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003a9c:	42bb      	cmp	r3, r7
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	d304      	bcc.n	8003aac <__exponent+0x54>
 8003aa2:	1a10      	subs	r0, r2, r0
 8003aa4:	b003      	add	sp, #12
 8003aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	e7e6      	b.n	8003a7a <__exponent+0x22>
 8003aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ab0:	f804 2b01 	strb.w	r2, [r4], #1
 8003ab4:	e7f2      	b.n	8003a9c <__exponent+0x44>
 8003ab6:	2330      	movs	r3, #48	; 0x30
 8003ab8:	4419      	add	r1, r3
 8003aba:	7083      	strb	r3, [r0, #2]
 8003abc:	1d02      	adds	r2, r0, #4
 8003abe:	70c1      	strb	r1, [r0, #3]
 8003ac0:	e7ef      	b.n	8003aa2 <__exponent+0x4a>
	...

08003ac4 <_printf_float>:
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	b091      	sub	sp, #68	; 0x44
 8003aca:	460c      	mov	r4, r1
 8003acc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003ace:	4693      	mov	fp, r2
 8003ad0:	461e      	mov	r6, r3
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	f002 feb8 	bl	8006848 <_localeconv_r>
 8003ad8:	6803      	ldr	r3, [r0, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ade:	f7fc fb51 	bl	8000184 <strlen>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	900a      	str	r0, [sp, #40]	; 0x28
 8003aea:	3307      	adds	r3, #7
 8003aec:	f023 0307 	bic.w	r3, r3, #7
 8003af0:	f103 0208 	add.w	r2, r3, #8
 8003af4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003af8:	f8d4 a000 	ldr.w	sl, [r4]
 8003afc:	603a      	str	r2, [r7, #0]
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003b06:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003b0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	4ba6      	ldr	r3, [pc, #664]	; (8003db0 <_printf_float+0x2ec>)
 8003b16:	4638      	mov	r0, r7
 8003b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b1a:	f7fc ff91 	bl	8000a40 <__aeabi_dcmpun>
 8003b1e:	bb68      	cbnz	r0, 8003b7c <_printf_float+0xb8>
 8003b20:	f04f 32ff 	mov.w	r2, #4294967295
 8003b24:	4ba2      	ldr	r3, [pc, #648]	; (8003db0 <_printf_float+0x2ec>)
 8003b26:	4638      	mov	r0, r7
 8003b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b2a:	f7fc ff6b 	bl	8000a04 <__aeabi_dcmple>
 8003b2e:	bb28      	cbnz	r0, 8003b7c <_printf_float+0xb8>
 8003b30:	2200      	movs	r2, #0
 8003b32:	2300      	movs	r3, #0
 8003b34:	4638      	mov	r0, r7
 8003b36:	4649      	mov	r1, r9
 8003b38:	f7fc ff5a 	bl	80009f0 <__aeabi_dcmplt>
 8003b3c:	b110      	cbz	r0, 8003b44 <_printf_float+0x80>
 8003b3e:	232d      	movs	r3, #45	; 0x2d
 8003b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b44:	4f9b      	ldr	r7, [pc, #620]	; (8003db4 <_printf_float+0x2f0>)
 8003b46:	4b9c      	ldr	r3, [pc, #624]	; (8003db8 <_printf_float+0x2f4>)
 8003b48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003b4c:	bf98      	it	ls
 8003b4e:	461f      	movls	r7, r3
 8003b50:	2303      	movs	r3, #3
 8003b52:	f04f 0900 	mov.w	r9, #0
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	f02a 0304 	bic.w	r3, sl, #4
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	9600      	str	r6, [sp, #0]
 8003b60:	465b      	mov	r3, fp
 8003b62:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b64:	4621      	mov	r1, r4
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f9e2 	bl	8003f30 <_printf_common>
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	f040 8090 	bne.w	8003c92 <_printf_float+0x1ce>
 8003b72:	f04f 30ff 	mov.w	r0, #4294967295
 8003b76:	b011      	add	sp, #68	; 0x44
 8003b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7c:	463a      	mov	r2, r7
 8003b7e:	464b      	mov	r3, r9
 8003b80:	4638      	mov	r0, r7
 8003b82:	4649      	mov	r1, r9
 8003b84:	f7fc ff5c 	bl	8000a40 <__aeabi_dcmpun>
 8003b88:	b110      	cbz	r0, 8003b90 <_printf_float+0xcc>
 8003b8a:	4f8c      	ldr	r7, [pc, #560]	; (8003dbc <_printf_float+0x2f8>)
 8003b8c:	4b8c      	ldr	r3, [pc, #560]	; (8003dc0 <_printf_float+0x2fc>)
 8003b8e:	e7db      	b.n	8003b48 <_printf_float+0x84>
 8003b90:	6863      	ldr	r3, [r4, #4]
 8003b92:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	a80d      	add	r0, sp, #52	; 0x34
 8003b9a:	a90e      	add	r1, sp, #56	; 0x38
 8003b9c:	d140      	bne.n	8003c20 <_printf_float+0x15c>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	6063      	str	r3, [r4, #4]
 8003ba2:	f04f 0c00 	mov.w	ip, #0
 8003ba6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003baa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	6022      	str	r2, [r4, #0]
 8003bb2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	463a      	mov	r2, r7
 8003bba:	464b      	mov	r3, r9
 8003bbc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f7ff feed 	bl	80039a0 <__cvt>
 8003bc6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003bca:	2b47      	cmp	r3, #71	; 0x47
 8003bcc:	4607      	mov	r7, r0
 8003bce:	d109      	bne.n	8003be4 <_printf_float+0x120>
 8003bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bd2:	1cd8      	adds	r0, r3, #3
 8003bd4:	db02      	blt.n	8003bdc <_printf_float+0x118>
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	dd47      	ble.n	8003c6c <_printf_float+0x1a8>
 8003bdc:	f1a8 0802 	sub.w	r8, r8, #2
 8003be0:	fa5f f888 	uxtb.w	r8, r8
 8003be4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003be8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bea:	d824      	bhi.n	8003c36 <_printf_float+0x172>
 8003bec:	3901      	subs	r1, #1
 8003bee:	4642      	mov	r2, r8
 8003bf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bf4:	910d      	str	r1, [sp, #52]	; 0x34
 8003bf6:	f7ff ff2f 	bl	8003a58 <__exponent>
 8003bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bfc:	4681      	mov	r9, r0
 8003bfe:	1813      	adds	r3, r2, r0
 8003c00:	2a01      	cmp	r2, #1
 8003c02:	6123      	str	r3, [r4, #16]
 8003c04:	dc02      	bgt.n	8003c0c <_printf_float+0x148>
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	07d1      	lsls	r1, r2, #31
 8003c0a:	d501      	bpl.n	8003c10 <_printf_float+0x14c>
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	6123      	str	r3, [r4, #16]
 8003c10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0a2      	beq.n	8003b5e <_printf_float+0x9a>
 8003c18:	232d      	movs	r3, #45	; 0x2d
 8003c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1e:	e79e      	b.n	8003b5e <_printf_float+0x9a>
 8003c20:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003c24:	f000 816e 	beq.w	8003f04 <_printf_float+0x440>
 8003c28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003c2c:	d1b9      	bne.n	8003ba2 <_printf_float+0xde>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1b7      	bne.n	8003ba2 <_printf_float+0xde>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e7b4      	b.n	8003ba0 <_printf_float+0xdc>
 8003c36:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003c3a:	d119      	bne.n	8003c70 <_printf_float+0x1ac>
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	dd0c      	ble.n	8003c5c <_printf_float+0x198>
 8003c42:	6121      	str	r1, [r4, #16]
 8003c44:	b913      	cbnz	r3, 8003c4c <_printf_float+0x188>
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	07d2      	lsls	r2, r2, #31
 8003c4a:	d502      	bpl.n	8003c52 <_printf_float+0x18e>
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	440b      	add	r3, r1
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c54:	f04f 0900 	mov.w	r9, #0
 8003c58:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c5a:	e7d9      	b.n	8003c10 <_printf_float+0x14c>
 8003c5c:	b913      	cbnz	r3, 8003c64 <_printf_float+0x1a0>
 8003c5e:	6822      	ldr	r2, [r4, #0]
 8003c60:	07d0      	lsls	r0, r2, #31
 8003c62:	d501      	bpl.n	8003c68 <_printf_float+0x1a4>
 8003c64:	3302      	adds	r3, #2
 8003c66:	e7f3      	b.n	8003c50 <_printf_float+0x18c>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e7f1      	b.n	8003c50 <_printf_float+0x18c>
 8003c6c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003c70:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003c74:	4293      	cmp	r3, r2
 8003c76:	db05      	blt.n	8003c84 <_printf_float+0x1c0>
 8003c78:	6822      	ldr	r2, [r4, #0]
 8003c7a:	6123      	str	r3, [r4, #16]
 8003c7c:	07d1      	lsls	r1, r2, #31
 8003c7e:	d5e8      	bpl.n	8003c52 <_printf_float+0x18e>
 8003c80:	3301      	adds	r3, #1
 8003c82:	e7e5      	b.n	8003c50 <_printf_float+0x18c>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bfcc      	ite	gt
 8003c88:	2301      	movgt	r3, #1
 8003c8a:	f1c3 0302 	rsble	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	e7de      	b.n	8003c50 <_printf_float+0x18c>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	055a      	lsls	r2, r3, #21
 8003c96:	d407      	bmi.n	8003ca8 <_printf_float+0x1e4>
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	463a      	mov	r2, r7
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b0      	blx	r6
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d129      	bne.n	8003cfa <_printf_float+0x236>
 8003ca6:	e764      	b.n	8003b72 <_printf_float+0xae>
 8003ca8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003cac:	f240 80d7 	bls.w	8003e5e <_printf_float+0x39a>
 8003cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f7fc fe90 	bl	80009dc <__aeabi_dcmpeq>
 8003cbc:	b388      	cbz	r0, 8003d22 <_printf_float+0x25e>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <_printf_float+0x300>)
 8003cc2:	4659      	mov	r1, fp
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	47b0      	blx	r6
 8003cc8:	3001      	adds	r0, #1
 8003cca:	f43f af52 	beq.w	8003b72 <_printf_float+0xae>
 8003cce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	db02      	blt.n	8003cdc <_printf_float+0x218>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	07d8      	lsls	r0, r3, #31
 8003cda:	d50e      	bpl.n	8003cfa <_printf_float+0x236>
 8003cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	47b0      	blx	r6
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	f43f af43 	beq.w	8003b72 <_printf_float+0xae>
 8003cec:	2700      	movs	r7, #0
 8003cee:	f104 081a 	add.w	r8, r4, #26
 8003cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	42bb      	cmp	r3, r7
 8003cf8:	dc09      	bgt.n	8003d0e <_printf_float+0x24a>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	079f      	lsls	r7, r3, #30
 8003cfe:	f100 80fd 	bmi.w	8003efc <_printf_float+0x438>
 8003d02:	68e0      	ldr	r0, [r4, #12]
 8003d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d06:	4298      	cmp	r0, r3
 8003d08:	bfb8      	it	lt
 8003d0a:	4618      	movlt	r0, r3
 8003d0c:	e733      	b.n	8003b76 <_printf_float+0xb2>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4642      	mov	r2, r8
 8003d12:	4659      	mov	r1, fp
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b0      	blx	r6
 8003d18:	3001      	adds	r0, #1
 8003d1a:	f43f af2a 	beq.w	8003b72 <_printf_float+0xae>
 8003d1e:	3701      	adds	r7, #1
 8003d20:	e7e7      	b.n	8003cf2 <_printf_float+0x22e>
 8003d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	dc2b      	bgt.n	8003d80 <_printf_float+0x2bc>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <_printf_float+0x300>)
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47b0      	blx	r6
 8003d32:	3001      	adds	r0, #1
 8003d34:	f43f af1d 	beq.w	8003b72 <_printf_float+0xae>
 8003d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d3a:	b923      	cbnz	r3, 8003d46 <_printf_float+0x282>
 8003d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d3e:	b913      	cbnz	r3, 8003d46 <_printf_float+0x282>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	07d9      	lsls	r1, r3, #31
 8003d44:	d5d9      	bpl.n	8003cfa <_printf_float+0x236>
 8003d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d4a:	4659      	mov	r1, fp
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b0      	blx	r6
 8003d50:	3001      	adds	r0, #1
 8003d52:	f43f af0e 	beq.w	8003b72 <_printf_float+0xae>
 8003d56:	f04f 0800 	mov.w	r8, #0
 8003d5a:	f104 091a 	add.w	r9, r4, #26
 8003d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d60:	425b      	negs	r3, r3
 8003d62:	4543      	cmp	r3, r8
 8003d64:	dc01      	bgt.n	8003d6a <_printf_float+0x2a6>
 8003d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d68:	e797      	b.n	8003c9a <_printf_float+0x1d6>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	464a      	mov	r2, r9
 8003d6e:	4659      	mov	r1, fp
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b0      	blx	r6
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f aefc 	beq.w	8003b72 <_printf_float+0xae>
 8003d7a:	f108 0801 	add.w	r8, r8, #1
 8003d7e:	e7ee      	b.n	8003d5e <_printf_float+0x29a>
 8003d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bfa8      	it	ge
 8003d88:	461a      	movge	r2, r3
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	dd07      	ble.n	8003da0 <_printf_float+0x2dc>
 8003d90:	4613      	mov	r3, r2
 8003d92:	4659      	mov	r1, fp
 8003d94:	463a      	mov	r2, r7
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b0      	blx	r6
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f43f aee9 	beq.w	8003b72 <_printf_float+0xae>
 8003da0:	f104 031a 	add.w	r3, r4, #26
 8003da4:	f04f 0a00 	mov.w	sl, #0
 8003da8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dae:	e015      	b.n	8003ddc <_printf_float+0x318>
 8003db0:	7fefffff 	.word	0x7fefffff
 8003db4:	08007c2e 	.word	0x08007c2e
 8003db8:	08007c2a 	.word	0x08007c2a
 8003dbc:	08007c36 	.word	0x08007c36
 8003dc0:	08007c32 	.word	0x08007c32
 8003dc4:	08007c3a 	.word	0x08007c3a
 8003dc8:	2301      	movs	r3, #1
 8003dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dcc:	4659      	mov	r1, fp
 8003dce:	4628      	mov	r0, r5
 8003dd0:	47b0      	blx	r6
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	f43f aecd 	beq.w	8003b72 <_printf_float+0xae>
 8003dd8:	f10a 0a01 	add.w	sl, sl, #1
 8003ddc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003de0:	eba9 0308 	sub.w	r3, r9, r8
 8003de4:	4553      	cmp	r3, sl
 8003de6:	dcef      	bgt.n	8003dc8 <_printf_float+0x304>
 8003de8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dec:	429a      	cmp	r2, r3
 8003dee:	444f      	add	r7, r9
 8003df0:	db14      	blt.n	8003e1c <_printf_float+0x358>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	07da      	lsls	r2, r3, #31
 8003df6:	d411      	bmi.n	8003e1c <_printf_float+0x358>
 8003df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dfc:	eba3 0209 	sub.w	r2, r3, r9
 8003e00:	eba3 0901 	sub.w	r9, r3, r1
 8003e04:	4591      	cmp	r9, r2
 8003e06:	bfa8      	it	ge
 8003e08:	4691      	movge	r9, r2
 8003e0a:	f1b9 0f00 	cmp.w	r9, #0
 8003e0e:	dc0d      	bgt.n	8003e2c <_printf_float+0x368>
 8003e10:	2700      	movs	r7, #0
 8003e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e16:	f104 081a 	add.w	r8, r4, #26
 8003e1a:	e018      	b.n	8003e4e <_printf_float+0x38a>
 8003e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e20:	4659      	mov	r1, fp
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b0      	blx	r6
 8003e26:	3001      	adds	r0, #1
 8003e28:	d1e6      	bne.n	8003df8 <_printf_float+0x334>
 8003e2a:	e6a2      	b.n	8003b72 <_printf_float+0xae>
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	463a      	mov	r2, r7
 8003e30:	4659      	mov	r1, fp
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b0      	blx	r6
 8003e36:	3001      	adds	r0, #1
 8003e38:	d1ea      	bne.n	8003e10 <_printf_float+0x34c>
 8003e3a:	e69a      	b.n	8003b72 <_printf_float+0xae>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4642      	mov	r2, r8
 8003e40:	4659      	mov	r1, fp
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b0      	blx	r6
 8003e46:	3001      	adds	r0, #1
 8003e48:	f43f ae93 	beq.w	8003b72 <_printf_float+0xae>
 8003e4c:	3701      	adds	r7, #1
 8003e4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	eba3 0309 	sub.w	r3, r3, r9
 8003e58:	42bb      	cmp	r3, r7
 8003e5a:	dcef      	bgt.n	8003e3c <_printf_float+0x378>
 8003e5c:	e74d      	b.n	8003cfa <_printf_float+0x236>
 8003e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e60:	2a01      	cmp	r2, #1
 8003e62:	dc01      	bgt.n	8003e68 <_printf_float+0x3a4>
 8003e64:	07db      	lsls	r3, r3, #31
 8003e66:	d538      	bpl.n	8003eda <_printf_float+0x416>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	463a      	mov	r2, r7
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	4628      	mov	r0, r5
 8003e70:	47b0      	blx	r6
 8003e72:	3001      	adds	r0, #1
 8003e74:	f43f ae7d 	beq.w	8003b72 <_printf_float+0xae>
 8003e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b0      	blx	r6
 8003e82:	3001      	adds	r0, #1
 8003e84:	f107 0701 	add.w	r7, r7, #1
 8003e88:	f43f ae73 	beq.w	8003b72 <_printf_float+0xae>
 8003e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e92:	2200      	movs	r2, #0
 8003e94:	f103 38ff 	add.w	r8, r3, #4294967295
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f7fc fd9f 	bl	80009dc <__aeabi_dcmpeq>
 8003e9e:	b9c0      	cbnz	r0, 8003ed2 <_printf_float+0x40e>
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	463a      	mov	r2, r7
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	47b0      	blx	r6
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d10d      	bne.n	8003eca <_printf_float+0x406>
 8003eae:	e660      	b.n	8003b72 <_printf_float+0xae>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	4659      	mov	r1, fp
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47b0      	blx	r6
 8003eba:	3001      	adds	r0, #1
 8003ebc:	f43f ae59 	beq.w	8003b72 <_printf_float+0xae>
 8003ec0:	3701      	adds	r7, #1
 8003ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	42bb      	cmp	r3, r7
 8003ec8:	dcf2      	bgt.n	8003eb0 <_printf_float+0x3ec>
 8003eca:	464b      	mov	r3, r9
 8003ecc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ed0:	e6e4      	b.n	8003c9c <_printf_float+0x1d8>
 8003ed2:	2700      	movs	r7, #0
 8003ed4:	f104 081a 	add.w	r8, r4, #26
 8003ed8:	e7f3      	b.n	8003ec2 <_printf_float+0x3fe>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7e1      	b.n	8003ea2 <_printf_float+0x3de>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	4659      	mov	r1, fp
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b0      	blx	r6
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f ae42 	beq.w	8003b72 <_printf_float+0xae>
 8003eee:	3701      	adds	r7, #1
 8003ef0:	68e3      	ldr	r3, [r4, #12]
 8003ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	42bb      	cmp	r3, r7
 8003ef8:	dcf1      	bgt.n	8003ede <_printf_float+0x41a>
 8003efa:	e702      	b.n	8003d02 <_printf_float+0x23e>
 8003efc:	2700      	movs	r7, #0
 8003efe:	f104 0819 	add.w	r8, r4, #25
 8003f02:	e7f5      	b.n	8003ef0 <_printf_float+0x42c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f43f ae94 	beq.w	8003c32 <_printf_float+0x16e>
 8003f0a:	f04f 0c00 	mov.w	ip, #0
 8003f0e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003f12:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003f16:	6022      	str	r2, [r4, #0]
 8003f18:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003f1c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	463a      	mov	r2, r7
 8003f24:	464b      	mov	r3, r9
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7ff fd3a 	bl	80039a0 <__cvt>
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	e64f      	b.n	8003bd0 <_printf_float+0x10c>

08003f30 <_printf_common>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	4691      	mov	r9, r2
 8003f36:	461f      	mov	r7, r3
 8003f38:	688a      	ldr	r2, [r1, #8]
 8003f3a:	690b      	ldr	r3, [r1, #16]
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bfb8      	it	lt
 8003f42:	4613      	movlt	r3, r2
 8003f44:	f8c9 3000 	str.w	r3, [r9]
 8003f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f52:	b112      	cbz	r2, 8003f5a <_printf_common+0x2a>
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c9 3000 	str.w	r3, [r9]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	0699      	lsls	r1, r3, #26
 8003f5e:	bf42      	ittt	mi
 8003f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f64:	3302      	addmi	r3, #2
 8003f66:	f8c9 3000 	strmi.w	r3, [r9]
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	f015 0506 	ands.w	r5, r5, #6
 8003f70:	d107      	bne.n	8003f82 <_printf_common+0x52>
 8003f72:	f104 0a19 	add.w	sl, r4, #25
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	f8d9 2000 	ldr.w	r2, [r9]
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	dc29      	bgt.n	8003fd6 <_printf_common+0xa6>
 8003f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	3300      	adds	r3, #0
 8003f8a:	bf18      	it	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	0692      	lsls	r2, r2, #26
 8003f90:	d42e      	bmi.n	8003ff0 <_printf_common+0xc0>
 8003f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f96:	4639      	mov	r1, r7
 8003f98:	4630      	mov	r0, r6
 8003f9a:	47c0      	blx	r8
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d021      	beq.n	8003fe4 <_printf_common+0xb4>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	68e5      	ldr	r5, [r4, #12]
 8003fa4:	f003 0306 	and.w	r3, r3, #6
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	bf18      	it	ne
 8003fac:	2500      	movne	r5, #0
 8003fae:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb2:	f04f 0900 	mov.w	r9, #0
 8003fb6:	bf08      	it	eq
 8003fb8:	1aad      	subeq	r5, r5, r2
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	bf08      	it	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bfc4      	itt	gt
 8003fc8:	1a9b      	subgt	r3, r3, r2
 8003fca:	18ed      	addgt	r5, r5, r3
 8003fcc:	341a      	adds	r4, #26
 8003fce:	454d      	cmp	r5, r9
 8003fd0:	d11a      	bne.n	8004008 <_printf_common+0xd8>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e008      	b.n	8003fe8 <_printf_common+0xb8>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4652      	mov	r2, sl
 8003fda:	4639      	mov	r1, r7
 8003fdc:	4630      	mov	r0, r6
 8003fde:	47c0      	blx	r8
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d103      	bne.n	8003fec <_printf_common+0xbc>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7c2      	b.n	8003f76 <_printf_common+0x46>
 8003ff0:	2030      	movs	r0, #48	; 0x30
 8003ff2:	18e1      	adds	r1, r4, r3
 8003ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ffe:	4422      	add	r2, r4
 8004000:	3302      	adds	r3, #2
 8004002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004006:	e7c4      	b.n	8003f92 <_printf_common+0x62>
 8004008:	2301      	movs	r3, #1
 800400a:	4622      	mov	r2, r4
 800400c:	4639      	mov	r1, r7
 800400e:	4630      	mov	r0, r6
 8004010:	47c0      	blx	r8
 8004012:	3001      	adds	r0, #1
 8004014:	d0e6      	beq.n	8003fe4 <_printf_common+0xb4>
 8004016:	f109 0901 	add.w	r9, r9, #1
 800401a:	e7d8      	b.n	8003fce <_printf_common+0x9e>

0800401c <_printf_i>:
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004024:	460c      	mov	r4, r1
 8004026:	7e09      	ldrb	r1, [r1, #24]
 8004028:	b085      	sub	sp, #20
 800402a:	296e      	cmp	r1, #110	; 0x6e
 800402c:	4617      	mov	r7, r2
 800402e:	4606      	mov	r6, r0
 8004030:	4698      	mov	r8, r3
 8004032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004034:	f000 80b3 	beq.w	800419e <_printf_i+0x182>
 8004038:	d822      	bhi.n	8004080 <_printf_i+0x64>
 800403a:	2963      	cmp	r1, #99	; 0x63
 800403c:	d036      	beq.n	80040ac <_printf_i+0x90>
 800403e:	d80a      	bhi.n	8004056 <_printf_i+0x3a>
 8004040:	2900      	cmp	r1, #0
 8004042:	f000 80b9 	beq.w	80041b8 <_printf_i+0x19c>
 8004046:	2958      	cmp	r1, #88	; 0x58
 8004048:	f000 8083 	beq.w	8004152 <_printf_i+0x136>
 800404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004054:	e032      	b.n	80040bc <_printf_i+0xa0>
 8004056:	2964      	cmp	r1, #100	; 0x64
 8004058:	d001      	beq.n	800405e <_printf_i+0x42>
 800405a:	2969      	cmp	r1, #105	; 0x69
 800405c:	d1f6      	bne.n	800404c <_printf_i+0x30>
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	0605      	lsls	r5, r0, #24
 8004064:	f103 0104 	add.w	r1, r3, #4
 8004068:	d52a      	bpl.n	80040c0 <_printf_i+0xa4>
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da03      	bge.n	800407a <_printf_i+0x5e>
 8004072:	222d      	movs	r2, #45	; 0x2d
 8004074:	425b      	negs	r3, r3
 8004076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800407a:	486f      	ldr	r0, [pc, #444]	; (8004238 <_printf_i+0x21c>)
 800407c:	220a      	movs	r2, #10
 800407e:	e039      	b.n	80040f4 <_printf_i+0xd8>
 8004080:	2973      	cmp	r1, #115	; 0x73
 8004082:	f000 809d 	beq.w	80041c0 <_printf_i+0x1a4>
 8004086:	d808      	bhi.n	800409a <_printf_i+0x7e>
 8004088:	296f      	cmp	r1, #111	; 0x6f
 800408a:	d020      	beq.n	80040ce <_printf_i+0xb2>
 800408c:	2970      	cmp	r1, #112	; 0x70
 800408e:	d1dd      	bne.n	800404c <_printf_i+0x30>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	e003      	b.n	80040a2 <_printf_i+0x86>
 800409a:	2975      	cmp	r1, #117	; 0x75
 800409c:	d017      	beq.n	80040ce <_printf_i+0xb2>
 800409e:	2978      	cmp	r1, #120	; 0x78
 80040a0:	d1d4      	bne.n	800404c <_printf_i+0x30>
 80040a2:	2378      	movs	r3, #120	; 0x78
 80040a4:	4865      	ldr	r0, [pc, #404]	; (800423c <_printf_i+0x220>)
 80040a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040aa:	e055      	b.n	8004158 <_printf_i+0x13c>
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b2:	1d19      	adds	r1, r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6011      	str	r1, [r2, #0]
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040bc:	2301      	movs	r3, #1
 80040be:	e08c      	b.n	80041da <_printf_i+0x1be>
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c6:	6011      	str	r1, [r2, #0]
 80040c8:	bf18      	it	ne
 80040ca:	b21b      	sxthne	r3, r3
 80040cc:	e7cf      	b.n	800406e <_printf_i+0x52>
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	6825      	ldr	r5, [r4, #0]
 80040d2:	1d18      	adds	r0, r3, #4
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	0628      	lsls	r0, r5, #24
 80040d8:	d501      	bpl.n	80040de <_printf_i+0xc2>
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <_printf_i+0xc8>
 80040de:	0668      	lsls	r0, r5, #25
 80040e0:	d5fb      	bpl.n	80040da <_printf_i+0xbe>
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	296f      	cmp	r1, #111	; 0x6f
 80040e6:	bf14      	ite	ne
 80040e8:	220a      	movne	r2, #10
 80040ea:	2208      	moveq	r2, #8
 80040ec:	4852      	ldr	r0, [pc, #328]	; (8004238 <_printf_i+0x21c>)
 80040ee:	2100      	movs	r1, #0
 80040f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040f4:	6865      	ldr	r5, [r4, #4]
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	60a5      	str	r5, [r4, #8]
 80040fa:	f2c0 8095 	blt.w	8004228 <_printf_i+0x20c>
 80040fe:	6821      	ldr	r1, [r4, #0]
 8004100:	f021 0104 	bic.w	r1, r1, #4
 8004104:	6021      	str	r1, [r4, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13d      	bne.n	8004186 <_printf_i+0x16a>
 800410a:	2d00      	cmp	r5, #0
 800410c:	f040 808e 	bne.w	800422c <_printf_i+0x210>
 8004110:	4665      	mov	r5, ip
 8004112:	2a08      	cmp	r2, #8
 8004114:	d10b      	bne.n	800412e <_printf_i+0x112>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	07db      	lsls	r3, r3, #31
 800411a:	d508      	bpl.n	800412e <_printf_i+0x112>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6862      	ldr	r2, [r4, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	bfde      	ittt	le
 8004124:	2330      	movle	r3, #48	; 0x30
 8004126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800412e:	ebac 0305 	sub.w	r3, ip, r5
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	f8cd 8000 	str.w	r8, [sp]
 8004138:	463b      	mov	r3, r7
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff fef6 	bl	8003f30 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14d      	bne.n	80041e4 <_printf_i+0x1c8>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b005      	add	sp, #20
 800414e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004152:	4839      	ldr	r0, [pc, #228]	; (8004238 <_printf_i+0x21c>)
 8004154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1d1d      	adds	r5, r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6015      	str	r5, [r2, #0]
 8004162:	060a      	lsls	r2, r1, #24
 8004164:	d50b      	bpl.n	800417e <_printf_i+0x162>
 8004166:	07ca      	lsls	r2, r1, #31
 8004168:	bf44      	itt	mi
 800416a:	f041 0120 	orrmi.w	r1, r1, #32
 800416e:	6021      	strmi	r1, [r4, #0]
 8004170:	b91b      	cbnz	r3, 800417a <_printf_i+0x15e>
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	e7b7      	b.n	80040ee <_printf_i+0xd2>
 800417e:	064d      	lsls	r5, r1, #25
 8004180:	bf48      	it	mi
 8004182:	b29b      	uxthmi	r3, r3
 8004184:	e7ef      	b.n	8004166 <_printf_i+0x14a>
 8004186:	4665      	mov	r5, ip
 8004188:	fbb3 f1f2 	udiv	r1, r3, r2
 800418c:	fb02 3311 	mls	r3, r2, r1, r3
 8004190:	5cc3      	ldrb	r3, [r0, r3]
 8004192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004196:	460b      	mov	r3, r1
 8004198:	2900      	cmp	r1, #0
 800419a:	d1f5      	bne.n	8004188 <_printf_i+0x16c>
 800419c:	e7b9      	b.n	8004112 <_printf_i+0xf6>
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6961      	ldr	r1, [r4, #20]
 80041a6:	6010      	str	r0, [r2, #0]
 80041a8:	0628      	lsls	r0, r5, #24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	d501      	bpl.n	80041b2 <_printf_i+0x196>
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	e002      	b.n	80041b8 <_printf_i+0x19c>
 80041b2:	066a      	lsls	r2, r5, #25
 80041b4:	d5fb      	bpl.n	80041ae <_printf_i+0x192>
 80041b6:	8019      	strh	r1, [r3, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	4665      	mov	r5, ip
 80041bc:	6123      	str	r3, [r4, #16]
 80041be:	e7b9      	b.n	8004134 <_printf_i+0x118>
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	1d19      	adds	r1, r3, #4
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	681d      	ldr	r5, [r3, #0]
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	f002 fbbf 	bl	8006950 <memchr>
 80041d2:	b108      	cbz	r0, 80041d8 <_printf_i+0x1bc>
 80041d4:	1b40      	subs	r0, r0, r5
 80041d6:	6060      	str	r0, [r4, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e2:	e7a7      	b.n	8004134 <_printf_i+0x118>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0aa      	beq.n	8004148 <_printf_i+0x12c>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	079b      	lsls	r3, r3, #30
 80041f6:	d413      	bmi.n	8004220 <_printf_i+0x204>
 80041f8:	68e0      	ldr	r0, [r4, #12]
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	4298      	cmp	r0, r3
 80041fe:	bfb8      	it	lt
 8004200:	4618      	movlt	r0, r3
 8004202:	e7a3      	b.n	800414c <_printf_i+0x130>
 8004204:	2301      	movs	r3, #1
 8004206:	464a      	mov	r2, r9
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d09a      	beq.n	8004148 <_printf_i+0x12c>
 8004212:	3501      	adds	r5, #1
 8004214:	68e3      	ldr	r3, [r4, #12]
 8004216:	9a03      	ldr	r2, [sp, #12]
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	42ab      	cmp	r3, r5
 800421c:	dcf2      	bgt.n	8004204 <_printf_i+0x1e8>
 800421e:	e7eb      	b.n	80041f8 <_printf_i+0x1dc>
 8004220:	2500      	movs	r5, #0
 8004222:	f104 0919 	add.w	r9, r4, #25
 8004226:	e7f5      	b.n	8004214 <_printf_i+0x1f8>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ac      	bne.n	8004186 <_printf_i+0x16a>
 800422c:	7803      	ldrb	r3, [r0, #0]
 800422e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004236:	e76c      	b.n	8004112 <_printf_i+0xf6>
 8004238:	08007c3c 	.word	0x08007c3c
 800423c:	08007c4d 	.word	0x08007c4d

08004240 <_puts_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460e      	mov	r6, r1
 8004244:	4605      	mov	r5, r0
 8004246:	b118      	cbz	r0, 8004250 <_puts_r+0x10>
 8004248:	6983      	ldr	r3, [r0, #24]
 800424a:	b90b      	cbnz	r3, 8004250 <_puts_r+0x10>
 800424c:	f001 ff48 	bl	80060e0 <__sinit>
 8004250:	69ab      	ldr	r3, [r5, #24]
 8004252:	68ac      	ldr	r4, [r5, #8]
 8004254:	b913      	cbnz	r3, 800425c <_puts_r+0x1c>
 8004256:	4628      	mov	r0, r5
 8004258:	f001 ff42 	bl	80060e0 <__sinit>
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <_puts_r+0xac>)
 800425e:	429c      	cmp	r4, r3
 8004260:	d117      	bne.n	8004292 <_puts_r+0x52>
 8004262:	686c      	ldr	r4, [r5, #4]
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	071b      	lsls	r3, r3, #28
 8004268:	d51d      	bpl.n	80042a6 <_puts_r+0x66>
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b1db      	cbz	r3, 80042a6 <_puts_r+0x66>
 800426e:	3e01      	subs	r6, #1
 8004270:	68a3      	ldr	r3, [r4, #8]
 8004272:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004276:	3b01      	subs	r3, #1
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	b9e9      	cbnz	r1, 80042b8 <_puts_r+0x78>
 800427c:	2b00      	cmp	r3, #0
 800427e:	da2e      	bge.n	80042de <_puts_r+0x9e>
 8004280:	4622      	mov	r2, r4
 8004282:	210a      	movs	r1, #10
 8004284:	4628      	mov	r0, r5
 8004286:	f000 ff09 	bl	800509c <__swbuf_r>
 800428a:	3001      	adds	r0, #1
 800428c:	d011      	beq.n	80042b2 <_puts_r+0x72>
 800428e:	200a      	movs	r0, #10
 8004290:	e011      	b.n	80042b6 <_puts_r+0x76>
 8004292:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <_puts_r+0xb0>)
 8004294:	429c      	cmp	r4, r3
 8004296:	d101      	bne.n	800429c <_puts_r+0x5c>
 8004298:	68ac      	ldr	r4, [r5, #8]
 800429a:	e7e3      	b.n	8004264 <_puts_r+0x24>
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <_puts_r+0xb4>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	bf08      	it	eq
 80042a2:	68ec      	ldreq	r4, [r5, #12]
 80042a4:	e7de      	b.n	8004264 <_puts_r+0x24>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 ff69 	bl	8005180 <__swsetup_r>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d0dd      	beq.n	800426e <_puts_r+0x2e>
 80042b2:	f04f 30ff 	mov.w	r0, #4294967295
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da04      	bge.n	80042c6 <_puts_r+0x86>
 80042bc:	69a2      	ldr	r2, [r4, #24]
 80042be:	429a      	cmp	r2, r3
 80042c0:	dc06      	bgt.n	80042d0 <_puts_r+0x90>
 80042c2:	290a      	cmp	r1, #10
 80042c4:	d004      	beq.n	80042d0 <_puts_r+0x90>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	6022      	str	r2, [r4, #0]
 80042cc:	7019      	strb	r1, [r3, #0]
 80042ce:	e7cf      	b.n	8004270 <_puts_r+0x30>
 80042d0:	4622      	mov	r2, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 fee2 	bl	800509c <__swbuf_r>
 80042d8:	3001      	adds	r0, #1
 80042da:	d1c9      	bne.n	8004270 <_puts_r+0x30>
 80042dc:	e7e9      	b.n	80042b2 <_puts_r+0x72>
 80042de:	200a      	movs	r0, #10
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	7018      	strb	r0, [r3, #0]
 80042e8:	e7e5      	b.n	80042b6 <_puts_r+0x76>
 80042ea:	bf00      	nop
 80042ec:	08007de0 	.word	0x08007de0
 80042f0:	08007e00 	.word	0x08007e00
 80042f4:	08007dc0 	.word	0x08007dc0

080042f8 <puts>:
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <puts+0xc>)
 80042fa:	4601      	mov	r1, r0
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	f7ff bf9f 	b.w	8004240 <_puts_r>
 8004302:	bf00      	nop
 8004304:	20000010 	.word	0x20000010

08004308 <realloc>:
 8004308:	4b02      	ldr	r3, [pc, #8]	; (8004314 <realloc+0xc>)
 800430a:	460a      	mov	r2, r1
 800430c:	4601      	mov	r1, r0
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	f002 bf4e 	b.w	80071b0 <_realloc_r>
 8004314:	20000010 	.word	0x20000010

08004318 <_sbrk_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	2300      	movs	r3, #0
 800431c:	4c05      	ldr	r4, [pc, #20]	; (8004334 <_sbrk_r+0x1c>)
 800431e:	4605      	mov	r5, r0
 8004320:	4608      	mov	r0, r1
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	f7ff f9c8 	bl	80036b8 <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_sbrk_r+0x1a>
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	b103      	cbz	r3, 8004332 <_sbrk_r+0x1a>
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	200006b0 	.word	0x200006b0

08004338 <siprintf>:
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800433e:	b500      	push	{lr}
 8004340:	b09c      	sub	sp, #112	; 0x70
 8004342:	ab1d      	add	r3, sp, #116	; 0x74
 8004344:	9002      	str	r0, [sp, #8]
 8004346:	9006      	str	r0, [sp, #24]
 8004348:	9107      	str	r1, [sp, #28]
 800434a:	9104      	str	r1, [sp, #16]
 800434c:	4808      	ldr	r0, [pc, #32]	; (8004370 <siprintf+0x38>)
 800434e:	4909      	ldr	r1, [pc, #36]	; (8004374 <siprintf+0x3c>)
 8004350:	f853 2b04 	ldr.w	r2, [r3], #4
 8004354:	9105      	str	r1, [sp, #20]
 8004356:	6800      	ldr	r0, [r0, #0]
 8004358:	a902      	add	r1, sp, #8
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	f002 ffa8 	bl	80072b0 <_svfiprintf_r>
 8004360:	2200      	movs	r2, #0
 8004362:	9b02      	ldr	r3, [sp, #8]
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	b01c      	add	sp, #112	; 0x70
 8004368:	f85d eb04 	ldr.w	lr, [sp], #4
 800436c:	b003      	add	sp, #12
 800436e:	4770      	bx	lr
 8004370:	20000010 	.word	0x20000010
 8004374:	ffff0208 	.word	0xffff0208

08004378 <__sread>:
 8004378:	b510      	push	{r4, lr}
 800437a:	460c      	mov	r4, r1
 800437c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004380:	f003 f88e 	bl	80074a0 <_read_r>
 8004384:	2800      	cmp	r0, #0
 8004386:	bfab      	itete	ge
 8004388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800438a:	89a3      	ldrhlt	r3, [r4, #12]
 800438c:	181b      	addge	r3, r3, r0
 800438e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004392:	bfac      	ite	ge
 8004394:	6563      	strge	r3, [r4, #84]	; 0x54
 8004396:	81a3      	strhlt	r3, [r4, #12]
 8004398:	bd10      	pop	{r4, pc}

0800439a <__swrite>:
 800439a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439e:	461f      	mov	r7, r3
 80043a0:	898b      	ldrh	r3, [r1, #12]
 80043a2:	4605      	mov	r5, r0
 80043a4:	05db      	lsls	r3, r3, #23
 80043a6:	460c      	mov	r4, r1
 80043a8:	4616      	mov	r6, r2
 80043aa:	d505      	bpl.n	80043b8 <__swrite+0x1e>
 80043ac:	2302      	movs	r3, #2
 80043ae:	2200      	movs	r2, #0
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	f002 fa56 	bl	8006864 <_lseek_r>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	4632      	mov	r2, r6
 80043bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c6:	463b      	mov	r3, r7
 80043c8:	4628      	mov	r0, r5
 80043ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	f000 bec5 	b.w	800515c <_write_r>

080043d2 <__sseek>:
 80043d2:	b510      	push	{r4, lr}
 80043d4:	460c      	mov	r4, r1
 80043d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043da:	f002 fa43 	bl	8006864 <_lseek_r>
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	bf15      	itete	ne
 80043e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80043e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043ee:	81a3      	strheq	r3, [r4, #12]
 80043f0:	bf18      	it	ne
 80043f2:	81a3      	strhne	r3, [r4, #12]
 80043f4:	bd10      	pop	{r4, pc}

080043f6 <__sclose>:
 80043f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fa:	f000 bf2f 	b.w	800525c <_close_r>

080043fe <strcpy>:
 80043fe:	4603      	mov	r3, r0
 8004400:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004404:	f803 2b01 	strb.w	r2, [r3], #1
 8004408:	2a00      	cmp	r2, #0
 800440a:	d1f9      	bne.n	8004400 <strcpy+0x2>
 800440c:	4770      	bx	lr

0800440e <strncmp>:
 800440e:	b510      	push	{r4, lr}
 8004410:	b16a      	cbz	r2, 800442e <strncmp+0x20>
 8004412:	3901      	subs	r1, #1
 8004414:	1884      	adds	r4, r0, r2
 8004416:	f810 3b01 	ldrb.w	r3, [r0], #1
 800441a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800441e:	4293      	cmp	r3, r2
 8004420:	d103      	bne.n	800442a <strncmp+0x1c>
 8004422:	42a0      	cmp	r0, r4
 8004424:	d001      	beq.n	800442a <strncmp+0x1c>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f5      	bne.n	8004416 <strncmp+0x8>
 800442a:	1a98      	subs	r0, r3, r2
 800442c:	bd10      	pop	{r4, pc}
 800442e:	4610      	mov	r0, r2
 8004430:	e7fc      	b.n	800442c <strncmp+0x1e>

08004432 <sulp>:
 8004432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	460f      	mov	r7, r1
 8004438:	4690      	mov	r8, r2
 800443a:	f002 fd7d 	bl	8006f38 <__ulp>
 800443e:	4604      	mov	r4, r0
 8004440:	460d      	mov	r5, r1
 8004442:	f1b8 0f00 	cmp.w	r8, #0
 8004446:	d011      	beq.n	800446c <sulp+0x3a>
 8004448:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800444c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004450:	2b00      	cmp	r3, #0
 8004452:	dd0b      	ble.n	800446c <sulp+0x3a>
 8004454:	2400      	movs	r4, #0
 8004456:	051b      	lsls	r3, r3, #20
 8004458:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800445c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004460:	4622      	mov	r2, r4
 8004462:	462b      	mov	r3, r5
 8004464:	f7fc f852 	bl	800050c <__aeabi_dmul>
 8004468:	4604      	mov	r4, r0
 800446a:	460d      	mov	r5, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004474:	0000      	movs	r0, r0
	...

08004478 <_strtod_l>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	461f      	mov	r7, r3
 800447e:	2300      	movs	r3, #0
 8004480:	b0a1      	sub	sp, #132	; 0x84
 8004482:	4683      	mov	fp, r0
 8004484:	4638      	mov	r0, r7
 8004486:	460e      	mov	r6, r1
 8004488:	9217      	str	r2, [sp, #92]	; 0x5c
 800448a:	931c      	str	r3, [sp, #112]	; 0x70
 800448c:	f002 f9da 	bl	8006844 <__localeconv_l>
 8004490:	4680      	mov	r8, r0
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	f7fb fe76 	bl	8000184 <strlen>
 8004498:	f04f 0900 	mov.w	r9, #0
 800449c:	4604      	mov	r4, r0
 800449e:	f04f 0a00 	mov.w	sl, #0
 80044a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80044a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	2a0d      	cmp	r2, #13
 80044aa:	d832      	bhi.n	8004512 <_strtod_l+0x9a>
 80044ac:	2a09      	cmp	r2, #9
 80044ae:	d236      	bcs.n	800451e <_strtod_l+0xa6>
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	d03e      	beq.n	8004532 <_strtod_l+0xba>
 80044b4:	2300      	movs	r3, #0
 80044b6:	930d      	str	r3, [sp, #52]	; 0x34
 80044b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80044ba:	782b      	ldrb	r3, [r5, #0]
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	f040 80ac 	bne.w	800461a <_strtod_l+0x1a2>
 80044c2:	786b      	ldrb	r3, [r5, #1]
 80044c4:	2b58      	cmp	r3, #88	; 0x58
 80044c6:	d001      	beq.n	80044cc <_strtod_l+0x54>
 80044c8:	2b78      	cmp	r3, #120	; 0x78
 80044ca:	d167      	bne.n	800459c <_strtod_l+0x124>
 80044cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ce:	9702      	str	r7, [sp, #8]
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	ab1c      	add	r3, sp, #112	; 0x70
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4a89      	ldr	r2, [pc, #548]	; (80046fc <_strtod_l+0x284>)
 80044d8:	ab1d      	add	r3, sp, #116	; 0x74
 80044da:	a91b      	add	r1, sp, #108	; 0x6c
 80044dc:	4658      	mov	r0, fp
 80044de:	f001 fed9 	bl	8006294 <__gethex>
 80044e2:	f010 0407 	ands.w	r4, r0, #7
 80044e6:	4606      	mov	r6, r0
 80044e8:	d005      	beq.n	80044f6 <_strtod_l+0x7e>
 80044ea:	2c06      	cmp	r4, #6
 80044ec:	d12b      	bne.n	8004546 <_strtod_l+0xce>
 80044ee:	2300      	movs	r3, #0
 80044f0:	3501      	adds	r5, #1
 80044f2:	951b      	str	r5, [sp, #108]	; 0x6c
 80044f4:	930d      	str	r3, [sp, #52]	; 0x34
 80044f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 85a6 	bne.w	800504a <_strtod_l+0xbd2>
 80044fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004500:	b1e3      	cbz	r3, 800453c <_strtod_l+0xc4>
 8004502:	464a      	mov	r2, r9
 8004504:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004508:	4610      	mov	r0, r2
 800450a:	4619      	mov	r1, r3
 800450c:	b021      	add	sp, #132	; 0x84
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004512:	2a2b      	cmp	r2, #43	; 0x2b
 8004514:	d015      	beq.n	8004542 <_strtod_l+0xca>
 8004516:	2a2d      	cmp	r2, #45	; 0x2d
 8004518:	d004      	beq.n	8004524 <_strtod_l+0xac>
 800451a:	2a20      	cmp	r2, #32
 800451c:	d1ca      	bne.n	80044b4 <_strtod_l+0x3c>
 800451e:	3301      	adds	r3, #1
 8004520:	931b      	str	r3, [sp, #108]	; 0x6c
 8004522:	e7bf      	b.n	80044a4 <_strtod_l+0x2c>
 8004524:	2201      	movs	r2, #1
 8004526:	920d      	str	r2, [sp, #52]	; 0x34
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	921b      	str	r2, [sp, #108]	; 0x6c
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1c2      	bne.n	80044b8 <_strtod_l+0x40>
 8004532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004534:	961b      	str	r6, [sp, #108]	; 0x6c
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 8585 	bne.w	8005046 <_strtod_l+0xbce>
 800453c:	464a      	mov	r2, r9
 800453e:	4653      	mov	r3, sl
 8004540:	e7e2      	b.n	8004508 <_strtod_l+0x90>
 8004542:	2200      	movs	r2, #0
 8004544:	e7ef      	b.n	8004526 <_strtod_l+0xae>
 8004546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004548:	b13a      	cbz	r2, 800455a <_strtod_l+0xe2>
 800454a:	2135      	movs	r1, #53	; 0x35
 800454c:	a81e      	add	r0, sp, #120	; 0x78
 800454e:	f002 fde6 	bl	800711e <__copybits>
 8004552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004554:	4658      	mov	r0, fp
 8004556:	f002 fa58 	bl	8006a0a <_Bfree>
 800455a:	3c01      	subs	r4, #1
 800455c:	2c04      	cmp	r4, #4
 800455e:	d806      	bhi.n	800456e <_strtod_l+0xf6>
 8004560:	e8df f004 	tbb	[pc, r4]
 8004564:	1714030a 	.word	0x1714030a
 8004568:	0a          	.byte	0x0a
 8004569:	00          	.byte	0x00
 800456a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800456e:	0731      	lsls	r1, r6, #28
 8004570:	d5c1      	bpl.n	80044f6 <_strtod_l+0x7e>
 8004572:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004576:	e7be      	b.n	80044f6 <_strtod_l+0x7e>
 8004578:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800457a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800457e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004582:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004586:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800458a:	e7f0      	b.n	800456e <_strtod_l+0xf6>
 800458c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004700 <_strtod_l+0x288>
 8004590:	e7ed      	b.n	800456e <_strtod_l+0xf6>
 8004592:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004596:	f04f 39ff 	mov.w	r9, #4294967295
 800459a:	e7e8      	b.n	800456e <_strtod_l+0xf6>
 800459c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80045a2:	785b      	ldrb	r3, [r3, #1]
 80045a4:	2b30      	cmp	r3, #48	; 0x30
 80045a6:	d0f9      	beq.n	800459c <_strtod_l+0x124>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0a4      	beq.n	80044f6 <_strtod_l+0x7e>
 80045ac:	2301      	movs	r3, #1
 80045ae:	2500      	movs	r5, #0
 80045b0:	220a      	movs	r2, #10
 80045b2:	9307      	str	r3, [sp, #28]
 80045b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045b6:	9506      	str	r5, [sp, #24]
 80045b8:	9308      	str	r3, [sp, #32]
 80045ba:	9504      	str	r5, [sp, #16]
 80045bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80045be:	7807      	ldrb	r7, [r0, #0]
 80045c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80045c4:	b2d9      	uxtb	r1, r3
 80045c6:	2909      	cmp	r1, #9
 80045c8:	d929      	bls.n	800461e <_strtod_l+0x1a6>
 80045ca:	4622      	mov	r2, r4
 80045cc:	f8d8 1000 	ldr.w	r1, [r8]
 80045d0:	f7ff ff1d 	bl	800440e <strncmp>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d031      	beq.n	800463c <_strtod_l+0x1c4>
 80045d8:	2000      	movs	r0, #0
 80045da:	463b      	mov	r3, r7
 80045dc:	4602      	mov	r2, r0
 80045de:	9c04      	ldr	r4, [sp, #16]
 80045e0:	9005      	str	r0, [sp, #20]
 80045e2:	2b65      	cmp	r3, #101	; 0x65
 80045e4:	d001      	beq.n	80045ea <_strtod_l+0x172>
 80045e6:	2b45      	cmp	r3, #69	; 0x45
 80045e8:	d114      	bne.n	8004614 <_strtod_l+0x19c>
 80045ea:	b924      	cbnz	r4, 80045f6 <_strtod_l+0x17e>
 80045ec:	b910      	cbnz	r0, 80045f4 <_strtod_l+0x17c>
 80045ee:	9b07      	ldr	r3, [sp, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d09e      	beq.n	8004532 <_strtod_l+0xba>
 80045f4:	2400      	movs	r4, #0
 80045f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80045f8:	1c73      	adds	r3, r6, #1
 80045fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80045fc:	7873      	ldrb	r3, [r6, #1]
 80045fe:	2b2b      	cmp	r3, #43	; 0x2b
 8004600:	d078      	beq.n	80046f4 <_strtod_l+0x27c>
 8004602:	2b2d      	cmp	r3, #45	; 0x2d
 8004604:	d070      	beq.n	80046e8 <_strtod_l+0x270>
 8004606:	f04f 0c00 	mov.w	ip, #0
 800460a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800460e:	2f09      	cmp	r7, #9
 8004610:	d97c      	bls.n	800470c <_strtod_l+0x294>
 8004612:	961b      	str	r6, [sp, #108]	; 0x6c
 8004614:	f04f 0e00 	mov.w	lr, #0
 8004618:	e09a      	b.n	8004750 <_strtod_l+0x2d8>
 800461a:	2300      	movs	r3, #0
 800461c:	e7c7      	b.n	80045ae <_strtod_l+0x136>
 800461e:	9904      	ldr	r1, [sp, #16]
 8004620:	3001      	adds	r0, #1
 8004622:	2908      	cmp	r1, #8
 8004624:	bfd7      	itett	le
 8004626:	9906      	ldrle	r1, [sp, #24]
 8004628:	fb02 3505 	mlagt	r5, r2, r5, r3
 800462c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004630:	9306      	strle	r3, [sp, #24]
 8004632:	9b04      	ldr	r3, [sp, #16]
 8004634:	901b      	str	r0, [sp, #108]	; 0x6c
 8004636:	3301      	adds	r3, #1
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	e7bf      	b.n	80045bc <_strtod_l+0x144>
 800463c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800463e:	191a      	adds	r2, r3, r4
 8004640:	921b      	str	r2, [sp, #108]	; 0x6c
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	5d1b      	ldrb	r3, [r3, r4]
 8004646:	2a00      	cmp	r2, #0
 8004648:	d037      	beq.n	80046ba <_strtod_l+0x242>
 800464a:	4602      	mov	r2, r0
 800464c:	9c04      	ldr	r4, [sp, #16]
 800464e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004652:	2909      	cmp	r1, #9
 8004654:	d913      	bls.n	800467e <_strtod_l+0x206>
 8004656:	2101      	movs	r1, #1
 8004658:	9105      	str	r1, [sp, #20]
 800465a:	e7c2      	b.n	80045e2 <_strtod_l+0x16a>
 800465c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800465e:	3001      	adds	r0, #1
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	921b      	str	r2, [sp, #108]	; 0x6c
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b30      	cmp	r3, #48	; 0x30
 8004668:	d0f8      	beq.n	800465c <_strtod_l+0x1e4>
 800466a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800466e:	2a08      	cmp	r2, #8
 8004670:	f200 84f0 	bhi.w	8005054 <_strtod_l+0xbdc>
 8004674:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004676:	9208      	str	r2, [sp, #32]
 8004678:	4602      	mov	r2, r0
 800467a:	2000      	movs	r0, #0
 800467c:	4604      	mov	r4, r0
 800467e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004682:	f100 0101 	add.w	r1, r0, #1
 8004686:	d012      	beq.n	80046ae <_strtod_l+0x236>
 8004688:	440a      	add	r2, r1
 800468a:	270a      	movs	r7, #10
 800468c:	4621      	mov	r1, r4
 800468e:	eb00 0c04 	add.w	ip, r0, r4
 8004692:	458c      	cmp	ip, r1
 8004694:	d113      	bne.n	80046be <_strtod_l+0x246>
 8004696:	1821      	adds	r1, r4, r0
 8004698:	2908      	cmp	r1, #8
 800469a:	f104 0401 	add.w	r4, r4, #1
 800469e:	4404      	add	r4, r0
 80046a0:	dc19      	bgt.n	80046d6 <_strtod_l+0x25e>
 80046a2:	210a      	movs	r1, #10
 80046a4:	9b06      	ldr	r3, [sp, #24]
 80046a6:	fb01 e303 	mla	r3, r1, r3, lr
 80046aa:	9306      	str	r3, [sp, #24]
 80046ac:	2100      	movs	r1, #0
 80046ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046b0:	1c58      	adds	r0, r3, #1
 80046b2:	901b      	str	r0, [sp, #108]	; 0x6c
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	4608      	mov	r0, r1
 80046b8:	e7c9      	b.n	800464e <_strtod_l+0x1d6>
 80046ba:	9804      	ldr	r0, [sp, #16]
 80046bc:	e7d3      	b.n	8004666 <_strtod_l+0x1ee>
 80046be:	2908      	cmp	r1, #8
 80046c0:	f101 0101 	add.w	r1, r1, #1
 80046c4:	dc03      	bgt.n	80046ce <_strtod_l+0x256>
 80046c6:	9b06      	ldr	r3, [sp, #24]
 80046c8:	437b      	muls	r3, r7
 80046ca:	9306      	str	r3, [sp, #24]
 80046cc:	e7e1      	b.n	8004692 <_strtod_l+0x21a>
 80046ce:	2910      	cmp	r1, #16
 80046d0:	bfd8      	it	le
 80046d2:	437d      	mulle	r5, r7
 80046d4:	e7dd      	b.n	8004692 <_strtod_l+0x21a>
 80046d6:	2c10      	cmp	r4, #16
 80046d8:	bfdc      	itt	le
 80046da:	210a      	movle	r1, #10
 80046dc:	fb01 e505 	mlale	r5, r1, r5, lr
 80046e0:	e7e4      	b.n	80046ac <_strtod_l+0x234>
 80046e2:	2301      	movs	r3, #1
 80046e4:	9305      	str	r3, [sp, #20]
 80046e6:	e781      	b.n	80045ec <_strtod_l+0x174>
 80046e8:	f04f 0c01 	mov.w	ip, #1
 80046ec:	1cb3      	adds	r3, r6, #2
 80046ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80046f0:	78b3      	ldrb	r3, [r6, #2]
 80046f2:	e78a      	b.n	800460a <_strtod_l+0x192>
 80046f4:	f04f 0c00 	mov.w	ip, #0
 80046f8:	e7f8      	b.n	80046ec <_strtod_l+0x274>
 80046fa:	bf00      	nop
 80046fc:	08007c60 	.word	0x08007c60
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004706:	1c5f      	adds	r7, r3, #1
 8004708:	971b      	str	r7, [sp, #108]	; 0x6c
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d0f9      	beq.n	8004704 <_strtod_l+0x28c>
 8004710:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004714:	2f08      	cmp	r7, #8
 8004716:	f63f af7d 	bhi.w	8004614 <_strtod_l+0x19c>
 800471a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800471e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004724:	1c5f      	adds	r7, r3, #1
 8004726:	971b      	str	r7, [sp, #108]	; 0x6c
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800472e:	f1b8 0f09 	cmp.w	r8, #9
 8004732:	d937      	bls.n	80047a4 <_strtod_l+0x32c>
 8004734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004736:	1a7f      	subs	r7, r7, r1
 8004738:	2f08      	cmp	r7, #8
 800473a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800473e:	dc37      	bgt.n	80047b0 <_strtod_l+0x338>
 8004740:	45be      	cmp	lr, r7
 8004742:	bfa8      	it	ge
 8004744:	46be      	movge	lr, r7
 8004746:	f1bc 0f00 	cmp.w	ip, #0
 800474a:	d001      	beq.n	8004750 <_strtod_l+0x2d8>
 800474c:	f1ce 0e00 	rsb	lr, lr, #0
 8004750:	2c00      	cmp	r4, #0
 8004752:	d151      	bne.n	80047f8 <_strtod_l+0x380>
 8004754:	2800      	cmp	r0, #0
 8004756:	f47f aece 	bne.w	80044f6 <_strtod_l+0x7e>
 800475a:	9a07      	ldr	r2, [sp, #28]
 800475c:	2a00      	cmp	r2, #0
 800475e:	f47f aeca 	bne.w	80044f6 <_strtod_l+0x7e>
 8004762:	9a05      	ldr	r2, [sp, #20]
 8004764:	2a00      	cmp	r2, #0
 8004766:	f47f aee4 	bne.w	8004532 <_strtod_l+0xba>
 800476a:	2b4e      	cmp	r3, #78	; 0x4e
 800476c:	d027      	beq.n	80047be <_strtod_l+0x346>
 800476e:	dc21      	bgt.n	80047b4 <_strtod_l+0x33c>
 8004770:	2b49      	cmp	r3, #73	; 0x49
 8004772:	f47f aede 	bne.w	8004532 <_strtod_l+0xba>
 8004776:	49a4      	ldr	r1, [pc, #656]	; (8004a08 <_strtod_l+0x590>)
 8004778:	a81b      	add	r0, sp, #108	; 0x6c
 800477a:	f001 ffbf 	bl	80066fc <__match>
 800477e:	2800      	cmp	r0, #0
 8004780:	f43f aed7 	beq.w	8004532 <_strtod_l+0xba>
 8004784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004786:	49a1      	ldr	r1, [pc, #644]	; (8004a0c <_strtod_l+0x594>)
 8004788:	3b01      	subs	r3, #1
 800478a:	a81b      	add	r0, sp, #108	; 0x6c
 800478c:	931b      	str	r3, [sp, #108]	; 0x6c
 800478e:	f001 ffb5 	bl	80066fc <__match>
 8004792:	b910      	cbnz	r0, 800479a <_strtod_l+0x322>
 8004794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004796:	3301      	adds	r3, #1
 8004798:	931b      	str	r3, [sp, #108]	; 0x6c
 800479a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004a20 <_strtod_l+0x5a8>
 800479e:	f04f 0900 	mov.w	r9, #0
 80047a2:	e6a8      	b.n	80044f6 <_strtod_l+0x7e>
 80047a4:	210a      	movs	r1, #10
 80047a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80047aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80047ae:	e7b8      	b.n	8004722 <_strtod_l+0x2aa>
 80047b0:	46be      	mov	lr, r7
 80047b2:	e7c8      	b.n	8004746 <_strtod_l+0x2ce>
 80047b4:	2b69      	cmp	r3, #105	; 0x69
 80047b6:	d0de      	beq.n	8004776 <_strtod_l+0x2fe>
 80047b8:	2b6e      	cmp	r3, #110	; 0x6e
 80047ba:	f47f aeba 	bne.w	8004532 <_strtod_l+0xba>
 80047be:	4994      	ldr	r1, [pc, #592]	; (8004a10 <_strtod_l+0x598>)
 80047c0:	a81b      	add	r0, sp, #108	; 0x6c
 80047c2:	f001 ff9b 	bl	80066fc <__match>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43f aeb3 	beq.w	8004532 <_strtod_l+0xba>
 80047cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b28      	cmp	r3, #40	; 0x28
 80047d2:	d10e      	bne.n	80047f2 <_strtod_l+0x37a>
 80047d4:	aa1e      	add	r2, sp, #120	; 0x78
 80047d6:	498f      	ldr	r1, [pc, #572]	; (8004a14 <_strtod_l+0x59c>)
 80047d8:	a81b      	add	r0, sp, #108	; 0x6c
 80047da:	f001 ffa3 	bl	8006724 <__hexnan>
 80047de:	2805      	cmp	r0, #5
 80047e0:	d107      	bne.n	80047f2 <_strtod_l+0x37a>
 80047e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047e4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80047e8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80047ec:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80047f0:	e681      	b.n	80044f6 <_strtod_l+0x7e>
 80047f2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004a28 <_strtod_l+0x5b0>
 80047f6:	e7d2      	b.n	800479e <_strtod_l+0x326>
 80047f8:	ebae 0302 	sub.w	r3, lr, r2
 80047fc:	9307      	str	r3, [sp, #28]
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	9806      	ldr	r0, [sp, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	bf08      	it	eq
 8004806:	4623      	moveq	r3, r4
 8004808:	2c10      	cmp	r4, #16
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	46a0      	mov	r8, r4
 800480e:	bfa8      	it	ge
 8004810:	f04f 0810 	movge.w	r8, #16
 8004814:	f7fb fe00 	bl	8000418 <__aeabi_ui2d>
 8004818:	2c09      	cmp	r4, #9
 800481a:	4681      	mov	r9, r0
 800481c:	468a      	mov	sl, r1
 800481e:	dc13      	bgt.n	8004848 <_strtod_l+0x3d0>
 8004820:	9b07      	ldr	r3, [sp, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f43f ae67 	beq.w	80044f6 <_strtod_l+0x7e>
 8004828:	9b07      	ldr	r3, [sp, #28]
 800482a:	dd7e      	ble.n	800492a <_strtod_l+0x4b2>
 800482c:	2b16      	cmp	r3, #22
 800482e:	dc65      	bgt.n	80048fc <_strtod_l+0x484>
 8004830:	4a79      	ldr	r2, [pc, #484]	; (8004a18 <_strtod_l+0x5a0>)
 8004832:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004836:	464a      	mov	r2, r9
 8004838:	e9de 0100 	ldrd	r0, r1, [lr]
 800483c:	4653      	mov	r3, sl
 800483e:	f7fb fe65 	bl	800050c <__aeabi_dmul>
 8004842:	4681      	mov	r9, r0
 8004844:	468a      	mov	sl, r1
 8004846:	e656      	b.n	80044f6 <_strtod_l+0x7e>
 8004848:	4b73      	ldr	r3, [pc, #460]	; (8004a18 <_strtod_l+0x5a0>)
 800484a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800484e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004852:	f7fb fe5b 	bl	800050c <__aeabi_dmul>
 8004856:	4606      	mov	r6, r0
 8004858:	4628      	mov	r0, r5
 800485a:	460f      	mov	r7, r1
 800485c:	f7fb fddc 	bl	8000418 <__aeabi_ui2d>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4630      	mov	r0, r6
 8004866:	4639      	mov	r1, r7
 8004868:	f7fb fc9a 	bl	80001a0 <__adddf3>
 800486c:	2c0f      	cmp	r4, #15
 800486e:	4681      	mov	r9, r0
 8004870:	468a      	mov	sl, r1
 8004872:	ddd5      	ble.n	8004820 <_strtod_l+0x3a8>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	eba4 0808 	sub.w	r8, r4, r8
 800487a:	4498      	add	r8, r3
 800487c:	f1b8 0f00 	cmp.w	r8, #0
 8004880:	f340 809a 	ble.w	80049b8 <_strtod_l+0x540>
 8004884:	f018 030f 	ands.w	r3, r8, #15
 8004888:	d00a      	beq.n	80048a0 <_strtod_l+0x428>
 800488a:	4963      	ldr	r1, [pc, #396]	; (8004a18 <_strtod_l+0x5a0>)
 800488c:	464a      	mov	r2, r9
 800488e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004896:	4653      	mov	r3, sl
 8004898:	f7fb fe38 	bl	800050c <__aeabi_dmul>
 800489c:	4681      	mov	r9, r0
 800489e:	468a      	mov	sl, r1
 80048a0:	f038 080f 	bics.w	r8, r8, #15
 80048a4:	d077      	beq.n	8004996 <_strtod_l+0x51e>
 80048a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80048aa:	dd4b      	ble.n	8004944 <_strtod_l+0x4cc>
 80048ac:	f04f 0800 	mov.w	r8, #0
 80048b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80048b4:	f8cd 8020 	str.w	r8, [sp, #32]
 80048b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048bc:	2322      	movs	r3, #34	; 0x22
 80048be:	f04f 0900 	mov.w	r9, #0
 80048c2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004a20 <_strtod_l+0x5a8>
 80048c6:	f8cb 3000 	str.w	r3, [fp]
 80048ca:	9b08      	ldr	r3, [sp, #32]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f43f ae12 	beq.w	80044f6 <_strtod_l+0x7e>
 80048d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80048d4:	4658      	mov	r0, fp
 80048d6:	f002 f898 	bl	8006a0a <_Bfree>
 80048da:	9906      	ldr	r1, [sp, #24]
 80048dc:	4658      	mov	r0, fp
 80048de:	f002 f894 	bl	8006a0a <_Bfree>
 80048e2:	9904      	ldr	r1, [sp, #16]
 80048e4:	4658      	mov	r0, fp
 80048e6:	f002 f890 	bl	8006a0a <_Bfree>
 80048ea:	9908      	ldr	r1, [sp, #32]
 80048ec:	4658      	mov	r0, fp
 80048ee:	f002 f88c 	bl	8006a0a <_Bfree>
 80048f2:	4641      	mov	r1, r8
 80048f4:	4658      	mov	r0, fp
 80048f6:	f002 f888 	bl	8006a0a <_Bfree>
 80048fa:	e5fc      	b.n	80044f6 <_strtod_l+0x7e>
 80048fc:	9a07      	ldr	r2, [sp, #28]
 80048fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004902:	4293      	cmp	r3, r2
 8004904:	dbb6      	blt.n	8004874 <_strtod_l+0x3fc>
 8004906:	4d44      	ldr	r5, [pc, #272]	; (8004a18 <_strtod_l+0x5a0>)
 8004908:	f1c4 040f 	rsb	r4, r4, #15
 800490c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004910:	464a      	mov	r2, r9
 8004912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004916:	4653      	mov	r3, sl
 8004918:	f7fb fdf8 	bl	800050c <__aeabi_dmul>
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	1b1c      	subs	r4, r3, r4
 8004920:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004928:	e789      	b.n	800483e <_strtod_l+0x3c6>
 800492a:	f113 0f16 	cmn.w	r3, #22
 800492e:	dba1      	blt.n	8004874 <_strtod_l+0x3fc>
 8004930:	4a39      	ldr	r2, [pc, #228]	; (8004a18 <_strtod_l+0x5a0>)
 8004932:	4648      	mov	r0, r9
 8004934:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004938:	e9d2 2300 	ldrd	r2, r3, [r2]
 800493c:	4651      	mov	r1, sl
 800493e:	f7fb ff0f 	bl	8000760 <__aeabi_ddiv>
 8004942:	e77e      	b.n	8004842 <_strtod_l+0x3ca>
 8004944:	2300      	movs	r3, #0
 8004946:	4648      	mov	r0, r9
 8004948:	4651      	mov	r1, sl
 800494a:	461d      	mov	r5, r3
 800494c:	4e33      	ldr	r6, [pc, #204]	; (8004a1c <_strtod_l+0x5a4>)
 800494e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004952:	f1b8 0f01 	cmp.w	r8, #1
 8004956:	dc21      	bgt.n	800499c <_strtod_l+0x524>
 8004958:	b10b      	cbz	r3, 800495e <_strtod_l+0x4e6>
 800495a:	4681      	mov	r9, r0
 800495c:	468a      	mov	sl, r1
 800495e:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <_strtod_l+0x5a4>)
 8004960:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004964:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004968:	464a      	mov	r2, r9
 800496a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800496e:	4653      	mov	r3, sl
 8004970:	f7fb fdcc 	bl	800050c <__aeabi_dmul>
 8004974:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <_strtod_l+0x5a8>)
 8004976:	460a      	mov	r2, r1
 8004978:	400b      	ands	r3, r1
 800497a:	492a      	ldr	r1, [pc, #168]	; (8004a24 <_strtod_l+0x5ac>)
 800497c:	4681      	mov	r9, r0
 800497e:	428b      	cmp	r3, r1
 8004980:	d894      	bhi.n	80048ac <_strtod_l+0x434>
 8004982:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004986:	428b      	cmp	r3, r1
 8004988:	bf86      	itte	hi
 800498a:	f04f 39ff 	movhi.w	r9, #4294967295
 800498e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004a2c <_strtod_l+0x5b4>
 8004992:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004996:	2300      	movs	r3, #0
 8004998:	9305      	str	r3, [sp, #20]
 800499a:	e07b      	b.n	8004a94 <_strtod_l+0x61c>
 800499c:	f018 0f01 	tst.w	r8, #1
 80049a0:	d006      	beq.n	80049b0 <_strtod_l+0x538>
 80049a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fdaf 	bl	800050c <__aeabi_dmul>
 80049ae:	2301      	movs	r3, #1
 80049b0:	3501      	adds	r5, #1
 80049b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80049b6:	e7cc      	b.n	8004952 <_strtod_l+0x4da>
 80049b8:	d0ed      	beq.n	8004996 <_strtod_l+0x51e>
 80049ba:	f1c8 0800 	rsb	r8, r8, #0
 80049be:	f018 020f 	ands.w	r2, r8, #15
 80049c2:	d00a      	beq.n	80049da <_strtod_l+0x562>
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <_strtod_l+0x5a0>)
 80049c6:	4648      	mov	r0, r9
 80049c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049cc:	4651      	mov	r1, sl
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fec5 	bl	8000760 <__aeabi_ddiv>
 80049d6:	4681      	mov	r9, r0
 80049d8:	468a      	mov	sl, r1
 80049da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80049de:	d0da      	beq.n	8004996 <_strtod_l+0x51e>
 80049e0:	f1b8 0f1f 	cmp.w	r8, #31
 80049e4:	dd24      	ble.n	8004a30 <_strtod_l+0x5b8>
 80049e6:	f04f 0800 	mov.w	r8, #0
 80049ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80049ee:	f8cd 8020 	str.w	r8, [sp, #32]
 80049f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80049f6:	2322      	movs	r3, #34	; 0x22
 80049f8:	f04f 0900 	mov.w	r9, #0
 80049fc:	f04f 0a00 	mov.w	sl, #0
 8004a00:	f8cb 3000 	str.w	r3, [fp]
 8004a04:	e761      	b.n	80048ca <_strtod_l+0x452>
 8004a06:	bf00      	nop
 8004a08:	08007c2f 	.word	0x08007c2f
 8004a0c:	08007db4 	.word	0x08007db4
 8004a10:	08007c37 	.word	0x08007c37
 8004a14:	08007c74 	.word	0x08007c74
 8004a18:	08007e48 	.word	0x08007e48
 8004a1c:	08007e20 	.word	0x08007e20
 8004a20:	7ff00000 	.word	0x7ff00000
 8004a24:	7ca00000 	.word	0x7ca00000
 8004a28:	fff80000 	.word	0xfff80000
 8004a2c:	7fefffff 	.word	0x7fefffff
 8004a30:	f018 0310 	ands.w	r3, r8, #16
 8004a34:	bf18      	it	ne
 8004a36:	236a      	movne	r3, #106	; 0x6a
 8004a38:	4648      	mov	r0, r9
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	2300      	movs	r3, #0
 8004a40:	4da1      	ldr	r5, [pc, #644]	; (8004cc8 <_strtod_l+0x850>)
 8004a42:	f1b8 0f00 	cmp.w	r8, #0
 8004a46:	f300 8113 	bgt.w	8004c70 <_strtod_l+0x7f8>
 8004a4a:	b10b      	cbz	r3, 8004a50 <_strtod_l+0x5d8>
 8004a4c:	4681      	mov	r9, r0
 8004a4e:	468a      	mov	sl, r1
 8004a50:	9b05      	ldr	r3, [sp, #20]
 8004a52:	b1bb      	cbz	r3, 8004a84 <_strtod_l+0x60c>
 8004a54:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004a58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	4651      	mov	r1, sl
 8004a60:	dd10      	ble.n	8004a84 <_strtod_l+0x60c>
 8004a62:	2b1f      	cmp	r3, #31
 8004a64:	f340 8110 	ble.w	8004c88 <_strtod_l+0x810>
 8004a68:	2b34      	cmp	r3, #52	; 0x34
 8004a6a:	bfd8      	it	le
 8004a6c:	f04f 32ff 	movle.w	r2, #4294967295
 8004a70:	f04f 0900 	mov.w	r9, #0
 8004a74:	bfcf      	iteee	gt
 8004a76:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004a7a:	3b20      	suble	r3, #32
 8004a7c:	fa02 f303 	lslle.w	r3, r2, r3
 8004a80:	ea03 0a01 	andle.w	sl, r3, r1
 8004a84:	2200      	movs	r2, #0
 8004a86:	2300      	movs	r3, #0
 8004a88:	4648      	mov	r0, r9
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	f7fb ffa6 	bl	80009dc <__aeabi_dcmpeq>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d1a8      	bne.n	80049e6 <_strtod_l+0x56e>
 8004a94:	9b06      	ldr	r3, [sp, #24]
 8004a96:	9a04      	ldr	r2, [sp, #16]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	9908      	ldr	r1, [sp, #32]
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	4658      	mov	r0, fp
 8004aa0:	f002 f805 	bl	8006aae <__s2b>
 8004aa4:	9008      	str	r0, [sp, #32]
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f43f af00 	beq.w	80048ac <_strtod_l+0x434>
 8004aac:	9a07      	ldr	r2, [sp, #28]
 8004aae:	9b07      	ldr	r3, [sp, #28]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	f1c3 0300 	rsb	r3, r3, #0
 8004ab6:	bfa8      	it	ge
 8004ab8:	2300      	movge	r3, #0
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	930e      	str	r3, [sp, #56]	; 0x38
 8004ac0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004ac4:	9316      	str	r3, [sp, #88]	; 0x58
 8004ac6:	f8cd 8010 	str.w	r8, [sp, #16]
 8004aca:	9b08      	ldr	r3, [sp, #32]
 8004acc:	4658      	mov	r0, fp
 8004ace:	6859      	ldr	r1, [r3, #4]
 8004ad0:	f001 ff67 	bl	80069a2 <_Balloc>
 8004ad4:	9006      	str	r0, [sp, #24]
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	f43f aef0 	beq.w	80048bc <_strtod_l+0x444>
 8004adc:	9b08      	ldr	r3, [sp, #32]
 8004ade:	300c      	adds	r0, #12
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	f103 010c 	add.w	r1, r3, #12
 8004ae6:	3202      	adds	r2, #2
 8004ae8:	0092      	lsls	r2, r2, #2
 8004aea:	f7fe fe9f 	bl	800382c <memcpy>
 8004aee:	ab1e      	add	r3, sp, #120	; 0x78
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	ab1d      	add	r3, sp, #116	; 0x74
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	464a      	mov	r2, r9
 8004af8:	4653      	mov	r3, sl
 8004afa:	4658      	mov	r0, fp
 8004afc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004b00:	f002 fa90 	bl	8007024 <__d2b>
 8004b04:	901c      	str	r0, [sp, #112]	; 0x70
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f43f aed8 	beq.w	80048bc <_strtod_l+0x444>
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	4658      	mov	r0, fp
 8004b10:	f002 f859 	bl	8006bc6 <__i2b>
 8004b14:	9004      	str	r0, [sp, #16]
 8004b16:	4603      	mov	r3, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f43f aecf 	beq.w	80048bc <_strtod_l+0x444>
 8004b1e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004b20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	bfab      	itete	ge
 8004b26:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b28:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b2a:	18ee      	addge	r6, r5, r3
 8004b2c:	1b5c      	sublt	r4, r3, r5
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	bfa8      	it	ge
 8004b32:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004b34:	eba5 0503 	sub.w	r5, r5, r3
 8004b38:	4415      	add	r5, r2
 8004b3a:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <_strtod_l+0x854>)
 8004b3c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004b40:	bfb8      	it	lt
 8004b42:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b44:	429d      	cmp	r5, r3
 8004b46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b4a:	f280 80af 	bge.w	8004cac <_strtod_l+0x834>
 8004b4e:	1b5b      	subs	r3, r3, r5
 8004b50:	2b1f      	cmp	r3, #31
 8004b52:	eba2 0203 	sub.w	r2, r2, r3
 8004b56:	f04f 0701 	mov.w	r7, #1
 8004b5a:	f300 809c 	bgt.w	8004c96 <_strtod_l+0x81e>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	fa07 f303 	lsl.w	r3, r7, r3
 8004b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b66:	18b7      	adds	r7, r6, r2
 8004b68:	9b05      	ldr	r3, [sp, #20]
 8004b6a:	42be      	cmp	r6, r7
 8004b6c:	4414      	add	r4, r2
 8004b6e:	441c      	add	r4, r3
 8004b70:	4633      	mov	r3, r6
 8004b72:	bfa8      	it	ge
 8004b74:	463b      	movge	r3, r7
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	bfa8      	it	ge
 8004b7a:	4623      	movge	r3, r4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bfc2      	ittt	gt
 8004b80:	1aff      	subgt	r7, r7, r3
 8004b82:	1ae4      	subgt	r4, r4, r3
 8004b84:	1af6      	subgt	r6, r6, r3
 8004b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b88:	b1bb      	cbz	r3, 8004bba <_strtod_l+0x742>
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	9904      	ldr	r1, [sp, #16]
 8004b8e:	4658      	mov	r0, fp
 8004b90:	f002 f8b8 	bl	8006d04 <__pow5mult>
 8004b94:	9004      	str	r0, [sp, #16]
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f43f ae90 	beq.w	80048bc <_strtod_l+0x444>
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ba0:	4658      	mov	r0, fp
 8004ba2:	f002 f819 	bl	8006bd8 <__multiply>
 8004ba6:	9009      	str	r0, [sp, #36]	; 0x24
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	f43f ae87 	beq.w	80048bc <_strtod_l+0x444>
 8004bae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004bb0:	4658      	mov	r0, fp
 8004bb2:	f001 ff2a 	bl	8006a0a <_Bfree>
 8004bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb8:	931c      	str	r3, [sp, #112]	; 0x70
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	dc7a      	bgt.n	8004cb4 <_strtod_l+0x83c>
 8004bbe:	9b07      	ldr	r3, [sp, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	dd08      	ble.n	8004bd6 <_strtod_l+0x75e>
 8004bc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004bc6:	9906      	ldr	r1, [sp, #24]
 8004bc8:	4658      	mov	r0, fp
 8004bca:	f002 f89b 	bl	8006d04 <__pow5mult>
 8004bce:	9006      	str	r0, [sp, #24]
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f43f ae73 	beq.w	80048bc <_strtod_l+0x444>
 8004bd6:	2c00      	cmp	r4, #0
 8004bd8:	dd08      	ble.n	8004bec <_strtod_l+0x774>
 8004bda:	4622      	mov	r2, r4
 8004bdc:	9906      	ldr	r1, [sp, #24]
 8004bde:	4658      	mov	r0, fp
 8004be0:	f002 f8de 	bl	8006da0 <__lshift>
 8004be4:	9006      	str	r0, [sp, #24]
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f43f ae68 	beq.w	80048bc <_strtod_l+0x444>
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	dd08      	ble.n	8004c02 <_strtod_l+0x78a>
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	9904      	ldr	r1, [sp, #16]
 8004bf4:	4658      	mov	r0, fp
 8004bf6:	f002 f8d3 	bl	8006da0 <__lshift>
 8004bfa:	9004      	str	r0, [sp, #16]
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f43f ae5d 	beq.w	80048bc <_strtod_l+0x444>
 8004c02:	9a06      	ldr	r2, [sp, #24]
 8004c04:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c06:	4658      	mov	r0, fp
 8004c08:	f002 f938 	bl	8006e7c <__mdiff>
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f43f ae54 	beq.w	80048bc <_strtod_l+0x444>
 8004c14:	2400      	movs	r4, #0
 8004c16:	68c3      	ldr	r3, [r0, #12]
 8004c18:	9904      	ldr	r1, [sp, #16]
 8004c1a:	60c4      	str	r4, [r0, #12]
 8004c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8004c1e:	f002 f913 	bl	8006e48 <__mcmp>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	da54      	bge.n	8004cd0 <_strtod_l+0x858>
 8004c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c28:	b9f3      	cbnz	r3, 8004c68 <_strtod_l+0x7f0>
 8004c2a:	f1b9 0f00 	cmp.w	r9, #0
 8004c2e:	d11b      	bne.n	8004c68 <_strtod_l+0x7f0>
 8004c30:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004c34:	b9c3      	cbnz	r3, 8004c68 <_strtod_l+0x7f0>
 8004c36:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c3a:	0d1b      	lsrs	r3, r3, #20
 8004c3c:	051b      	lsls	r3, r3, #20
 8004c3e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c42:	d911      	bls.n	8004c68 <_strtod_l+0x7f0>
 8004c44:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004c48:	b91b      	cbnz	r3, 8004c52 <_strtod_l+0x7da>
 8004c4a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	dd0a      	ble.n	8004c68 <_strtod_l+0x7f0>
 8004c52:	4641      	mov	r1, r8
 8004c54:	2201      	movs	r2, #1
 8004c56:	4658      	mov	r0, fp
 8004c58:	f002 f8a2 	bl	8006da0 <__lshift>
 8004c5c:	9904      	ldr	r1, [sp, #16]
 8004c5e:	4680      	mov	r8, r0
 8004c60:	f002 f8f2 	bl	8006e48 <__mcmp>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dc68      	bgt.n	8004d3a <_strtod_l+0x8c2>
 8004c68:	9b05      	ldr	r3, [sp, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d172      	bne.n	8004d54 <_strtod_l+0x8dc>
 8004c6e:	e630      	b.n	80048d2 <_strtod_l+0x45a>
 8004c70:	f018 0f01 	tst.w	r8, #1
 8004c74:	d004      	beq.n	8004c80 <_strtod_l+0x808>
 8004c76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c7a:	f7fb fc47 	bl	800050c <__aeabi_dmul>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004c84:	3508      	adds	r5, #8
 8004c86:	e6dc      	b.n	8004a42 <_strtod_l+0x5ca>
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	ea03 0909 	and.w	r9, r3, r9
 8004c94:	e6f6      	b.n	8004a84 <_strtod_l+0x60c>
 8004c96:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004c9a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004c9e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004ca2:	35e2      	adds	r5, #226	; 0xe2
 8004ca4:	fa07 f505 	lsl.w	r5, r7, r5
 8004ca8:	970f      	str	r7, [sp, #60]	; 0x3c
 8004caa:	e75c      	b.n	8004b66 <_strtod_l+0x6ee>
 8004cac:	2301      	movs	r3, #1
 8004cae:	2500      	movs	r5, #0
 8004cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cb2:	e758      	b.n	8004b66 <_strtod_l+0x6ee>
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004cb8:	4658      	mov	r0, fp
 8004cba:	f002 f871 	bl	8006da0 <__lshift>
 8004cbe:	901c      	str	r0, [sp, #112]	; 0x70
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f47f af7c 	bne.w	8004bbe <_strtod_l+0x746>
 8004cc6:	e5f9      	b.n	80048bc <_strtod_l+0x444>
 8004cc8:	08007c88 	.word	0x08007c88
 8004ccc:	fffffc02 	.word	0xfffffc02
 8004cd0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004cd4:	f040 8089 	bne.w	8004dea <_strtod_l+0x972>
 8004cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cda:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004cde:	b342      	cbz	r2, 8004d32 <_strtod_l+0x8ba>
 8004ce0:	4aaf      	ldr	r2, [pc, #700]	; (8004fa0 <_strtod_l+0xb28>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d156      	bne.n	8004d94 <_strtod_l+0x91c>
 8004ce6:	9b05      	ldr	r3, [sp, #20]
 8004ce8:	4648      	mov	r0, r9
 8004cea:	b1eb      	cbz	r3, 8004d28 <_strtod_l+0x8b0>
 8004cec:	4653      	mov	r3, sl
 8004cee:	4aad      	ldr	r2, [pc, #692]	; (8004fa4 <_strtod_l+0xb2c>)
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004cfa:	d818      	bhi.n	8004d2e <_strtod_l+0x8b6>
 8004cfc:	0d12      	lsrs	r2, r2, #20
 8004cfe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	4298      	cmp	r0, r3
 8004d08:	d144      	bne.n	8004d94 <_strtod_l+0x91c>
 8004d0a:	4ba7      	ldr	r3, [pc, #668]	; (8004fa8 <_strtod_l+0xb30>)
 8004d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d102      	bne.n	8004d18 <_strtod_l+0x8a0>
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f add2 	beq.w	80048bc <_strtod_l+0x444>
 8004d18:	4ba2      	ldr	r3, [pc, #648]	; (8004fa4 <_strtod_l+0xb2c>)
 8004d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d1c:	f04f 0900 	mov.w	r9, #0
 8004d20:	401a      	ands	r2, r3
 8004d22:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004d26:	e79f      	b.n	8004c68 <_strtod_l+0x7f0>
 8004d28:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2c:	e7eb      	b.n	8004d06 <_strtod_l+0x88e>
 8004d2e:	460b      	mov	r3, r1
 8004d30:	e7e9      	b.n	8004d06 <_strtod_l+0x88e>
 8004d32:	bb7b      	cbnz	r3, 8004d94 <_strtod_l+0x91c>
 8004d34:	f1b9 0f00 	cmp.w	r9, #0
 8004d38:	d12c      	bne.n	8004d94 <_strtod_l+0x91c>
 8004d3a:	9905      	ldr	r1, [sp, #20]
 8004d3c:	4653      	mov	r3, sl
 8004d3e:	4a99      	ldr	r2, [pc, #612]	; (8004fa4 <_strtod_l+0xb2c>)
 8004d40:	b1f1      	cbz	r1, 8004d80 <_strtod_l+0x908>
 8004d42:	ea02 010a 	and.w	r1, r2, sl
 8004d46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004d4a:	dc19      	bgt.n	8004d80 <_strtod_l+0x908>
 8004d4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004d50:	f77f ae51 	ble.w	80049f6 <_strtod_l+0x57e>
 8004d54:	2300      	movs	r3, #0
 8004d56:	4a95      	ldr	r2, [pc, #596]	; (8004fac <_strtod_l+0xb34>)
 8004d58:	4648      	mov	r0, r9
 8004d5a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004d5e:	4651      	mov	r1, sl
 8004d60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004d64:	f7fb fbd2 	bl	800050c <__aeabi_dmul>
 8004d68:	4681      	mov	r9, r0
 8004d6a:	468a      	mov	sl, r1
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	f47f adb0 	bne.w	80048d2 <_strtod_l+0x45a>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f47f adad 	bne.w	80048d2 <_strtod_l+0x45a>
 8004d78:	2322      	movs	r3, #34	; 0x22
 8004d7a:	f8cb 3000 	str.w	r3, [fp]
 8004d7e:	e5a8      	b.n	80048d2 <_strtod_l+0x45a>
 8004d80:	4013      	ands	r3, r2
 8004d82:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004d86:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004d8a:	f04f 39ff 	mov.w	r9, #4294967295
 8004d8e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004d92:	e769      	b.n	8004c68 <_strtod_l+0x7f0>
 8004d94:	b19d      	cbz	r5, 8004dbe <_strtod_l+0x946>
 8004d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d98:	421d      	tst	r5, r3
 8004d9a:	f43f af65 	beq.w	8004c68 <_strtod_l+0x7f0>
 8004d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004da0:	9a05      	ldr	r2, [sp, #20]
 8004da2:	4648      	mov	r0, r9
 8004da4:	4651      	mov	r1, sl
 8004da6:	b173      	cbz	r3, 8004dc6 <_strtod_l+0x94e>
 8004da8:	f7ff fb43 	bl	8004432 <sulp>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db4:	f7fb f9f4 	bl	80001a0 <__adddf3>
 8004db8:	4681      	mov	r9, r0
 8004dba:	468a      	mov	sl, r1
 8004dbc:	e754      	b.n	8004c68 <_strtod_l+0x7f0>
 8004dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc0:	ea13 0f09 	tst.w	r3, r9
 8004dc4:	e7e9      	b.n	8004d9a <_strtod_l+0x922>
 8004dc6:	f7ff fb34 	bl	8004432 <sulp>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dd2:	f7fb f9e3 	bl	800019c <__aeabi_dsub>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4681      	mov	r9, r0
 8004ddc:	468a      	mov	sl, r1
 8004dde:	f7fb fdfd 	bl	80009dc <__aeabi_dcmpeq>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	f47f ae07 	bne.w	80049f6 <_strtod_l+0x57e>
 8004de8:	e73e      	b.n	8004c68 <_strtod_l+0x7f0>
 8004dea:	9904      	ldr	r1, [sp, #16]
 8004dec:	4640      	mov	r0, r8
 8004dee:	f002 f968 	bl	80070c2 <__ratio>
 8004df2:	2200      	movs	r2, #0
 8004df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df8:	4606      	mov	r6, r0
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	f7fb fe02 	bl	8000a04 <__aeabi_dcmple>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d075      	beq.n	8004ef0 <_strtod_l+0xa78>
 8004e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d047      	beq.n	8004e9a <_strtod_l+0xa22>
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	4f68      	ldr	r7, [pc, #416]	; (8004fb0 <_strtod_l+0xb38>)
 8004e0e:	4d68      	ldr	r5, [pc, #416]	; (8004fb0 <_strtod_l+0xb38>)
 8004e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	0d1b      	lsrs	r3, r3, #20
 8004e18:	051b      	lsls	r3, r3, #20
 8004e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e1e:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <_strtod_l+0xb3c>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	f040 80cf 	bne.w	8004fc4 <_strtod_l+0xb4c>
 8004e26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e2a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e30:	4648      	mov	r0, r9
 8004e32:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004e36:	4651      	mov	r1, sl
 8004e38:	f002 f87e 	bl	8006f38 <__ulp>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4630      	mov	r0, r6
 8004e42:	4639      	mov	r1, r7
 8004e44:	f7fb fb62 	bl	800050c <__aeabi_dmul>
 8004e48:	464a      	mov	r2, r9
 8004e4a:	4653      	mov	r3, sl
 8004e4c:	f7fb f9a8 	bl	80001a0 <__adddf3>
 8004e50:	460b      	mov	r3, r1
 8004e52:	4954      	ldr	r1, [pc, #336]	; (8004fa4 <_strtod_l+0xb2c>)
 8004e54:	4a58      	ldr	r2, [pc, #352]	; (8004fb8 <_strtod_l+0xb40>)
 8004e56:	4019      	ands	r1, r3
 8004e58:	4291      	cmp	r1, r2
 8004e5a:	4681      	mov	r9, r0
 8004e5c:	d95e      	bls.n	8004f1c <_strtod_l+0xaa4>
 8004e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <_strtod_l+0x9f8>
 8004e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f43f ad26 	beq.w	80048bc <_strtod_l+0x444>
 8004e70:	f04f 39ff 	mov.w	r9, #4294967295
 8004e74:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004fa8 <_strtod_l+0xb30>
 8004e78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e7a:	4658      	mov	r0, fp
 8004e7c:	f001 fdc5 	bl	8006a0a <_Bfree>
 8004e80:	9906      	ldr	r1, [sp, #24]
 8004e82:	4658      	mov	r0, fp
 8004e84:	f001 fdc1 	bl	8006a0a <_Bfree>
 8004e88:	9904      	ldr	r1, [sp, #16]
 8004e8a:	4658      	mov	r0, fp
 8004e8c:	f001 fdbd 	bl	8006a0a <_Bfree>
 8004e90:	4641      	mov	r1, r8
 8004e92:	4658      	mov	r0, fp
 8004e94:	f001 fdb9 	bl	8006a0a <_Bfree>
 8004e98:	e617      	b.n	8004aca <_strtod_l+0x652>
 8004e9a:	f1b9 0f00 	cmp.w	r9, #0
 8004e9e:	d119      	bne.n	8004ed4 <_strtod_l+0xa5c>
 8004ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea6:	b9e3      	cbnz	r3, 8004ee2 <_strtod_l+0xa6a>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <_strtod_l+0xb38>)
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fd9e 	bl	80009f0 <__aeabi_dcmplt>
 8004eb4:	b9c8      	cbnz	r0, 8004eea <_strtod_l+0xa72>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4b40      	ldr	r3, [pc, #256]	; (8004fbc <_strtod_l+0xb44>)
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fb25 	bl	800050c <__aeabi_dmul>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	460d      	mov	r5, r1
 8004ec6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004eca:	9418      	str	r4, [sp, #96]	; 0x60
 8004ecc:	9319      	str	r3, [sp, #100]	; 0x64
 8004ece:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004ed2:	e79d      	b.n	8004e10 <_strtod_l+0x998>
 8004ed4:	f1b9 0f01 	cmp.w	r9, #1
 8004ed8:	d103      	bne.n	8004ee2 <_strtod_l+0xa6a>
 8004eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f43f ad8a 	beq.w	80049f6 <_strtod_l+0x57e>
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	4f36      	ldr	r7, [pc, #216]	; (8004fc0 <_strtod_l+0xb48>)
 8004ee6:	2400      	movs	r4, #0
 8004ee8:	e791      	b.n	8004e0e <_strtod_l+0x996>
 8004eea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004eec:	4d33      	ldr	r5, [pc, #204]	; (8004fbc <_strtod_l+0xb44>)
 8004eee:	e7ea      	b.n	8004ec6 <_strtod_l+0xa4e>
 8004ef0:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <_strtod_l+0xb44>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f7fb fb08 	bl	800050c <__aeabi_dmul>
 8004efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004efe:	4604      	mov	r4, r0
 8004f00:	460d      	mov	r5, r1
 8004f02:	b933      	cbnz	r3, 8004f12 <_strtod_l+0xa9a>
 8004f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f08:	9010      	str	r0, [sp, #64]	; 0x40
 8004f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f0c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f10:	e77e      	b.n	8004e10 <_strtod_l+0x998>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004f1a:	e7f7      	b.n	8004f0c <_strtod_l+0xa94>
 8004f1c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1a8      	bne.n	8004e78 <_strtod_l+0xa00>
 8004f26:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f2a:	0d1b      	lsrs	r3, r3, #20
 8004f2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	429a      	cmp	r2, r3
 8004f32:	4656      	mov	r6, sl
 8004f34:	d1a0      	bne.n	8004e78 <_strtod_l+0xa00>
 8004f36:	4629      	mov	r1, r5
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7fb fd97 	bl	8000a6c <__aeabi_d2iz>
 8004f3e:	f7fb fa7b 	bl	8000438 <__aeabi_i2d>
 8004f42:	460b      	mov	r3, r1
 8004f44:	4602      	mov	r2, r0
 8004f46:	4629      	mov	r1, r5
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f7fb f927 	bl	800019c <__aeabi_dsub>
 8004f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	b933      	cbnz	r3, 8004f64 <_strtod_l+0xaec>
 8004f56:	f1b9 0f00 	cmp.w	r9, #0
 8004f5a:	d103      	bne.n	8004f64 <_strtod_l+0xaec>
 8004f5c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	d06a      	beq.n	800503a <_strtod_l+0xbc2>
 8004f64:	a30a      	add	r3, pc, #40	; (adr r3, 8004f90 <_strtod_l+0xb18>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb fd3f 	bl	80009f0 <__aeabi_dcmplt>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	f47f acad 	bne.w	80048d2 <_strtod_l+0x45a>
 8004f78:	a307      	add	r3, pc, #28	; (adr r3, 8004f98 <_strtod_l+0xb20>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb fd53 	bl	8000a2c <__aeabi_dcmpgt>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	f43f af76 	beq.w	8004e78 <_strtod_l+0xa00>
 8004f8c:	e4a1      	b.n	80048d2 <_strtod_l+0x45a>
 8004f8e:	bf00      	nop
 8004f90:	94a03595 	.word	0x94a03595
 8004f94:	3fdfffff 	.word	0x3fdfffff
 8004f98:	35afe535 	.word	0x35afe535
 8004f9c:	3fe00000 	.word	0x3fe00000
 8004fa0:	000fffff 	.word	0x000fffff
 8004fa4:	7ff00000 	.word	0x7ff00000
 8004fa8:	7fefffff 	.word	0x7fefffff
 8004fac:	39500000 	.word	0x39500000
 8004fb0:	3ff00000 	.word	0x3ff00000
 8004fb4:	7fe00000 	.word	0x7fe00000
 8004fb8:	7c9fffff 	.word	0x7c9fffff
 8004fbc:	3fe00000 	.word	0x3fe00000
 8004fc0:	bff00000 	.word	0xbff00000
 8004fc4:	9b05      	ldr	r3, [sp, #20]
 8004fc6:	b313      	cbz	r3, 800500e <_strtod_l+0xb96>
 8004fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fce:	d81e      	bhi.n	800500e <_strtod_l+0xb96>
 8004fd0:	a325      	add	r3, pc, #148	; (adr r3, 8005068 <_strtod_l+0xbf0>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb fd13 	bl	8000a04 <__aeabi_dcmple>
 8004fde:	b190      	cbz	r0, 8005006 <_strtod_l+0xb8e>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7fb fd6a 	bl	8000abc <__aeabi_d2uiz>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	bf08      	it	eq
 8004fec:	2001      	moveq	r0, #1
 8004fee:	f7fb fa13 	bl	8000418 <__aeabi_ui2d>
 8004ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	b9d3      	cbnz	r3, 8005030 <_strtod_l+0xbb8>
 8004ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ffe:	9012      	str	r0, [sp, #72]	; 0x48
 8005000:	9313      	str	r3, [sp, #76]	; 0x4c
 8005002:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005008:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800500c:	1a9f      	subs	r7, r3, r2
 800500e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005012:	f001 ff91 	bl	8006f38 <__ulp>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb fa75 	bl	800050c <__aeabi_dmul>
 8005022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005026:	f7fb f8bb 	bl	80001a0 <__adddf3>
 800502a:	4681      	mov	r9, r0
 800502c:	468a      	mov	sl, r1
 800502e:	e777      	b.n	8004f20 <_strtod_l+0xaa8>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005038:	e7e3      	b.n	8005002 <_strtod_l+0xb8a>
 800503a:	a30d      	add	r3, pc, #52	; (adr r3, 8005070 <_strtod_l+0xbf8>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb fcd6 	bl	80009f0 <__aeabi_dcmplt>
 8005044:	e79f      	b.n	8004f86 <_strtod_l+0xb0e>
 8005046:	2300      	movs	r3, #0
 8005048:	930d      	str	r3, [sp, #52]	; 0x34
 800504a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800504c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	f7ff ba55 	b.w	80044fe <_strtod_l+0x86>
 8005054:	2b65      	cmp	r3, #101	; 0x65
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f43f ab42 	beq.w	80046e2 <_strtod_l+0x26a>
 800505e:	2101      	movs	r1, #1
 8005060:	4614      	mov	r4, r2
 8005062:	9105      	str	r1, [sp, #20]
 8005064:	f7ff babf 	b.w	80045e6 <_strtod_l+0x16e>
 8005068:	ffc00000 	.word	0xffc00000
 800506c:	41dfffff 	.word	0x41dfffff
 8005070:	94a03595 	.word	0x94a03595
 8005074:	3fcfffff 	.word	0x3fcfffff

08005078 <strtod>:
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <strtod+0x1c>)
 800507a:	b410      	push	{r4}
 800507c:	681c      	ldr	r4, [r3, #0]
 800507e:	4a06      	ldr	r2, [pc, #24]	; (8005098 <strtod+0x20>)
 8005080:	6a23      	ldr	r3, [r4, #32]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bf08      	it	eq
 8005086:	4613      	moveq	r3, r2
 8005088:	460a      	mov	r2, r1
 800508a:	4601      	mov	r1, r0
 800508c:	4620      	mov	r0, r4
 800508e:	bc10      	pop	{r4}
 8005090:	f7ff b9f2 	b.w	8004478 <_strtod_l>
 8005094:	20000010 	.word	0x20000010
 8005098:	20000074 	.word	0x20000074

0800509c <__swbuf_r>:
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509e:	460e      	mov	r6, r1
 80050a0:	4614      	mov	r4, r2
 80050a2:	4605      	mov	r5, r0
 80050a4:	b118      	cbz	r0, 80050ae <__swbuf_r+0x12>
 80050a6:	6983      	ldr	r3, [r0, #24]
 80050a8:	b90b      	cbnz	r3, 80050ae <__swbuf_r+0x12>
 80050aa:	f001 f819 	bl	80060e0 <__sinit>
 80050ae:	4b21      	ldr	r3, [pc, #132]	; (8005134 <__swbuf_r+0x98>)
 80050b0:	429c      	cmp	r4, r3
 80050b2:	d12a      	bne.n	800510a <__swbuf_r+0x6e>
 80050b4:	686c      	ldr	r4, [r5, #4]
 80050b6:	69a3      	ldr	r3, [r4, #24]
 80050b8:	60a3      	str	r3, [r4, #8]
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	071a      	lsls	r2, r3, #28
 80050be:	d52e      	bpl.n	800511e <__swbuf_r+0x82>
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	b363      	cbz	r3, 800511e <__swbuf_r+0x82>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	b2f6      	uxtb	r6, r6
 80050ca:	1ac0      	subs	r0, r0, r3
 80050cc:	6963      	ldr	r3, [r4, #20]
 80050ce:	4637      	mov	r7, r6
 80050d0:	4283      	cmp	r3, r0
 80050d2:	dc04      	bgt.n	80050de <__swbuf_r+0x42>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 ff98 	bl	800600c <_fflush_r>
 80050dc:	bb28      	cbnz	r0, 800512a <__swbuf_r+0x8e>
 80050de:	68a3      	ldr	r3, [r4, #8]
 80050e0:	3001      	adds	r0, #1
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60a3      	str	r3, [r4, #8]
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	6022      	str	r2, [r4, #0]
 80050ec:	701e      	strb	r6, [r3, #0]
 80050ee:	6963      	ldr	r3, [r4, #20]
 80050f0:	4283      	cmp	r3, r0
 80050f2:	d004      	beq.n	80050fe <__swbuf_r+0x62>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	07db      	lsls	r3, r3, #31
 80050f8:	d519      	bpl.n	800512e <__swbuf_r+0x92>
 80050fa:	2e0a      	cmp	r6, #10
 80050fc:	d117      	bne.n	800512e <__swbuf_r+0x92>
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 ff83 	bl	800600c <_fflush_r>
 8005106:	b190      	cbz	r0, 800512e <__swbuf_r+0x92>
 8005108:	e00f      	b.n	800512a <__swbuf_r+0x8e>
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <__swbuf_r+0x9c>)
 800510c:	429c      	cmp	r4, r3
 800510e:	d101      	bne.n	8005114 <__swbuf_r+0x78>
 8005110:	68ac      	ldr	r4, [r5, #8]
 8005112:	e7d0      	b.n	80050b6 <__swbuf_r+0x1a>
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <__swbuf_r+0xa0>)
 8005116:	429c      	cmp	r4, r3
 8005118:	bf08      	it	eq
 800511a:	68ec      	ldreq	r4, [r5, #12]
 800511c:	e7cb      	b.n	80050b6 <__swbuf_r+0x1a>
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f82d 	bl	8005180 <__swsetup_r>
 8005126:	2800      	cmp	r0, #0
 8005128:	d0cc      	beq.n	80050c4 <__swbuf_r+0x28>
 800512a:	f04f 37ff 	mov.w	r7, #4294967295
 800512e:	4638      	mov	r0, r7
 8005130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005132:	bf00      	nop
 8005134:	08007de0 	.word	0x08007de0
 8005138:	08007e00 	.word	0x08007e00
 800513c:	08007dc0 	.word	0x08007dc0

08005140 <__ascii_wctomb>:
 8005140:	b149      	cbz	r1, 8005156 <__ascii_wctomb+0x16>
 8005142:	2aff      	cmp	r2, #255	; 0xff
 8005144:	bf8b      	itete	hi
 8005146:	238a      	movhi	r3, #138	; 0x8a
 8005148:	700a      	strbls	r2, [r1, #0]
 800514a:	6003      	strhi	r3, [r0, #0]
 800514c:	2001      	movls	r0, #1
 800514e:	bf88      	it	hi
 8005150:	f04f 30ff 	movhi.w	r0, #4294967295
 8005154:	4770      	bx	lr
 8005156:	4608      	mov	r0, r1
 8005158:	4770      	bx	lr
	...

0800515c <_write_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4605      	mov	r5, r0
 8005160:	4608      	mov	r0, r1
 8005162:	4611      	mov	r1, r2
 8005164:	2200      	movs	r2, #0
 8005166:	4c05      	ldr	r4, [pc, #20]	; (800517c <_write_r+0x20>)
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f7fe fa57 	bl	800361e <_write>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_write_r+0x1e>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	b103      	cbz	r3, 800517a <_write_r+0x1e>
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	200006b0 	.word	0x200006b0

08005180 <__swsetup_r>:
 8005180:	4b32      	ldr	r3, [pc, #200]	; (800524c <__swsetup_r+0xcc>)
 8005182:	b570      	push	{r4, r5, r6, lr}
 8005184:	681d      	ldr	r5, [r3, #0]
 8005186:	4606      	mov	r6, r0
 8005188:	460c      	mov	r4, r1
 800518a:	b125      	cbz	r5, 8005196 <__swsetup_r+0x16>
 800518c:	69ab      	ldr	r3, [r5, #24]
 800518e:	b913      	cbnz	r3, 8005196 <__swsetup_r+0x16>
 8005190:	4628      	mov	r0, r5
 8005192:	f000 ffa5 	bl	80060e0 <__sinit>
 8005196:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <__swsetup_r+0xd0>)
 8005198:	429c      	cmp	r4, r3
 800519a:	d10f      	bne.n	80051bc <__swsetup_r+0x3c>
 800519c:	686c      	ldr	r4, [r5, #4]
 800519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	0715      	lsls	r5, r2, #28
 80051a6:	d42c      	bmi.n	8005202 <__swsetup_r+0x82>
 80051a8:	06d0      	lsls	r0, r2, #27
 80051aa:	d411      	bmi.n	80051d0 <__swsetup_r+0x50>
 80051ac:	2209      	movs	r2, #9
 80051ae:	6032      	str	r2, [r6, #0]
 80051b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ba:	e03e      	b.n	800523a <__swsetup_r+0xba>
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <__swsetup_r+0xd4>)
 80051be:	429c      	cmp	r4, r3
 80051c0:	d101      	bne.n	80051c6 <__swsetup_r+0x46>
 80051c2:	68ac      	ldr	r4, [r5, #8]
 80051c4:	e7eb      	b.n	800519e <__swsetup_r+0x1e>
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <__swsetup_r+0xd8>)
 80051c8:	429c      	cmp	r4, r3
 80051ca:	bf08      	it	eq
 80051cc:	68ec      	ldreq	r4, [r5, #12]
 80051ce:	e7e6      	b.n	800519e <__swsetup_r+0x1e>
 80051d0:	0751      	lsls	r1, r2, #29
 80051d2:	d512      	bpl.n	80051fa <__swsetup_r+0x7a>
 80051d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d6:	b141      	cbz	r1, 80051ea <__swsetup_r+0x6a>
 80051d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051dc:	4299      	cmp	r1, r3
 80051de:	d002      	beq.n	80051e6 <__swsetup_r+0x66>
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7fe fb37 	bl	8003854 <_free_r>
 80051e6:	2300      	movs	r3, #0
 80051e8:	6363      	str	r3, [r4, #52]	; 0x34
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051f0:	81a3      	strh	r3, [r4, #12]
 80051f2:	2300      	movs	r3, #0
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	f043 0308 	orr.w	r3, r3, #8
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	b94b      	cbnz	r3, 800521a <__swsetup_r+0x9a>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d003      	beq.n	800521a <__swsetup_r+0x9a>
 8005212:	4621      	mov	r1, r4
 8005214:	4630      	mov	r0, r6
 8005216:	f001 fb5b 	bl	80068d0 <__smakebuf_r>
 800521a:	89a2      	ldrh	r2, [r4, #12]
 800521c:	f012 0301 	ands.w	r3, r2, #1
 8005220:	d00c      	beq.n	800523c <__swsetup_r+0xbc>
 8005222:	2300      	movs	r3, #0
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	6963      	ldr	r3, [r4, #20]
 8005228:	425b      	negs	r3, r3
 800522a:	61a3      	str	r3, [r4, #24]
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	b953      	cbnz	r3, 8005246 <__swsetup_r+0xc6>
 8005230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005234:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005238:	d1ba      	bne.n	80051b0 <__swsetup_r+0x30>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	0792      	lsls	r2, r2, #30
 800523e:	bf58      	it	pl
 8005240:	6963      	ldrpl	r3, [r4, #20]
 8005242:	60a3      	str	r3, [r4, #8]
 8005244:	e7f2      	b.n	800522c <__swsetup_r+0xac>
 8005246:	2000      	movs	r0, #0
 8005248:	e7f7      	b.n	800523a <__swsetup_r+0xba>
 800524a:	bf00      	nop
 800524c:	20000010 	.word	0x20000010
 8005250:	08007de0 	.word	0x08007de0
 8005254:	08007e00 	.word	0x08007e00
 8005258:	08007dc0 	.word	0x08007dc0

0800525c <_close_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	2300      	movs	r3, #0
 8005260:	4c05      	ldr	r4, [pc, #20]	; (8005278 <_close_r+0x1c>)
 8005262:	4605      	mov	r5, r0
 8005264:	4608      	mov	r0, r1
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	f7fe f9f5 	bl	8003656 <_close>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_close_r+0x1a>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	b103      	cbz	r3, 8005276 <_close_r+0x1a>
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	200006b0 	.word	0x200006b0

0800527c <quorem>:
 800527c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	6903      	ldr	r3, [r0, #16]
 8005282:	690c      	ldr	r4, [r1, #16]
 8005284:	4680      	mov	r8, r0
 8005286:	42a3      	cmp	r3, r4
 8005288:	f2c0 8084 	blt.w	8005394 <quorem+0x118>
 800528c:	3c01      	subs	r4, #1
 800528e:	f101 0714 	add.w	r7, r1, #20
 8005292:	f100 0614 	add.w	r6, r0, #20
 8005296:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800529a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800529e:	3501      	adds	r5, #1
 80052a0:	fbb0 f5f5 	udiv	r5, r0, r5
 80052a4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052a8:	eb06 030c 	add.w	r3, r6, ip
 80052ac:	eb07 090c 	add.w	r9, r7, ip
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	b39d      	cbz	r5, 800531c <quorem+0xa0>
 80052b4:	f04f 0a00 	mov.w	sl, #0
 80052b8:	4638      	mov	r0, r7
 80052ba:	46b6      	mov	lr, r6
 80052bc:	46d3      	mov	fp, sl
 80052be:	f850 2b04 	ldr.w	r2, [r0], #4
 80052c2:	b293      	uxth	r3, r2
 80052c4:	fb05 a303 	mla	r3, r5, r3, sl
 80052c8:	0c12      	lsrs	r2, r2, #16
 80052ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052ce:	fb05 a202 	mla	r2, r5, r2, sl
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ebab 0303 	sub.w	r3, fp, r3
 80052d8:	f8de b000 	ldr.w	fp, [lr]
 80052dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052e0:	fa1f fb8b 	uxth.w	fp, fp
 80052e4:	445b      	add	r3, fp
 80052e6:	fa1f fb82 	uxth.w	fp, r2
 80052ea:	f8de 2000 	ldr.w	r2, [lr]
 80052ee:	4581      	cmp	r9, r0
 80052f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80052f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005302:	f84e 3b04 	str.w	r3, [lr], #4
 8005306:	d2da      	bcs.n	80052be <quorem+0x42>
 8005308:	f856 300c 	ldr.w	r3, [r6, ip]
 800530c:	b933      	cbnz	r3, 800531c <quorem+0xa0>
 800530e:	9b01      	ldr	r3, [sp, #4]
 8005310:	3b04      	subs	r3, #4
 8005312:	429e      	cmp	r6, r3
 8005314:	461a      	mov	r2, r3
 8005316:	d331      	bcc.n	800537c <quorem+0x100>
 8005318:	f8c8 4010 	str.w	r4, [r8, #16]
 800531c:	4640      	mov	r0, r8
 800531e:	f001 fd93 	bl	8006e48 <__mcmp>
 8005322:	2800      	cmp	r0, #0
 8005324:	db26      	blt.n	8005374 <quorem+0xf8>
 8005326:	4630      	mov	r0, r6
 8005328:	f04f 0c00 	mov.w	ip, #0
 800532c:	3501      	adds	r5, #1
 800532e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005332:	f8d0 e000 	ldr.w	lr, [r0]
 8005336:	b28b      	uxth	r3, r1
 8005338:	ebac 0303 	sub.w	r3, ip, r3
 800533c:	fa1f f28e 	uxth.w	r2, lr
 8005340:	4413      	add	r3, r2
 8005342:	0c0a      	lsrs	r2, r1, #16
 8005344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005352:	45b9      	cmp	r9, r7
 8005354:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005358:	f840 3b04 	str.w	r3, [r0], #4
 800535c:	d2e7      	bcs.n	800532e <quorem+0xb2>
 800535e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005362:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005366:	b92a      	cbnz	r2, 8005374 <quorem+0xf8>
 8005368:	3b04      	subs	r3, #4
 800536a:	429e      	cmp	r6, r3
 800536c:	461a      	mov	r2, r3
 800536e:	d30b      	bcc.n	8005388 <quorem+0x10c>
 8005370:	f8c8 4010 	str.w	r4, [r8, #16]
 8005374:	4628      	mov	r0, r5
 8005376:	b003      	add	sp, #12
 8005378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	3b04      	subs	r3, #4
 8005380:	2a00      	cmp	r2, #0
 8005382:	d1c9      	bne.n	8005318 <quorem+0x9c>
 8005384:	3c01      	subs	r4, #1
 8005386:	e7c4      	b.n	8005312 <quorem+0x96>
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	3b04      	subs	r3, #4
 800538c:	2a00      	cmp	r2, #0
 800538e:	d1ef      	bne.n	8005370 <quorem+0xf4>
 8005390:	3c01      	subs	r4, #1
 8005392:	e7ea      	b.n	800536a <quorem+0xee>
 8005394:	2000      	movs	r0, #0
 8005396:	e7ee      	b.n	8005376 <quorem+0xfa>

08005398 <_dtoa_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	4616      	mov	r6, r2
 800539e:	461f      	mov	r7, r3
 80053a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053a2:	b095      	sub	sp, #84	; 0x54
 80053a4:	4604      	mov	r4, r0
 80053a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80053aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053ae:	b93d      	cbnz	r5, 80053c0 <_dtoa_r+0x28>
 80053b0:	2010      	movs	r0, #16
 80053b2:	f7fe fa19 	bl	80037e8 <malloc>
 80053b6:	6260      	str	r0, [r4, #36]	; 0x24
 80053b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053bc:	6005      	str	r5, [r0, #0]
 80053be:	60c5      	str	r5, [r0, #12]
 80053c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	b151      	cbz	r1, 80053dc <_dtoa_r+0x44>
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	2301      	movs	r3, #1
 80053ca:	4093      	lsls	r3, r2
 80053cc:	604a      	str	r2, [r1, #4]
 80053ce:	608b      	str	r3, [r1, #8]
 80053d0:	4620      	mov	r0, r4
 80053d2:	f001 fb1a 	bl	8006a0a <_Bfree>
 80053d6:	2200      	movs	r2, #0
 80053d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	1e3b      	subs	r3, r7, #0
 80053de:	bfaf      	iteee	ge
 80053e0:	2300      	movge	r3, #0
 80053e2:	2201      	movlt	r2, #1
 80053e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	9303      	strlt	r3, [sp, #12]
 80053ea:	bfac      	ite	ge
 80053ec:	f8c8 3000 	strge.w	r3, [r8]
 80053f0:	f8c8 2000 	strlt.w	r2, [r8]
 80053f4:	4bae      	ldr	r3, [pc, #696]	; (80056b0 <_dtoa_r+0x318>)
 80053f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80053fa:	ea33 0308 	bics.w	r3, r3, r8
 80053fe:	d11b      	bne.n	8005438 <_dtoa_r+0xa0>
 8005400:	f242 730f 	movw	r3, #9999	; 0x270f
 8005404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	9b02      	ldr	r3, [sp, #8]
 800540a:	b923      	cbnz	r3, 8005416 <_dtoa_r+0x7e>
 800540c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005410:	2800      	cmp	r0, #0
 8005412:	f000 8545 	beq.w	8005ea0 <_dtoa_r+0xb08>
 8005416:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005418:	b953      	cbnz	r3, 8005430 <_dtoa_r+0x98>
 800541a:	4ba6      	ldr	r3, [pc, #664]	; (80056b4 <_dtoa_r+0x31c>)
 800541c:	e021      	b.n	8005462 <_dtoa_r+0xca>
 800541e:	4ba6      	ldr	r3, [pc, #664]	; (80056b8 <_dtoa_r+0x320>)
 8005420:	9306      	str	r3, [sp, #24]
 8005422:	3308      	adds	r3, #8
 8005424:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	9806      	ldr	r0, [sp, #24]
 800542a:	b015      	add	sp, #84	; 0x54
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	4ba0      	ldr	r3, [pc, #640]	; (80056b4 <_dtoa_r+0x31c>)
 8005432:	9306      	str	r3, [sp, #24]
 8005434:	3303      	adds	r3, #3
 8005436:	e7f5      	b.n	8005424 <_dtoa_r+0x8c>
 8005438:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	4630      	mov	r0, r6
 8005442:	4639      	mov	r1, r7
 8005444:	f7fb faca 	bl	80009dc <__aeabi_dcmpeq>
 8005448:	4682      	mov	sl, r0
 800544a:	b160      	cbz	r0, 8005466 <_dtoa_r+0xce>
 800544c:	2301      	movs	r3, #1
 800544e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8520 	beq.w	8005e9a <_dtoa_r+0xb02>
 800545a:	4b98      	ldr	r3, [pc, #608]	; (80056bc <_dtoa_r+0x324>)
 800545c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	e7e0      	b.n	8005428 <_dtoa_r+0x90>
 8005466:	ab12      	add	r3, sp, #72	; 0x48
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	ab13      	add	r3, sp, #76	; 0x4c
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	4632      	mov	r2, r6
 8005470:	463b      	mov	r3, r7
 8005472:	4620      	mov	r0, r4
 8005474:	f001 fdd6 	bl	8007024 <__d2b>
 8005478:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800547c:	4683      	mov	fp, r0
 800547e:	2d00      	cmp	r5, #0
 8005480:	d07d      	beq.n	800557e <_dtoa_r+0x1e6>
 8005482:	46b0      	mov	r8, r6
 8005484:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005488:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800548c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005490:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005494:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005498:	2200      	movs	r2, #0
 800549a:	4b89      	ldr	r3, [pc, #548]	; (80056c0 <_dtoa_r+0x328>)
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	f7fa fe7c 	bl	800019c <__aeabi_dsub>
 80054a4:	a37c      	add	r3, pc, #496	; (adr r3, 8005698 <_dtoa_r+0x300>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fb f82f 	bl	800050c <__aeabi_dmul>
 80054ae:	a37c      	add	r3, pc, #496	; (adr r3, 80056a0 <_dtoa_r+0x308>)
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f7fa fe74 	bl	80001a0 <__adddf3>
 80054b8:	4606      	mov	r6, r0
 80054ba:	4628      	mov	r0, r5
 80054bc:	460f      	mov	r7, r1
 80054be:	f7fa ffbb 	bl	8000438 <__aeabi_i2d>
 80054c2:	a379      	add	r3, pc, #484	; (adr r3, 80056a8 <_dtoa_r+0x310>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f820 	bl	800050c <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fa fe64 	bl	80001a0 <__adddf3>
 80054d8:	4606      	mov	r6, r0
 80054da:	460f      	mov	r7, r1
 80054dc:	f7fb fac6 	bl	8000a6c <__aeabi_d2iz>
 80054e0:	2200      	movs	r2, #0
 80054e2:	4682      	mov	sl, r0
 80054e4:	2300      	movs	r3, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb fa81 	bl	80009f0 <__aeabi_dcmplt>
 80054ee:	b148      	cbz	r0, 8005504 <_dtoa_r+0x16c>
 80054f0:	4650      	mov	r0, sl
 80054f2:	f7fa ffa1 	bl	8000438 <__aeabi_i2d>
 80054f6:	4632      	mov	r2, r6
 80054f8:	463b      	mov	r3, r7
 80054fa:	f7fb fa6f 	bl	80009dc <__aeabi_dcmpeq>
 80054fe:	b908      	cbnz	r0, 8005504 <_dtoa_r+0x16c>
 8005500:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005504:	f1ba 0f16 	cmp.w	sl, #22
 8005508:	d85a      	bhi.n	80055c0 <_dtoa_r+0x228>
 800550a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800550e:	496d      	ldr	r1, [pc, #436]	; (80056c4 <_dtoa_r+0x32c>)
 8005510:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005518:	f7fb fa88 	bl	8000a2c <__aeabi_dcmpgt>
 800551c:	2800      	cmp	r0, #0
 800551e:	d051      	beq.n	80055c4 <_dtoa_r+0x22c>
 8005520:	2300      	movs	r3, #0
 8005522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005526:	930d      	str	r3, [sp, #52]	; 0x34
 8005528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800552a:	1b5d      	subs	r5, r3, r5
 800552c:	1e6b      	subs	r3, r5, #1
 800552e:	9307      	str	r3, [sp, #28]
 8005530:	bf43      	ittte	mi
 8005532:	2300      	movmi	r3, #0
 8005534:	f1c5 0901 	rsbmi	r9, r5, #1
 8005538:	9307      	strmi	r3, [sp, #28]
 800553a:	f04f 0900 	movpl.w	r9, #0
 800553e:	f1ba 0f00 	cmp.w	sl, #0
 8005542:	db41      	blt.n	80055c8 <_dtoa_r+0x230>
 8005544:	9b07      	ldr	r3, [sp, #28]
 8005546:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800554a:	4453      	add	r3, sl
 800554c:	9307      	str	r3, [sp, #28]
 800554e:	2300      	movs	r3, #0
 8005550:	9308      	str	r3, [sp, #32]
 8005552:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005554:	2b09      	cmp	r3, #9
 8005556:	f200 808f 	bhi.w	8005678 <_dtoa_r+0x2e0>
 800555a:	2b05      	cmp	r3, #5
 800555c:	bfc4      	itt	gt
 800555e:	3b04      	subgt	r3, #4
 8005560:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005564:	bfc8      	it	gt
 8005566:	2500      	movgt	r5, #0
 8005568:	f1a3 0302 	sub.w	r3, r3, #2
 800556c:	bfd8      	it	le
 800556e:	2501      	movle	r5, #1
 8005570:	2b03      	cmp	r3, #3
 8005572:	f200 808d 	bhi.w	8005690 <_dtoa_r+0x2f8>
 8005576:	e8df f003 	tbb	[pc, r3]
 800557a:	7d7b      	.short	0x7d7b
 800557c:	6f2f      	.short	0x6f2f
 800557e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005582:	441d      	add	r5, r3
 8005584:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005588:	2820      	cmp	r0, #32
 800558a:	dd13      	ble.n	80055b4 <_dtoa_r+0x21c>
 800558c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	fa08 f800 	lsl.w	r8, r8, r0
 8005596:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800559a:	fa23 f000 	lsr.w	r0, r3, r0
 800559e:	ea48 0000 	orr.w	r0, r8, r0
 80055a2:	f7fa ff39 	bl	8000418 <__aeabi_ui2d>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4680      	mov	r8, r0
 80055aa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80055ae:	3d01      	subs	r5, #1
 80055b0:	9310      	str	r3, [sp, #64]	; 0x40
 80055b2:	e771      	b.n	8005498 <_dtoa_r+0x100>
 80055b4:	9b02      	ldr	r3, [sp, #8]
 80055b6:	f1c0 0020 	rsb	r0, r0, #32
 80055ba:	fa03 f000 	lsl.w	r0, r3, r0
 80055be:	e7f0      	b.n	80055a2 <_dtoa_r+0x20a>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7b0      	b.n	8005526 <_dtoa_r+0x18e>
 80055c4:	900d      	str	r0, [sp, #52]	; 0x34
 80055c6:	e7af      	b.n	8005528 <_dtoa_r+0x190>
 80055c8:	f1ca 0300 	rsb	r3, sl, #0
 80055cc:	9308      	str	r3, [sp, #32]
 80055ce:	2300      	movs	r3, #0
 80055d0:	eba9 090a 	sub.w	r9, r9, sl
 80055d4:	930c      	str	r3, [sp, #48]	; 0x30
 80055d6:	e7bc      	b.n	8005552 <_dtoa_r+0x1ba>
 80055d8:	2301      	movs	r3, #1
 80055da:	9309      	str	r3, [sp, #36]	; 0x24
 80055dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd74      	ble.n	80056cc <_dtoa_r+0x334>
 80055e2:	4698      	mov	r8, r3
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	2200      	movs	r2, #0
 80055e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80055ea:	6072      	str	r2, [r6, #4]
 80055ec:	2204      	movs	r2, #4
 80055ee:	f102 0014 	add.w	r0, r2, #20
 80055f2:	4298      	cmp	r0, r3
 80055f4:	6871      	ldr	r1, [r6, #4]
 80055f6:	d96e      	bls.n	80056d6 <_dtoa_r+0x33e>
 80055f8:	4620      	mov	r0, r4
 80055fa:	f001 f9d2 	bl	80069a2 <_Balloc>
 80055fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005600:	6030      	str	r0, [r6, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b8 0f0e 	cmp.w	r8, #14
 8005608:	9306      	str	r3, [sp, #24]
 800560a:	f200 80ed 	bhi.w	80057e8 <_dtoa_r+0x450>
 800560e:	2d00      	cmp	r5, #0
 8005610:	f000 80ea 	beq.w	80057e8 <_dtoa_r+0x450>
 8005614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005620:	dd77      	ble.n	8005712 <_dtoa_r+0x37a>
 8005622:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <_dtoa_r+0x32c>)
 8005624:	f00a 030f 	and.w	r3, sl, #15
 8005628:	ea4f 162a 	mov.w	r6, sl, asr #4
 800562c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005630:	06f0      	lsls	r0, r6, #27
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800563a:	d568      	bpl.n	800570e <_dtoa_r+0x376>
 800563c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <_dtoa_r+0x330>)
 8005642:	2503      	movs	r5, #3
 8005644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005648:	f7fb f88a 	bl	8000760 <__aeabi_ddiv>
 800564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005650:	f006 060f 	and.w	r6, r6, #15
 8005654:	4f1c      	ldr	r7, [pc, #112]	; (80056c8 <_dtoa_r+0x330>)
 8005656:	e04f      	b.n	80056f8 <_dtoa_r+0x360>
 8005658:	2301      	movs	r3, #1
 800565a:	9309      	str	r3, [sp, #36]	; 0x24
 800565c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800565e:	4453      	add	r3, sl
 8005660:	f103 0801 	add.w	r8, r3, #1
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	4643      	mov	r3, r8
 8005668:	2b01      	cmp	r3, #1
 800566a:	bfb8      	it	lt
 800566c:	2301      	movlt	r3, #1
 800566e:	e7ba      	b.n	80055e6 <_dtoa_r+0x24e>
 8005670:	2300      	movs	r3, #0
 8005672:	e7b2      	b.n	80055da <_dtoa_r+0x242>
 8005674:	2300      	movs	r3, #0
 8005676:	e7f0      	b.n	800565a <_dtoa_r+0x2c2>
 8005678:	2501      	movs	r5, #1
 800567a:	2300      	movs	r3, #0
 800567c:	9509      	str	r5, [sp, #36]	; 0x24
 800567e:	931e      	str	r3, [sp, #120]	; 0x78
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	2200      	movs	r2, #0
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	4698      	mov	r8, r3
 800568a:	2312      	movs	r3, #18
 800568c:	921f      	str	r2, [sp, #124]	; 0x7c
 800568e:	e7aa      	b.n	80055e6 <_dtoa_r+0x24e>
 8005690:	2301      	movs	r3, #1
 8005692:	9309      	str	r3, [sp, #36]	; 0x24
 8005694:	e7f4      	b.n	8005680 <_dtoa_r+0x2e8>
 8005696:	bf00      	nop
 8005698:	636f4361 	.word	0x636f4361
 800569c:	3fd287a7 	.word	0x3fd287a7
 80056a0:	8b60c8b3 	.word	0x8b60c8b3
 80056a4:	3fc68a28 	.word	0x3fc68a28
 80056a8:	509f79fb 	.word	0x509f79fb
 80056ac:	3fd34413 	.word	0x3fd34413
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	08007dba 	.word	0x08007dba
 80056b8:	08007db1 	.word	0x08007db1
 80056bc:	08007c3b 	.word	0x08007c3b
 80056c0:	3ff80000 	.word	0x3ff80000
 80056c4:	08007e48 	.word	0x08007e48
 80056c8:	08007e20 	.word	0x08007e20
 80056cc:	2301      	movs	r3, #1
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	4698      	mov	r8, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	e7da      	b.n	800568c <_dtoa_r+0x2f4>
 80056d6:	3101      	adds	r1, #1
 80056d8:	6071      	str	r1, [r6, #4]
 80056da:	0052      	lsls	r2, r2, #1
 80056dc:	e787      	b.n	80055ee <_dtoa_r+0x256>
 80056de:	07f1      	lsls	r1, r6, #31
 80056e0:	d508      	bpl.n	80056f4 <_dtoa_r+0x35c>
 80056e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ea:	f7fa ff0f 	bl	800050c <__aeabi_dmul>
 80056ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056f2:	3501      	adds	r5, #1
 80056f4:	1076      	asrs	r6, r6, #1
 80056f6:	3708      	adds	r7, #8
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	d1f0      	bne.n	80056de <_dtoa_r+0x346>
 80056fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005704:	f7fb f82c 	bl	8000760 <__aeabi_ddiv>
 8005708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800570c:	e01b      	b.n	8005746 <_dtoa_r+0x3ae>
 800570e:	2502      	movs	r5, #2
 8005710:	e7a0      	b.n	8005654 <_dtoa_r+0x2bc>
 8005712:	f000 80a4 	beq.w	800585e <_dtoa_r+0x4c6>
 8005716:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800571a:	f1ca 0600 	rsb	r6, sl, #0
 800571e:	4ba0      	ldr	r3, [pc, #640]	; (80059a0 <_dtoa_r+0x608>)
 8005720:	f006 020f 	and.w	r2, r6, #15
 8005724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f7fa feee 	bl	800050c <__aeabi_dmul>
 8005730:	2502      	movs	r5, #2
 8005732:	2300      	movs	r3, #0
 8005734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005738:	4f9a      	ldr	r7, [pc, #616]	; (80059a4 <_dtoa_r+0x60c>)
 800573a:	1136      	asrs	r6, r6, #4
 800573c:	2e00      	cmp	r6, #0
 800573e:	f040 8083 	bne.w	8005848 <_dtoa_r+0x4b0>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e0      	bne.n	8005708 <_dtoa_r+0x370>
 8005746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 808a 	beq.w	8005862 <_dtoa_r+0x4ca>
 800574e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005752:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800575a:	2200      	movs	r2, #0
 800575c:	4b92      	ldr	r3, [pc, #584]	; (80059a8 <_dtoa_r+0x610>)
 800575e:	f7fb f947 	bl	80009f0 <__aeabi_dcmplt>
 8005762:	2800      	cmp	r0, #0
 8005764:	d07d      	beq.n	8005862 <_dtoa_r+0x4ca>
 8005766:	f1b8 0f00 	cmp.w	r8, #0
 800576a:	d07a      	beq.n	8005862 <_dtoa_r+0x4ca>
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd36      	ble.n	80057e0 <_dtoa_r+0x448>
 8005772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005776:	2200      	movs	r2, #0
 8005778:	4b8c      	ldr	r3, [pc, #560]	; (80059ac <_dtoa_r+0x614>)
 800577a:	f7fa fec7 	bl	800050c <__aeabi_dmul>
 800577e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005782:	9e04      	ldr	r6, [sp, #16]
 8005784:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005788:	3501      	adds	r5, #1
 800578a:	4628      	mov	r0, r5
 800578c:	f7fa fe54 	bl	8000438 <__aeabi_i2d>
 8005790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005794:	f7fa feba 	bl	800050c <__aeabi_dmul>
 8005798:	2200      	movs	r2, #0
 800579a:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <_dtoa_r+0x618>)
 800579c:	f7fa fd00 	bl	80001a0 <__adddf3>
 80057a0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80057a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	d15c      	bne.n	8005868 <_dtoa_r+0x4d0>
 80057ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057b2:	2200      	movs	r2, #0
 80057b4:	4b7f      	ldr	r3, [pc, #508]	; (80059b4 <_dtoa_r+0x61c>)
 80057b6:	f7fa fcf1 	bl	800019c <__aeabi_dsub>
 80057ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057bc:	462b      	mov	r3, r5
 80057be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057c2:	f7fb f933 	bl	8000a2c <__aeabi_dcmpgt>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 8281 	bne.w	8005cce <_dtoa_r+0x936>
 80057cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057d6:	f7fb f90b 	bl	80009f0 <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 8275 	bne.w	8005cca <_dtoa_r+0x932>
 80057e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f2c0 814b 	blt.w	8005a86 <_dtoa_r+0x6ee>
 80057f0:	f1ba 0f0e 	cmp.w	sl, #14
 80057f4:	f300 8147 	bgt.w	8005a86 <_dtoa_r+0x6ee>
 80057f8:	4b69      	ldr	r3, [pc, #420]	; (80059a0 <_dtoa_r+0x608>)
 80057fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005806:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005808:	2b00      	cmp	r3, #0
 800580a:	f280 80d7 	bge.w	80059bc <_dtoa_r+0x624>
 800580e:	f1b8 0f00 	cmp.w	r8, #0
 8005812:	f300 80d3 	bgt.w	80059bc <_dtoa_r+0x624>
 8005816:	f040 8257 	bne.w	8005cc8 <_dtoa_r+0x930>
 800581a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581e:	2200      	movs	r2, #0
 8005820:	4b64      	ldr	r3, [pc, #400]	; (80059b4 <_dtoa_r+0x61c>)
 8005822:	f7fa fe73 	bl	800050c <__aeabi_dmul>
 8005826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800582a:	f7fb f8f5 	bl	8000a18 <__aeabi_dcmpge>
 800582e:	4646      	mov	r6, r8
 8005830:	4647      	mov	r7, r8
 8005832:	2800      	cmp	r0, #0
 8005834:	f040 822d 	bne.w	8005c92 <_dtoa_r+0x8fa>
 8005838:	9b06      	ldr	r3, [sp, #24]
 800583a:	9a06      	ldr	r2, [sp, #24]
 800583c:	1c5d      	adds	r5, r3, #1
 800583e:	2331      	movs	r3, #49	; 0x31
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	7013      	strb	r3, [r2, #0]
 8005846:	e228      	b.n	8005c9a <_dtoa_r+0x902>
 8005848:	07f2      	lsls	r2, r6, #31
 800584a:	d505      	bpl.n	8005858 <_dtoa_r+0x4c0>
 800584c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005850:	f7fa fe5c 	bl	800050c <__aeabi_dmul>
 8005854:	2301      	movs	r3, #1
 8005856:	3501      	adds	r5, #1
 8005858:	1076      	asrs	r6, r6, #1
 800585a:	3708      	adds	r7, #8
 800585c:	e76e      	b.n	800573c <_dtoa_r+0x3a4>
 800585e:	2502      	movs	r5, #2
 8005860:	e771      	b.n	8005746 <_dtoa_r+0x3ae>
 8005862:	4657      	mov	r7, sl
 8005864:	4646      	mov	r6, r8
 8005866:	e790      	b.n	800578a <_dtoa_r+0x3f2>
 8005868:	4b4d      	ldr	r3, [pc, #308]	; (80059a0 <_dtoa_r+0x608>)
 800586a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800586e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d048      	beq.n	800590a <_dtoa_r+0x572>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	2000      	movs	r0, #0
 800587e:	494e      	ldr	r1, [pc, #312]	; (80059b8 <_dtoa_r+0x620>)
 8005880:	f7fa ff6e 	bl	8000760 <__aeabi_ddiv>
 8005884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005888:	f7fa fc88 	bl	800019c <__aeabi_dsub>
 800588c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005890:	9d06      	ldr	r5, [sp, #24]
 8005892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005896:	f7fb f8e9 	bl	8000a6c <__aeabi_d2iz>
 800589a:	9011      	str	r0, [sp, #68]	; 0x44
 800589c:	f7fa fdcc 	bl	8000438 <__aeabi_i2d>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058a8:	f7fa fc78 	bl	800019c <__aeabi_dsub>
 80058ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b2:	3330      	adds	r3, #48	; 0x30
 80058b4:	f805 3b01 	strb.w	r3, [r5], #1
 80058b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058bc:	f7fb f898 	bl	80009f0 <__aeabi_dcmplt>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d163      	bne.n	800598c <_dtoa_r+0x5f4>
 80058c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058c8:	2000      	movs	r0, #0
 80058ca:	4937      	ldr	r1, [pc, #220]	; (80059a8 <_dtoa_r+0x610>)
 80058cc:	f7fa fc66 	bl	800019c <__aeabi_dsub>
 80058d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058d4:	f7fb f88c 	bl	80009f0 <__aeabi_dcmplt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	f040 80b5 	bne.w	8005a48 <_dtoa_r+0x6b0>
 80058de:	9b06      	ldr	r3, [sp, #24]
 80058e0:	1aeb      	subs	r3, r5, r3
 80058e2:	429e      	cmp	r6, r3
 80058e4:	f77f af7c 	ble.w	80057e0 <_dtoa_r+0x448>
 80058e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058ec:	2200      	movs	r2, #0
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <_dtoa_r+0x614>)
 80058f0:	f7fa fe0c 	bl	800050c <__aeabi_dmul>
 80058f4:	2200      	movs	r2, #0
 80058f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fe:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <_dtoa_r+0x614>)
 8005900:	f7fa fe04 	bl	800050c <__aeabi_dmul>
 8005904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005908:	e7c3      	b.n	8005892 <_dtoa_r+0x4fa>
 800590a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800590e:	f7fa fdfd 	bl	800050c <__aeabi_dmul>
 8005912:	9b06      	ldr	r3, [sp, #24]
 8005914:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005918:	199d      	adds	r5, r3, r6
 800591a:	461e      	mov	r6, r3
 800591c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005920:	f7fb f8a4 	bl	8000a6c <__aeabi_d2iz>
 8005924:	9011      	str	r0, [sp, #68]	; 0x44
 8005926:	f7fa fd87 	bl	8000438 <__aeabi_i2d>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005932:	f7fa fc33 	bl	800019c <__aeabi_dsub>
 8005936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800593c:	3330      	adds	r3, #48	; 0x30
 800593e:	f806 3b01 	strb.w	r3, [r6], #1
 8005942:	42ae      	cmp	r6, r5
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	d124      	bne.n	8005994 <_dtoa_r+0x5fc>
 800594a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <_dtoa_r+0x620>)
 8005950:	f7fa fc26 	bl	80001a0 <__adddf3>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800595c:	f7fb f866 	bl	8000a2c <__aeabi_dcmpgt>
 8005960:	2800      	cmp	r0, #0
 8005962:	d171      	bne.n	8005a48 <_dtoa_r+0x6b0>
 8005964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005968:	2000      	movs	r0, #0
 800596a:	4913      	ldr	r1, [pc, #76]	; (80059b8 <_dtoa_r+0x620>)
 800596c:	f7fa fc16 	bl	800019c <__aeabi_dsub>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005978:	f7fb f83a 	bl	80009f0 <__aeabi_dcmplt>
 800597c:	2800      	cmp	r0, #0
 800597e:	f43f af2f 	beq.w	80057e0 <_dtoa_r+0x448>
 8005982:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005986:	1e6a      	subs	r2, r5, #1
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d001      	beq.n	8005990 <_dtoa_r+0x5f8>
 800598c:	46ba      	mov	sl, r7
 800598e:	e04a      	b.n	8005a26 <_dtoa_r+0x68e>
 8005990:	4615      	mov	r5, r2
 8005992:	e7f6      	b.n	8005982 <_dtoa_r+0x5ea>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <_dtoa_r+0x614>)
 8005996:	f7fa fdb9 	bl	800050c <__aeabi_dmul>
 800599a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800599e:	e7bd      	b.n	800591c <_dtoa_r+0x584>
 80059a0:	08007e48 	.word	0x08007e48
 80059a4:	08007e20 	.word	0x08007e20
 80059a8:	3ff00000 	.word	0x3ff00000
 80059ac:	40240000 	.word	0x40240000
 80059b0:	401c0000 	.word	0x401c0000
 80059b4:	40140000 	.word	0x40140000
 80059b8:	3fe00000 	.word	0x3fe00000
 80059bc:	9d06      	ldr	r5, [sp, #24]
 80059be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c6:	4630      	mov	r0, r6
 80059c8:	4639      	mov	r1, r7
 80059ca:	f7fa fec9 	bl	8000760 <__aeabi_ddiv>
 80059ce:	f7fb f84d 	bl	8000a6c <__aeabi_d2iz>
 80059d2:	4681      	mov	r9, r0
 80059d4:	f7fa fd30 	bl	8000438 <__aeabi_i2d>
 80059d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059dc:	f7fa fd96 	bl	800050c <__aeabi_dmul>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fbd8 	bl	800019c <__aeabi_dsub>
 80059ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80059f0:	f805 6b01 	strb.w	r6, [r5], #1
 80059f4:	9e06      	ldr	r6, [sp, #24]
 80059f6:	4602      	mov	r2, r0
 80059f8:	1bae      	subs	r6, r5, r6
 80059fa:	45b0      	cmp	r8, r6
 80059fc:	460b      	mov	r3, r1
 80059fe:	d135      	bne.n	8005a6c <_dtoa_r+0x6d4>
 8005a00:	f7fa fbce 	bl	80001a0 <__adddf3>
 8005a04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	f7fb f80e 	bl	8000a2c <__aeabi_dcmpgt>
 8005a10:	b9c8      	cbnz	r0, 8005a46 <_dtoa_r+0x6ae>
 8005a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa ffdf 	bl	80009dc <__aeabi_dcmpeq>
 8005a1e:	b110      	cbz	r0, 8005a26 <_dtoa_r+0x68e>
 8005a20:	f019 0f01 	tst.w	r9, #1
 8005a24:	d10f      	bne.n	8005a46 <_dtoa_r+0x6ae>
 8005a26:	4659      	mov	r1, fp
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 ffee 	bl	8006a0a <_Bfree>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a32:	702b      	strb	r3, [r5, #0]
 8005a34:	f10a 0301 	add.w	r3, sl, #1
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f43f acf3 	beq.w	8005428 <_dtoa_r+0x90>
 8005a42:	601d      	str	r5, [r3, #0]
 8005a44:	e4f0      	b.n	8005428 <_dtoa_r+0x90>
 8005a46:	4657      	mov	r7, sl
 8005a48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a4c:	1e6b      	subs	r3, r5, #1
 8005a4e:	2a39      	cmp	r2, #57	; 0x39
 8005a50:	d106      	bne.n	8005a60 <_dtoa_r+0x6c8>
 8005a52:	9a06      	ldr	r2, [sp, #24]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d107      	bne.n	8005a68 <_dtoa_r+0x6d0>
 8005a58:	2330      	movs	r3, #48	; 0x30
 8005a5a:	7013      	strb	r3, [r2, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	3701      	adds	r7, #1
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	3201      	adds	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e791      	b.n	800598c <_dtoa_r+0x5f4>
 8005a68:	461d      	mov	r5, r3
 8005a6a:	e7ed      	b.n	8005a48 <_dtoa_r+0x6b0>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4b99      	ldr	r3, [pc, #612]	; (8005cd4 <_dtoa_r+0x93c>)
 8005a70:	f7fa fd4c 	bl	800050c <__aeabi_dmul>
 8005a74:	2200      	movs	r2, #0
 8005a76:	2300      	movs	r3, #0
 8005a78:	4606      	mov	r6, r0
 8005a7a:	460f      	mov	r7, r1
 8005a7c:	f7fa ffae 	bl	80009dc <__aeabi_dcmpeq>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d09e      	beq.n	80059c2 <_dtoa_r+0x62a>
 8005a84:	e7cf      	b.n	8005a26 <_dtoa_r+0x68e>
 8005a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	f000 8088 	beq.w	8005b9e <_dtoa_r+0x806>
 8005a8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a90:	2a01      	cmp	r2, #1
 8005a92:	dc6d      	bgt.n	8005b70 <_dtoa_r+0x7d8>
 8005a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d066      	beq.n	8005b68 <_dtoa_r+0x7d0>
 8005a9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a9e:	464d      	mov	r5, r9
 8005aa0:	9e08      	ldr	r6, [sp, #32]
 8005aa2:	9a07      	ldr	r2, [sp, #28]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	441a      	add	r2, r3
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	4499      	add	r9, r3
 8005aac:	9207      	str	r2, [sp, #28]
 8005aae:	f001 f88a 	bl	8006bc6 <__i2b>
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	2d00      	cmp	r5, #0
 8005ab6:	dd0b      	ble.n	8005ad0 <_dtoa_r+0x738>
 8005ab8:	9b07      	ldr	r3, [sp, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dd08      	ble.n	8005ad0 <_dtoa_r+0x738>
 8005abe:	42ab      	cmp	r3, r5
 8005ac0:	bfa8      	it	ge
 8005ac2:	462b      	movge	r3, r5
 8005ac4:	9a07      	ldr	r2, [sp, #28]
 8005ac6:	eba9 0903 	sub.w	r9, r9, r3
 8005aca:	1aed      	subs	r5, r5, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	b1eb      	cbz	r3, 8005b10 <_dtoa_r+0x778>
 8005ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d065      	beq.n	8005ba6 <_dtoa_r+0x80e>
 8005ada:	b18e      	cbz	r6, 8005b00 <_dtoa_r+0x768>
 8005adc:	4639      	mov	r1, r7
 8005ade:	4632      	mov	r2, r6
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f001 f90f 	bl	8006d04 <__pow5mult>
 8005ae6:	465a      	mov	r2, fp
 8005ae8:	4601      	mov	r1, r0
 8005aea:	4607      	mov	r7, r0
 8005aec:	4620      	mov	r0, r4
 8005aee:	f001 f873 	bl	8006bd8 <__multiply>
 8005af2:	4659      	mov	r1, fp
 8005af4:	900a      	str	r0, [sp, #40]	; 0x28
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 ff87 	bl	8006a0a <_Bfree>
 8005afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afe:	469b      	mov	fp, r3
 8005b00:	9b08      	ldr	r3, [sp, #32]
 8005b02:	1b9a      	subs	r2, r3, r6
 8005b04:	d004      	beq.n	8005b10 <_dtoa_r+0x778>
 8005b06:	4659      	mov	r1, fp
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f001 f8fb 	bl	8006d04 <__pow5mult>
 8005b0e:	4683      	mov	fp, r0
 8005b10:	2101      	movs	r1, #1
 8005b12:	4620      	mov	r0, r4
 8005b14:	f001 f857 	bl	8006bc6 <__i2b>
 8005b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 81c6 	beq.w	8005eae <_dtoa_r+0xb16>
 8005b22:	461a      	mov	r2, r3
 8005b24:	4601      	mov	r1, r0
 8005b26:	4620      	mov	r0, r4
 8005b28:	f001 f8ec 	bl	8006d04 <__pow5mult>
 8005b2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b2e:	4606      	mov	r6, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	dc3e      	bgt.n	8005bb2 <_dtoa_r+0x81a>
 8005b34:	9b02      	ldr	r3, [sp, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d137      	bne.n	8005baa <_dtoa_r+0x812>
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d134      	bne.n	8005bae <_dtoa_r+0x816>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b4a:	0d1b      	lsrs	r3, r3, #20
 8005b4c:	051b      	lsls	r3, r3, #20
 8005b4e:	b12b      	cbz	r3, 8005b5c <_dtoa_r+0x7c4>
 8005b50:	9b07      	ldr	r3, [sp, #28]
 8005b52:	f109 0901 	add.w	r9, r9, #1
 8005b56:	3301      	adds	r3, #1
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d128      	bne.n	8005bb6 <_dtoa_r+0x81e>
 8005b64:	2001      	movs	r0, #1
 8005b66:	e02e      	b.n	8005bc6 <_dtoa_r+0x82e>
 8005b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b6e:	e796      	b.n	8005a9e <_dtoa_r+0x706>
 8005b70:	9b08      	ldr	r3, [sp, #32]
 8005b72:	f108 36ff 	add.w	r6, r8, #4294967295
 8005b76:	42b3      	cmp	r3, r6
 8005b78:	bfb7      	itett	lt
 8005b7a:	9b08      	ldrlt	r3, [sp, #32]
 8005b7c:	1b9e      	subge	r6, r3, r6
 8005b7e:	1af2      	sublt	r2, r6, r3
 8005b80:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b82:	bfbf      	itttt	lt
 8005b84:	9608      	strlt	r6, [sp, #32]
 8005b86:	189b      	addlt	r3, r3, r2
 8005b88:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005b8a:	2600      	movlt	r6, #0
 8005b8c:	f1b8 0f00 	cmp.w	r8, #0
 8005b90:	bfb9      	ittee	lt
 8005b92:	eba9 0508 	sublt.w	r5, r9, r8
 8005b96:	2300      	movlt	r3, #0
 8005b98:	464d      	movge	r5, r9
 8005b9a:	4643      	movge	r3, r8
 8005b9c:	e781      	b.n	8005aa2 <_dtoa_r+0x70a>
 8005b9e:	9e08      	ldr	r6, [sp, #32]
 8005ba0:	464d      	mov	r5, r9
 8005ba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ba4:	e786      	b.n	8005ab4 <_dtoa_r+0x71c>
 8005ba6:	9a08      	ldr	r2, [sp, #32]
 8005ba8:	e7ad      	b.n	8005b06 <_dtoa_r+0x76e>
 8005baa:	2300      	movs	r3, #0
 8005bac:	e7d6      	b.n	8005b5c <_dtoa_r+0x7c4>
 8005bae:	9b02      	ldr	r3, [sp, #8]
 8005bb0:	e7d4      	b.n	8005b5c <_dtoa_r+0x7c4>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	6933      	ldr	r3, [r6, #16]
 8005bb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005bbc:	6918      	ldr	r0, [r3, #16]
 8005bbe:	f000 ffb4 	bl	8006b2a <__hi0bits>
 8005bc2:	f1c0 0020 	rsb	r0, r0, #32
 8005bc6:	9b07      	ldr	r3, [sp, #28]
 8005bc8:	4418      	add	r0, r3
 8005bca:	f010 001f 	ands.w	r0, r0, #31
 8005bce:	d047      	beq.n	8005c60 <_dtoa_r+0x8c8>
 8005bd0:	f1c0 0320 	rsb	r3, r0, #32
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	dd3b      	ble.n	8005c50 <_dtoa_r+0x8b8>
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	f1c0 001c 	rsb	r0, r0, #28
 8005bde:	4481      	add	r9, r0
 8005be0:	4405      	add	r5, r0
 8005be2:	4403      	add	r3, r0
 8005be4:	9307      	str	r3, [sp, #28]
 8005be6:	f1b9 0f00 	cmp.w	r9, #0
 8005bea:	dd05      	ble.n	8005bf8 <_dtoa_r+0x860>
 8005bec:	4659      	mov	r1, fp
 8005bee:	464a      	mov	r2, r9
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f001 f8d5 	bl	8006da0 <__lshift>
 8005bf6:	4683      	mov	fp, r0
 8005bf8:	9b07      	ldr	r3, [sp, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	dd05      	ble.n	8005c0a <_dtoa_r+0x872>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	461a      	mov	r2, r3
 8005c02:	4620      	mov	r0, r4
 8005c04:	f001 f8cc 	bl	8006da0 <__lshift>
 8005c08:	4606      	mov	r6, r0
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	b353      	cbz	r3, 8005c64 <_dtoa_r+0x8cc>
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4658      	mov	r0, fp
 8005c12:	f001 f919 	bl	8006e48 <__mcmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	da24      	bge.n	8005c64 <_dtoa_r+0x8cc>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	220a      	movs	r2, #10
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 ff09 	bl	8006a38 <__multadd>
 8005c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8144 	beq.w	8005ebc <_dtoa_r+0xb24>
 8005c34:	2300      	movs	r3, #0
 8005c36:	4639      	mov	r1, r7
 8005c38:	220a      	movs	r2, #10
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fefc 	bl	8006a38 <__multadd>
 8005c40:	9b04      	ldr	r3, [sp, #16]
 8005c42:	4607      	mov	r7, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	dc4d      	bgt.n	8005ce4 <_dtoa_r+0x94c>
 8005c48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	dd4a      	ble.n	8005ce4 <_dtoa_r+0x94c>
 8005c4e:	e011      	b.n	8005c74 <_dtoa_r+0x8dc>
 8005c50:	d0c9      	beq.n	8005be6 <_dtoa_r+0x84e>
 8005c52:	9a07      	ldr	r2, [sp, #28]
 8005c54:	331c      	adds	r3, #28
 8005c56:	441a      	add	r2, r3
 8005c58:	4499      	add	r9, r3
 8005c5a:	441d      	add	r5, r3
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	e7c1      	b.n	8005be4 <_dtoa_r+0x84c>
 8005c60:	4603      	mov	r3, r0
 8005c62:	e7f6      	b.n	8005c52 <_dtoa_r+0x8ba>
 8005c64:	f1b8 0f00 	cmp.w	r8, #0
 8005c68:	dc36      	bgt.n	8005cd8 <_dtoa_r+0x940>
 8005c6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	dd33      	ble.n	8005cd8 <_dtoa_r+0x940>
 8005c70:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	b963      	cbnz	r3, 8005c92 <_dtoa_r+0x8fa>
 8005c78:	4631      	mov	r1, r6
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 fedb 	bl	8006a38 <__multadd>
 8005c82:	4601      	mov	r1, r0
 8005c84:	4606      	mov	r6, r0
 8005c86:	4658      	mov	r0, fp
 8005c88:	f001 f8de 	bl	8006e48 <__mcmp>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f73f add3 	bgt.w	8005838 <_dtoa_r+0x4a0>
 8005c92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c94:	9d06      	ldr	r5, [sp, #24]
 8005c96:	ea6f 0a03 	mvn.w	sl, r3
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 feb2 	bl	8006a0a <_Bfree>
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	f43f aebd 	beq.w	8005a26 <_dtoa_r+0x68e>
 8005cac:	f1b9 0f00 	cmp.w	r9, #0
 8005cb0:	d005      	beq.n	8005cbe <_dtoa_r+0x926>
 8005cb2:	45b9      	cmp	r9, r7
 8005cb4:	d003      	beq.n	8005cbe <_dtoa_r+0x926>
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fea6 	bl	8006a0a <_Bfree>
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 fea2 	bl	8006a0a <_Bfree>
 8005cc6:	e6ae      	b.n	8005a26 <_dtoa_r+0x68e>
 8005cc8:	2600      	movs	r6, #0
 8005cca:	4637      	mov	r7, r6
 8005ccc:	e7e1      	b.n	8005c92 <_dtoa_r+0x8fa>
 8005cce:	46ba      	mov	sl, r7
 8005cd0:	4637      	mov	r7, r6
 8005cd2:	e5b1      	b.n	8005838 <_dtoa_r+0x4a0>
 8005cd4:	40240000 	.word	0x40240000
 8005cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cda:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80f3 	beq.w	8005eca <_dtoa_r+0xb32>
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	dd05      	ble.n	8005cf4 <_dtoa_r+0x95c>
 8005ce8:	4639      	mov	r1, r7
 8005cea:	462a      	mov	r2, r5
 8005cec:	4620      	mov	r0, r4
 8005cee:	f001 f857 	bl	8006da0 <__lshift>
 8005cf2:	4607      	mov	r7, r0
 8005cf4:	9b08      	ldr	r3, [sp, #32]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04c      	beq.n	8005d94 <_dtoa_r+0x9fc>
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 fe50 	bl	80069a2 <_Balloc>
 8005d02:	4605      	mov	r5, r0
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	f107 010c 	add.w	r1, r7, #12
 8005d0a:	3202      	adds	r2, #2
 8005d0c:	0092      	lsls	r2, r2, #2
 8005d0e:	300c      	adds	r0, #12
 8005d10:	f7fd fd8c 	bl	800382c <memcpy>
 8005d14:	2201      	movs	r2, #1
 8005d16:	4629      	mov	r1, r5
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f001 f841 	bl	8006da0 <__lshift>
 8005d1e:	46b9      	mov	r9, r7
 8005d20:	4607      	mov	r7, r0
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	9307      	str	r3, [sp, #28]
 8005d26:	9b02      	ldr	r3, [sp, #8]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	9308      	str	r3, [sp, #32]
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4658      	mov	r0, fp
 8005d32:	f7ff faa3 	bl	800527c <quorem>
 8005d36:	4649      	mov	r1, r9
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d3e:	4658      	mov	r0, fp
 8005d40:	f001 f882 	bl	8006e48 <__mcmp>
 8005d44:	463a      	mov	r2, r7
 8005d46:	9002      	str	r0, [sp, #8]
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f001 f896 	bl	8006e7c <__mdiff>
 8005d50:	68c3      	ldr	r3, [r0, #12]
 8005d52:	4602      	mov	r2, r0
 8005d54:	bb03      	cbnz	r3, 8005d98 <_dtoa_r+0xa00>
 8005d56:	4601      	mov	r1, r0
 8005d58:	9009      	str	r0, [sp, #36]	; 0x24
 8005d5a:	4658      	mov	r0, fp
 8005d5c:	f001 f874 	bl	8006e48 <__mcmp>
 8005d60:	4603      	mov	r3, r0
 8005d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d64:	4611      	mov	r1, r2
 8005d66:	4620      	mov	r0, r4
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	f000 fe4e 	bl	8006a0a <_Bfree>
 8005d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d70:	b9a3      	cbnz	r3, 8005d9c <_dtoa_r+0xa04>
 8005d72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d74:	b992      	cbnz	r2, 8005d9c <_dtoa_r+0xa04>
 8005d76:	9a08      	ldr	r2, [sp, #32]
 8005d78:	b982      	cbnz	r2, 8005d9c <_dtoa_r+0xa04>
 8005d7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d7e:	d029      	beq.n	8005dd4 <_dtoa_r+0xa3c>
 8005d80:	9b02      	ldr	r3, [sp, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	dd01      	ble.n	8005d8a <_dtoa_r+0x9f2>
 8005d86:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005d8a:	9b07      	ldr	r3, [sp, #28]
 8005d8c:	1c5d      	adds	r5, r3, #1
 8005d8e:	f883 8000 	strb.w	r8, [r3]
 8005d92:	e784      	b.n	8005c9e <_dtoa_r+0x906>
 8005d94:	4638      	mov	r0, r7
 8005d96:	e7c2      	b.n	8005d1e <_dtoa_r+0x986>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e7e3      	b.n	8005d64 <_dtoa_r+0x9cc>
 8005d9c:	9a02      	ldr	r2, [sp, #8]
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	db04      	blt.n	8005dac <_dtoa_r+0xa14>
 8005da2:	d123      	bne.n	8005dec <_dtoa_r+0xa54>
 8005da4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005da6:	bb0a      	cbnz	r2, 8005dec <_dtoa_r+0xa54>
 8005da8:	9a08      	ldr	r2, [sp, #32]
 8005daa:	b9fa      	cbnz	r2, 8005dec <_dtoa_r+0xa54>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	ddec      	ble.n	8005d8a <_dtoa_r+0x9f2>
 8005db0:	4659      	mov	r1, fp
 8005db2:	2201      	movs	r2, #1
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fff3 	bl	8006da0 <__lshift>
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4683      	mov	fp, r0
 8005dbe:	f001 f843 	bl	8006e48 <__mcmp>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	dc03      	bgt.n	8005dce <_dtoa_r+0xa36>
 8005dc6:	d1e0      	bne.n	8005d8a <_dtoa_r+0x9f2>
 8005dc8:	f018 0f01 	tst.w	r8, #1
 8005dcc:	d0dd      	beq.n	8005d8a <_dtoa_r+0x9f2>
 8005dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dd2:	d1d8      	bne.n	8005d86 <_dtoa_r+0x9ee>
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	9a07      	ldr	r2, [sp, #28]
 8005dd8:	1c5d      	adds	r5, r3, #1
 8005dda:	2339      	movs	r3, #57	; 0x39
 8005ddc:	7013      	strb	r3, [r2, #0]
 8005dde:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005de2:	1e6a      	subs	r2, r5, #1
 8005de4:	2b39      	cmp	r3, #57	; 0x39
 8005de6:	d04d      	beq.n	8005e84 <_dtoa_r+0xaec>
 8005de8:	3301      	adds	r3, #1
 8005dea:	e052      	b.n	8005e92 <_dtoa_r+0xafa>
 8005dec:	9a07      	ldr	r2, [sp, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f102 0501 	add.w	r5, r2, #1
 8005df4:	dd06      	ble.n	8005e04 <_dtoa_r+0xa6c>
 8005df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dfa:	d0eb      	beq.n	8005dd4 <_dtoa_r+0xa3c>
 8005dfc:	f108 0801 	add.w	r8, r8, #1
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	e7c4      	b.n	8005d8e <_dtoa_r+0x9f6>
 8005e04:	9b06      	ldr	r3, [sp, #24]
 8005e06:	9a04      	ldr	r2, [sp, #16]
 8005e08:	1aeb      	subs	r3, r5, r3
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e10:	d021      	beq.n	8005e56 <_dtoa_r+0xabe>
 8005e12:	4659      	mov	r1, fp
 8005e14:	2300      	movs	r3, #0
 8005e16:	220a      	movs	r2, #10
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fe0d 	bl	8006a38 <__multadd>
 8005e1e:	45b9      	cmp	r9, r7
 8005e20:	4683      	mov	fp, r0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f04f 020a 	mov.w	r2, #10
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	d105      	bne.n	8005e3c <_dtoa_r+0xaa4>
 8005e30:	f000 fe02 	bl	8006a38 <__multadd>
 8005e34:	4681      	mov	r9, r0
 8005e36:	4607      	mov	r7, r0
 8005e38:	9507      	str	r5, [sp, #28]
 8005e3a:	e778      	b.n	8005d2e <_dtoa_r+0x996>
 8005e3c:	f000 fdfc 	bl	8006a38 <__multadd>
 8005e40:	4639      	mov	r1, r7
 8005e42:	4681      	mov	r9, r0
 8005e44:	2300      	movs	r3, #0
 8005e46:	220a      	movs	r2, #10
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fdf5 	bl	8006a38 <__multadd>
 8005e4e:	4607      	mov	r7, r0
 8005e50:	e7f2      	b.n	8005e38 <_dtoa_r+0xaa0>
 8005e52:	f04f 0900 	mov.w	r9, #0
 8005e56:	4659      	mov	r1, fp
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 ffa0 	bl	8006da0 <__lshift>
 8005e60:	4631      	mov	r1, r6
 8005e62:	4683      	mov	fp, r0
 8005e64:	f000 fff0 	bl	8006e48 <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	dcb8      	bgt.n	8005dde <_dtoa_r+0xa46>
 8005e6c:	d102      	bne.n	8005e74 <_dtoa_r+0xadc>
 8005e6e:	f018 0f01 	tst.w	r8, #1
 8005e72:	d1b4      	bne.n	8005dde <_dtoa_r+0xa46>
 8005e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e78:	1e6a      	subs	r2, r5, #1
 8005e7a:	2b30      	cmp	r3, #48	; 0x30
 8005e7c:	f47f af0f 	bne.w	8005c9e <_dtoa_r+0x906>
 8005e80:	4615      	mov	r5, r2
 8005e82:	e7f7      	b.n	8005e74 <_dtoa_r+0xadc>
 8005e84:	9b06      	ldr	r3, [sp, #24]
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d105      	bne.n	8005e96 <_dtoa_r+0xafe>
 8005e8a:	2331      	movs	r3, #49	; 0x31
 8005e8c:	9a06      	ldr	r2, [sp, #24]
 8005e8e:	f10a 0a01 	add.w	sl, sl, #1
 8005e92:	7013      	strb	r3, [r2, #0]
 8005e94:	e703      	b.n	8005c9e <_dtoa_r+0x906>
 8005e96:	4615      	mov	r5, r2
 8005e98:	e7a1      	b.n	8005dde <_dtoa_r+0xa46>
 8005e9a:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <_dtoa_r+0xb60>)
 8005e9c:	f7ff bae1 	b.w	8005462 <_dtoa_r+0xca>
 8005ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f aabb 	bne.w	800541e <_dtoa_r+0x86>
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <_dtoa_r+0xb64>)
 8005eaa:	f7ff bada 	b.w	8005462 <_dtoa_r+0xca>
 8005eae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	f77f ae3f 	ble.w	8005b34 <_dtoa_r+0x79c>
 8005eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb8:	9308      	str	r3, [sp, #32]
 8005eba:	e653      	b.n	8005b64 <_dtoa_r+0x7cc>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dc03      	bgt.n	8005eca <_dtoa_r+0xb32>
 8005ec2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	f73f aed5 	bgt.w	8005c74 <_dtoa_r+0x8dc>
 8005eca:	9d06      	ldr	r5, [sp, #24]
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4658      	mov	r0, fp
 8005ed0:	f7ff f9d4 	bl	800527c <quorem>
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005eda:	f805 8b01 	strb.w	r8, [r5], #1
 8005ede:	9a04      	ldr	r2, [sp, #16]
 8005ee0:	1aeb      	subs	r3, r5, r3
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	ddb5      	ble.n	8005e52 <_dtoa_r+0xaba>
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	2300      	movs	r3, #0
 8005eea:	220a      	movs	r2, #10
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fda3 	bl	8006a38 <__multadd>
 8005ef2:	4683      	mov	fp, r0
 8005ef4:	e7ea      	b.n	8005ecc <_dtoa_r+0xb34>
 8005ef6:	bf00      	nop
 8005ef8:	08007c3a 	.word	0x08007c3a
 8005efc:	08007db1 	.word	0x08007db1

08005f00 <__sflush_r>:
 8005f00:	898a      	ldrh	r2, [r1, #12]
 8005f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f06:	4605      	mov	r5, r0
 8005f08:	0710      	lsls	r0, r2, #28
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	d458      	bmi.n	8005fc0 <__sflush_r+0xc0>
 8005f0e:	684b      	ldr	r3, [r1, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	dc05      	bgt.n	8005f20 <__sflush_r+0x20>
 8005f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc02      	bgt.n	8005f20 <__sflush_r+0x20>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d0f9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f2c:	682f      	ldr	r7, [r5, #0]
 8005f2e:	6a21      	ldr	r1, [r4, #32]
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	d032      	beq.n	8005f9a <__sflush_r+0x9a>
 8005f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	075a      	lsls	r2, r3, #29
 8005f3a:	d505      	bpl.n	8005f48 <__sflush_r+0x48>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	1ac0      	subs	r0, r0, r3
 8005f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f42:	b10b      	cbz	r3, 8005f48 <__sflush_r+0x48>
 8005f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f46:	1ac0      	subs	r0, r0, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f4e:	6a21      	ldr	r1, [r4, #32]
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b0      	blx	r6
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	d106      	bne.n	8005f68 <__sflush_r+0x68>
 8005f5a:	6829      	ldr	r1, [r5, #0]
 8005f5c:	291d      	cmp	r1, #29
 8005f5e:	d848      	bhi.n	8005ff2 <__sflush_r+0xf2>
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <__sflush_r+0x108>)
 8005f62:	40ca      	lsrs	r2, r1
 8005f64:	07d6      	lsls	r6, r2, #31
 8005f66:	d544      	bpl.n	8005ff2 <__sflush_r+0xf2>
 8005f68:	2200      	movs	r2, #0
 8005f6a:	6062      	str	r2, [r4, #4]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	04d9      	lsls	r1, r3, #19
 8005f70:	6022      	str	r2, [r4, #0]
 8005f72:	d504      	bpl.n	8005f7e <__sflush_r+0x7e>
 8005f74:	1c42      	adds	r2, r0, #1
 8005f76:	d101      	bne.n	8005f7c <__sflush_r+0x7c>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b903      	cbnz	r3, 8005f7e <__sflush_r+0x7e>
 8005f7c:	6560      	str	r0, [r4, #84]	; 0x54
 8005f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f80:	602f      	str	r7, [r5, #0]
 8005f82:	2900      	cmp	r1, #0
 8005f84:	d0c9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005f86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	d002      	beq.n	8005f94 <__sflush_r+0x94>
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f7fd fc60 	bl	8003854 <_free_r>
 8005f94:	2000      	movs	r0, #0
 8005f96:	6360      	str	r0, [r4, #52]	; 0x34
 8005f98:	e7c0      	b.n	8005f1c <__sflush_r+0x1c>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b0      	blx	r6
 8005fa0:	1c41      	adds	r1, r0, #1
 8005fa2:	d1c8      	bne.n	8005f36 <__sflush_r+0x36>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0c5      	beq.n	8005f36 <__sflush_r+0x36>
 8005faa:	2b1d      	cmp	r3, #29
 8005fac:	d001      	beq.n	8005fb2 <__sflush_r+0xb2>
 8005fae:	2b16      	cmp	r3, #22
 8005fb0:	d101      	bne.n	8005fb6 <__sflush_r+0xb6>
 8005fb2:	602f      	str	r7, [r5, #0]
 8005fb4:	e7b1      	b.n	8005f1a <__sflush_r+0x1a>
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	e7ad      	b.n	8005f1c <__sflush_r+0x1c>
 8005fc0:	690f      	ldr	r7, [r1, #16]
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	d0a9      	beq.n	8005f1a <__sflush_r+0x1a>
 8005fc6:	0793      	lsls	r3, r2, #30
 8005fc8:	bf18      	it	ne
 8005fca:	2300      	movne	r3, #0
 8005fcc:	680e      	ldr	r6, [r1, #0]
 8005fce:	bf08      	it	eq
 8005fd0:	694b      	ldreq	r3, [r1, #20]
 8005fd2:	eba6 0807 	sub.w	r8, r6, r7
 8005fd6:	600f      	str	r7, [r1, #0]
 8005fd8:	608b      	str	r3, [r1, #8]
 8005fda:	f1b8 0f00 	cmp.w	r8, #0
 8005fde:	dd9c      	ble.n	8005f1a <__sflush_r+0x1a>
 8005fe0:	4643      	mov	r3, r8
 8005fe2:	463a      	mov	r2, r7
 8005fe4:	6a21      	ldr	r1, [r4, #32]
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fea:	47b0      	blx	r6
 8005fec:	2800      	cmp	r0, #0
 8005fee:	dc06      	bgt.n	8005ffe <__sflush_r+0xfe>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e78e      	b.n	8005f1c <__sflush_r+0x1c>
 8005ffe:	4407      	add	r7, r0
 8006000:	eba8 0800 	sub.w	r8, r8, r0
 8006004:	e7e9      	b.n	8005fda <__sflush_r+0xda>
 8006006:	bf00      	nop
 8006008:	20400001 	.word	0x20400001

0800600c <_fflush_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	4605      	mov	r5, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b1db      	cbz	r3, 800604e <_fflush_r+0x42>
 8006016:	b118      	cbz	r0, 8006020 <_fflush_r+0x14>
 8006018:	6983      	ldr	r3, [r0, #24]
 800601a:	b90b      	cbnz	r3, 8006020 <_fflush_r+0x14>
 800601c:	f000 f860 	bl	80060e0 <__sinit>
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <_fflush_r+0x48>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d109      	bne.n	800603a <_fflush_r+0x2e>
 8006026:	686c      	ldr	r4, [r5, #4]
 8006028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602c:	b17b      	cbz	r3, 800604e <_fflush_r+0x42>
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006036:	f7ff bf63 	b.w	8005f00 <__sflush_r>
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <_fflush_r+0x4c>)
 800603c:	429c      	cmp	r4, r3
 800603e:	d101      	bne.n	8006044 <_fflush_r+0x38>
 8006040:	68ac      	ldr	r4, [r5, #8]
 8006042:	e7f1      	b.n	8006028 <_fflush_r+0x1c>
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <_fflush_r+0x50>)
 8006046:	429c      	cmp	r4, r3
 8006048:	bf08      	it	eq
 800604a:	68ec      	ldreq	r4, [r5, #12]
 800604c:	e7ec      	b.n	8006028 <_fflush_r+0x1c>
 800604e:	2000      	movs	r0, #0
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	08007de0 	.word	0x08007de0
 8006058:	08007e00 	.word	0x08007e00
 800605c:	08007dc0 	.word	0x08007dc0

08006060 <std>:
 8006060:	2300      	movs	r3, #0
 8006062:	b510      	push	{r4, lr}
 8006064:	4604      	mov	r4, r0
 8006066:	e9c0 3300 	strd	r3, r3, [r0]
 800606a:	6083      	str	r3, [r0, #8]
 800606c:	8181      	strh	r1, [r0, #12]
 800606e:	6643      	str	r3, [r0, #100]	; 0x64
 8006070:	81c2      	strh	r2, [r0, #14]
 8006072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006076:	6183      	str	r3, [r0, #24]
 8006078:	4619      	mov	r1, r3
 800607a:	2208      	movs	r2, #8
 800607c:	305c      	adds	r0, #92	; 0x5c
 800607e:	f7fd fbe0 	bl	8003842 <memset>
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <std+0x38>)
 8006084:	6224      	str	r4, [r4, #32]
 8006086:	6263      	str	r3, [r4, #36]	; 0x24
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <std+0x3c>)
 800608a:	62a3      	str	r3, [r4, #40]	; 0x28
 800608c:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <std+0x40>)
 800608e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <std+0x44>)
 8006092:	6323      	str	r3, [r4, #48]	; 0x30
 8006094:	bd10      	pop	{r4, pc}
 8006096:	bf00      	nop
 8006098:	08004379 	.word	0x08004379
 800609c:	0800439b 	.word	0x0800439b
 80060a0:	080043d3 	.word	0x080043d3
 80060a4:	080043f7 	.word	0x080043f7

080060a8 <_cleanup_r>:
 80060a8:	4901      	ldr	r1, [pc, #4]	; (80060b0 <_cleanup_r+0x8>)
 80060aa:	f000 b885 	b.w	80061b8 <_fwalk_reent>
 80060ae:	bf00      	nop
 80060b0:	0800600d 	.word	0x0800600d

080060b4 <__sfmoreglue>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	2568      	movs	r5, #104	; 0x68
 80060b8:	1e4a      	subs	r2, r1, #1
 80060ba:	4355      	muls	r5, r2
 80060bc:	460e      	mov	r6, r1
 80060be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060c2:	f7fd fc13 	bl	80038ec <_malloc_r>
 80060c6:	4604      	mov	r4, r0
 80060c8:	b140      	cbz	r0, 80060dc <__sfmoreglue+0x28>
 80060ca:	2100      	movs	r1, #0
 80060cc:	e9c0 1600 	strd	r1, r6, [r0]
 80060d0:	300c      	adds	r0, #12
 80060d2:	60a0      	str	r0, [r4, #8]
 80060d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060d8:	f7fd fbb3 	bl	8003842 <memset>
 80060dc:	4620      	mov	r0, r4
 80060de:	bd70      	pop	{r4, r5, r6, pc}

080060e0 <__sinit>:
 80060e0:	6983      	ldr	r3, [r0, #24]
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	bb33      	cbnz	r3, 8006136 <__sinit+0x56>
 80060e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80060ec:	6503      	str	r3, [r0, #80]	; 0x50
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <__sinit+0x58>)
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <__sinit+0x5c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6282      	str	r2, [r0, #40]	; 0x28
 80060f6:	4298      	cmp	r0, r3
 80060f8:	bf04      	itt	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	6183      	streq	r3, [r0, #24]
 80060fe:	f000 f81f 	bl	8006140 <__sfp>
 8006102:	6060      	str	r0, [r4, #4]
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f81b 	bl	8006140 <__sfp>
 800610a:	60a0      	str	r0, [r4, #8]
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f817 	bl	8006140 <__sfp>
 8006112:	2200      	movs	r2, #0
 8006114:	60e0      	str	r0, [r4, #12]
 8006116:	2104      	movs	r1, #4
 8006118:	6860      	ldr	r0, [r4, #4]
 800611a:	f7ff ffa1 	bl	8006060 <std>
 800611e:	2201      	movs	r2, #1
 8006120:	2109      	movs	r1, #9
 8006122:	68a0      	ldr	r0, [r4, #8]
 8006124:	f7ff ff9c 	bl	8006060 <std>
 8006128:	2202      	movs	r2, #2
 800612a:	2112      	movs	r1, #18
 800612c:	68e0      	ldr	r0, [r4, #12]
 800612e:	f7ff ff97 	bl	8006060 <std>
 8006132:	2301      	movs	r3, #1
 8006134:	61a3      	str	r3, [r4, #24]
 8006136:	bd10      	pop	{r4, pc}
 8006138:	08007c1c 	.word	0x08007c1c
 800613c:	080060a9 	.word	0x080060a9

08006140 <__sfp>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4b1b      	ldr	r3, [pc, #108]	; (80061b0 <__sfp+0x70>)
 8006144:	4607      	mov	r7, r0
 8006146:	681e      	ldr	r6, [r3, #0]
 8006148:	69b3      	ldr	r3, [r6, #24]
 800614a:	b913      	cbnz	r3, 8006152 <__sfp+0x12>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ffc7 	bl	80060e0 <__sinit>
 8006152:	3648      	adds	r6, #72	; 0x48
 8006154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006158:	3b01      	subs	r3, #1
 800615a:	d503      	bpl.n	8006164 <__sfp+0x24>
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	b133      	cbz	r3, 800616e <__sfp+0x2e>
 8006160:	6836      	ldr	r6, [r6, #0]
 8006162:	e7f7      	b.n	8006154 <__sfp+0x14>
 8006164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006168:	b16d      	cbz	r5, 8006186 <__sfp+0x46>
 800616a:	3468      	adds	r4, #104	; 0x68
 800616c:	e7f4      	b.n	8006158 <__sfp+0x18>
 800616e:	2104      	movs	r1, #4
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ff9f 	bl	80060b4 <__sfmoreglue>
 8006176:	6030      	str	r0, [r6, #0]
 8006178:	2800      	cmp	r0, #0
 800617a:	d1f1      	bne.n	8006160 <__sfp+0x20>
 800617c:	230c      	movs	r3, #12
 800617e:	4604      	mov	r4, r0
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4620      	mov	r0, r4
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <__sfp+0x74>)
 8006188:	6665      	str	r5, [r4, #100]	; 0x64
 800618a:	e9c4 5500 	strd	r5, r5, [r4]
 800618e:	60a5      	str	r5, [r4, #8]
 8006190:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006194:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006198:	2208      	movs	r2, #8
 800619a:	4629      	mov	r1, r5
 800619c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061a0:	f7fd fb4f 	bl	8003842 <memset>
 80061a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061ac:	e7e9      	b.n	8006182 <__sfp+0x42>
 80061ae:	bf00      	nop
 80061b0:	08007c1c 	.word	0x08007c1c
 80061b4:	ffff0001 	.word	0xffff0001

080061b8 <_fwalk_reent>:
 80061b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4680      	mov	r8, r0
 80061be:	4689      	mov	r9, r1
 80061c0:	2600      	movs	r6, #0
 80061c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061c6:	b914      	cbnz	r4, 80061ce <_fwalk_reent+0x16>
 80061c8:	4630      	mov	r0, r6
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061d2:	3f01      	subs	r7, #1
 80061d4:	d501      	bpl.n	80061da <_fwalk_reent+0x22>
 80061d6:	6824      	ldr	r4, [r4, #0]
 80061d8:	e7f5      	b.n	80061c6 <_fwalk_reent+0xe>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d907      	bls.n	80061f0 <_fwalk_reent+0x38>
 80061e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061e4:	3301      	adds	r3, #1
 80061e6:	d003      	beq.n	80061f0 <_fwalk_reent+0x38>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4640      	mov	r0, r8
 80061ec:	47c8      	blx	r9
 80061ee:	4306      	orrs	r6, r0
 80061f0:	3568      	adds	r5, #104	; 0x68
 80061f2:	e7ee      	b.n	80061d2 <_fwalk_reent+0x1a>

080061f4 <rshift>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	6906      	ldr	r6, [r0, #16]
 80061f8:	114b      	asrs	r3, r1, #5
 80061fa:	429e      	cmp	r6, r3
 80061fc:	f100 0414 	add.w	r4, r0, #20
 8006200:	dd31      	ble.n	8006266 <rshift+0x72>
 8006202:	f011 011f 	ands.w	r1, r1, #31
 8006206:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800620a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800620e:	d108      	bne.n	8006222 <rshift+0x2e>
 8006210:	4621      	mov	r1, r4
 8006212:	42b2      	cmp	r2, r6
 8006214:	460b      	mov	r3, r1
 8006216:	d211      	bcs.n	800623c <rshift+0x48>
 8006218:	f852 3b04 	ldr.w	r3, [r2], #4
 800621c:	f841 3b04 	str.w	r3, [r1], #4
 8006220:	e7f7      	b.n	8006212 <rshift+0x1e>
 8006222:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006226:	4623      	mov	r3, r4
 8006228:	f1c1 0c20 	rsb	ip, r1, #32
 800622c:	40cd      	lsrs	r5, r1
 800622e:	3204      	adds	r2, #4
 8006230:	42b2      	cmp	r2, r6
 8006232:	4617      	mov	r7, r2
 8006234:	d30d      	bcc.n	8006252 <rshift+0x5e>
 8006236:	601d      	str	r5, [r3, #0]
 8006238:	b105      	cbz	r5, 800623c <rshift+0x48>
 800623a:	3304      	adds	r3, #4
 800623c:	42a3      	cmp	r3, r4
 800623e:	eba3 0204 	sub.w	r2, r3, r4
 8006242:	bf08      	it	eq
 8006244:	2300      	moveq	r3, #0
 8006246:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800624a:	6102      	str	r2, [r0, #16]
 800624c:	bf08      	it	eq
 800624e:	6143      	streq	r3, [r0, #20]
 8006250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006252:	683f      	ldr	r7, [r7, #0]
 8006254:	fa07 f70c 	lsl.w	r7, r7, ip
 8006258:	433d      	orrs	r5, r7
 800625a:	f843 5b04 	str.w	r5, [r3], #4
 800625e:	f852 5b04 	ldr.w	r5, [r2], #4
 8006262:	40cd      	lsrs	r5, r1
 8006264:	e7e4      	b.n	8006230 <rshift+0x3c>
 8006266:	4623      	mov	r3, r4
 8006268:	e7e8      	b.n	800623c <rshift+0x48>

0800626a <__hexdig_fun>:
 800626a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800626e:	2b09      	cmp	r3, #9
 8006270:	d802      	bhi.n	8006278 <__hexdig_fun+0xe>
 8006272:	3820      	subs	r0, #32
 8006274:	b2c0      	uxtb	r0, r0
 8006276:	4770      	bx	lr
 8006278:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800627c:	2b05      	cmp	r3, #5
 800627e:	d801      	bhi.n	8006284 <__hexdig_fun+0x1a>
 8006280:	3847      	subs	r0, #71	; 0x47
 8006282:	e7f7      	b.n	8006274 <__hexdig_fun+0xa>
 8006284:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006288:	2b05      	cmp	r3, #5
 800628a:	d801      	bhi.n	8006290 <__hexdig_fun+0x26>
 800628c:	3827      	subs	r0, #39	; 0x27
 800628e:	e7f1      	b.n	8006274 <__hexdig_fun+0xa>
 8006290:	2000      	movs	r0, #0
 8006292:	4770      	bx	lr

08006294 <__gethex>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	b08b      	sub	sp, #44	; 0x2c
 800629a:	9002      	str	r0, [sp, #8]
 800629c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800629e:	468a      	mov	sl, r1
 80062a0:	4690      	mov	r8, r2
 80062a2:	9306      	str	r3, [sp, #24]
 80062a4:	f000 face 	bl	8006844 <__localeconv_l>
 80062a8:	6803      	ldr	r3, [r0, #0]
 80062aa:	f04f 0b00 	mov.w	fp, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	9303      	str	r3, [sp, #12]
 80062b2:	f7f9 ff67 	bl	8000184 <strlen>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	9001      	str	r0, [sp, #4]
 80062ba:	4403      	add	r3, r0
 80062bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80062c0:	9307      	str	r3, [sp, #28]
 80062c2:	f8da 3000 	ldr.w	r3, [sl]
 80062c6:	3302      	adds	r3, #2
 80062c8:	461f      	mov	r7, r3
 80062ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80062ce:	2830      	cmp	r0, #48	; 0x30
 80062d0:	d06c      	beq.n	80063ac <__gethex+0x118>
 80062d2:	f7ff ffca 	bl	800626a <__hexdig_fun>
 80062d6:	4604      	mov	r4, r0
 80062d8:	2800      	cmp	r0, #0
 80062da:	d16a      	bne.n	80063b2 <__gethex+0x11e>
 80062dc:	9a01      	ldr	r2, [sp, #4]
 80062de:	9903      	ldr	r1, [sp, #12]
 80062e0:	4638      	mov	r0, r7
 80062e2:	f7fe f894 	bl	800440e <strncmp>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d166      	bne.n	80063b8 <__gethex+0x124>
 80062ea:	9b01      	ldr	r3, [sp, #4]
 80062ec:	5cf8      	ldrb	r0, [r7, r3]
 80062ee:	18fe      	adds	r6, r7, r3
 80062f0:	f7ff ffbb 	bl	800626a <__hexdig_fun>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d062      	beq.n	80063be <__gethex+0x12a>
 80062f8:	4633      	mov	r3, r6
 80062fa:	7818      	ldrb	r0, [r3, #0]
 80062fc:	461f      	mov	r7, r3
 80062fe:	2830      	cmp	r0, #48	; 0x30
 8006300:	f103 0301 	add.w	r3, r3, #1
 8006304:	d0f9      	beq.n	80062fa <__gethex+0x66>
 8006306:	f7ff ffb0 	bl	800626a <__hexdig_fun>
 800630a:	fab0 f580 	clz	r5, r0
 800630e:	4634      	mov	r4, r6
 8006310:	f04f 0b01 	mov.w	fp, #1
 8006314:	096d      	lsrs	r5, r5, #5
 8006316:	463a      	mov	r2, r7
 8006318:	4616      	mov	r6, r2
 800631a:	7830      	ldrb	r0, [r6, #0]
 800631c:	3201      	adds	r2, #1
 800631e:	f7ff ffa4 	bl	800626a <__hexdig_fun>
 8006322:	2800      	cmp	r0, #0
 8006324:	d1f8      	bne.n	8006318 <__gethex+0x84>
 8006326:	9a01      	ldr	r2, [sp, #4]
 8006328:	9903      	ldr	r1, [sp, #12]
 800632a:	4630      	mov	r0, r6
 800632c:	f7fe f86f 	bl	800440e <strncmp>
 8006330:	b950      	cbnz	r0, 8006348 <__gethex+0xb4>
 8006332:	b954      	cbnz	r4, 800634a <__gethex+0xb6>
 8006334:	9b01      	ldr	r3, [sp, #4]
 8006336:	18f4      	adds	r4, r6, r3
 8006338:	4622      	mov	r2, r4
 800633a:	4616      	mov	r6, r2
 800633c:	7830      	ldrb	r0, [r6, #0]
 800633e:	3201      	adds	r2, #1
 8006340:	f7ff ff93 	bl	800626a <__hexdig_fun>
 8006344:	2800      	cmp	r0, #0
 8006346:	d1f8      	bne.n	800633a <__gethex+0xa6>
 8006348:	b10c      	cbz	r4, 800634e <__gethex+0xba>
 800634a:	1ba4      	subs	r4, r4, r6
 800634c:	00a4      	lsls	r4, r4, #2
 800634e:	7833      	ldrb	r3, [r6, #0]
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d001      	beq.n	8006358 <__gethex+0xc4>
 8006354:	2b70      	cmp	r3, #112	; 0x70
 8006356:	d140      	bne.n	80063da <__gethex+0x146>
 8006358:	7873      	ldrb	r3, [r6, #1]
 800635a:	2b2b      	cmp	r3, #43	; 0x2b
 800635c:	d031      	beq.n	80063c2 <__gethex+0x12e>
 800635e:	2b2d      	cmp	r3, #45	; 0x2d
 8006360:	d033      	beq.n	80063ca <__gethex+0x136>
 8006362:	f04f 0900 	mov.w	r9, #0
 8006366:	1c71      	adds	r1, r6, #1
 8006368:	7808      	ldrb	r0, [r1, #0]
 800636a:	f7ff ff7e 	bl	800626a <__hexdig_fun>
 800636e:	1e43      	subs	r3, r0, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b18      	cmp	r3, #24
 8006374:	d831      	bhi.n	80063da <__gethex+0x146>
 8006376:	f1a0 0210 	sub.w	r2, r0, #16
 800637a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800637e:	f7ff ff74 	bl	800626a <__hexdig_fun>
 8006382:	1e43      	subs	r3, r0, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b18      	cmp	r3, #24
 8006388:	d922      	bls.n	80063d0 <__gethex+0x13c>
 800638a:	f1b9 0f00 	cmp.w	r9, #0
 800638e:	d000      	beq.n	8006392 <__gethex+0xfe>
 8006390:	4252      	negs	r2, r2
 8006392:	4414      	add	r4, r2
 8006394:	f8ca 1000 	str.w	r1, [sl]
 8006398:	b30d      	cbz	r5, 80063de <__gethex+0x14a>
 800639a:	f1bb 0f00 	cmp.w	fp, #0
 800639e:	bf0c      	ite	eq
 80063a0:	2706      	moveq	r7, #6
 80063a2:	2700      	movne	r7, #0
 80063a4:	4638      	mov	r0, r7
 80063a6:	b00b      	add	sp, #44	; 0x2c
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	f10b 0b01 	add.w	fp, fp, #1
 80063b0:	e78a      	b.n	80062c8 <__gethex+0x34>
 80063b2:	2500      	movs	r5, #0
 80063b4:	462c      	mov	r4, r5
 80063b6:	e7ae      	b.n	8006316 <__gethex+0x82>
 80063b8:	463e      	mov	r6, r7
 80063ba:	2501      	movs	r5, #1
 80063bc:	e7c7      	b.n	800634e <__gethex+0xba>
 80063be:	4604      	mov	r4, r0
 80063c0:	e7fb      	b.n	80063ba <__gethex+0x126>
 80063c2:	f04f 0900 	mov.w	r9, #0
 80063c6:	1cb1      	adds	r1, r6, #2
 80063c8:	e7ce      	b.n	8006368 <__gethex+0xd4>
 80063ca:	f04f 0901 	mov.w	r9, #1
 80063ce:	e7fa      	b.n	80063c6 <__gethex+0x132>
 80063d0:	230a      	movs	r3, #10
 80063d2:	fb03 0202 	mla	r2, r3, r2, r0
 80063d6:	3a10      	subs	r2, #16
 80063d8:	e7cf      	b.n	800637a <__gethex+0xe6>
 80063da:	4631      	mov	r1, r6
 80063dc:	e7da      	b.n	8006394 <__gethex+0x100>
 80063de:	4629      	mov	r1, r5
 80063e0:	1bf3      	subs	r3, r6, r7
 80063e2:	3b01      	subs	r3, #1
 80063e4:	2b07      	cmp	r3, #7
 80063e6:	dc49      	bgt.n	800647c <__gethex+0x1e8>
 80063e8:	9802      	ldr	r0, [sp, #8]
 80063ea:	f000 fada 	bl	80069a2 <_Balloc>
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	46da      	mov	sl, fp
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	f100 0914 	add.w	r9, r0, #20
 80063fc:	f1c3 0301 	rsb	r3, r3, #1
 8006400:	f8cd 9010 	str.w	r9, [sp, #16]
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	42b7      	cmp	r7, r6
 8006408:	d33b      	bcc.n	8006482 <__gethex+0x1ee>
 800640a:	9804      	ldr	r0, [sp, #16]
 800640c:	f840 ab04 	str.w	sl, [r0], #4
 8006410:	eba0 0009 	sub.w	r0, r0, r9
 8006414:	1080      	asrs	r0, r0, #2
 8006416:	6128      	str	r0, [r5, #16]
 8006418:	0147      	lsls	r7, r0, #5
 800641a:	4650      	mov	r0, sl
 800641c:	f000 fb85 	bl	8006b2a <__hi0bits>
 8006420:	f8d8 6000 	ldr.w	r6, [r8]
 8006424:	1a3f      	subs	r7, r7, r0
 8006426:	42b7      	cmp	r7, r6
 8006428:	dd64      	ble.n	80064f4 <__gethex+0x260>
 800642a:	1bbf      	subs	r7, r7, r6
 800642c:	4639      	mov	r1, r7
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fe8f 	bl	8007152 <__any_on>
 8006434:	4682      	mov	sl, r0
 8006436:	b178      	cbz	r0, 8006458 <__gethex+0x1c4>
 8006438:	f04f 0a01 	mov.w	sl, #1
 800643c:	1e7b      	subs	r3, r7, #1
 800643e:	1159      	asrs	r1, r3, #5
 8006440:	f003 021f 	and.w	r2, r3, #31
 8006444:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006448:	fa0a f202 	lsl.w	r2, sl, r2
 800644c:	420a      	tst	r2, r1
 800644e:	d003      	beq.n	8006458 <__gethex+0x1c4>
 8006450:	4553      	cmp	r3, sl
 8006452:	dc46      	bgt.n	80064e2 <__gethex+0x24e>
 8006454:	f04f 0a02 	mov.w	sl, #2
 8006458:	4639      	mov	r1, r7
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff feca 	bl	80061f4 <rshift>
 8006460:	443c      	add	r4, r7
 8006462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006466:	42a3      	cmp	r3, r4
 8006468:	da52      	bge.n	8006510 <__gethex+0x27c>
 800646a:	4629      	mov	r1, r5
 800646c:	9802      	ldr	r0, [sp, #8]
 800646e:	f000 facc 	bl	8006a0a <_Bfree>
 8006472:	2300      	movs	r3, #0
 8006474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006476:	27a3      	movs	r7, #163	; 0xa3
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e793      	b.n	80063a4 <__gethex+0x110>
 800647c:	3101      	adds	r1, #1
 800647e:	105b      	asrs	r3, r3, #1
 8006480:	e7b0      	b.n	80063e4 <__gethex+0x150>
 8006482:	1e73      	subs	r3, r6, #1
 8006484:	9305      	str	r3, [sp, #20]
 8006486:	9a07      	ldr	r2, [sp, #28]
 8006488:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800648c:	4293      	cmp	r3, r2
 800648e:	d018      	beq.n	80064c2 <__gethex+0x22e>
 8006490:	f1bb 0f20 	cmp.w	fp, #32
 8006494:	d107      	bne.n	80064a6 <__gethex+0x212>
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	f8c3 a000 	str.w	sl, [r3]
 800649c:	f04f 0a00 	mov.w	sl, #0
 80064a0:	46d3      	mov	fp, sl
 80064a2:	3304      	adds	r3, #4
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80064aa:	f7ff fede 	bl	800626a <__hexdig_fun>
 80064ae:	f000 000f 	and.w	r0, r0, #15
 80064b2:	fa00 f00b 	lsl.w	r0, r0, fp
 80064b6:	ea4a 0a00 	orr.w	sl, sl, r0
 80064ba:	f10b 0b04 	add.w	fp, fp, #4
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	e00d      	b.n	80064de <__gethex+0x24a>
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	9a08      	ldr	r2, [sp, #32]
 80064c6:	4413      	add	r3, r2
 80064c8:	42bb      	cmp	r3, r7
 80064ca:	d3e1      	bcc.n	8006490 <__gethex+0x1fc>
 80064cc:	4618      	mov	r0, r3
 80064ce:	9a01      	ldr	r2, [sp, #4]
 80064d0:	9903      	ldr	r1, [sp, #12]
 80064d2:	9309      	str	r3, [sp, #36]	; 0x24
 80064d4:	f7fd ff9b 	bl	800440e <strncmp>
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1d8      	bne.n	8006490 <__gethex+0x1fc>
 80064de:	461e      	mov	r6, r3
 80064e0:	e791      	b.n	8006406 <__gethex+0x172>
 80064e2:	1eb9      	subs	r1, r7, #2
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 fe34 	bl	8007152 <__any_on>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d0b2      	beq.n	8006454 <__gethex+0x1c0>
 80064ee:	f04f 0a03 	mov.w	sl, #3
 80064f2:	e7b1      	b.n	8006458 <__gethex+0x1c4>
 80064f4:	da09      	bge.n	800650a <__gethex+0x276>
 80064f6:	1bf7      	subs	r7, r6, r7
 80064f8:	4629      	mov	r1, r5
 80064fa:	463a      	mov	r2, r7
 80064fc:	9802      	ldr	r0, [sp, #8]
 80064fe:	f000 fc4f 	bl	8006da0 <__lshift>
 8006502:	4605      	mov	r5, r0
 8006504:	1be4      	subs	r4, r4, r7
 8006506:	f100 0914 	add.w	r9, r0, #20
 800650a:	f04f 0a00 	mov.w	sl, #0
 800650e:	e7a8      	b.n	8006462 <__gethex+0x1ce>
 8006510:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006514:	42a0      	cmp	r0, r4
 8006516:	dd6b      	ble.n	80065f0 <__gethex+0x35c>
 8006518:	1b04      	subs	r4, r0, r4
 800651a:	42a6      	cmp	r6, r4
 800651c:	dc2e      	bgt.n	800657c <__gethex+0x2e8>
 800651e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d022      	beq.n	800656c <__gethex+0x2d8>
 8006526:	2b03      	cmp	r3, #3
 8006528:	d024      	beq.n	8006574 <__gethex+0x2e0>
 800652a:	2b01      	cmp	r3, #1
 800652c:	d115      	bne.n	800655a <__gethex+0x2c6>
 800652e:	42a6      	cmp	r6, r4
 8006530:	d113      	bne.n	800655a <__gethex+0x2c6>
 8006532:	2e01      	cmp	r6, #1
 8006534:	dc0b      	bgt.n	800654e <__gethex+0x2ba>
 8006536:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800653a:	9a06      	ldr	r2, [sp, #24]
 800653c:	2762      	movs	r7, #98	; 0x62
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	2301      	movs	r3, #1
 8006542:	612b      	str	r3, [r5, #16]
 8006544:	f8c9 3000 	str.w	r3, [r9]
 8006548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800654a:	601d      	str	r5, [r3, #0]
 800654c:	e72a      	b.n	80063a4 <__gethex+0x110>
 800654e:	1e71      	subs	r1, r6, #1
 8006550:	4628      	mov	r0, r5
 8006552:	f000 fdfe 	bl	8007152 <__any_on>
 8006556:	2800      	cmp	r0, #0
 8006558:	d1ed      	bne.n	8006536 <__gethex+0x2a2>
 800655a:	4629      	mov	r1, r5
 800655c:	9802      	ldr	r0, [sp, #8]
 800655e:	f000 fa54 	bl	8006a0a <_Bfree>
 8006562:	2300      	movs	r3, #0
 8006564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006566:	2750      	movs	r7, #80	; 0x50
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e71b      	b.n	80063a4 <__gethex+0x110>
 800656c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0e1      	beq.n	8006536 <__gethex+0x2a2>
 8006572:	e7f2      	b.n	800655a <__gethex+0x2c6>
 8006574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1dd      	bne.n	8006536 <__gethex+0x2a2>
 800657a:	e7ee      	b.n	800655a <__gethex+0x2c6>
 800657c:	1e67      	subs	r7, r4, #1
 800657e:	f1ba 0f00 	cmp.w	sl, #0
 8006582:	d132      	bne.n	80065ea <__gethex+0x356>
 8006584:	b127      	cbz	r7, 8006590 <__gethex+0x2fc>
 8006586:	4639      	mov	r1, r7
 8006588:	4628      	mov	r0, r5
 800658a:	f000 fde2 	bl	8007152 <__any_on>
 800658e:	4682      	mov	sl, r0
 8006590:	2301      	movs	r3, #1
 8006592:	117a      	asrs	r2, r7, #5
 8006594:	f007 071f 	and.w	r7, r7, #31
 8006598:	fa03 f707 	lsl.w	r7, r3, r7
 800659c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80065a0:	4621      	mov	r1, r4
 80065a2:	421f      	tst	r7, r3
 80065a4:	f04f 0702 	mov.w	r7, #2
 80065a8:	4628      	mov	r0, r5
 80065aa:	bf18      	it	ne
 80065ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80065b0:	1b36      	subs	r6, r6, r4
 80065b2:	f7ff fe1f 	bl	80061f4 <rshift>
 80065b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80065ba:	f1ba 0f00 	cmp.w	sl, #0
 80065be:	d048      	beq.n	8006652 <__gethex+0x3be>
 80065c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d015      	beq.n	80065f4 <__gethex+0x360>
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d017      	beq.n	80065fc <__gethex+0x368>
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d109      	bne.n	80065e4 <__gethex+0x350>
 80065d0:	f01a 0f02 	tst.w	sl, #2
 80065d4:	d006      	beq.n	80065e4 <__gethex+0x350>
 80065d6:	f8d9 3000 	ldr.w	r3, [r9]
 80065da:	ea4a 0a03 	orr.w	sl, sl, r3
 80065de:	f01a 0f01 	tst.w	sl, #1
 80065e2:	d10e      	bne.n	8006602 <__gethex+0x36e>
 80065e4:	f047 0710 	orr.w	r7, r7, #16
 80065e8:	e033      	b.n	8006652 <__gethex+0x3be>
 80065ea:	f04f 0a01 	mov.w	sl, #1
 80065ee:	e7cf      	b.n	8006590 <__gethex+0x2fc>
 80065f0:	2701      	movs	r7, #1
 80065f2:	e7e2      	b.n	80065ba <__gethex+0x326>
 80065f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065f6:	f1c3 0301 	rsb	r3, r3, #1
 80065fa:	9315      	str	r3, [sp, #84]	; 0x54
 80065fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <__gethex+0x350>
 8006602:	f04f 0c00 	mov.w	ip, #0
 8006606:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800660a:	f105 0314 	add.w	r3, r5, #20
 800660e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006612:	eb03 010a 	add.w	r1, r3, sl
 8006616:	4618      	mov	r0, r3
 8006618:	f853 2b04 	ldr.w	r2, [r3], #4
 800661c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006620:	d01c      	beq.n	800665c <__gethex+0x3c8>
 8006622:	3201      	adds	r2, #1
 8006624:	6002      	str	r2, [r0, #0]
 8006626:	2f02      	cmp	r7, #2
 8006628:	f105 0314 	add.w	r3, r5, #20
 800662c:	d138      	bne.n	80066a0 <__gethex+0x40c>
 800662e:	f8d8 2000 	ldr.w	r2, [r8]
 8006632:	3a01      	subs	r2, #1
 8006634:	42b2      	cmp	r2, r6
 8006636:	d10a      	bne.n	800664e <__gethex+0x3ba>
 8006638:	2201      	movs	r2, #1
 800663a:	1171      	asrs	r1, r6, #5
 800663c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006640:	f006 061f 	and.w	r6, r6, #31
 8006644:	fa02 f606 	lsl.w	r6, r2, r6
 8006648:	421e      	tst	r6, r3
 800664a:	bf18      	it	ne
 800664c:	4617      	movne	r7, r2
 800664e:	f047 0720 	orr.w	r7, r7, #32
 8006652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006654:	601d      	str	r5, [r3, #0]
 8006656:	9b06      	ldr	r3, [sp, #24]
 8006658:	601c      	str	r4, [r3, #0]
 800665a:	e6a3      	b.n	80063a4 <__gethex+0x110>
 800665c:	4299      	cmp	r1, r3
 800665e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006662:	d8d8      	bhi.n	8006616 <__gethex+0x382>
 8006664:	68ab      	ldr	r3, [r5, #8]
 8006666:	4599      	cmp	r9, r3
 8006668:	db12      	blt.n	8006690 <__gethex+0x3fc>
 800666a:	6869      	ldr	r1, [r5, #4]
 800666c:	9802      	ldr	r0, [sp, #8]
 800666e:	3101      	adds	r1, #1
 8006670:	f000 f997 	bl	80069a2 <_Balloc>
 8006674:	4683      	mov	fp, r0
 8006676:	692a      	ldr	r2, [r5, #16]
 8006678:	f105 010c 	add.w	r1, r5, #12
 800667c:	3202      	adds	r2, #2
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	300c      	adds	r0, #12
 8006682:	f7fd f8d3 	bl	800382c <memcpy>
 8006686:	4629      	mov	r1, r5
 8006688:	9802      	ldr	r0, [sp, #8]
 800668a:	f000 f9be 	bl	8006a0a <_Bfree>
 800668e:	465d      	mov	r5, fp
 8006690:	692b      	ldr	r3, [r5, #16]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	612a      	str	r2, [r5, #16]
 8006696:	2201      	movs	r2, #1
 8006698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800669c:	615a      	str	r2, [r3, #20]
 800669e:	e7c2      	b.n	8006626 <__gethex+0x392>
 80066a0:	692a      	ldr	r2, [r5, #16]
 80066a2:	454a      	cmp	r2, r9
 80066a4:	dd0b      	ble.n	80066be <__gethex+0x42a>
 80066a6:	2101      	movs	r1, #1
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fda3 	bl	80061f4 <rshift>
 80066ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066b2:	3401      	adds	r4, #1
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	f6ff aed8 	blt.w	800646a <__gethex+0x1d6>
 80066ba:	2701      	movs	r7, #1
 80066bc:	e7c7      	b.n	800664e <__gethex+0x3ba>
 80066be:	f016 061f 	ands.w	r6, r6, #31
 80066c2:	d0fa      	beq.n	80066ba <__gethex+0x426>
 80066c4:	449a      	add	sl, r3
 80066c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80066ca:	f000 fa2e 	bl	8006b2a <__hi0bits>
 80066ce:	f1c6 0620 	rsb	r6, r6, #32
 80066d2:	42b0      	cmp	r0, r6
 80066d4:	dbe7      	blt.n	80066a6 <__gethex+0x412>
 80066d6:	e7f0      	b.n	80066ba <__gethex+0x426>

080066d8 <L_shift>:
 80066d8:	f1c2 0208 	rsb	r2, r2, #8
 80066dc:	0092      	lsls	r2, r2, #2
 80066de:	b570      	push	{r4, r5, r6, lr}
 80066e0:	f1c2 0620 	rsb	r6, r2, #32
 80066e4:	6843      	ldr	r3, [r0, #4]
 80066e6:	6804      	ldr	r4, [r0, #0]
 80066e8:	fa03 f506 	lsl.w	r5, r3, r6
 80066ec:	432c      	orrs	r4, r5
 80066ee:	40d3      	lsrs	r3, r2
 80066f0:	6004      	str	r4, [r0, #0]
 80066f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80066f6:	4288      	cmp	r0, r1
 80066f8:	d3f4      	bcc.n	80066e4 <L_shift+0xc>
 80066fa:	bd70      	pop	{r4, r5, r6, pc}

080066fc <__match>:
 80066fc:	b530      	push	{r4, r5, lr}
 80066fe:	6803      	ldr	r3, [r0, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006706:	b914      	cbnz	r4, 800670e <__match+0x12>
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	2001      	movs	r0, #1
 800670c:	bd30      	pop	{r4, r5, pc}
 800670e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006716:	2d19      	cmp	r5, #25
 8006718:	bf98      	it	ls
 800671a:	3220      	addls	r2, #32
 800671c:	42a2      	cmp	r2, r4
 800671e:	d0f0      	beq.n	8006702 <__match+0x6>
 8006720:	2000      	movs	r0, #0
 8006722:	e7f3      	b.n	800670c <__match+0x10>

08006724 <__hexnan>:
 8006724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	2500      	movs	r5, #0
 800672a:	680b      	ldr	r3, [r1, #0]
 800672c:	4682      	mov	sl, r0
 800672e:	115f      	asrs	r7, r3, #5
 8006730:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006734:	f013 031f 	ands.w	r3, r3, #31
 8006738:	bf18      	it	ne
 800673a:	3704      	addne	r7, #4
 800673c:	1f3e      	subs	r6, r7, #4
 800673e:	4690      	mov	r8, r2
 8006740:	46b1      	mov	r9, r6
 8006742:	4634      	mov	r4, r6
 8006744:	46ab      	mov	fp, r5
 8006746:	b087      	sub	sp, #28
 8006748:	6801      	ldr	r1, [r0, #0]
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	f847 5c04 	str.w	r5, [r7, #-4]
 8006750:	9502      	str	r5, [sp, #8]
 8006752:	784a      	ldrb	r2, [r1, #1]
 8006754:	1c4b      	adds	r3, r1, #1
 8006756:	9303      	str	r3, [sp, #12]
 8006758:	b342      	cbz	r2, 80067ac <__hexnan+0x88>
 800675a:	4610      	mov	r0, r2
 800675c:	9105      	str	r1, [sp, #20]
 800675e:	9204      	str	r2, [sp, #16]
 8006760:	f7ff fd83 	bl	800626a <__hexdig_fun>
 8006764:	2800      	cmp	r0, #0
 8006766:	d143      	bne.n	80067f0 <__hexnan+0xcc>
 8006768:	9a04      	ldr	r2, [sp, #16]
 800676a:	9905      	ldr	r1, [sp, #20]
 800676c:	2a20      	cmp	r2, #32
 800676e:	d818      	bhi.n	80067a2 <__hexnan+0x7e>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	459b      	cmp	fp, r3
 8006774:	dd13      	ble.n	800679e <__hexnan+0x7a>
 8006776:	454c      	cmp	r4, r9
 8006778:	d206      	bcs.n	8006788 <__hexnan+0x64>
 800677a:	2d07      	cmp	r5, #7
 800677c:	dc04      	bgt.n	8006788 <__hexnan+0x64>
 800677e:	462a      	mov	r2, r5
 8006780:	4649      	mov	r1, r9
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff ffa8 	bl	80066d8 <L_shift>
 8006788:	4544      	cmp	r4, r8
 800678a:	d944      	bls.n	8006816 <__hexnan+0xf2>
 800678c:	2300      	movs	r3, #0
 800678e:	f1a4 0904 	sub.w	r9, r4, #4
 8006792:	f844 3c04 	str.w	r3, [r4, #-4]
 8006796:	461d      	mov	r5, r3
 8006798:	464c      	mov	r4, r9
 800679a:	f8cd b008 	str.w	fp, [sp, #8]
 800679e:	9903      	ldr	r1, [sp, #12]
 80067a0:	e7d7      	b.n	8006752 <__hexnan+0x2e>
 80067a2:	2a29      	cmp	r2, #41	; 0x29
 80067a4:	d14a      	bne.n	800683c <__hexnan+0x118>
 80067a6:	3102      	adds	r1, #2
 80067a8:	f8ca 1000 	str.w	r1, [sl]
 80067ac:	f1bb 0f00 	cmp.w	fp, #0
 80067b0:	d044      	beq.n	800683c <__hexnan+0x118>
 80067b2:	454c      	cmp	r4, r9
 80067b4:	d206      	bcs.n	80067c4 <__hexnan+0xa0>
 80067b6:	2d07      	cmp	r5, #7
 80067b8:	dc04      	bgt.n	80067c4 <__hexnan+0xa0>
 80067ba:	462a      	mov	r2, r5
 80067bc:	4649      	mov	r1, r9
 80067be:	4620      	mov	r0, r4
 80067c0:	f7ff ff8a 	bl	80066d8 <L_shift>
 80067c4:	4544      	cmp	r4, r8
 80067c6:	d928      	bls.n	800681a <__hexnan+0xf6>
 80067c8:	4643      	mov	r3, r8
 80067ca:	f854 2b04 	ldr.w	r2, [r4], #4
 80067ce:	42a6      	cmp	r6, r4
 80067d0:	f843 2b04 	str.w	r2, [r3], #4
 80067d4:	d2f9      	bcs.n	80067ca <__hexnan+0xa6>
 80067d6:	2200      	movs	r2, #0
 80067d8:	f843 2b04 	str.w	r2, [r3], #4
 80067dc:	429e      	cmp	r6, r3
 80067de:	d2fb      	bcs.n	80067d8 <__hexnan+0xb4>
 80067e0:	6833      	ldr	r3, [r6, #0]
 80067e2:	b91b      	cbnz	r3, 80067ec <__hexnan+0xc8>
 80067e4:	4546      	cmp	r6, r8
 80067e6:	d127      	bne.n	8006838 <__hexnan+0x114>
 80067e8:	2301      	movs	r3, #1
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	2005      	movs	r0, #5
 80067ee:	e026      	b.n	800683e <__hexnan+0x11a>
 80067f0:	3501      	adds	r5, #1
 80067f2:	2d08      	cmp	r5, #8
 80067f4:	f10b 0b01 	add.w	fp, fp, #1
 80067f8:	dd06      	ble.n	8006808 <__hexnan+0xe4>
 80067fa:	4544      	cmp	r4, r8
 80067fc:	d9cf      	bls.n	800679e <__hexnan+0x7a>
 80067fe:	2300      	movs	r3, #0
 8006800:	2501      	movs	r5, #1
 8006802:	f844 3c04 	str.w	r3, [r4, #-4]
 8006806:	3c04      	subs	r4, #4
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	f000 000f 	and.w	r0, r0, #15
 800680e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	e7c3      	b.n	800679e <__hexnan+0x7a>
 8006816:	2508      	movs	r5, #8
 8006818:	e7c1      	b.n	800679e <__hexnan+0x7a>
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0df      	beq.n	80067e0 <__hexnan+0xbc>
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	f1c3 0320 	rsb	r3, r3, #32
 8006828:	fa22 f303 	lsr.w	r3, r2, r3
 800682c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006830:	401a      	ands	r2, r3
 8006832:	f847 2c04 	str.w	r2, [r7, #-4]
 8006836:	e7d3      	b.n	80067e0 <__hexnan+0xbc>
 8006838:	3e04      	subs	r6, #4
 800683a:	e7d1      	b.n	80067e0 <__hexnan+0xbc>
 800683c:	2004      	movs	r0, #4
 800683e:	b007      	add	sp, #28
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006844 <__localeconv_l>:
 8006844:	30f0      	adds	r0, #240	; 0xf0
 8006846:	4770      	bx	lr

08006848 <_localeconv_r>:
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <_localeconv_r+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a18      	ldr	r0, [r3, #32]
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <_localeconv_r+0x18>)
 8006850:	2800      	cmp	r0, #0
 8006852:	bf08      	it	eq
 8006854:	4618      	moveq	r0, r3
 8006856:	30f0      	adds	r0, #240	; 0xf0
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20000010 	.word	0x20000010
 8006860:	20000074 	.word	0x20000074

08006864 <_lseek_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	2200      	movs	r2, #0
 800686e:	4c05      	ldr	r4, [pc, #20]	; (8006884 <_lseek_r+0x20>)
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fc ff13 	bl	800369e <_lseek>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_lseek_r+0x1e>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	b103      	cbz	r3, 8006882 <_lseek_r+0x1e>
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	200006b0 	.word	0x200006b0

08006888 <__swhatbuf_r>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	460e      	mov	r6, r1
 800688c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006890:	b096      	sub	sp, #88	; 0x58
 8006892:	2900      	cmp	r1, #0
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	da07      	bge.n	80068aa <__swhatbuf_r+0x22>
 800689a:	2300      	movs	r3, #0
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	89b3      	ldrh	r3, [r6, #12]
 80068a0:	061a      	lsls	r2, r3, #24
 80068a2:	d410      	bmi.n	80068c6 <__swhatbuf_r+0x3e>
 80068a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a8:	e00e      	b.n	80068c8 <__swhatbuf_r+0x40>
 80068aa:	466a      	mov	r2, sp
 80068ac:	f000 fe0a 	bl	80074c4 <_fstat_r>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	dbf2      	blt.n	800689a <__swhatbuf_r+0x12>
 80068b4:	9a01      	ldr	r2, [sp, #4]
 80068b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068be:	425a      	negs	r2, r3
 80068c0:	415a      	adcs	r2, r3
 80068c2:	602a      	str	r2, [r5, #0]
 80068c4:	e7ee      	b.n	80068a4 <__swhatbuf_r+0x1c>
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	2000      	movs	r0, #0
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	b016      	add	sp, #88	; 0x58
 80068ce:	bd70      	pop	{r4, r5, r6, pc}

080068d0 <__smakebuf_r>:
 80068d0:	898b      	ldrh	r3, [r1, #12]
 80068d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068d4:	079d      	lsls	r5, r3, #30
 80068d6:	4606      	mov	r6, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	d507      	bpl.n	80068ec <__smakebuf_r+0x1c>
 80068dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	2301      	movs	r3, #1
 80068e6:	6163      	str	r3, [r4, #20]
 80068e8:	b002      	add	sp, #8
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	ab01      	add	r3, sp, #4
 80068ee:	466a      	mov	r2, sp
 80068f0:	f7ff ffca 	bl	8006888 <__swhatbuf_r>
 80068f4:	9900      	ldr	r1, [sp, #0]
 80068f6:	4605      	mov	r5, r0
 80068f8:	4630      	mov	r0, r6
 80068fa:	f7fc fff7 	bl	80038ec <_malloc_r>
 80068fe:	b948      	cbnz	r0, 8006914 <__smakebuf_r+0x44>
 8006900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006904:	059a      	lsls	r2, r3, #22
 8006906:	d4ef      	bmi.n	80068e8 <__smakebuf_r+0x18>
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	e7e3      	b.n	80068dc <__smakebuf_r+0xc>
 8006914:	4b0d      	ldr	r3, [pc, #52]	; (800694c <__smakebuf_r+0x7c>)
 8006916:	62b3      	str	r3, [r6, #40]	; 0x28
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	9b00      	ldr	r3, [sp, #0]
 8006924:	6120      	str	r0, [r4, #16]
 8006926:	6163      	str	r3, [r4, #20]
 8006928:	9b01      	ldr	r3, [sp, #4]
 800692a:	b15b      	cbz	r3, 8006944 <__smakebuf_r+0x74>
 800692c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006930:	4630      	mov	r0, r6
 8006932:	f000 fdd9 	bl	80074e8 <_isatty_r>
 8006936:	b128      	cbz	r0, 8006944 <__smakebuf_r+0x74>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	431d      	orrs	r5, r3
 8006948:	81a5      	strh	r5, [r4, #12]
 800694a:	e7cd      	b.n	80068e8 <__smakebuf_r+0x18>
 800694c:	080060a9 	.word	0x080060a9

08006950 <memchr>:
 8006950:	b510      	push	{r4, lr}
 8006952:	b2c9      	uxtb	r1, r1
 8006954:	4402      	add	r2, r0
 8006956:	4290      	cmp	r0, r2
 8006958:	4603      	mov	r3, r0
 800695a:	d101      	bne.n	8006960 <memchr+0x10>
 800695c:	2300      	movs	r3, #0
 800695e:	e003      	b.n	8006968 <memchr+0x18>
 8006960:	781c      	ldrb	r4, [r3, #0]
 8006962:	3001      	adds	r0, #1
 8006964:	428c      	cmp	r4, r1
 8006966:	d1f6      	bne.n	8006956 <memchr+0x6>
 8006968:	4618      	mov	r0, r3
 800696a:	bd10      	pop	{r4, pc}

0800696c <memmove>:
 800696c:	4288      	cmp	r0, r1
 800696e:	b510      	push	{r4, lr}
 8006970:	eb01 0302 	add.w	r3, r1, r2
 8006974:	d807      	bhi.n	8006986 <memmove+0x1a>
 8006976:	1e42      	subs	r2, r0, #1
 8006978:	4299      	cmp	r1, r3
 800697a:	d00a      	beq.n	8006992 <memmove+0x26>
 800697c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006980:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006984:	e7f8      	b.n	8006978 <memmove+0xc>
 8006986:	4283      	cmp	r3, r0
 8006988:	d9f5      	bls.n	8006976 <memmove+0xa>
 800698a:	1881      	adds	r1, r0, r2
 800698c:	1ad2      	subs	r2, r2, r3
 800698e:	42d3      	cmn	r3, r2
 8006990:	d100      	bne.n	8006994 <memmove+0x28>
 8006992:	bd10      	pop	{r4, pc}
 8006994:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006998:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800699c:	e7f7      	b.n	800698e <memmove+0x22>

0800699e <__malloc_lock>:
 800699e:	4770      	bx	lr

080069a0 <__malloc_unlock>:
 80069a0:	4770      	bx	lr

080069a2 <_Balloc>:
 80069a2:	b570      	push	{r4, r5, r6, lr}
 80069a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069a6:	4604      	mov	r4, r0
 80069a8:	460e      	mov	r6, r1
 80069aa:	b93d      	cbnz	r5, 80069bc <_Balloc+0x1a>
 80069ac:	2010      	movs	r0, #16
 80069ae:	f7fc ff1b 	bl	80037e8 <malloc>
 80069b2:	6260      	str	r0, [r4, #36]	; 0x24
 80069b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069b8:	6005      	str	r5, [r0, #0]
 80069ba:	60c5      	str	r5, [r0, #12]
 80069bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80069be:	68eb      	ldr	r3, [r5, #12]
 80069c0:	b183      	cbz	r3, 80069e4 <_Balloc+0x42>
 80069c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80069ca:	b9b8      	cbnz	r0, 80069fc <_Balloc+0x5a>
 80069cc:	2101      	movs	r1, #1
 80069ce:	fa01 f506 	lsl.w	r5, r1, r6
 80069d2:	1d6a      	adds	r2, r5, #5
 80069d4:	0092      	lsls	r2, r2, #2
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fbdc 	bl	8007194 <_calloc_r>
 80069dc:	b160      	cbz	r0, 80069f8 <_Balloc+0x56>
 80069de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80069e2:	e00e      	b.n	8006a02 <_Balloc+0x60>
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	2104      	movs	r1, #4
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 fbd3 	bl	8007194 <_calloc_r>
 80069ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f0:	60e8      	str	r0, [r5, #12]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e4      	bne.n	80069c2 <_Balloc+0x20>
 80069f8:	2000      	movs	r0, #0
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	6802      	ldr	r2, [r0, #0]
 80069fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a02:	2300      	movs	r3, #0
 8006a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a08:	e7f7      	b.n	80069fa <_Balloc+0x58>

08006a0a <_Bfree>:
 8006a0a:	b570      	push	{r4, r5, r6, lr}
 8006a0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	b93c      	cbnz	r4, 8006a24 <_Bfree+0x1a>
 8006a14:	2010      	movs	r0, #16
 8006a16:	f7fc fee7 	bl	80037e8 <malloc>
 8006a1a:	6270      	str	r0, [r6, #36]	; 0x24
 8006a1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a20:	6004      	str	r4, [r0, #0]
 8006a22:	60c4      	str	r4, [r0, #12]
 8006a24:	b13d      	cbz	r5, 8006a36 <_Bfree+0x2c>
 8006a26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a28:	686a      	ldr	r2, [r5, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a30:	6029      	str	r1, [r5, #0]
 8006a32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006a36:	bd70      	pop	{r4, r5, r6, pc}

08006a38 <__multadd>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	461f      	mov	r7, r3
 8006a3e:	4606      	mov	r6, r0
 8006a40:	460c      	mov	r4, r1
 8006a42:	2300      	movs	r3, #0
 8006a44:	690d      	ldr	r5, [r1, #16]
 8006a46:	f101 0c14 	add.w	ip, r1, #20
 8006a4a:	f8dc 0000 	ldr.w	r0, [ip]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b281      	uxth	r1, r0
 8006a52:	fb02 7101 	mla	r1, r2, r1, r7
 8006a56:	0c00      	lsrs	r0, r0, #16
 8006a58:	0c0f      	lsrs	r7, r1, #16
 8006a5a:	fb02 7000 	mla	r0, r2, r0, r7
 8006a5e:	b289      	uxth	r1, r1
 8006a60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006a64:	429d      	cmp	r5, r3
 8006a66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a6e:	dcec      	bgt.n	8006a4a <__multadd+0x12>
 8006a70:	b1d7      	cbz	r7, 8006aa8 <__multadd+0x70>
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	42ab      	cmp	r3, r5
 8006a76:	dc12      	bgt.n	8006a9e <__multadd+0x66>
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	3101      	adds	r1, #1
 8006a7e:	f7ff ff90 	bl	80069a2 <_Balloc>
 8006a82:	4680      	mov	r8, r0
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	f104 010c 	add.w	r1, r4, #12
 8006a8a:	3202      	adds	r2, #2
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	300c      	adds	r0, #12
 8006a90:	f7fc fecc 	bl	800382c <memcpy>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ffb7 	bl	8006a0a <_Bfree>
 8006a9c:	4644      	mov	r4, r8
 8006a9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	615f      	str	r7, [r3, #20]
 8006aa6:	6125      	str	r5, [r4, #16]
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006aae <__s2b>:
 8006aae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab2:	4615      	mov	r5, r2
 8006ab4:	2209      	movs	r2, #9
 8006ab6:	461f      	mov	r7, r3
 8006ab8:	3308      	adds	r3, #8
 8006aba:	460c      	mov	r4, r1
 8006abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	db20      	blt.n	8006b0c <__s2b+0x5e>
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ff69 	bl	80069a2 <_Balloc>
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	2d09      	cmp	r5, #9
 8006ad4:	6143      	str	r3, [r0, #20]
 8006ad6:	f04f 0301 	mov.w	r3, #1
 8006ada:	6103      	str	r3, [r0, #16]
 8006adc:	dd19      	ble.n	8006b12 <__s2b+0x64>
 8006ade:	f104 0809 	add.w	r8, r4, #9
 8006ae2:	46c1      	mov	r9, r8
 8006ae4:	442c      	add	r4, r5
 8006ae6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006aea:	4601      	mov	r1, r0
 8006aec:	3b30      	subs	r3, #48	; 0x30
 8006aee:	220a      	movs	r2, #10
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff ffa1 	bl	8006a38 <__multadd>
 8006af6:	45a1      	cmp	r9, r4
 8006af8:	d1f5      	bne.n	8006ae6 <__s2b+0x38>
 8006afa:	eb08 0405 	add.w	r4, r8, r5
 8006afe:	3c08      	subs	r4, #8
 8006b00:	1b2d      	subs	r5, r5, r4
 8006b02:	1963      	adds	r3, r4, r5
 8006b04:	42bb      	cmp	r3, r7
 8006b06:	db07      	blt.n	8006b18 <__s2b+0x6a>
 8006b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0c:	0052      	lsls	r2, r2, #1
 8006b0e:	3101      	adds	r1, #1
 8006b10:	e7d9      	b.n	8006ac6 <__s2b+0x18>
 8006b12:	340a      	adds	r4, #10
 8006b14:	2509      	movs	r5, #9
 8006b16:	e7f3      	b.n	8006b00 <__s2b+0x52>
 8006b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	3b30      	subs	r3, #48	; 0x30
 8006b20:	220a      	movs	r2, #10
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff ff88 	bl	8006a38 <__multadd>
 8006b28:	e7eb      	b.n	8006b02 <__s2b+0x54>

08006b2a <__hi0bits>:
 8006b2a:	0c02      	lsrs	r2, r0, #16
 8006b2c:	0412      	lsls	r2, r2, #16
 8006b2e:	4603      	mov	r3, r0
 8006b30:	b9b2      	cbnz	r2, 8006b60 <__hi0bits+0x36>
 8006b32:	0403      	lsls	r3, r0, #16
 8006b34:	2010      	movs	r0, #16
 8006b36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b3a:	bf04      	itt	eq
 8006b3c:	021b      	lsleq	r3, r3, #8
 8006b3e:	3008      	addeq	r0, #8
 8006b40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b44:	bf04      	itt	eq
 8006b46:	011b      	lsleq	r3, r3, #4
 8006b48:	3004      	addeq	r0, #4
 8006b4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b4e:	bf04      	itt	eq
 8006b50:	009b      	lsleq	r3, r3, #2
 8006b52:	3002      	addeq	r0, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db06      	blt.n	8006b66 <__hi0bits+0x3c>
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	d503      	bpl.n	8006b64 <__hi0bits+0x3a>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	4770      	bx	lr
 8006b60:	2000      	movs	r0, #0
 8006b62:	e7e8      	b.n	8006b36 <__hi0bits+0xc>
 8006b64:	2020      	movs	r0, #32
 8006b66:	4770      	bx	lr

08006b68 <__lo0bits>:
 8006b68:	6803      	ldr	r3, [r0, #0]
 8006b6a:	4601      	mov	r1, r0
 8006b6c:	f013 0207 	ands.w	r2, r3, #7
 8006b70:	d00b      	beq.n	8006b8a <__lo0bits+0x22>
 8006b72:	07da      	lsls	r2, r3, #31
 8006b74:	d423      	bmi.n	8006bbe <__lo0bits+0x56>
 8006b76:	0798      	lsls	r0, r3, #30
 8006b78:	bf49      	itett	mi
 8006b7a:	085b      	lsrmi	r3, r3, #1
 8006b7c:	089b      	lsrpl	r3, r3, #2
 8006b7e:	2001      	movmi	r0, #1
 8006b80:	600b      	strmi	r3, [r1, #0]
 8006b82:	bf5c      	itt	pl
 8006b84:	600b      	strpl	r3, [r1, #0]
 8006b86:	2002      	movpl	r0, #2
 8006b88:	4770      	bx	lr
 8006b8a:	b298      	uxth	r0, r3
 8006b8c:	b9a8      	cbnz	r0, 8006bba <__lo0bits+0x52>
 8006b8e:	2010      	movs	r0, #16
 8006b90:	0c1b      	lsrs	r3, r3, #16
 8006b92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b96:	bf04      	itt	eq
 8006b98:	0a1b      	lsreq	r3, r3, #8
 8006b9a:	3008      	addeq	r0, #8
 8006b9c:	071a      	lsls	r2, r3, #28
 8006b9e:	bf04      	itt	eq
 8006ba0:	091b      	lsreq	r3, r3, #4
 8006ba2:	3004      	addeq	r0, #4
 8006ba4:	079a      	lsls	r2, r3, #30
 8006ba6:	bf04      	itt	eq
 8006ba8:	089b      	lsreq	r3, r3, #2
 8006baa:	3002      	addeq	r0, #2
 8006bac:	07da      	lsls	r2, r3, #31
 8006bae:	d402      	bmi.n	8006bb6 <__lo0bits+0x4e>
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	d006      	beq.n	8006bc2 <__lo0bits+0x5a>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	4770      	bx	lr
 8006bba:	4610      	mov	r0, r2
 8006bbc:	e7e9      	b.n	8006b92 <__lo0bits+0x2a>
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	4770      	bx	lr
 8006bc2:	2020      	movs	r0, #32
 8006bc4:	4770      	bx	lr

08006bc6 <__i2b>:
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	460c      	mov	r4, r1
 8006bca:	2101      	movs	r1, #1
 8006bcc:	f7ff fee9 	bl	80069a2 <_Balloc>
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	6144      	str	r4, [r0, #20]
 8006bd4:	6102      	str	r2, [r0, #16]
 8006bd6:	bd10      	pop	{r4, pc}

08006bd8 <__multiply>:
 8006bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	4614      	mov	r4, r2
 8006bde:	690a      	ldr	r2, [r1, #16]
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	4688      	mov	r8, r1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bfbe      	ittt	lt
 8006be8:	460b      	movlt	r3, r1
 8006bea:	46a0      	movlt	r8, r4
 8006bec:	461c      	movlt	r4, r3
 8006bee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bf2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bfa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bfe:	eb07 0609 	add.w	r6, r7, r9
 8006c02:	42b3      	cmp	r3, r6
 8006c04:	bfb8      	it	lt
 8006c06:	3101      	addlt	r1, #1
 8006c08:	f7ff fecb 	bl	80069a2 <_Balloc>
 8006c0c:	f100 0514 	add.w	r5, r0, #20
 8006c10:	462b      	mov	r3, r5
 8006c12:	2200      	movs	r2, #0
 8006c14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006c18:	4573      	cmp	r3, lr
 8006c1a:	d316      	bcc.n	8006c4a <__multiply+0x72>
 8006c1c:	f104 0214 	add.w	r2, r4, #20
 8006c20:	f108 0114 	add.w	r1, r8, #20
 8006c24:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006c28:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d80c      	bhi.n	8006c50 <__multiply+0x78>
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	dd03      	ble.n	8006c42 <__multiply+0x6a>
 8006c3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05d      	beq.n	8006cfe <__multiply+0x126>
 8006c42:	6106      	str	r6, [r0, #16]
 8006c44:	b003      	add	sp, #12
 8006c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4a:	f843 2b04 	str.w	r2, [r3], #4
 8006c4e:	e7e3      	b.n	8006c18 <__multiply+0x40>
 8006c50:	f8b2 b000 	ldrh.w	fp, [r2]
 8006c54:	f1bb 0f00 	cmp.w	fp, #0
 8006c58:	d023      	beq.n	8006ca2 <__multiply+0xca>
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	46ac      	mov	ip, r5
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c66:	f8dc a000 	ldr.w	sl, [ip]
 8006c6a:	b2a3      	uxth	r3, r4
 8006c6c:	fa1f fa8a 	uxth.w	sl, sl
 8006c70:	fb0b a303 	mla	r3, fp, r3, sl
 8006c74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c78:	f8dc 4000 	ldr.w	r4, [ip]
 8006c7c:	4443      	add	r3, r8
 8006c7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c82:	fb0b 840a 	mla	r4, fp, sl, r8
 8006c86:	46e2      	mov	sl, ip
 8006c88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c92:	454f      	cmp	r7, r9
 8006c94:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c98:	f84a 3b04 	str.w	r3, [sl], #4
 8006c9c:	d82b      	bhi.n	8006cf6 <__multiply+0x11e>
 8006c9e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	3204      	adds	r2, #4
 8006ca6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006caa:	f1ba 0f00 	cmp.w	sl, #0
 8006cae:	d020      	beq.n	8006cf2 <__multiply+0x11a>
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	46a8      	mov	r8, r5
 8006cb4:	f04f 0b00 	mov.w	fp, #0
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	f8b9 c000 	ldrh.w	ip, [r9]
 8006cbe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	fb0a 440c 	mla	r4, sl, ip, r4
 8006cc8:	46c4      	mov	ip, r8
 8006cca:	445c      	add	r4, fp
 8006ccc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cd0:	f84c 3b04 	str.w	r3, [ip], #4
 8006cd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cd8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006cdc:	0c1b      	lsrs	r3, r3, #16
 8006cde:	fb0a b303 	mla	r3, sl, r3, fp
 8006ce2:	454f      	cmp	r7, r9
 8006ce4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006ce8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006cec:	d805      	bhi.n	8006cfa <__multiply+0x122>
 8006cee:	f8c8 3004 	str.w	r3, [r8, #4]
 8006cf2:	3504      	adds	r5, #4
 8006cf4:	e79b      	b.n	8006c2e <__multiply+0x56>
 8006cf6:	46d4      	mov	ip, sl
 8006cf8:	e7b3      	b.n	8006c62 <__multiply+0x8a>
 8006cfa:	46e0      	mov	r8, ip
 8006cfc:	e7dd      	b.n	8006cba <__multiply+0xe2>
 8006cfe:	3e01      	subs	r6, #1
 8006d00:	e799      	b.n	8006c36 <__multiply+0x5e>
	...

08006d04 <__pow5mult>:
 8006d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d08:	4615      	mov	r5, r2
 8006d0a:	f012 0203 	ands.w	r2, r2, #3
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	d007      	beq.n	8006d24 <__pow5mult+0x20>
 8006d14:	4c21      	ldr	r4, [pc, #132]	; (8006d9c <__pow5mult+0x98>)
 8006d16:	3a01      	subs	r2, #1
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d1e:	f7ff fe8b 	bl	8006a38 <__multadd>
 8006d22:	4607      	mov	r7, r0
 8006d24:	10ad      	asrs	r5, r5, #2
 8006d26:	d035      	beq.n	8006d94 <__pow5mult+0x90>
 8006d28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d2a:	b93c      	cbnz	r4, 8006d3c <__pow5mult+0x38>
 8006d2c:	2010      	movs	r0, #16
 8006d2e:	f7fc fd5b 	bl	80037e8 <malloc>
 8006d32:	6270      	str	r0, [r6, #36]	; 0x24
 8006d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d38:	6004      	str	r4, [r0, #0]
 8006d3a:	60c4      	str	r4, [r0, #12]
 8006d3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d44:	b94c      	cbnz	r4, 8006d5a <__pow5mult+0x56>
 8006d46:	f240 2171 	movw	r1, #625	; 0x271
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff ff3b 	bl	8006bc6 <__i2b>
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d58:	6003      	str	r3, [r0, #0]
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	07eb      	lsls	r3, r5, #31
 8006d60:	d50a      	bpl.n	8006d78 <__pow5mult+0x74>
 8006d62:	4639      	mov	r1, r7
 8006d64:	4622      	mov	r2, r4
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ff36 	bl	8006bd8 <__multiply>
 8006d6c:	4681      	mov	r9, r0
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff fe4a 	bl	8006a0a <_Bfree>
 8006d76:	464f      	mov	r7, r9
 8006d78:	106d      	asrs	r5, r5, #1
 8006d7a:	d00b      	beq.n	8006d94 <__pow5mult+0x90>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	b938      	cbnz	r0, 8006d90 <__pow5mult+0x8c>
 8006d80:	4622      	mov	r2, r4
 8006d82:	4621      	mov	r1, r4
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff ff27 	bl	8006bd8 <__multiply>
 8006d8a:	6020      	str	r0, [r4, #0]
 8006d8c:	f8c0 8000 	str.w	r8, [r0]
 8006d90:	4604      	mov	r4, r0
 8006d92:	e7e4      	b.n	8006d5e <__pow5mult+0x5a>
 8006d94:	4638      	mov	r0, r7
 8006d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08007f10 	.word	0x08007f10

08006da0 <__lshift>:
 8006da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	460c      	mov	r4, r1
 8006da6:	4607      	mov	r7, r0
 8006da8:	4616      	mov	r6, r2
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006db0:	eb0a 0903 	add.w	r9, sl, r3
 8006db4:	6849      	ldr	r1, [r1, #4]
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	f109 0501 	add.w	r5, r9, #1
 8006dbc:	42ab      	cmp	r3, r5
 8006dbe:	db32      	blt.n	8006e26 <__lshift+0x86>
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff fdee 	bl	80069a2 <_Balloc>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4680      	mov	r8, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f100 0114 	add.w	r1, r0, #20
 8006dd0:	4553      	cmp	r3, sl
 8006dd2:	db2b      	blt.n	8006e2c <__lshift+0x8c>
 8006dd4:	6920      	ldr	r0, [r4, #16]
 8006dd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dda:	f104 0314 	add.w	r3, r4, #20
 8006dde:	f016 021f 	ands.w	r2, r6, #31
 8006de2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006de6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dea:	d025      	beq.n	8006e38 <__lshift+0x98>
 8006dec:	2000      	movs	r0, #0
 8006dee:	f1c2 0e20 	rsb	lr, r2, #32
 8006df2:	468a      	mov	sl, r1
 8006df4:	681e      	ldr	r6, [r3, #0]
 8006df6:	4096      	lsls	r6, r2
 8006df8:	4330      	orrs	r0, r6
 8006dfa:	f84a 0b04 	str.w	r0, [sl], #4
 8006dfe:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e02:	459c      	cmp	ip, r3
 8006e04:	fa20 f00e 	lsr.w	r0, r0, lr
 8006e08:	d814      	bhi.n	8006e34 <__lshift+0x94>
 8006e0a:	6048      	str	r0, [r1, #4]
 8006e0c:	b108      	cbz	r0, 8006e12 <__lshift+0x72>
 8006e0e:	f109 0502 	add.w	r5, r9, #2
 8006e12:	3d01      	subs	r5, #1
 8006e14:	4638      	mov	r0, r7
 8006e16:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	f7ff fdf5 	bl	8006a0a <_Bfree>
 8006e20:	4640      	mov	r0, r8
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e26:	3101      	adds	r1, #1
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	e7c7      	b.n	8006dbc <__lshift+0x1c>
 8006e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e30:	3301      	adds	r3, #1
 8006e32:	e7cd      	b.n	8006dd0 <__lshift+0x30>
 8006e34:	4651      	mov	r1, sl
 8006e36:	e7dc      	b.n	8006df2 <__lshift+0x52>
 8006e38:	3904      	subs	r1, #4
 8006e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3e:	459c      	cmp	ip, r3
 8006e40:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e44:	d8f9      	bhi.n	8006e3a <__lshift+0x9a>
 8006e46:	e7e4      	b.n	8006e12 <__lshift+0x72>

08006e48 <__mcmp>:
 8006e48:	6903      	ldr	r3, [r0, #16]
 8006e4a:	690a      	ldr	r2, [r1, #16]
 8006e4c:	b530      	push	{r4, r5, lr}
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	d10c      	bne.n	8006e6c <__mcmp+0x24>
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	3014      	adds	r0, #20
 8006e56:	3114      	adds	r1, #20
 8006e58:	1884      	adds	r4, r0, r2
 8006e5a:	4411      	add	r1, r2
 8006e5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e64:	4295      	cmp	r5, r2
 8006e66:	d003      	beq.n	8006e70 <__mcmp+0x28>
 8006e68:	d305      	bcc.n	8006e76 <__mcmp+0x2e>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd30      	pop	{r4, r5, pc}
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d3f3      	bcc.n	8006e5c <__mcmp+0x14>
 8006e74:	e7fa      	b.n	8006e6c <__mcmp+0x24>
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	e7f7      	b.n	8006e6c <__mcmp+0x24>

08006e7c <__mdiff>:
 8006e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	460d      	mov	r5, r1
 8006e82:	4607      	mov	r7, r0
 8006e84:	4611      	mov	r1, r2
 8006e86:	4628      	mov	r0, r5
 8006e88:	4614      	mov	r4, r2
 8006e8a:	f7ff ffdd 	bl	8006e48 <__mcmp>
 8006e8e:	1e06      	subs	r6, r0, #0
 8006e90:	d108      	bne.n	8006ea4 <__mdiff+0x28>
 8006e92:	4631      	mov	r1, r6
 8006e94:	4638      	mov	r0, r7
 8006e96:	f7ff fd84 	bl	80069a2 <_Balloc>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea4:	bfa4      	itt	ge
 8006ea6:	4623      	movge	r3, r4
 8006ea8:	462c      	movge	r4, r5
 8006eaa:	4638      	mov	r0, r7
 8006eac:	6861      	ldr	r1, [r4, #4]
 8006eae:	bfa6      	itte	ge
 8006eb0:	461d      	movge	r5, r3
 8006eb2:	2600      	movge	r6, #0
 8006eb4:	2601      	movlt	r6, #1
 8006eb6:	f7ff fd74 	bl	80069a2 <_Balloc>
 8006eba:	f04f 0e00 	mov.w	lr, #0
 8006ebe:	60c6      	str	r6, [r0, #12]
 8006ec0:	692b      	ldr	r3, [r5, #16]
 8006ec2:	6926      	ldr	r6, [r4, #16]
 8006ec4:	f104 0214 	add.w	r2, r4, #20
 8006ec8:	f105 0914 	add.w	r9, r5, #20
 8006ecc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ed0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ed4:	f100 0114 	add.w	r1, r0, #20
 8006ed8:	f852 ab04 	ldr.w	sl, [r2], #4
 8006edc:	f859 5b04 	ldr.w	r5, [r9], #4
 8006ee0:	fa1f f38a 	uxth.w	r3, sl
 8006ee4:	4473      	add	r3, lr
 8006ee6:	b2ac      	uxth	r4, r5
 8006ee8:	1b1b      	subs	r3, r3, r4
 8006eea:	0c2c      	lsrs	r4, r5, #16
 8006eec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006ef0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006efa:	45c8      	cmp	r8, r9
 8006efc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f00:	4694      	mov	ip, r2
 8006f02:	f841 4b04 	str.w	r4, [r1], #4
 8006f06:	d8e7      	bhi.n	8006ed8 <__mdiff+0x5c>
 8006f08:	45bc      	cmp	ip, r7
 8006f0a:	d304      	bcc.n	8006f16 <__mdiff+0x9a>
 8006f0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f10:	b183      	cbz	r3, 8006f34 <__mdiff+0xb8>
 8006f12:	6106      	str	r6, [r0, #16]
 8006f14:	e7c4      	b.n	8006ea0 <__mdiff+0x24>
 8006f16:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006f1a:	b2a2      	uxth	r2, r4
 8006f1c:	4472      	add	r2, lr
 8006f1e:	1413      	asrs	r3, r2, #16
 8006f20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f24:	b292      	uxth	r2, r2
 8006f26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f2a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006f2e:	f841 2b04 	str.w	r2, [r1], #4
 8006f32:	e7e9      	b.n	8006f08 <__mdiff+0x8c>
 8006f34:	3e01      	subs	r6, #1
 8006f36:	e7e9      	b.n	8006f0c <__mdiff+0x90>

08006f38 <__ulp>:
 8006f38:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <__ulp+0x44>)
 8006f3a:	400b      	ands	r3, r1
 8006f3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dd02      	ble.n	8006f4a <__ulp+0x12>
 8006f44:	2000      	movs	r0, #0
 8006f46:	4619      	mov	r1, r3
 8006f48:	4770      	bx	lr
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	151b      	asrs	r3, r3, #20
 8006f4e:	2b13      	cmp	r3, #19
 8006f50:	f04f 0000 	mov.w	r0, #0
 8006f54:	f04f 0100 	mov.w	r1, #0
 8006f58:	dc04      	bgt.n	8006f64 <__ulp+0x2c>
 8006f5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006f5e:	fa42 f103 	asr.w	r1, r2, r3
 8006f62:	4770      	bx	lr
 8006f64:	2201      	movs	r2, #1
 8006f66:	3b14      	subs	r3, #20
 8006f68:	2b1e      	cmp	r3, #30
 8006f6a:	bfce      	itee	gt
 8006f6c:	4613      	movgt	r3, r2
 8006f6e:	f1c3 031f 	rsble	r3, r3, #31
 8006f72:	fa02 f303 	lslle.w	r3, r2, r3
 8006f76:	4618      	mov	r0, r3
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	7ff00000 	.word	0x7ff00000

08006f80 <__b2d>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	6907      	ldr	r7, [r0, #16]
 8006f86:	f100 0914 	add.w	r9, r0, #20
 8006f8a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006f8e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006f92:	f1a7 0804 	sub.w	r8, r7, #4
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff fdc7 	bl	8006b2a <__hi0bits>
 8006f9c:	f1c0 0320 	rsb	r3, r0, #32
 8006fa0:	280a      	cmp	r0, #10
 8006fa2:	600b      	str	r3, [r1, #0]
 8006fa4:	491e      	ldr	r1, [pc, #120]	; (8007020 <__b2d+0xa0>)
 8006fa6:	dc17      	bgt.n	8006fd8 <__b2d+0x58>
 8006fa8:	45c1      	cmp	r9, r8
 8006faa:	bf28      	it	cs
 8006fac:	2200      	movcs	r2, #0
 8006fae:	f1c0 0c0b 	rsb	ip, r0, #11
 8006fb2:	fa26 f30c 	lsr.w	r3, r6, ip
 8006fb6:	bf38      	it	cc
 8006fb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006fbc:	ea43 0501 	orr.w	r5, r3, r1
 8006fc0:	f100 0315 	add.w	r3, r0, #21
 8006fc4:	fa06 f303 	lsl.w	r3, r6, r3
 8006fc8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006fcc:	ea43 0402 	orr.w	r4, r3, r2
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd8:	45c1      	cmp	r9, r8
 8006fda:	bf3a      	itte	cc
 8006fdc:	f1a7 0808 	subcc.w	r8, r7, #8
 8006fe0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006fe4:	2200      	movcs	r2, #0
 8006fe6:	f1b0 030b 	subs.w	r3, r0, #11
 8006fea:	d015      	beq.n	8007018 <__b2d+0x98>
 8006fec:	409e      	lsls	r6, r3
 8006fee:	f1c3 0720 	rsb	r7, r3, #32
 8006ff2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006ff6:	fa22 f107 	lsr.w	r1, r2, r7
 8006ffa:	45c8      	cmp	r8, r9
 8006ffc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007000:	ea46 0501 	orr.w	r5, r6, r1
 8007004:	bf94      	ite	ls
 8007006:	2100      	movls	r1, #0
 8007008:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800700c:	fa02 f003 	lsl.w	r0, r2, r3
 8007010:	40f9      	lsrs	r1, r7
 8007012:	ea40 0401 	orr.w	r4, r0, r1
 8007016:	e7db      	b.n	8006fd0 <__b2d+0x50>
 8007018:	ea46 0501 	orr.w	r5, r6, r1
 800701c:	4614      	mov	r4, r2
 800701e:	e7d7      	b.n	8006fd0 <__b2d+0x50>
 8007020:	3ff00000 	.word	0x3ff00000

08007024 <__d2b>:
 8007024:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007028:	461c      	mov	r4, r3
 800702a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800702e:	2101      	movs	r1, #1
 8007030:	4690      	mov	r8, r2
 8007032:	f7ff fcb6 	bl	80069a2 <_Balloc>
 8007036:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800703a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800703e:	4607      	mov	r7, r0
 8007040:	bb34      	cbnz	r4, 8007090 <__d2b+0x6c>
 8007042:	9201      	str	r2, [sp, #4]
 8007044:	f1b8 0200 	subs.w	r2, r8, #0
 8007048:	d027      	beq.n	800709a <__d2b+0x76>
 800704a:	a802      	add	r0, sp, #8
 800704c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007050:	f7ff fd8a 	bl	8006b68 <__lo0bits>
 8007054:	9900      	ldr	r1, [sp, #0]
 8007056:	b1f0      	cbz	r0, 8007096 <__d2b+0x72>
 8007058:	9a01      	ldr	r2, [sp, #4]
 800705a:	f1c0 0320 	rsb	r3, r0, #32
 800705e:	fa02 f303 	lsl.w	r3, r2, r3
 8007062:	430b      	orrs	r3, r1
 8007064:	40c2      	lsrs	r2, r0
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2102      	movne	r1, #2
 8007072:	2101      	moveq	r1, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	6139      	str	r1, [r7, #16]
 8007078:	b1c4      	cbz	r4, 80070ac <__d2b+0x88>
 800707a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800707e:	4404      	add	r4, r0
 8007080:	6034      	str	r4, [r6, #0]
 8007082:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007086:	6028      	str	r0, [r5, #0]
 8007088:	4638      	mov	r0, r7
 800708a:	b002      	add	sp, #8
 800708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007090:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007094:	e7d5      	b.n	8007042 <__d2b+0x1e>
 8007096:	6179      	str	r1, [r7, #20]
 8007098:	e7e7      	b.n	800706a <__d2b+0x46>
 800709a:	a801      	add	r0, sp, #4
 800709c:	f7ff fd64 	bl	8006b68 <__lo0bits>
 80070a0:	2101      	movs	r1, #1
 80070a2:	9b01      	ldr	r3, [sp, #4]
 80070a4:	6139      	str	r1, [r7, #16]
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	3020      	adds	r0, #32
 80070aa:	e7e5      	b.n	8007078 <__d2b+0x54>
 80070ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80070b4:	6030      	str	r0, [r6, #0]
 80070b6:	6918      	ldr	r0, [r3, #16]
 80070b8:	f7ff fd37 	bl	8006b2a <__hi0bits>
 80070bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070c0:	e7e1      	b.n	8007086 <__d2b+0x62>

080070c2 <__ratio>:
 80070c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c6:	4688      	mov	r8, r1
 80070c8:	4669      	mov	r1, sp
 80070ca:	4681      	mov	r9, r0
 80070cc:	f7ff ff58 	bl	8006f80 <__b2d>
 80070d0:	468b      	mov	fp, r1
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	4640      	mov	r0, r8
 80070d8:	a901      	add	r1, sp, #4
 80070da:	f7ff ff51 	bl	8006f80 <__b2d>
 80070de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070e6:	460d      	mov	r5, r1
 80070e8:	eba3 0c02 	sub.w	ip, r3, r2
 80070ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80070f0:	1a9b      	subs	r3, r3, r2
 80070f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfd5      	itete	le
 80070fa:	460a      	movle	r2, r1
 80070fc:	463a      	movgt	r2, r7
 80070fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007102:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007106:	bfd8      	it	le
 8007108:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800710c:	462b      	mov	r3, r5
 800710e:	4602      	mov	r2, r0
 8007110:	4659      	mov	r1, fp
 8007112:	4630      	mov	r0, r6
 8007114:	f7f9 fb24 	bl	8000760 <__aeabi_ddiv>
 8007118:	b003      	add	sp, #12
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800711e <__copybits>:
 800711e:	3901      	subs	r1, #1
 8007120:	b510      	push	{r4, lr}
 8007122:	1149      	asrs	r1, r1, #5
 8007124:	6914      	ldr	r4, [r2, #16]
 8007126:	3101      	adds	r1, #1
 8007128:	f102 0314 	add.w	r3, r2, #20
 800712c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007134:	42a3      	cmp	r3, r4
 8007136:	4602      	mov	r2, r0
 8007138:	d303      	bcc.n	8007142 <__copybits+0x24>
 800713a:	2300      	movs	r3, #0
 800713c:	428a      	cmp	r2, r1
 800713e:	d305      	bcc.n	800714c <__copybits+0x2e>
 8007140:	bd10      	pop	{r4, pc}
 8007142:	f853 2b04 	ldr.w	r2, [r3], #4
 8007146:	f840 2b04 	str.w	r2, [r0], #4
 800714a:	e7f3      	b.n	8007134 <__copybits+0x16>
 800714c:	f842 3b04 	str.w	r3, [r2], #4
 8007150:	e7f4      	b.n	800713c <__copybits+0x1e>

08007152 <__any_on>:
 8007152:	f100 0214 	add.w	r2, r0, #20
 8007156:	6900      	ldr	r0, [r0, #16]
 8007158:	114b      	asrs	r3, r1, #5
 800715a:	4298      	cmp	r0, r3
 800715c:	b510      	push	{r4, lr}
 800715e:	db11      	blt.n	8007184 <__any_on+0x32>
 8007160:	dd0a      	ble.n	8007178 <__any_on+0x26>
 8007162:	f011 011f 	ands.w	r1, r1, #31
 8007166:	d007      	beq.n	8007178 <__any_on+0x26>
 8007168:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800716c:	fa24 f001 	lsr.w	r0, r4, r1
 8007170:	fa00 f101 	lsl.w	r1, r0, r1
 8007174:	428c      	cmp	r4, r1
 8007176:	d10b      	bne.n	8007190 <__any_on+0x3e>
 8007178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800717c:	4293      	cmp	r3, r2
 800717e:	d803      	bhi.n	8007188 <__any_on+0x36>
 8007180:	2000      	movs	r0, #0
 8007182:	bd10      	pop	{r4, pc}
 8007184:	4603      	mov	r3, r0
 8007186:	e7f7      	b.n	8007178 <__any_on+0x26>
 8007188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800718c:	2900      	cmp	r1, #0
 800718e:	d0f5      	beq.n	800717c <__any_on+0x2a>
 8007190:	2001      	movs	r0, #1
 8007192:	e7f6      	b.n	8007182 <__any_on+0x30>

08007194 <_calloc_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	fb02 f401 	mul.w	r4, r2, r1
 800719a:	4621      	mov	r1, r4
 800719c:	f7fc fba6 	bl	80038ec <_malloc_r>
 80071a0:	4605      	mov	r5, r0
 80071a2:	b118      	cbz	r0, 80071ac <_calloc_r+0x18>
 80071a4:	4622      	mov	r2, r4
 80071a6:	2100      	movs	r1, #0
 80071a8:	f7fc fb4b 	bl	8003842 <memset>
 80071ac:	4628      	mov	r0, r5
 80071ae:	bd38      	pop	{r3, r4, r5, pc}

080071b0 <_realloc_r>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	4607      	mov	r7, r0
 80071b4:	4614      	mov	r4, r2
 80071b6:	460e      	mov	r6, r1
 80071b8:	b921      	cbnz	r1, 80071c4 <_realloc_r+0x14>
 80071ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071be:	4611      	mov	r1, r2
 80071c0:	f7fc bb94 	b.w	80038ec <_malloc_r>
 80071c4:	b922      	cbnz	r2, 80071d0 <_realloc_r+0x20>
 80071c6:	f7fc fb45 	bl	8003854 <_free_r>
 80071ca:	4625      	mov	r5, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d0:	f000 f99a 	bl	8007508 <_malloc_usable_size_r>
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d20f      	bcs.n	80071f8 <_realloc_r+0x48>
 80071d8:	4621      	mov	r1, r4
 80071da:	4638      	mov	r0, r7
 80071dc:	f7fc fb86 	bl	80038ec <_malloc_r>
 80071e0:	4605      	mov	r5, r0
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d0f2      	beq.n	80071cc <_realloc_r+0x1c>
 80071e6:	4631      	mov	r1, r6
 80071e8:	4622      	mov	r2, r4
 80071ea:	f7fc fb1f 	bl	800382c <memcpy>
 80071ee:	4631      	mov	r1, r6
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7fc fb2f 	bl	8003854 <_free_r>
 80071f6:	e7e9      	b.n	80071cc <_realloc_r+0x1c>
 80071f8:	4635      	mov	r5, r6
 80071fa:	e7e7      	b.n	80071cc <_realloc_r+0x1c>

080071fc <__ssputs_r>:
 80071fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	688e      	ldr	r6, [r1, #8]
 8007202:	4682      	mov	sl, r0
 8007204:	429e      	cmp	r6, r3
 8007206:	460c      	mov	r4, r1
 8007208:	4690      	mov	r8, r2
 800720a:	4699      	mov	r9, r3
 800720c:	d837      	bhi.n	800727e <__ssputs_r+0x82>
 800720e:	898a      	ldrh	r2, [r1, #12]
 8007210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007214:	d031      	beq.n	800727a <__ssputs_r+0x7e>
 8007216:	2302      	movs	r3, #2
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	6909      	ldr	r1, [r1, #16]
 800721c:	1a6f      	subs	r7, r5, r1
 800721e:	6965      	ldr	r5, [r4, #20]
 8007220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007224:	fb95 f5f3 	sdiv	r5, r5, r3
 8007228:	f109 0301 	add.w	r3, r9, #1
 800722c:	443b      	add	r3, r7
 800722e:	429d      	cmp	r5, r3
 8007230:	bf38      	it	cc
 8007232:	461d      	movcc	r5, r3
 8007234:	0553      	lsls	r3, r2, #21
 8007236:	d530      	bpl.n	800729a <__ssputs_r+0x9e>
 8007238:	4629      	mov	r1, r5
 800723a:	f7fc fb57 	bl	80038ec <_malloc_r>
 800723e:	4606      	mov	r6, r0
 8007240:	b950      	cbnz	r0, 8007258 <__ssputs_r+0x5c>
 8007242:	230c      	movs	r3, #12
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	f8ca 3000 	str.w	r3, [sl]
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007252:	81a3      	strh	r3, [r4, #12]
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	463a      	mov	r2, r7
 800725a:	6921      	ldr	r1, [r4, #16]
 800725c:	f7fc fae6 	bl	800382c <memcpy>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	6126      	str	r6, [r4, #16]
 800726e:	443e      	add	r6, r7
 8007270:	6026      	str	r6, [r4, #0]
 8007272:	464e      	mov	r6, r9
 8007274:	6165      	str	r5, [r4, #20]
 8007276:	1bed      	subs	r5, r5, r7
 8007278:	60a5      	str	r5, [r4, #8]
 800727a:	454e      	cmp	r6, r9
 800727c:	d900      	bls.n	8007280 <__ssputs_r+0x84>
 800727e:	464e      	mov	r6, r9
 8007280:	4632      	mov	r2, r6
 8007282:	4641      	mov	r1, r8
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	f7ff fb71 	bl	800696c <memmove>
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	2000      	movs	r0, #0
 800728e:	1b9b      	subs	r3, r3, r6
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	441e      	add	r6, r3
 8007296:	6026      	str	r6, [r4, #0]
 8007298:	e7dc      	b.n	8007254 <__ssputs_r+0x58>
 800729a:	462a      	mov	r2, r5
 800729c:	f7ff ff88 	bl	80071b0 <_realloc_r>
 80072a0:	4606      	mov	r6, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d1e2      	bne.n	800726c <__ssputs_r+0x70>
 80072a6:	6921      	ldr	r1, [r4, #16]
 80072a8:	4650      	mov	r0, sl
 80072aa:	f7fc fad3 	bl	8003854 <_free_r>
 80072ae:	e7c8      	b.n	8007242 <__ssputs_r+0x46>

080072b0 <_svfiprintf_r>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	461d      	mov	r5, r3
 80072b6:	898b      	ldrh	r3, [r1, #12]
 80072b8:	b09d      	sub	sp, #116	; 0x74
 80072ba:	061f      	lsls	r7, r3, #24
 80072bc:	4680      	mov	r8, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	4616      	mov	r6, r2
 80072c2:	d50f      	bpl.n	80072e4 <_svfiprintf_r+0x34>
 80072c4:	690b      	ldr	r3, [r1, #16]
 80072c6:	b96b      	cbnz	r3, 80072e4 <_svfiprintf_r+0x34>
 80072c8:	2140      	movs	r1, #64	; 0x40
 80072ca:	f7fc fb0f 	bl	80038ec <_malloc_r>
 80072ce:	6020      	str	r0, [r4, #0]
 80072d0:	6120      	str	r0, [r4, #16]
 80072d2:	b928      	cbnz	r0, 80072e0 <_svfiprintf_r+0x30>
 80072d4:	230c      	movs	r3, #12
 80072d6:	f8c8 3000 	str.w	r3, [r8]
 80072da:	f04f 30ff 	mov.w	r0, #4294967295
 80072de:	e0c8      	b.n	8007472 <_svfiprintf_r+0x1c2>
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	6163      	str	r3, [r4, #20]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9309      	str	r3, [sp, #36]	; 0x24
 80072e8:	2320      	movs	r3, #32
 80072ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072ee:	2330      	movs	r3, #48	; 0x30
 80072f0:	f04f 0b01 	mov.w	fp, #1
 80072f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f8:	9503      	str	r5, [sp, #12]
 80072fa:	4637      	mov	r7, r6
 80072fc:	463d      	mov	r5, r7
 80072fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007302:	b10b      	cbz	r3, 8007308 <_svfiprintf_r+0x58>
 8007304:	2b25      	cmp	r3, #37	; 0x25
 8007306:	d13e      	bne.n	8007386 <_svfiprintf_r+0xd6>
 8007308:	ebb7 0a06 	subs.w	sl, r7, r6
 800730c:	d00b      	beq.n	8007326 <_svfiprintf_r+0x76>
 800730e:	4653      	mov	r3, sl
 8007310:	4632      	mov	r2, r6
 8007312:	4621      	mov	r1, r4
 8007314:	4640      	mov	r0, r8
 8007316:	f7ff ff71 	bl	80071fc <__ssputs_r>
 800731a:	3001      	adds	r0, #1
 800731c:	f000 80a4 	beq.w	8007468 <_svfiprintf_r+0x1b8>
 8007320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007322:	4453      	add	r3, sl
 8007324:	9309      	str	r3, [sp, #36]	; 0x24
 8007326:	783b      	ldrb	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 809d 	beq.w	8007468 <_svfiprintf_r+0x1b8>
 800732e:	2300      	movs	r3, #0
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	9307      	str	r3, [sp, #28]
 800733c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007340:	931a      	str	r3, [sp, #104]	; 0x68
 8007342:	462f      	mov	r7, r5
 8007344:	2205      	movs	r2, #5
 8007346:	f817 1b01 	ldrb.w	r1, [r7], #1
 800734a:	4850      	ldr	r0, [pc, #320]	; (800748c <_svfiprintf_r+0x1dc>)
 800734c:	f7ff fb00 	bl	8006950 <memchr>
 8007350:	9b04      	ldr	r3, [sp, #16]
 8007352:	b9d0      	cbnz	r0, 800738a <_svfiprintf_r+0xda>
 8007354:	06d9      	lsls	r1, r3, #27
 8007356:	bf44      	itt	mi
 8007358:	2220      	movmi	r2, #32
 800735a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800735e:	071a      	lsls	r2, r3, #28
 8007360:	bf44      	itt	mi
 8007362:	222b      	movmi	r2, #43	; 0x2b
 8007364:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007368:	782a      	ldrb	r2, [r5, #0]
 800736a:	2a2a      	cmp	r2, #42	; 0x2a
 800736c:	d015      	beq.n	800739a <_svfiprintf_r+0xea>
 800736e:	462f      	mov	r7, r5
 8007370:	2000      	movs	r0, #0
 8007372:	250a      	movs	r5, #10
 8007374:	9a07      	ldr	r2, [sp, #28]
 8007376:	4639      	mov	r1, r7
 8007378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800737c:	3b30      	subs	r3, #48	; 0x30
 800737e:	2b09      	cmp	r3, #9
 8007380:	d94d      	bls.n	800741e <_svfiprintf_r+0x16e>
 8007382:	b1b8      	cbz	r0, 80073b4 <_svfiprintf_r+0x104>
 8007384:	e00f      	b.n	80073a6 <_svfiprintf_r+0xf6>
 8007386:	462f      	mov	r7, r5
 8007388:	e7b8      	b.n	80072fc <_svfiprintf_r+0x4c>
 800738a:	4a40      	ldr	r2, [pc, #256]	; (800748c <_svfiprintf_r+0x1dc>)
 800738c:	463d      	mov	r5, r7
 800738e:	1a80      	subs	r0, r0, r2
 8007390:	fa0b f000 	lsl.w	r0, fp, r0
 8007394:	4318      	orrs	r0, r3
 8007396:	9004      	str	r0, [sp, #16]
 8007398:	e7d3      	b.n	8007342 <_svfiprintf_r+0x92>
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	1d11      	adds	r1, r2, #4
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	9103      	str	r1, [sp, #12]
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	db01      	blt.n	80073aa <_svfiprintf_r+0xfa>
 80073a6:	9207      	str	r2, [sp, #28]
 80073a8:	e004      	b.n	80073b4 <_svfiprintf_r+0x104>
 80073aa:	4252      	negs	r2, r2
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	9207      	str	r2, [sp, #28]
 80073b2:	9304      	str	r3, [sp, #16]
 80073b4:	783b      	ldrb	r3, [r7, #0]
 80073b6:	2b2e      	cmp	r3, #46	; 0x2e
 80073b8:	d10c      	bne.n	80073d4 <_svfiprintf_r+0x124>
 80073ba:	787b      	ldrb	r3, [r7, #1]
 80073bc:	2b2a      	cmp	r3, #42	; 0x2a
 80073be:	d133      	bne.n	8007428 <_svfiprintf_r+0x178>
 80073c0:	9b03      	ldr	r3, [sp, #12]
 80073c2:	3702      	adds	r7, #2
 80073c4:	1d1a      	adds	r2, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9203      	str	r2, [sp, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfb8      	it	lt
 80073ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	4d2e      	ldr	r5, [pc, #184]	; (8007490 <_svfiprintf_r+0x1e0>)
 80073d6:	2203      	movs	r2, #3
 80073d8:	7839      	ldrb	r1, [r7, #0]
 80073da:	4628      	mov	r0, r5
 80073dc:	f7ff fab8 	bl	8006950 <memchr>
 80073e0:	b138      	cbz	r0, 80073f2 <_svfiprintf_r+0x142>
 80073e2:	2340      	movs	r3, #64	; 0x40
 80073e4:	1b40      	subs	r0, r0, r5
 80073e6:	fa03 f000 	lsl.w	r0, r3, r0
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	3701      	adds	r7, #1
 80073ee:	4303      	orrs	r3, r0
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	7839      	ldrb	r1, [r7, #0]
 80073f4:	2206      	movs	r2, #6
 80073f6:	4827      	ldr	r0, [pc, #156]	; (8007494 <_svfiprintf_r+0x1e4>)
 80073f8:	1c7e      	adds	r6, r7, #1
 80073fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073fe:	f7ff faa7 	bl	8006950 <memchr>
 8007402:	2800      	cmp	r0, #0
 8007404:	d038      	beq.n	8007478 <_svfiprintf_r+0x1c8>
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <_svfiprintf_r+0x1e8>)
 8007408:	bb13      	cbnz	r3, 8007450 <_svfiprintf_r+0x1a0>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	3307      	adds	r3, #7
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	3308      	adds	r3, #8
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007418:	444b      	add	r3, r9
 800741a:	9309      	str	r3, [sp, #36]	; 0x24
 800741c:	e76d      	b.n	80072fa <_svfiprintf_r+0x4a>
 800741e:	fb05 3202 	mla	r2, r5, r2, r3
 8007422:	2001      	movs	r0, #1
 8007424:	460f      	mov	r7, r1
 8007426:	e7a6      	b.n	8007376 <_svfiprintf_r+0xc6>
 8007428:	2300      	movs	r3, #0
 800742a:	250a      	movs	r5, #10
 800742c:	4619      	mov	r1, r3
 800742e:	3701      	adds	r7, #1
 8007430:	9305      	str	r3, [sp, #20]
 8007432:	4638      	mov	r0, r7
 8007434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007438:	3a30      	subs	r2, #48	; 0x30
 800743a:	2a09      	cmp	r2, #9
 800743c:	d903      	bls.n	8007446 <_svfiprintf_r+0x196>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0c8      	beq.n	80073d4 <_svfiprintf_r+0x124>
 8007442:	9105      	str	r1, [sp, #20]
 8007444:	e7c6      	b.n	80073d4 <_svfiprintf_r+0x124>
 8007446:	fb05 2101 	mla	r1, r5, r1, r2
 800744a:	2301      	movs	r3, #1
 800744c:	4607      	mov	r7, r0
 800744e:	e7f0      	b.n	8007432 <_svfiprintf_r+0x182>
 8007450:	ab03      	add	r3, sp, #12
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4622      	mov	r2, r4
 8007456:	4b11      	ldr	r3, [pc, #68]	; (800749c <_svfiprintf_r+0x1ec>)
 8007458:	a904      	add	r1, sp, #16
 800745a:	4640      	mov	r0, r8
 800745c:	f7fc fb32 	bl	8003ac4 <_printf_float>
 8007460:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007464:	4681      	mov	r9, r0
 8007466:	d1d6      	bne.n	8007416 <_svfiprintf_r+0x166>
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	065b      	lsls	r3, r3, #25
 800746c:	f53f af35 	bmi.w	80072da <_svfiprintf_r+0x2a>
 8007470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007472:	b01d      	add	sp, #116	; 0x74
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	ab03      	add	r3, sp, #12
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	4622      	mov	r2, r4
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <_svfiprintf_r+0x1ec>)
 8007480:	a904      	add	r1, sp, #16
 8007482:	4640      	mov	r0, r8
 8007484:	f7fc fdca 	bl	800401c <_printf_i>
 8007488:	e7ea      	b.n	8007460 <_svfiprintf_r+0x1b0>
 800748a:	bf00      	nop
 800748c:	08007f1c 	.word	0x08007f1c
 8007490:	08007f22 	.word	0x08007f22
 8007494:	08007f26 	.word	0x08007f26
 8007498:	08003ac5 	.word	0x08003ac5
 800749c:	080071fd 	.word	0x080071fd

080074a0 <_read_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4605      	mov	r5, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	2200      	movs	r2, #0
 80074aa:	4c05      	ldr	r4, [pc, #20]	; (80074c0 <_read_r+0x20>)
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7fc f898 	bl	80035e4 <_read>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_read_r+0x1e>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	b103      	cbz	r3, 80074be <_read_r+0x1e>
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	200006b0 	.word	0x200006b0

080074c4 <_fstat_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	4c06      	ldr	r4, [pc, #24]	; (80074e4 <_fstat_r+0x20>)
 80074ca:	4605      	mov	r5, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	f7fc f8cb 	bl	800366c <_fstat>
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d102      	bne.n	80074e0 <_fstat_r+0x1c>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	b103      	cbz	r3, 80074e0 <_fstat_r+0x1c>
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	200006b0 	.word	0x200006b0

080074e8 <_isatty_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	2300      	movs	r3, #0
 80074ec:	4c05      	ldr	r4, [pc, #20]	; (8007504 <_isatty_r+0x1c>)
 80074ee:	4605      	mov	r5, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	f7fc f8c9 	bl	800368a <_isatty>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_isatty_r+0x1a>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_isatty_r+0x1a>
 8007500:	602b      	str	r3, [r5, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	200006b0 	.word	0x200006b0

08007508 <_malloc_usable_size_r>:
 8007508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750c:	1f18      	subs	r0, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	bfbc      	itt	lt
 8007512:	580b      	ldrlt	r3, [r1, r0]
 8007514:	18c0      	addlt	r0, r0, r3
 8007516:	4770      	bx	lr

08007518 <log>:
 8007518:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800751c:	b08a      	sub	sp, #40	; 0x28
 800751e:	4604      	mov	r4, r0
 8007520:	460d      	mov	r5, r1
 8007522:	f000 f875 	bl	8007610 <__ieee754_log>
 8007526:	4b34      	ldr	r3, [pc, #208]	; (80075f8 <log+0xe0>)
 8007528:	4680      	mov	r8, r0
 800752a:	f993 6000 	ldrsb.w	r6, [r3]
 800752e:	4689      	mov	r9, r1
 8007530:	1c73      	adds	r3, r6, #1
 8007532:	d05b      	beq.n	80075ec <log+0xd4>
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f9 fa80 	bl	8000a40 <__aeabi_dcmpun>
 8007540:	2800      	cmp	r0, #0
 8007542:	d153      	bne.n	80075ec <log+0xd4>
 8007544:	2200      	movs	r2, #0
 8007546:	2300      	movs	r3, #0
 8007548:	4620      	mov	r0, r4
 800754a:	4629      	mov	r1, r5
 800754c:	f7f9 fa6e 	bl	8000a2c <__aeabi_dcmpgt>
 8007550:	2800      	cmp	r0, #0
 8007552:	d14b      	bne.n	80075ec <log+0xd4>
 8007554:	4b29      	ldr	r3, [pc, #164]	; (80075fc <log+0xe4>)
 8007556:	9008      	str	r0, [sp, #32]
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800755e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007562:	b9a6      	cbnz	r6, 800758e <log+0x76>
 8007564:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007568:	4b25      	ldr	r3, [pc, #148]	; (8007600 <log+0xe8>)
 800756a:	4620      	mov	r0, r4
 800756c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007570:	4629      	mov	r1, r5
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	f7f9 fa31 	bl	80009dc <__aeabi_dcmpeq>
 800757a:	bb40      	cbnz	r0, 80075ce <log+0xb6>
 800757c:	2301      	movs	r3, #1
 800757e:	2e02      	cmp	r6, #2
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	d119      	bne.n	80075b8 <log+0xa0>
 8007584:	f7fc f8f8 	bl	8003778 <__errno>
 8007588:	2321      	movs	r3, #33	; 0x21
 800758a:	6003      	str	r3, [r0, #0]
 800758c:	e019      	b.n	80075c2 <log+0xaa>
 800758e:	2200      	movs	r2, #0
 8007590:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <log+0xec>)
 8007592:	4620      	mov	r0, r4
 8007594:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007598:	4629      	mov	r1, r5
 800759a:	2200      	movs	r2, #0
 800759c:	2300      	movs	r3, #0
 800759e:	f7f9 fa1d 	bl	80009dc <__aeabi_dcmpeq>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0ea      	beq.n	800757c <log+0x64>
 80075a6:	2302      	movs	r3, #2
 80075a8:	429e      	cmp	r6, r3
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	d111      	bne.n	80075d2 <log+0xba>
 80075ae:	f7fc f8e3 	bl	8003778 <__errno>
 80075b2:	2322      	movs	r3, #34	; 0x22
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	e011      	b.n	80075dc <log+0xc4>
 80075b8:	4668      	mov	r0, sp
 80075ba:	f000 f9db 	bl	8007974 <matherr>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d0e0      	beq.n	8007584 <log+0x6c>
 80075c2:	4811      	ldr	r0, [pc, #68]	; (8007608 <log+0xf0>)
 80075c4:	f000 f9d8 	bl	8007978 <nan>
 80075c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075cc:	e006      	b.n	80075dc <log+0xc4>
 80075ce:	2302      	movs	r3, #2
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4668      	mov	r0, sp
 80075d4:	f000 f9ce 	bl	8007974 <matherr>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d0e8      	beq.n	80075ae <log+0x96>
 80075dc:	9b08      	ldr	r3, [sp, #32]
 80075de:	b11b      	cbz	r3, 80075e8 <log+0xd0>
 80075e0:	f7fc f8ca 	bl	8003778 <__errno>
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	6003      	str	r3, [r0, #0]
 80075e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	b00a      	add	sp, #40	; 0x28
 80075f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80075f6:	bf00      	nop
 80075f8:	200001e0 	.word	0x200001e0
 80075fc:	08007f2d 	.word	0x08007f2d
 8007600:	c7efffff 	.word	0xc7efffff
 8007604:	fff00000 	.word	0xfff00000
 8007608:	08007f21 	.word	0x08007f21
 800760c:	00000000 	.word	0x00000000

08007610 <__ieee754_log>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007618:	b087      	sub	sp, #28
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	460d      	mov	r5, r1
 8007620:	da24      	bge.n	800766c <__ieee754_log+0x5c>
 8007622:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007626:	4304      	orrs	r4, r0
 8007628:	d108      	bne.n	800763c <__ieee754_log+0x2c>
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	2000      	movs	r0, #0
 8007630:	49cb      	ldr	r1, [pc, #812]	; (8007960 <__ieee754_log+0x350>)
 8007632:	f7f9 f895 	bl	8000760 <__aeabi_ddiv>
 8007636:	b007      	add	sp, #28
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	2900      	cmp	r1, #0
 800763e:	da04      	bge.n	800764a <__ieee754_log+0x3a>
 8007640:	f7f8 fdac 	bl	800019c <__aeabi_dsub>
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	e7f3      	b.n	8007632 <__ieee754_log+0x22>
 800764a:	2200      	movs	r2, #0
 800764c:	4bc5      	ldr	r3, [pc, #788]	; (8007964 <__ieee754_log+0x354>)
 800764e:	f7f8 ff5d 	bl	800050c <__aeabi_dmul>
 8007652:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	460d      	mov	r5, r1
 800765c:	49c2      	ldr	r1, [pc, #776]	; (8007968 <__ieee754_log+0x358>)
 800765e:	428d      	cmp	r5, r1
 8007660:	dd06      	ble.n	8007670 <__ieee754_log+0x60>
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	f7f8 fd9b 	bl	80001a0 <__adddf3>
 800766a:	e7e4      	b.n	8007636 <__ieee754_log+0x26>
 800766c:	2600      	movs	r6, #0
 800766e:	e7f5      	b.n	800765c <__ieee754_log+0x4c>
 8007670:	152c      	asrs	r4, r5, #20
 8007672:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007676:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800767a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800767e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8007682:	4426      	add	r6, r4
 8007684:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8007688:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800768c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8007690:	ea41 0305 	orr.w	r3, r1, r5
 8007694:	4610      	mov	r0, r2
 8007696:	4619      	mov	r1, r3
 8007698:	2200      	movs	r2, #0
 800769a:	4bb4      	ldr	r3, [pc, #720]	; (800796c <__ieee754_log+0x35c>)
 800769c:	f7f8 fd7e 	bl	800019c <__aeabi_dsub>
 80076a0:	1cab      	adds	r3, r5, #2
 80076a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80076ac:	4682      	mov	sl, r0
 80076ae:	468b      	mov	fp, r1
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	dc53      	bgt.n	800775e <__ieee754_log+0x14e>
 80076b6:	2300      	movs	r3, #0
 80076b8:	f7f9 f990 	bl	80009dc <__aeabi_dcmpeq>
 80076bc:	b1d0      	cbz	r0, 80076f4 <__ieee754_log+0xe4>
 80076be:	2c00      	cmp	r4, #0
 80076c0:	f000 8120 	beq.w	8007904 <__ieee754_log+0x2f4>
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7f8 feb7 	bl	8000438 <__aeabi_i2d>
 80076ca:	a391      	add	r3, pc, #580	; (adr r3, 8007910 <__ieee754_log+0x300>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	f7f8 ff1a 	bl	800050c <__aeabi_dmul>
 80076d8:	a38f      	add	r3, pc, #572	; (adr r3, 8007918 <__ieee754_log+0x308>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	4604      	mov	r4, r0
 80076e0:	460d      	mov	r5, r1
 80076e2:	4630      	mov	r0, r6
 80076e4:	4639      	mov	r1, r7
 80076e6:	f7f8 ff11 	bl	800050c <__aeabi_dmul>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	e7b8      	b.n	8007666 <__ieee754_log+0x56>
 80076f4:	a38a      	add	r3, pc, #552	; (adr r3, 8007920 <__ieee754_log+0x310>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4650      	mov	r0, sl
 80076fc:	4659      	mov	r1, fp
 80076fe:	f7f8 ff05 	bl	800050c <__aeabi_dmul>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	2000      	movs	r0, #0
 8007708:	4999      	ldr	r1, [pc, #612]	; (8007970 <__ieee754_log+0x360>)
 800770a:	f7f8 fd47 	bl	800019c <__aeabi_dsub>
 800770e:	4652      	mov	r2, sl
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	465b      	mov	r3, fp
 8007716:	4650      	mov	r0, sl
 8007718:	4659      	mov	r1, fp
 800771a:	f7f8 fef7 	bl	800050c <__aeabi_dmul>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	f7f8 fef1 	bl	800050c <__aeabi_dmul>
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	b914      	cbnz	r4, 8007736 <__ieee754_log+0x126>
 8007730:	4632      	mov	r2, r6
 8007732:	463b      	mov	r3, r7
 8007734:	e0a0      	b.n	8007878 <__ieee754_log+0x268>
 8007736:	4620      	mov	r0, r4
 8007738:	f7f8 fe7e 	bl	8000438 <__aeabi_i2d>
 800773c:	a374      	add	r3, pc, #464	; (adr r3, 8007910 <__ieee754_log+0x300>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	f7f8 fee1 	bl	800050c <__aeabi_dmul>
 800774a:	a373      	add	r3, pc, #460	; (adr r3, 8007918 <__ieee754_log+0x308>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f8 fed8 	bl	800050c <__aeabi_dmul>
 800775c:	e0a5      	b.n	80078aa <__ieee754_log+0x29a>
 800775e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007762:	f7f8 fd1d 	bl	80001a0 <__adddf3>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	f7f8 fff7 	bl	8000760 <__aeabi_ddiv>
 8007772:	e9cd 0100 	strd	r0, r1, [sp]
 8007776:	4620      	mov	r0, r4
 8007778:	f7f8 fe5e 	bl	8000438 <__aeabi_i2d>
 800777c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007784:	4610      	mov	r0, r2
 8007786:	4619      	mov	r1, r3
 8007788:	f7f8 fec0 	bl	800050c <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007794:	f7f8 feba 	bl	800050c <__aeabi_dmul>
 8007798:	a363      	add	r3, pc, #396	; (adr r3, 8007928 <__ieee754_log+0x318>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	4680      	mov	r8, r0
 80077a0:	4689      	mov	r9, r1
 80077a2:	f7f8 feb3 	bl	800050c <__aeabi_dmul>
 80077a6:	a362      	add	r3, pc, #392	; (adr r3, 8007930 <__ieee754_log+0x320>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fcf8 	bl	80001a0 <__adddf3>
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	f7f8 feaa 	bl	800050c <__aeabi_dmul>
 80077b8:	a35f      	add	r3, pc, #380	; (adr r3, 8007938 <__ieee754_log+0x328>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fcef 	bl	80001a0 <__adddf3>
 80077c2:	4642      	mov	r2, r8
 80077c4:	464b      	mov	r3, r9
 80077c6:	f7f8 fea1 	bl	800050c <__aeabi_dmul>
 80077ca:	a35d      	add	r3, pc, #372	; (adr r3, 8007940 <__ieee754_log+0x330>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fce6 	bl	80001a0 <__adddf3>
 80077d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d8:	f7f8 fe98 	bl	800050c <__aeabi_dmul>
 80077dc:	a35a      	add	r3, pc, #360	; (adr r3, 8007948 <__ieee754_log+0x338>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	f7f8 fe8f 	bl	800050c <__aeabi_dmul>
 80077ee:	a358      	add	r3, pc, #352	; (adr r3, 8007950 <__ieee754_log+0x340>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fcd4 	bl	80001a0 <__adddf3>
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	f7f8 fe86 	bl	800050c <__aeabi_dmul>
 8007800:	a355      	add	r3, pc, #340	; (adr r3, 8007958 <__ieee754_log+0x348>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fccb 	bl	80001a0 <__adddf3>
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	f7f8 fe7d 	bl	800050c <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800781a:	f7f8 fcc1 	bl	80001a0 <__adddf3>
 800781e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8007822:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007826:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800782a:	3551      	adds	r5, #81	; 0x51
 800782c:	4335      	orrs	r5, r6
 800782e:	2d00      	cmp	r5, #0
 8007830:	4680      	mov	r8, r0
 8007832:	4689      	mov	r9, r1
 8007834:	dd48      	ble.n	80078c8 <__ieee754_log+0x2b8>
 8007836:	2200      	movs	r2, #0
 8007838:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <__ieee754_log+0x360>)
 800783a:	4650      	mov	r0, sl
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fe65 	bl	800050c <__aeabi_dmul>
 8007842:	4652      	mov	r2, sl
 8007844:	465b      	mov	r3, fp
 8007846:	f7f8 fe61 	bl	800050c <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4606      	mov	r6, r0
 8007850:	460f      	mov	r7, r1
 8007852:	4640      	mov	r0, r8
 8007854:	4649      	mov	r1, r9
 8007856:	f7f8 fca3 	bl	80001a0 <__adddf3>
 800785a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800785e:	f7f8 fe55 	bl	800050c <__aeabi_dmul>
 8007862:	4680      	mov	r8, r0
 8007864:	4689      	mov	r9, r1
 8007866:	b964      	cbnz	r4, 8007882 <__ieee754_log+0x272>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fc94 	bl	800019c <__aeabi_dsub>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4650      	mov	r0, sl
 800787a:	4659      	mov	r1, fp
 800787c:	f7f8 fc8e 	bl	800019c <__aeabi_dsub>
 8007880:	e6d9      	b.n	8007636 <__ieee754_log+0x26>
 8007882:	a323      	add	r3, pc, #140	; (adr r3, 8007910 <__ieee754_log+0x300>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788c:	f7f8 fe3e 	bl	800050c <__aeabi_dmul>
 8007890:	a321      	add	r3, pc, #132	; (adr r3, 8007918 <__ieee754_log+0x308>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	4604      	mov	r4, r0
 8007898:	460d      	mov	r5, r1
 800789a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789e:	f7f8 fe35 	bl	800050c <__aeabi_dmul>
 80078a2:	4642      	mov	r2, r8
 80078a4:	464b      	mov	r3, r9
 80078a6:	f7f8 fc7b 	bl	80001a0 <__adddf3>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4630      	mov	r0, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	f7f8 fc73 	bl	800019c <__aeabi_dsub>
 80078b6:	4652      	mov	r2, sl
 80078b8:	465b      	mov	r3, fp
 80078ba:	f7f8 fc6f 	bl	800019c <__aeabi_dsub>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4620      	mov	r0, r4
 80078c4:	4629      	mov	r1, r5
 80078c6:	e7d9      	b.n	800787c <__ieee754_log+0x26c>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4650      	mov	r0, sl
 80078ce:	4659      	mov	r1, fp
 80078d0:	f7f8 fc64 	bl	800019c <__aeabi_dsub>
 80078d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078d8:	f7f8 fe18 	bl	800050c <__aeabi_dmul>
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	2c00      	cmp	r4, #0
 80078e2:	f43f af25 	beq.w	8007730 <__ieee754_log+0x120>
 80078e6:	a30a      	add	r3, pc, #40	; (adr r3, 8007910 <__ieee754_log+0x300>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f0:	f7f8 fe0c 	bl	800050c <__aeabi_dmul>
 80078f4:	a308      	add	r3, pc, #32	; (adr r3, 8007918 <__ieee754_log+0x308>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4604      	mov	r4, r0
 80078fc:	460d      	mov	r5, r1
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	e729      	b.n	8007758 <__ieee754_log+0x148>
 8007904:	2000      	movs	r0, #0
 8007906:	2100      	movs	r1, #0
 8007908:	e695      	b.n	8007636 <__ieee754_log+0x26>
 800790a:	bf00      	nop
 800790c:	f3af 8000 	nop.w
 8007910:	fee00000 	.word	0xfee00000
 8007914:	3fe62e42 	.word	0x3fe62e42
 8007918:	35793c76 	.word	0x35793c76
 800791c:	3dea39ef 	.word	0x3dea39ef
 8007920:	55555555 	.word	0x55555555
 8007924:	3fd55555 	.word	0x3fd55555
 8007928:	df3e5244 	.word	0xdf3e5244
 800792c:	3fc2f112 	.word	0x3fc2f112
 8007930:	96cb03de 	.word	0x96cb03de
 8007934:	3fc74664 	.word	0x3fc74664
 8007938:	94229359 	.word	0x94229359
 800793c:	3fd24924 	.word	0x3fd24924
 8007940:	55555593 	.word	0x55555593
 8007944:	3fe55555 	.word	0x3fe55555
 8007948:	d078c69f 	.word	0xd078c69f
 800794c:	3fc39a09 	.word	0x3fc39a09
 8007950:	1d8e78af 	.word	0x1d8e78af
 8007954:	3fcc71c5 	.word	0x3fcc71c5
 8007958:	9997fa04 	.word	0x9997fa04
 800795c:	3fd99999 	.word	0x3fd99999
 8007960:	c3500000 	.word	0xc3500000
 8007964:	43500000 	.word	0x43500000
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	3fe00000 	.word	0x3fe00000

08007974 <matherr>:
 8007974:	2000      	movs	r0, #0
 8007976:	4770      	bx	lr

08007978 <nan>:
 8007978:	2000      	movs	r0, #0
 800797a:	4901      	ldr	r1, [pc, #4]	; (8007980 <nan+0x8>)
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	7ff80000 	.word	0x7ff80000

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr
