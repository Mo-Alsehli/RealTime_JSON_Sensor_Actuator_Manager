
SmartEGAT_Task.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08003c38  08003c38  00013c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee0  08003ee0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee0  08003ee0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001d4  080040bc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080040bc  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060c0  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001064  00000000  00000000  000262bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000298  00000000  00000000  00027328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000210  00000000  00000000  000275c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001b13  00000000  00000000  000277d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003335  00000000  00000000  000292e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c183  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003879b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012cc  00000000  00000000  00038818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08003c1c 	.word	0x08003c1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	08003c1c 	.word	0x08003c1c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_TYPE_DEF* ADC , ADC_Config_t* ADCCfg) {
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    // Enable clocks for ADC and GPIO
    RCC_GPIOA_CLk_EN();
 8000df2:	4b46      	ldr	r3, [pc, #280]	; (8000f0c <ADC_Init+0x124>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4a45      	ldr	r2, [pc, #276]	; (8000f0c <ADC_Init+0x124>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6193      	str	r3, [r2, #24]
    if(ADC == ADC1){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a43      	ldr	r2, [pc, #268]	; (8000f10 <ADC_Init+0x128>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d106      	bne.n	8000e14 <ADC_Init+0x2c>
    	RCC_ADC1_CLK_EN();
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <ADC_Init+0x124>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4a40      	ldr	r2, [pc, #256]	; (8000f0c <ADC_Init+0x124>)
 8000e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e10:	6193      	str	r3, [r2, #24]
 8000e12:	e009      	b.n	8000e28 <ADC_Init+0x40>
    }else if(ADC == ADC2){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a3f      	ldr	r2, [pc, #252]	; (8000f14 <ADC_Init+0x12c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d105      	bne.n	8000e28 <ADC_Init+0x40>
    	RCC_ADC2_CLK_EN();
 8000e1c:	4b3b      	ldr	r3, [pc, #236]	; (8000f0c <ADC_Init+0x124>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a3a      	ldr	r2, [pc, #232]	; (8000f0c <ADC_Init+0x124>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6193      	str	r3, [r2, #24]
    }

    // Configure GPIO Pins PA0 and PA1 for analog input (reset to analog mode)
    GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000e28:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <ADC_Init+0x130>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3a      	ldr	r2, [pc, #232]	; (8000f18 <ADC_Init+0x130>)
 8000e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e32:	6013      	str	r3, [r2, #0]

    // Enable ADC by setting ADON bit
    ADC->CR2 |= (1 << 0);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f043 0201 	orr.w	r2, r3, #1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	609a      	str	r2, [r3, #8]

    // SCAN mode Enabled
    ADC->CR1 |= ADCCfg->mode;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]

    // Set continuous or single conversion mode
    if (ADCCfg->convMode == ADC_Conv_CONT_MODE) {
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d106      	bne.n	8000e64 <ADC_Init+0x7c>
        ADC->CR2 |= (1 << 1); // Enable continuous mode
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f043 0202 	orr.w	r2, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	e009      	b.n	8000e78 <ADC_Init+0x90>
    } else if (ADCCfg->convMode == ADC_Conv_Single_MODE) {
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	799b      	ldrb	r3, [r3, #6]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <ADC_Init+0x90>
        ADC->CR2 &= ~(1 << 1); // Disable continuous mode (single conversion)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f023 0202 	bic.w	r2, r3, #2
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
    }

    // Configure data alignment (right or left)
    if (ADCCfg->dataAlginement == ADC_DataAlign_Right) {
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	79db      	ldrb	r3, [r3, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <ADC_Init+0xa6>
        ADC->CR2 &= ~(1 << 11); // Right alignment
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	e009      	b.n	8000ea2 <ADC_Init+0xba>
    } else if (ADCCfg->dataAlginement == ADC_DataAlign_Left) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d105      	bne.n	8000ea2 <ADC_Init+0xba>
        ADC->CR2 |= (1 << 11); // Left alignment
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
    }

    // Enable or disable End of Conversion (EOC) interrupt
    if (ADCCfg->IRQ_Enable == ADC_IRQ_Enable) {
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	7a1b      	ldrb	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10c      	bne.n	8000ec4 <ADC_Init+0xdc>
        NVIC_IRQ18_ADC_Enable; // Enable ADC interrupt in NVIC
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <ADC_Init+0x134>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <ADC_Init+0x134>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
        ADC->CR1 |= (1 << 5); // Enable EOC interrupt
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f043 0220 	orr.w	r2, r3, #32
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	e009      	b.n	8000ed8 <ADC_Init+0xf0>
    } else if (ADCCfg->IRQ_Enable == ADC_IRQ_Disable) {
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	7a1b      	ldrb	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <ADC_Init+0xf0>
        ADC->CR1 &= ~(1 << 5); // Disable EOC interrupt
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f023 0220 	bic.w	r2, r3, #32
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	605a      	str	r2, [r3, #4]
    }

    // Set ADC callback if interrupt mode is enabled
    G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <ADC_Init+0x138>)
 8000ede:	6013      	str	r3, [r2, #0]

    // Wait for ADC stabilization (tSTAB)
    for (int i = 0; i <= 1000; i++);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e002      	b.n	8000eec <ADC_Init+0x104>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ef2:	ddf8      	ble.n	8000ee6 <ADC_Init+0xfe>

    // Set ADON again to start the ADC
    ADC->CR2 |= (1 << 0);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40012800 	.word	0x40012800
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	20000204 	.word	0x20000204

08000f24 <ADC_Read_SingleChannel>:


uint16_t ADC_Read_SingleChannel(ADC_TYPE_DEF* ADC, uint16_t channel) {
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]

	uint16_t adcValue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	81fb      	strh	r3, [r7, #14]
    // Select the ADC channel
    ADC->SQR3 = channel;
 8000f34:	887a      	ldrh	r2, [r7, #2]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the conversion
    ADC->CR2 |= ADC_CR2_SWSTART;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	609a      	str	r2, [r3, #8]

    // Wait for the End of  First Conversion Conversion (EOC) flag
    while (!(ADC->SR & ADC_SR_EOC));
 8000f46:	bf00      	nop
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f9      	beq.n	8000f48 <ADC_Read_SingleChannel+0x24>
    // Read the ADC value For Channel 1.
    adcValue = ADC->DR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	81fb      	strh	r3, [r7, #14]

    return adcValue;
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <ADC1_2_IRQHandler>:
	}
	NVIC_IRQ18_ADC_Disable;
	ADC->CR2 &= (1 << 0);
}

void ADC1_2_IRQHandler(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <ADC1_2_IRQHandler+0x30>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <ADC1_2_IRQHandler+0x30>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <ADC1_2_IRQHandler+0x34>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <ADC1_2_IRQHandler+0x34>)
 8000f80:	f023 0302 	bic.w	r3, r3, #2
 8000f84:	6013      	str	r3, [r2, #0]
	ADC2->SR &= ~(1 << 1);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <ADC1_2_IRQHandler+0x38>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <ADC1_2_IRQHandler+0x38>)
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000204 	.word	0x20000204
 8000f9c:	40012400 	.word	0x40012400
 8000fa0:	40012800 	.word	0x40012800

08000fa4 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <EXTI0_IRQHandler+0x1c>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <EXTI0_IRQHandler+0x1c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <EXTI0_IRQHandler+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4798      	blx	r3
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40010400 	.word	0x40010400
 8000fc4:	20000208 	.word	0x20000208

08000fc8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <EXTI1_IRQHandler+0x1c>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <EXTI1_IRQHandler+0x1c>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <EXTI1_IRQHandler+0x20>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4798      	blx	r3
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010400 	.word	0x40010400
 8000fe8:	20000208 	.word	0x20000208

08000fec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <EXTI2_IRQHandler+0x1c>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <EXTI2_IRQHandler+0x1c>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <EXTI2_IRQHandler+0x20>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4798      	blx	r3
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010400 	.word	0x40010400
 800100c:	20000208 	.word	0x20000208

08001010 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <EXTI3_IRQHandler+0x1c>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <EXTI3_IRQHandler+0x1c>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <EXTI3_IRQHandler+0x20>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4798      	blx	r3
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010400 	.word	0x40010400
 8001030:	20000208 	.word	0x20000208

08001034 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <EXTI4_IRQHandler+0x1c>)
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <EXTI4_IRQHandler+0x1c>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <EXTI4_IRQHandler+0x20>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	4798      	blx	r3
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40010400 	.word	0x40010400
 8001054:	20000208 	.word	0x20000208

08001058 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <EXTI9_5_IRQHandler+0xa4>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800108c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001090:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <EXTI9_5_IRQHandler+0xa4>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <EXTI9_5_IRQHandler+0xa4>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <EXTI9_5_IRQHandler+0xa4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d008      	beq.n	80010f2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <EXTI9_5_IRQHandler+0xa0>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <EXTI9_5_IRQHandler+0xa4>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	4798      	blx	r3
	}
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010400 	.word	0x40010400
 80010fc:	20000208 	.word	0x20000208

08001100 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001138:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	4a22      	ldr	r2, [pc, #136]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001152:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001156:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 8001170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001174:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800118e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001192:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 80011b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b6:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <EXTI15_10_IRQHandler+0xdc>)
 80011ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ce:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <EXTI15_10_IRQHandler+0xe0>)
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	4798      	blx	r3
	}
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010400 	.word	0x40010400
 80011e0:	20000208 	.word	0x20000208

080011e4 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b80      	cmp	r3, #128	; 0x80
 80011f2:	d042      	beq.n	800127a <getCRLHPinPos+0x96>
 80011f4:	2b80      	cmp	r3, #128	; 0x80
 80011f6:	dc11      	bgt.n	800121c <getCRLHPinPos+0x38>
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d036      	beq.n	800126a <getCRLHPinPos+0x86>
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	dc06      	bgt.n	800120e <getCRLHPinPos+0x2a>
 8001200:	2b02      	cmp	r3, #2
 8001202:	d02e      	beq.n	8001262 <getCRLHPinPos+0x7e>
 8001204:	2b04      	cmp	r3, #4
 8001206:	d02e      	beq.n	8001266 <getCRLHPinPos+0x82>
 8001208:	2b01      	cmp	r3, #1
 800120a:	d028      	beq.n	800125e <getCRLHPinPos+0x7a>
 800120c:	e047      	b.n	800129e <getCRLHPinPos+0xba>
 800120e:	2b20      	cmp	r3, #32
 8001210:	d02f      	beq.n	8001272 <getCRLHPinPos+0x8e>
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d02f      	beq.n	8001276 <getCRLHPinPos+0x92>
 8001216:	2b10      	cmp	r3, #16
 8001218:	d029      	beq.n	800126e <getCRLHPinPos+0x8a>
 800121a:	e040      	b.n	800129e <getCRLHPinPos+0xba>
 800121c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001220:	d033      	beq.n	800128a <getCRLHPinPos+0xa6>
 8001222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001226:	dc09      	bgt.n	800123c <getCRLHPinPos+0x58>
 8001228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122c:	d029      	beq.n	8001282 <getCRLHPinPos+0x9e>
 800122e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001232:	d028      	beq.n	8001286 <getCRLHPinPos+0xa2>
 8001234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001238:	d021      	beq.n	800127e <getCRLHPinPos+0x9a>
 800123a:	e030      	b.n	800129e <getCRLHPinPos+0xba>
 800123c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001240:	d027      	beq.n	8001292 <getCRLHPinPos+0xae>
 8001242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001246:	dc03      	bgt.n	8001250 <getCRLHPinPos+0x6c>
 8001248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800124c:	d01f      	beq.n	800128e <getCRLHPinPos+0xaa>
 800124e:	e026      	b.n	800129e <getCRLHPinPos+0xba>
 8001250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001254:	d01f      	beq.n	8001296 <getCRLHPinPos+0xb2>
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	d01e      	beq.n	800129a <getCRLHPinPos+0xb6>
 800125c:	e01f      	b.n	800129e <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 800125e:	2300      	movs	r3, #0
 8001260:	e01e      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 8001262:	2304      	movs	r3, #4
 8001264:	e01c      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 8001266:	2308      	movs	r3, #8
 8001268:	e01a      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 800126a:	230c      	movs	r3, #12
 800126c:	e018      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 800126e:	2310      	movs	r3, #16
 8001270:	e016      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 8001272:	2314      	movs	r3, #20
 8001274:	e014      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 8001276:	2318      	movs	r3, #24
 8001278:	e012      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 800127a:	231c      	movs	r3, #28
 800127c:	e010      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 800127e:	2300      	movs	r3, #0
 8001280:	e00e      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 8001282:	2304      	movs	r3, #4
 8001284:	e00c      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 8001286:	2308      	movs	r3, #8
 8001288:	e00a      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 800128a:	230c      	movs	r3, #12
 800128c:	e008      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 800128e:	2310      	movs	r3, #16
 8001290:	e006      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 8001292:	2314      	movs	r3, #20
 8001294:	e004      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 8001296:	2318      	movs	r3, #24
 8001298:	e002      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 800129a:	231c      	movs	r3, #28
 800129c:	e000      	b.n	80012a0 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 80012aa:	b590      	push	{r4, r7, lr}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b80      	cmp	r3, #128	; 0x80
 80012c2:	d902      	bls.n	80012ca <MCAL_GPIO_Init+0x20>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	e000      	b.n	80012cc <MCAL_GPIO_Init+0x22>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff86 	bl	80011e4 <getCRLHPinPos>
 80012d8:	4602      	mov	r2, r0
 80012da:	230f      	movs	r3, #15
 80012dc:	4093      	lsls	r3, r2
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	401a      	ands	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d00b      	beq.n	800130a <MCAL_GPIO_Init+0x60>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	789b      	ldrb	r3, [r3, #2]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d007      	beq.n	800130a <MCAL_GPIO_Init+0x60>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	789b      	ldrb	r3, [r3, #2]
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d003      	beq.n	800130a <MCAL_GPIO_Init+0x60>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	789b      	ldrb	r3, [r3, #2]
 8001306:	2b07      	cmp	r3, #7
 8001308:	d10e      	bne.n	8001328 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	3b04      	subs	r3, #4
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	b25a      	sxtb	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	78db      	ldrb	r3, [r3, #3]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	b25b      	sxtb	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b25b      	sxtb	r3, r3
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e039      	b.n	800139c <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <MCAL_GPIO_Init+0x8e>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10c      	bne.n	8001352 <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	789b      	ldrb	r3, [r3, #2]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	b25a      	sxtb	r2, r3
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e024      	b.n	800139c <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d104      	bne.n	8001364 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e01b      	b.n	800139c <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	789b      	ldrb	r3, [r3, #2]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d107      	bne.n	8001384 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	8812      	ldrh	r2, [r2, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	e00b      	b.n	800139c <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d107      	bne.n	800139c <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 800139c:	7bfc      	ldrb	r4, [r7, #15]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff1e 	bl	80011e4 <getCRLHPinPos>
 80013a8:	4603      	mov	r3, r0
 80013aa:	fa04 f203 	lsl.w	r2, r4, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	601a      	str	r2, [r3, #0]

}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <wait>:
}

// Execution Time (seconds) = (time * 255 * 4) / F_CPU
// when time = 1, It takes 1 Melli-seconds.
void wait(uint32_t time)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e00b      	b.n	80013e6 <wait+0x26>
	{
		for (j = 0; j < 255; j++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	e002      	b.n	80013da <wait+0x1a>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2bfe      	cmp	r3, #254	; 0xfe
 80013de:	d9f9      	bls.n	80013d4 <wait+0x14>
	for (i = 0; i < time; i++)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3ef      	bcc.n	80013ce <wait+0xe>
		;
	}
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d006      	beq.n	8001418 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d302      	bcc.n	8001414 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 800140e:	2b02      	cmp	r3, #2
 8001410:	d004      	beq.n	800141c <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8001412:	e005      	b.n	8001420 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8001416:	e004      	b.n	8001422 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 800141a:	e002      	b.n	8001422 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 800141e:	e000      	b.n	8001422 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	00186a00 	.word	0x00186a00
 8001438:	00f42400 	.word	0x00f42400

0800143c <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8001440:	f7ff ffda 	bl	80013f8 <MCAL_RCC_GET_SYS_CLKFreq>
 8001444:	4601      	mov	r1, r0
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <MCAL_RCC_GET_HCLKFreq+0x20>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	08003c74 	.word	0x08003c74

08001464 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8001468:	f7ff ffe8 	bl	800143c <MCAL_RCC_GET_HCLKFreq>
 800146c:	4601      	mov	r1, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	08003c6c 	.word	0x08003c6c

0800148c <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8001490:	f7ff ffd4 	bl	800143c <MCAL_RCC_GET_HCLKFreq>
 8001494:	4601      	mov	r1, r0
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0adb      	lsrs	r3, r3, #11
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08003c6c 	.word	0x08003c6c

080014b4 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(){
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1 << 0); // Update Interrupt Flag
 80014b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6113      	str	r3, [r2, #16]
	delayFlag = 0;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <TIM2_IRQHandler+0x34>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<CEN);
 80014ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6013      	str	r3, [r2, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000

080014ec <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler() {
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <TIM1_UP_IRQHandler+0x24>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <TIM1_UP_IRQHandler+0x24>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <TIM1_UP_IRQHandler+0x28>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <TIM1_UP_IRQHandler+0x28>)
 8001506:	801a      	strh	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40012c00 	.word	0x40012c00
 8001514:	200001f4 	.word	0x200001f4

08001518 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <TIM3_IRQHandler+0x24>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <TIM3_IRQHandler+0x24>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <TIM3_IRQHandler+0x28>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <TIM3_IRQHandler+0x28>)
 8001532:	801a      	strh	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40000400 	.word	0x40000400
 8001540:	200001f2 	.word	0x200001f2

08001544 <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <TIM4_IRQHandler+0x24>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <TIM4_IRQHandler+0x24>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <TIM4_IRQHandler+0x28>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <TIM4_IRQHandler+0x28>)
 800155e:	801a      	strh	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40000800 	.word	0x40000800
 800156c:	200001f0 	.word	0x200001f0

08001570 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a5d      	ldr	r2, [pc, #372]	; (80016f4 <MCAL_UART_Init+0x184>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d109      	bne.n	8001596 <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <MCAL_UART_Init+0x188>)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8001588:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <MCAL_UART_Init+0x18c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a5b      	ldr	r2, [pc, #364]	; (80016fc <MCAL_UART_Init+0x18c>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	e01a      	b.n	80015cc <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a59      	ldr	r2, [pc, #356]	; (8001700 <MCAL_UART_Init+0x190>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d109      	bne.n	80015b2 <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 800159e:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <MCAL_UART_Init+0x188>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 80015a4:	4b55      	ldr	r3, [pc, #340]	; (80016fc <MCAL_UART_Init+0x18c>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <MCAL_UART_Init+0x18c>)
 80015aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	e00c      	b.n	80015cc <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a53      	ldr	r2, [pc, #332]	; (8001704 <MCAL_UART_Init+0x194>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d108      	bne.n	80015cc <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 80015ba:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <MCAL_UART_Init+0x188>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <MCAL_UART_Init+0x18c>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <MCAL_UART_Init+0x18c>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ca:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	7a12      	ldrb	r2, [r2, #8]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	7a52      	ldrb	r2, [r2, #9]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	7a92      	ldrb	r2, [r2, #10]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	7ad2      	ldrb	r2, [r2, #11]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <MCAL_UART_Init+0x184>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d105      	bne.n	8001632 <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 8001626:	f7ff ff31 	bl	800148c <MCAL_RCC_GET_PCLK2Freq>
 800162a:	4602      	mov	r2, r0
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MCAL_UART_Init+0x198>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e004      	b.n	800163c <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 8001632:	f7ff ff17 	bl	8001464 <MCAL_RCC_GET_PCLK1Freq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <MCAL_UART_Init+0x198>)
 800163a:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MCAL_UART_Init+0x198>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	0119      	lsls	r1, r3, #4
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <MCAL_UART_Init+0x198>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	009a      	lsls	r2, r3, #2
 8001658:	441a      	add	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fbb2 f2f3 	udiv	r2, r2, r3
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <MCAL_UART_Init+0x198>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	2064      	movs	r0, #100	; 0x64
 8001674:	fb00 f303 	mul.w	r3, r0, r3
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <MCAL_UART_Init+0x19c>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	430b      	orrs	r3, r1
 800168a:	4a21      	ldr	r2, [pc, #132]	; (8001710 <MCAL_UART_Init+0x1a0>)
 800168c:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MCAL_UART_Init+0x1a0>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	7b1b      	ldrb	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d026      	beq.n	80016ec <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	7b12      	ldrb	r2, [r2, #12]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <MCAL_UART_Init+0x184>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d106      	bne.n	80016c2 <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a16      	ldr	r2, [pc, #88]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 80016c0:	e014      	b.n	80016ec <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <MCAL_UART_Init+0x190>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d106      	bne.n	80016d8 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a11      	ldr	r2, [pc, #68]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	e009      	b.n	80016ec <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <MCAL_UART_Init+0x194>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d105      	bne.n	80016ec <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <MCAL_UART_Init+0x1a4>)
 80016e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40013800 	.word	0x40013800
 80016f8:	20000250 	.word	0x20000250
 80016fc:	40021000 	.word	0x40021000
 8001700:	40004400 	.word	0x40004400
 8001704:	40014800 	.word	0x40014800
 8001708:	2000024c 	.word	0x2000024c
 800170c:	51eb851f 	.word	0x51eb851f
 8001710:	20000248 	.word	0x20000248
 8001714:	e000e104 	.word	0xe000e104

08001718 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint8_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	4613      	mov	r3, r2
 800172c:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.


	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <MCAL_UART_SendData+0xb4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d103      	bne.n	8001742 <MCAL_UART_SendData+0x2a>
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	7a1b      	ldrb	r3, [r3, #8]
 8001740:	e00a      	b.n	8001758 <MCAL_UART_SendData+0x40>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <MCAL_UART_SendData+0xbc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d103      	bne.n	8001752 <MCAL_UART_SendData+0x3a>
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	7a1b      	ldrb	r3, [r3, #8]
 8001750:	e002      	b.n	8001758 <MCAL_UART_SendData+0x40>
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	7a1b      	ldrb	r3, [r3, #8]
 8001758:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <MCAL_UART_SendData+0xb4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d103      	bne.n	800176a <MCAL_UART_SendData+0x52>
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	7a5b      	ldrb	r3, [r3, #9]
 8001768:	e00a      	b.n	8001780 <MCAL_UART_SendData+0x68>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <MCAL_UART_SendData+0xbc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d103      	bne.n	800177a <MCAL_UART_SendData+0x62>
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	7a5b      	ldrb	r3, [r3, #9]
 8001778:	e002      	b.n	8001780 <MCAL_UART_SendData+0x68>
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MCAL_UART_SendData+0xb8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	7a5b      	ldrb	r3, [r3, #9]
 8001780:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d11c      	bne.n	80017c2 <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	e015      	b.n	80017ba <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}
			if (pollingEn == enable) {
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <MCAL_UART_SendData+0x90>
					while (!(uartx->SR & 1 << 7));
 800179a:	bf00      	nop
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f9      	beq.n	800179c <MCAL_UART_SendData+0x84>
			}
			uartx->DR = data;
 80017a8:	7d7a      	ldrb	r2, [r7, #21]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbe5      	blt.n	800178e <MCAL_UART_SendData+0x76>
		}
	}

}
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40013800 	.word	0x40013800
 80017d0:	20000250 	.word	0x20000250
 80017d4:	40004400 	.word	0x40004400

080017d8 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <MCAL_UART_GPIO_SetPins+0xb8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d118      	bne.n	800181a <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80017ee:	2306      	movs	r3, #6
 80017f0:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4825      	ldr	r0, [pc, #148]	; (8001894 <MCAL_UART_GPIO_SetPins+0xbc>)
 80017fe:	f7ff fd54 	bl	80012aa <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001806:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001808:	2308      	movs	r3, #8
 800180a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	4820      	ldr	r0, [pc, #128]	; (8001894 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001814:	f7ff fd49 	bl	80012aa <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8001818:	e036      	b.n	8001888 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <MCAL_UART_GPIO_SetPins+0xc0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d116      	bne.n	8001850 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001822:	2304      	movs	r3, #4
 8001824:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001826:	2306      	movs	r3, #6
 8001828:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4619      	mov	r1, r3
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001836:	f7ff fd38 	bl	80012aa <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800183a:	2308      	movs	r3, #8
 800183c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 800183e:	2308      	movs	r3, #8
 8001840:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4619      	mov	r1, r3
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <MCAL_UART_GPIO_SetPins+0xbc>)
 800184a:	f7ff fd2e 	bl	80012aa <MCAL_GPIO_Init>
}
 800184e:	e01b      	b.n	8001888 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <MCAL_UART_GPIO_SetPins+0xc4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d117      	bne.n	8001888 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800185e:	2306      	movs	r3, #6
 8001860:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MCAL_UART_GPIO_SetPins+0xc8>)
 800186e:	f7ff fd1c 	bl	80012aa <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001876:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001878:	2308      	movs	r3, #8
 800187a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001884:	f7ff fd11 	bl	80012aa <MCAL_GPIO_Init>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40013800 	.word	0x40013800
 8001894:	40010800 	.word	0x40010800
 8001898:	40004400 	.word	0x40004400
 800189c:	40014800 	.word	0x40014800
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <USART1_IRQHandler+0x10>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4798      	blx	r3
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000250 	.word	0x20000250

080018b8 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <USART2_IRQHandler+0x10>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	4798      	blx	r3
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000250 	.word	0x20000250

080018cc <USART3_IRQHandler>:

void USART3_IRQHandler(){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <USART3_IRQHandler+0x10>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	4798      	blx	r3
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000250 	.word	0x20000250

080018e0 <clockInit>:
	sensorValues[0] = ADC1->DR;
	float voltage = (sensorValues[0] * 5.0) / 4096.0;
	tempreture = (voltage - 5.0) * 100.0;
}

void clockInit(){
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <clockInit+0x24>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <clockInit+0x24>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <clockInit+0x24>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <clockInit+0x24>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000

08001908 <main>:
// ------------------------------------------------------------------
// Main Function
// ------------------------------------------------------------------


int main(void) {
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b0ab      	sub	sp, #172	; 0xac
 800190c:	af02      	add	r7, sp, #8
    // Clock Initialization
    clockInit();
 800190e:	f7ff ffe7 	bl	80018e0 <clockInit>
    //GPIOAInit();

    //LCDInit();

    // UART Configuration
    UART_Config_t uartCfg = {
 8001912:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <main+0x160>)
 8001914:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8001918:	461d      	mov	r5, r3
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	6023      	str	r3, [r4, #0]
        .Mode = UART_Mode_TX_RX,
        .Payload = UART_PayloadLength_8B,
        .StopBits = UART_StopBits_One,
        .P_IRQ_Callback = NULL
    };
    MCAL_UART_Init(UART1, &uartCfg);
 8001922:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001926:	4619      	mov	r1, r3
 8001928:	4850      	ldr	r0, [pc, #320]	; (8001a6c <main+0x164>)
 800192a:	f7ff fe21 	bl	8001570 <MCAL_UART_Init>
    MCAL_UART_GPIO_SetPins(UART1);
 800192e:	484f      	ldr	r0, [pc, #316]	; (8001a6c <main+0x164>)
 8001930:	f7ff ff52 	bl	80017d8 <MCAL_UART_GPIO_SetPins>

    // ADC Configuration
    ADC_Config_t ADCCfg = {
 8001934:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
        .conversions = ADC_NumOfConvs_1,
        .dataAlginement = ADC_DataAlign_Right,
        .IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
        .P_IRQ_Callback = NULL
    };
    ADC_Init(ADC1, &ADCCfg);
 8001942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001946:	4619      	mov	r1, r3
 8001948:	4849      	ldr	r0, [pc, #292]	; (8001a70 <main+0x168>)
 800194a:	f7ff fa4d 	bl	8000de8 <ADC_Init>

    char buffer[100];
    uint16_t adcValue1 = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    uint16_t adcValue2 = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    float temperature1 = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float temperature2 = 0;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    while (1) {
        // Read ADC value from channel 0
    	adcValue2 = ADC_Read_SingleChannel(ADC1, 1);
 800196a:	2101      	movs	r1, #1
 800196c:	4840      	ldr	r0, [pc, #256]	; (8001a70 <main+0x168>)
 800196e:	f7ff fad9 	bl	8000f24 <ADC_Read_SingleChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    	adcValue1 = ADC_Read_SingleChannel(ADC1, 0);
 8001978:	2100      	movs	r1, #0
 800197a:	483d      	ldr	r0, [pc, #244]	; (8001a70 <main+0x168>)
 800197c:	f7ff fad2 	bl	8000f24 <ADC_Read_SingleChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

        // Convert ADC value to temperature
        float voltage1 = (adcValue1 * 3.3) / 4096.0; // Assuming a 12-bit ADC and 3.3V reference
 8001986:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fd4a 	bl	8000424 <__aeabi_i2d>
 8001990:	a333      	add	r3, pc, #204	; (adr r3, 8001a60 <main+0x158>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fdaf 	bl	80004f8 <__aeabi_dmul>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4618      	mov	r0, r3
 80019a0:	4621      	mov	r1, r4
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <main+0x16c>)
 80019a8:	f7fe fed0 	bl	800074c <__aeabi_ddiv>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	f7ff f878 	bl	8000aa8 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        temperature1 = voltage1 * 100.0;            // For an LM35 sensor
 80019be:	492e      	ldr	r1, [pc, #184]	; (8001a78 <main+0x170>)
 80019c0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80019c4:	f7ff f8c0 	bl	8000b48 <__aeabi_fmul>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        float voltage2 = (adcValue2 * 3.3) / 4096.0; // Assuming a 12-bit ADC and 3.3V reference
 80019ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd26 	bl	8000424 <__aeabi_i2d>
 80019d8:	a321      	add	r3, pc, #132	; (adr r3, 8001a60 <main+0x158>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fd8b 	bl	80004f8 <__aeabi_dmul>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <main+0x16c>)
 80019f0:	f7fe feac 	bl	800074c <__aeabi_ddiv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	4618      	mov	r0, r3
 80019fa:	4621      	mov	r1, r4
 80019fc:	f7ff f854 	bl	8000aa8 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        temperature2 = voltage2 * 100.0;            // For an LM35 sensor
 8001a06:	491c      	ldr	r1, [pc, #112]	; (8001a78 <main+0x170>)
 8001a08:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a0c:	f7ff f89c 	bl	8000b48 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        //int var = 0;
        // Print the temperature to UART
        sprintf(buffer, "Temp1: %.2f C | Temp2: %.2f C\r\n", temperature1, temperature2);
 8001a16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a1a:	f7fe fd15 	bl	8000448 <__aeabi_f2d>
 8001a1e:	4605      	mov	r5, r0
 8001a20:	460e      	mov	r6, r1
 8001a22:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001a26:	f7fe fd0f 	bl	8000448 <__aeabi_f2d>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	1d38      	adds	r0, r7, #4
 8001a30:	e9cd 3400 	strd	r3, r4, [sp]
 8001a34:	462a      	mov	r2, r5
 8001a36:	4633      	mov	r3, r6
 8001a38:	4910      	ldr	r1, [pc, #64]	; (8001a7c <main+0x174>)
 8001a3a:	f000 fd03 	bl	8002444 <siprintf>
        MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fb95 	bl	8000170 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	1d39      	adds	r1, r7, #4
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <main+0x164>)
 8001a50:	f7ff fe62 	bl	8001718 <MCAL_UART_SendData>
        //sendChar('M');
        //sendStr((uint8_t*)buffer);
        // Add a delay
        //delay(1000, U_ms, clk);
        wait(300);
 8001a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a58:	f7ff fcb2 	bl	80013c0 <wait>
    while (1) {
 8001a5c:	e785      	b.n	800196a <main+0x62>
 8001a5e:	bf00      	nop
 8001a60:	66666666 	.word	0x66666666
 8001a64:	400a6666 	.word	0x400a6666
 8001a68:	08003c58 	.word	0x08003c58
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40012400 	.word	0x40012400
 8001a74:	40b00000 	.word	0x40b00000
 8001a78:	42c80000 	.word	0x42c80000
 8001a7c:	08003c38 	.word	0x08003c38

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f000 f846 	bl	8001b40 <__errno>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20005000 	.word	0x20005000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	200001f8 	.word	0x200001f8
 8001ae8:	20000260 	.word	0x20000260

08001aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001af0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b1a:	f000 f817 	bl	8001b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1e:	f7ff fef3 	bl	8001908 <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   r0, =_estack
 8001b24:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b30:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8001b34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b38:	20000260 	.word	0x20000260

08001b3c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC3_IRQHandler>
	...

08001b40 <__errno>:
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <__errno+0x8>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000004 	.word	0x20000004

08001b4c <__libc_init_array>:
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	2500      	movs	r5, #0
 8001b50:	4e0c      	ldr	r6, [pc, #48]	; (8001b84 <__libc_init_array+0x38>)
 8001b52:	4c0d      	ldr	r4, [pc, #52]	; (8001b88 <__libc_init_array+0x3c>)
 8001b54:	1ba4      	subs	r4, r4, r6
 8001b56:	10a4      	asrs	r4, r4, #2
 8001b58:	42a5      	cmp	r5, r4
 8001b5a:	d109      	bne.n	8001b70 <__libc_init_array+0x24>
 8001b5c:	f002 f85e 	bl	8003c1c <_init>
 8001b60:	2500      	movs	r5, #0
 8001b62:	4e0a      	ldr	r6, [pc, #40]	; (8001b8c <__libc_init_array+0x40>)
 8001b64:	4c0a      	ldr	r4, [pc, #40]	; (8001b90 <__libc_init_array+0x44>)
 8001b66:	1ba4      	subs	r4, r4, r6
 8001b68:	10a4      	asrs	r4, r4, #2
 8001b6a:	42a5      	cmp	r5, r4
 8001b6c:	d105      	bne.n	8001b7a <__libc_init_array+0x2e>
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
 8001b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b74:	4798      	blx	r3
 8001b76:	3501      	adds	r5, #1
 8001b78:	e7ee      	b.n	8001b58 <__libc_init_array+0xc>
 8001b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b7e:	4798      	blx	r3
 8001b80:	3501      	adds	r5, #1
 8001b82:	e7f2      	b.n	8001b6a <__libc_init_array+0x1e>
 8001b84:	08003ee0 	.word	0x08003ee0
 8001b88:	08003ee0 	.word	0x08003ee0
 8001b8c:	08003ee0 	.word	0x08003ee0
 8001b90:	08003ee4 	.word	0x08003ee4

08001b94 <memset>:
 8001b94:	4603      	mov	r3, r0
 8001b96:	4402      	add	r2, r0
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <memset+0xa>
 8001b9c:	4770      	bx	lr
 8001b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001ba2:	e7f9      	b.n	8001b98 <memset+0x4>

08001ba4 <__cvt>:
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001baa:	461e      	mov	r6, r3
 8001bac:	bfbb      	ittet	lt
 8001bae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	461e      	movlt	r6, r3
 8001bb4:	2300      	movge	r3, #0
 8001bb6:	232d      	movlt	r3, #45	; 0x2d
 8001bb8:	b088      	sub	sp, #32
 8001bba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001bbc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8001bc0:	f027 0720 	bic.w	r7, r7, #32
 8001bc4:	2f46      	cmp	r7, #70	; 0x46
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001bca:	700b      	strb	r3, [r1, #0]
 8001bcc:	d004      	beq.n	8001bd8 <__cvt+0x34>
 8001bce:	2f45      	cmp	r7, #69	; 0x45
 8001bd0:	d100      	bne.n	8001bd4 <__cvt+0x30>
 8001bd2:	3501      	adds	r5, #1
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e000      	b.n	8001bda <__cvt+0x36>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	aa07      	add	r2, sp, #28
 8001bdc:	9204      	str	r2, [sp, #16]
 8001bde:	aa06      	add	r2, sp, #24
 8001be0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001be4:	e9cd 3500 	strd	r3, r5, [sp]
 8001be8:	4622      	mov	r2, r4
 8001bea:	4633      	mov	r3, r6
 8001bec:	f000 fcd8 	bl	80025a0 <_dtoa_r>
 8001bf0:	2f47      	cmp	r7, #71	; 0x47
 8001bf2:	4680      	mov	r8, r0
 8001bf4:	d102      	bne.n	8001bfc <__cvt+0x58>
 8001bf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001bf8:	07db      	lsls	r3, r3, #31
 8001bfa:	d526      	bpl.n	8001c4a <__cvt+0xa6>
 8001bfc:	2f46      	cmp	r7, #70	; 0x46
 8001bfe:	eb08 0905 	add.w	r9, r8, r5
 8001c02:	d111      	bne.n	8001c28 <__cvt+0x84>
 8001c04:	f898 3000 	ldrb.w	r3, [r8]
 8001c08:	2b30      	cmp	r3, #48	; 0x30
 8001c0a:	d10a      	bne.n	8001c22 <__cvt+0x7e>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2300      	movs	r3, #0
 8001c10:	4620      	mov	r0, r4
 8001c12:	4631      	mov	r1, r6
 8001c14:	f7fe fed8 	bl	80009c8 <__aeabi_dcmpeq>
 8001c18:	b918      	cbnz	r0, 8001c22 <__cvt+0x7e>
 8001c1a:	f1c5 0501 	rsb	r5, r5, #1
 8001c1e:	f8ca 5000 	str.w	r5, [sl]
 8001c22:	f8da 3000 	ldr.w	r3, [sl]
 8001c26:	4499      	add	r9, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4631      	mov	r1, r6
 8001c30:	f7fe feca 	bl	80009c8 <__aeabi_dcmpeq>
 8001c34:	b938      	cbnz	r0, 8001c46 <__cvt+0xa2>
 8001c36:	2230      	movs	r2, #48	; 0x30
 8001c38:	9b07      	ldr	r3, [sp, #28]
 8001c3a:	454b      	cmp	r3, r9
 8001c3c:	d205      	bcs.n	8001c4a <__cvt+0xa6>
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	9107      	str	r1, [sp, #28]
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e7f8      	b.n	8001c38 <__cvt+0x94>
 8001c46:	f8cd 901c 	str.w	r9, [sp, #28]
 8001c4a:	4640      	mov	r0, r8
 8001c4c:	9b07      	ldr	r3, [sp, #28]
 8001c4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001c50:	eba3 0308 	sub.w	r3, r3, r8
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	b008      	add	sp, #32
 8001c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c5c <__exponent>:
 8001c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	bfb4      	ite	lt
 8001c62:	232d      	movlt	r3, #45	; 0x2d
 8001c64:	232b      	movge	r3, #43	; 0x2b
 8001c66:	4604      	mov	r4, r0
 8001c68:	bfb8      	it	lt
 8001c6a:	4249      	neglt	r1, r1
 8001c6c:	2909      	cmp	r1, #9
 8001c6e:	f804 2b02 	strb.w	r2, [r4], #2
 8001c72:	7043      	strb	r3, [r0, #1]
 8001c74:	dd21      	ble.n	8001cba <__exponent+0x5e>
 8001c76:	f10d 0307 	add.w	r3, sp, #7
 8001c7a:	461f      	mov	r7, r3
 8001c7c:	260a      	movs	r6, #10
 8001c7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8001c82:	fb06 1115 	mls	r1, r6, r5, r1
 8001c86:	2d09      	cmp	r5, #9
 8001c88:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001c8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001c90:	f103 32ff 	add.w	r2, r3, #4294967295
 8001c94:	4629      	mov	r1, r5
 8001c96:	dc09      	bgt.n	8001cac <__exponent+0x50>
 8001c98:	3130      	adds	r1, #48	; 0x30
 8001c9a:	3b02      	subs	r3, #2
 8001c9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001ca0:	42bb      	cmp	r3, r7
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	d304      	bcc.n	8001cb0 <__exponent+0x54>
 8001ca6:	1a10      	subs	r0, r2, r0
 8001ca8:	b003      	add	sp, #12
 8001caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cac:	4613      	mov	r3, r2
 8001cae:	e7e6      	b.n	8001c7e <__exponent+0x22>
 8001cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cb4:	f804 2b01 	strb.w	r2, [r4], #1
 8001cb8:	e7f2      	b.n	8001ca0 <__exponent+0x44>
 8001cba:	2330      	movs	r3, #48	; 0x30
 8001cbc:	4419      	add	r1, r3
 8001cbe:	7083      	strb	r3, [r0, #2]
 8001cc0:	1d02      	adds	r2, r0, #4
 8001cc2:	70c1      	strb	r1, [r0, #3]
 8001cc4:	e7ef      	b.n	8001ca6 <__exponent+0x4a>
	...

08001cc8 <_printf_float>:
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	b091      	sub	sp, #68	; 0x44
 8001cce:	460c      	mov	r4, r1
 8001cd0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001cd2:	4693      	mov	fp, r2
 8001cd4:	461e      	mov	r6, r3
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	f001 fa16 	bl	8003108 <_localeconv_r>
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce2:	f7fe fa45 	bl	8000170 <strlen>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	900a      	str	r0, [sp, #40]	; 0x28
 8001cee:	3307      	adds	r3, #7
 8001cf0:	f023 0307 	bic.w	r3, r3, #7
 8001cf4:	f103 0208 	add.w	r2, r3, #8
 8001cf8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001cfc:	f8d4 a000 	ldr.w	sl, [r4]
 8001d00:	603a      	str	r2, [r7, #0]
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001d0a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8001d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	4ba6      	ldr	r3, [pc, #664]	; (8001fb4 <_printf_float+0x2ec>)
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d1e:	f7fe fe85 	bl	8000a2c <__aeabi_dcmpun>
 8001d22:	bb68      	cbnz	r0, 8001d80 <_printf_float+0xb8>
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	4ba2      	ldr	r3, [pc, #648]	; (8001fb4 <_printf_float+0x2ec>)
 8001d2a:	4638      	mov	r0, r7
 8001d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d2e:	f7fe fe5f 	bl	80009f0 <__aeabi_dcmple>
 8001d32:	bb28      	cbnz	r0, 8001d80 <_printf_float+0xb8>
 8001d34:	2200      	movs	r2, #0
 8001d36:	2300      	movs	r3, #0
 8001d38:	4638      	mov	r0, r7
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	f7fe fe4e 	bl	80009dc <__aeabi_dcmplt>
 8001d40:	b110      	cbz	r0, 8001d48 <_printf_float+0x80>
 8001d42:	232d      	movs	r3, #45	; 0x2d
 8001d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d48:	4f9b      	ldr	r7, [pc, #620]	; (8001fb8 <_printf_float+0x2f0>)
 8001d4a:	4b9c      	ldr	r3, [pc, #624]	; (8001fbc <_printf_float+0x2f4>)
 8001d4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001d50:	bf98      	it	ls
 8001d52:	461f      	movls	r7, r3
 8001d54:	2303      	movs	r3, #3
 8001d56:	f04f 0900 	mov.w	r9, #0
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	f02a 0304 	bic.w	r3, sl, #4
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	9600      	str	r6, [sp, #0]
 8001d64:	465b      	mov	r3, fp
 8001d66:	aa0f      	add	r2, sp, #60	; 0x3c
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f000 f9e2 	bl	8002134 <_printf_common>
 8001d70:	3001      	adds	r0, #1
 8001d72:	f040 8090 	bne.w	8001e96 <_printf_float+0x1ce>
 8001d76:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7a:	b011      	add	sp, #68	; 0x44
 8001d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d80:	463a      	mov	r2, r7
 8001d82:	464b      	mov	r3, r9
 8001d84:	4638      	mov	r0, r7
 8001d86:	4649      	mov	r1, r9
 8001d88:	f7fe fe50 	bl	8000a2c <__aeabi_dcmpun>
 8001d8c:	b110      	cbz	r0, 8001d94 <_printf_float+0xcc>
 8001d8e:	4f8c      	ldr	r7, [pc, #560]	; (8001fc0 <_printf_float+0x2f8>)
 8001d90:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <_printf_float+0x2fc>)
 8001d92:	e7db      	b.n	8001d4c <_printf_float+0x84>
 8001d94:	6863      	ldr	r3, [r4, #4]
 8001d96:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	a80d      	add	r0, sp, #52	; 0x34
 8001d9e:	a90e      	add	r1, sp, #56	; 0x38
 8001da0:	d140      	bne.n	8001e24 <_printf_float+0x15c>
 8001da2:	2306      	movs	r3, #6
 8001da4:	6063      	str	r3, [r4, #4]
 8001da6:	f04f 0c00 	mov.w	ip, #0
 8001daa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8001dae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001db2:	6863      	ldr	r3, [r4, #4]
 8001db4:	6022      	str	r2, [r4, #0]
 8001db6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	463a      	mov	r2, r7
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f7ff feed 	bl	8001ba4 <__cvt>
 8001dca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001dce:	2b47      	cmp	r3, #71	; 0x47
 8001dd0:	4607      	mov	r7, r0
 8001dd2:	d109      	bne.n	8001de8 <_printf_float+0x120>
 8001dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001dd6:	1cd8      	adds	r0, r3, #3
 8001dd8:	db02      	blt.n	8001de0 <_printf_float+0x118>
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	dd47      	ble.n	8001e70 <_printf_float+0x1a8>
 8001de0:	f1a8 0802 	sub.w	r8, r8, #2
 8001de4:	fa5f f888 	uxtb.w	r8, r8
 8001de8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001dec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001dee:	d824      	bhi.n	8001e3a <_printf_float+0x172>
 8001df0:	3901      	subs	r1, #1
 8001df2:	4642      	mov	r2, r8
 8001df4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001df8:	910d      	str	r1, [sp, #52]	; 0x34
 8001dfa:	f7ff ff2f 	bl	8001c5c <__exponent>
 8001dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001e00:	4681      	mov	r9, r0
 8001e02:	1813      	adds	r3, r2, r0
 8001e04:	2a01      	cmp	r2, #1
 8001e06:	6123      	str	r3, [r4, #16]
 8001e08:	dc02      	bgt.n	8001e10 <_printf_float+0x148>
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	07d1      	lsls	r1, r2, #31
 8001e0e:	d501      	bpl.n	8001e14 <_printf_float+0x14c>
 8001e10:	3301      	adds	r3, #1
 8001e12:	6123      	str	r3, [r4, #16]
 8001e14:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0a2      	beq.n	8001d62 <_printf_float+0x9a>
 8001e1c:	232d      	movs	r3, #45	; 0x2d
 8001e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e22:	e79e      	b.n	8001d62 <_printf_float+0x9a>
 8001e24:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8001e28:	f000 816e 	beq.w	8002108 <_printf_float+0x440>
 8001e2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001e30:	d1b9      	bne.n	8001da6 <_printf_float+0xde>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1b7      	bne.n	8001da6 <_printf_float+0xde>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e7b4      	b.n	8001da4 <_printf_float+0xdc>
 8001e3a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8001e3e:	d119      	bne.n	8001e74 <_printf_float+0x1ac>
 8001e40:	2900      	cmp	r1, #0
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	dd0c      	ble.n	8001e60 <_printf_float+0x198>
 8001e46:	6121      	str	r1, [r4, #16]
 8001e48:	b913      	cbnz	r3, 8001e50 <_printf_float+0x188>
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	07d2      	lsls	r2, r2, #31
 8001e4e:	d502      	bpl.n	8001e56 <_printf_float+0x18e>
 8001e50:	3301      	adds	r3, #1
 8001e52:	440b      	add	r3, r1
 8001e54:	6123      	str	r3, [r4, #16]
 8001e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e58:	f04f 0900 	mov.w	r9, #0
 8001e5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e5e:	e7d9      	b.n	8001e14 <_printf_float+0x14c>
 8001e60:	b913      	cbnz	r3, 8001e68 <_printf_float+0x1a0>
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	07d0      	lsls	r0, r2, #31
 8001e66:	d501      	bpl.n	8001e6c <_printf_float+0x1a4>
 8001e68:	3302      	adds	r3, #2
 8001e6a:	e7f3      	b.n	8001e54 <_printf_float+0x18c>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e7f1      	b.n	8001e54 <_printf_float+0x18c>
 8001e70:	f04f 0867 	mov.w	r8, #103	; 0x67
 8001e74:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	db05      	blt.n	8001e88 <_printf_float+0x1c0>
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6123      	str	r3, [r4, #16]
 8001e80:	07d1      	lsls	r1, r2, #31
 8001e82:	d5e8      	bpl.n	8001e56 <_printf_float+0x18e>
 8001e84:	3301      	adds	r3, #1
 8001e86:	e7e5      	b.n	8001e54 <_printf_float+0x18c>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bfcc      	ite	gt
 8001e8c:	2301      	movgt	r3, #1
 8001e8e:	f1c3 0302 	rsble	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	e7de      	b.n	8001e54 <_printf_float+0x18c>
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	055a      	lsls	r2, r3, #21
 8001e9a:	d407      	bmi.n	8001eac <_printf_float+0x1e4>
 8001e9c:	6923      	ldr	r3, [r4, #16]
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	47b0      	blx	r6
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d129      	bne.n	8001efe <_printf_float+0x236>
 8001eaa:	e764      	b.n	8001d76 <_printf_float+0xae>
 8001eac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001eb0:	f240 80d7 	bls.w	8002062 <_printf_float+0x39a>
 8001eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f7fe fd84 	bl	80009c8 <__aeabi_dcmpeq>
 8001ec0:	b388      	cbz	r0, 8001f26 <_printf_float+0x25e>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <_printf_float+0x300>)
 8001ec6:	4659      	mov	r1, fp
 8001ec8:	4628      	mov	r0, r5
 8001eca:	47b0      	blx	r6
 8001ecc:	3001      	adds	r0, #1
 8001ece:	f43f af52 	beq.w	8001d76 <_printf_float+0xae>
 8001ed2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	db02      	blt.n	8001ee0 <_printf_float+0x218>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	07d8      	lsls	r0, r3, #31
 8001ede:	d50e      	bpl.n	8001efe <_printf_float+0x236>
 8001ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	47b0      	blx	r6
 8001eea:	3001      	adds	r0, #1
 8001eec:	f43f af43 	beq.w	8001d76 <_printf_float+0xae>
 8001ef0:	2700      	movs	r7, #0
 8001ef2:	f104 081a 	add.w	r8, r4, #26
 8001ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	42bb      	cmp	r3, r7
 8001efc:	dc09      	bgt.n	8001f12 <_printf_float+0x24a>
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	079f      	lsls	r7, r3, #30
 8001f02:	f100 80fd 	bmi.w	8002100 <_printf_float+0x438>
 8001f06:	68e0      	ldr	r0, [r4, #12]
 8001f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f0a:	4298      	cmp	r0, r3
 8001f0c:	bfb8      	it	lt
 8001f0e:	4618      	movlt	r0, r3
 8001f10:	e733      	b.n	8001d7a <_printf_float+0xb2>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4642      	mov	r2, r8
 8001f16:	4659      	mov	r1, fp
 8001f18:	4628      	mov	r0, r5
 8001f1a:	47b0      	blx	r6
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	f43f af2a 	beq.w	8001d76 <_printf_float+0xae>
 8001f22:	3701      	adds	r7, #1
 8001f24:	e7e7      	b.n	8001ef6 <_printf_float+0x22e>
 8001f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dc2b      	bgt.n	8001f84 <_printf_float+0x2bc>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <_printf_float+0x300>)
 8001f30:	4659      	mov	r1, fp
 8001f32:	4628      	mov	r0, r5
 8001f34:	47b0      	blx	r6
 8001f36:	3001      	adds	r0, #1
 8001f38:	f43f af1d 	beq.w	8001d76 <_printf_float+0xae>
 8001f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f3e:	b923      	cbnz	r3, 8001f4a <_printf_float+0x282>
 8001f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f42:	b913      	cbnz	r3, 8001f4a <_printf_float+0x282>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	07d9      	lsls	r1, r3, #31
 8001f48:	d5d9      	bpl.n	8001efe <_printf_float+0x236>
 8001f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f4e:	4659      	mov	r1, fp
 8001f50:	4628      	mov	r0, r5
 8001f52:	47b0      	blx	r6
 8001f54:	3001      	adds	r0, #1
 8001f56:	f43f af0e 	beq.w	8001d76 <_printf_float+0xae>
 8001f5a:	f04f 0800 	mov.w	r8, #0
 8001f5e:	f104 091a 	add.w	r9, r4, #26
 8001f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f64:	425b      	negs	r3, r3
 8001f66:	4543      	cmp	r3, r8
 8001f68:	dc01      	bgt.n	8001f6e <_printf_float+0x2a6>
 8001f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f6c:	e797      	b.n	8001e9e <_printf_float+0x1d6>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	464a      	mov	r2, r9
 8001f72:	4659      	mov	r1, fp
 8001f74:	4628      	mov	r0, r5
 8001f76:	47b0      	blx	r6
 8001f78:	3001      	adds	r0, #1
 8001f7a:	f43f aefc 	beq.w	8001d76 <_printf_float+0xae>
 8001f7e:	f108 0801 	add.w	r8, r8, #1
 8001f82:	e7ee      	b.n	8001f62 <_printf_float+0x29a>
 8001f84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	bfa8      	it	ge
 8001f8c:	461a      	movge	r2, r3
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	4690      	mov	r8, r2
 8001f92:	dd07      	ble.n	8001fa4 <_printf_float+0x2dc>
 8001f94:	4613      	mov	r3, r2
 8001f96:	4659      	mov	r1, fp
 8001f98:	463a      	mov	r2, r7
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	47b0      	blx	r6
 8001f9e:	3001      	adds	r0, #1
 8001fa0:	f43f aee9 	beq.w	8001d76 <_printf_float+0xae>
 8001fa4:	f104 031a 	add.w	r3, r4, #26
 8001fa8:	f04f 0a00 	mov.w	sl, #0
 8001fac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8001fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fb2:	e015      	b.n	8001fe0 <_printf_float+0x318>
 8001fb4:	7fefffff 	.word	0x7fefffff
 8001fb8:	08003c89 	.word	0x08003c89
 8001fbc:	08003c85 	.word	0x08003c85
 8001fc0:	08003c91 	.word	0x08003c91
 8001fc4:	08003c8d 	.word	0x08003c8d
 8001fc8:	08003c95 	.word	0x08003c95
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	47b0      	blx	r6
 8001fd6:	3001      	adds	r0, #1
 8001fd8:	f43f aecd 	beq.w	8001d76 <_printf_float+0xae>
 8001fdc:	f10a 0a01 	add.w	sl, sl, #1
 8001fe0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8001fe4:	eba9 0308 	sub.w	r3, r9, r8
 8001fe8:	4553      	cmp	r3, sl
 8001fea:	dcef      	bgt.n	8001fcc <_printf_float+0x304>
 8001fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	db14      	blt.n	8002020 <_printf_float+0x358>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	07da      	lsls	r2, r3, #31
 8001ffa:	d411      	bmi.n	8002020 <_printf_float+0x358>
 8001ffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ffe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002000:	eba3 0209 	sub.w	r2, r3, r9
 8002004:	eba3 0901 	sub.w	r9, r3, r1
 8002008:	4591      	cmp	r9, r2
 800200a:	bfa8      	it	ge
 800200c:	4691      	movge	r9, r2
 800200e:	f1b9 0f00 	cmp.w	r9, #0
 8002012:	dc0d      	bgt.n	8002030 <_printf_float+0x368>
 8002014:	2700      	movs	r7, #0
 8002016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800201a:	f104 081a 	add.w	r8, r4, #26
 800201e:	e018      	b.n	8002052 <_printf_float+0x38a>
 8002020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002024:	4659      	mov	r1, fp
 8002026:	4628      	mov	r0, r5
 8002028:	47b0      	blx	r6
 800202a:	3001      	adds	r0, #1
 800202c:	d1e6      	bne.n	8001ffc <_printf_float+0x334>
 800202e:	e6a2      	b.n	8001d76 <_printf_float+0xae>
 8002030:	464b      	mov	r3, r9
 8002032:	463a      	mov	r2, r7
 8002034:	4659      	mov	r1, fp
 8002036:	4628      	mov	r0, r5
 8002038:	47b0      	blx	r6
 800203a:	3001      	adds	r0, #1
 800203c:	d1ea      	bne.n	8002014 <_printf_float+0x34c>
 800203e:	e69a      	b.n	8001d76 <_printf_float+0xae>
 8002040:	2301      	movs	r3, #1
 8002042:	4642      	mov	r2, r8
 8002044:	4659      	mov	r1, fp
 8002046:	4628      	mov	r0, r5
 8002048:	47b0      	blx	r6
 800204a:	3001      	adds	r0, #1
 800204c:	f43f ae93 	beq.w	8001d76 <_printf_float+0xae>
 8002050:	3701      	adds	r7, #1
 8002052:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	eba3 0309 	sub.w	r3, r3, r9
 800205c:	42bb      	cmp	r3, r7
 800205e:	dcef      	bgt.n	8002040 <_printf_float+0x378>
 8002060:	e74d      	b.n	8001efe <_printf_float+0x236>
 8002062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002064:	2a01      	cmp	r2, #1
 8002066:	dc01      	bgt.n	800206c <_printf_float+0x3a4>
 8002068:	07db      	lsls	r3, r3, #31
 800206a:	d538      	bpl.n	80020de <_printf_float+0x416>
 800206c:	2301      	movs	r3, #1
 800206e:	463a      	mov	r2, r7
 8002070:	4659      	mov	r1, fp
 8002072:	4628      	mov	r0, r5
 8002074:	47b0      	blx	r6
 8002076:	3001      	adds	r0, #1
 8002078:	f43f ae7d 	beq.w	8001d76 <_printf_float+0xae>
 800207c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002080:	4659      	mov	r1, fp
 8002082:	4628      	mov	r0, r5
 8002084:	47b0      	blx	r6
 8002086:	3001      	adds	r0, #1
 8002088:	f107 0701 	add.w	r7, r7, #1
 800208c:	f43f ae73 	beq.w	8001d76 <_printf_float+0xae>
 8002090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002096:	2200      	movs	r2, #0
 8002098:	f103 38ff 	add.w	r8, r3, #4294967295
 800209c:	2300      	movs	r3, #0
 800209e:	f7fe fc93 	bl	80009c8 <__aeabi_dcmpeq>
 80020a2:	b9c0      	cbnz	r0, 80020d6 <_printf_float+0x40e>
 80020a4:	4643      	mov	r3, r8
 80020a6:	463a      	mov	r2, r7
 80020a8:	4659      	mov	r1, fp
 80020aa:	4628      	mov	r0, r5
 80020ac:	47b0      	blx	r6
 80020ae:	3001      	adds	r0, #1
 80020b0:	d10d      	bne.n	80020ce <_printf_float+0x406>
 80020b2:	e660      	b.n	8001d76 <_printf_float+0xae>
 80020b4:	2301      	movs	r3, #1
 80020b6:	4642      	mov	r2, r8
 80020b8:	4659      	mov	r1, fp
 80020ba:	4628      	mov	r0, r5
 80020bc:	47b0      	blx	r6
 80020be:	3001      	adds	r0, #1
 80020c0:	f43f ae59 	beq.w	8001d76 <_printf_float+0xae>
 80020c4:	3701      	adds	r7, #1
 80020c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020c8:	3b01      	subs	r3, #1
 80020ca:	42bb      	cmp	r3, r7
 80020cc:	dcf2      	bgt.n	80020b4 <_printf_float+0x3ec>
 80020ce:	464b      	mov	r3, r9
 80020d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80020d4:	e6e4      	b.n	8001ea0 <_printf_float+0x1d8>
 80020d6:	2700      	movs	r7, #0
 80020d8:	f104 081a 	add.w	r8, r4, #26
 80020dc:	e7f3      	b.n	80020c6 <_printf_float+0x3fe>
 80020de:	2301      	movs	r3, #1
 80020e0:	e7e1      	b.n	80020a6 <_printf_float+0x3de>
 80020e2:	2301      	movs	r3, #1
 80020e4:	4642      	mov	r2, r8
 80020e6:	4659      	mov	r1, fp
 80020e8:	4628      	mov	r0, r5
 80020ea:	47b0      	blx	r6
 80020ec:	3001      	adds	r0, #1
 80020ee:	f43f ae42 	beq.w	8001d76 <_printf_float+0xae>
 80020f2:	3701      	adds	r7, #1
 80020f4:	68e3      	ldr	r3, [r4, #12]
 80020f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	42bb      	cmp	r3, r7
 80020fc:	dcf1      	bgt.n	80020e2 <_printf_float+0x41a>
 80020fe:	e702      	b.n	8001f06 <_printf_float+0x23e>
 8002100:	2700      	movs	r7, #0
 8002102:	f104 0819 	add.w	r8, r4, #25
 8002106:	e7f5      	b.n	80020f4 <_printf_float+0x42c>
 8002108:	2b00      	cmp	r3, #0
 800210a:	f43f ae94 	beq.w	8001e36 <_printf_float+0x16e>
 800210e:	f04f 0c00 	mov.w	ip, #0
 8002112:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002116:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800211a:	6022      	str	r2, [r4, #0]
 800211c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002120:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	463a      	mov	r2, r7
 8002128:	464b      	mov	r3, r9
 800212a:	4628      	mov	r0, r5
 800212c:	f7ff fd3a 	bl	8001ba4 <__cvt>
 8002130:	4607      	mov	r7, r0
 8002132:	e64f      	b.n	8001dd4 <_printf_float+0x10c>

08002134 <_printf_common>:
 8002134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002138:	4691      	mov	r9, r2
 800213a:	461f      	mov	r7, r3
 800213c:	688a      	ldr	r2, [r1, #8]
 800213e:	690b      	ldr	r3, [r1, #16]
 8002140:	4606      	mov	r6, r0
 8002142:	4293      	cmp	r3, r2
 8002144:	bfb8      	it	lt
 8002146:	4613      	movlt	r3, r2
 8002148:	f8c9 3000 	str.w	r3, [r9]
 800214c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002150:	460c      	mov	r4, r1
 8002152:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002156:	b112      	cbz	r2, 800215e <_printf_common+0x2a>
 8002158:	3301      	adds	r3, #1
 800215a:	f8c9 3000 	str.w	r3, [r9]
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	0699      	lsls	r1, r3, #26
 8002162:	bf42      	ittt	mi
 8002164:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002168:	3302      	addmi	r3, #2
 800216a:	f8c9 3000 	strmi.w	r3, [r9]
 800216e:	6825      	ldr	r5, [r4, #0]
 8002170:	f015 0506 	ands.w	r5, r5, #6
 8002174:	d107      	bne.n	8002186 <_printf_common+0x52>
 8002176:	f104 0a19 	add.w	sl, r4, #25
 800217a:	68e3      	ldr	r3, [r4, #12]
 800217c:	f8d9 2000 	ldr.w	r2, [r9]
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	42ab      	cmp	r3, r5
 8002184:	dc29      	bgt.n	80021da <_printf_common+0xa6>
 8002186:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	3300      	adds	r3, #0
 800218e:	bf18      	it	ne
 8002190:	2301      	movne	r3, #1
 8002192:	0692      	lsls	r2, r2, #26
 8002194:	d42e      	bmi.n	80021f4 <_printf_common+0xc0>
 8002196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800219a:	4639      	mov	r1, r7
 800219c:	4630      	mov	r0, r6
 800219e:	47c0      	blx	r8
 80021a0:	3001      	adds	r0, #1
 80021a2:	d021      	beq.n	80021e8 <_printf_common+0xb4>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	68e5      	ldr	r5, [r4, #12]
 80021a8:	f003 0306 	and.w	r3, r3, #6
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	bf18      	it	ne
 80021b0:	2500      	movne	r5, #0
 80021b2:	f8d9 2000 	ldr.w	r2, [r9]
 80021b6:	f04f 0900 	mov.w	r9, #0
 80021ba:	bf08      	it	eq
 80021bc:	1aad      	subeq	r5, r5, r2
 80021be:	68a3      	ldr	r3, [r4, #8]
 80021c0:	6922      	ldr	r2, [r4, #16]
 80021c2:	bf08      	it	eq
 80021c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bfc4      	itt	gt
 80021cc:	1a9b      	subgt	r3, r3, r2
 80021ce:	18ed      	addgt	r5, r5, r3
 80021d0:	341a      	adds	r4, #26
 80021d2:	454d      	cmp	r5, r9
 80021d4:	d11a      	bne.n	800220c <_printf_common+0xd8>
 80021d6:	2000      	movs	r0, #0
 80021d8:	e008      	b.n	80021ec <_printf_common+0xb8>
 80021da:	2301      	movs	r3, #1
 80021dc:	4652      	mov	r2, sl
 80021de:	4639      	mov	r1, r7
 80021e0:	4630      	mov	r0, r6
 80021e2:	47c0      	blx	r8
 80021e4:	3001      	adds	r0, #1
 80021e6:	d103      	bne.n	80021f0 <_printf_common+0xbc>
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f0:	3501      	adds	r5, #1
 80021f2:	e7c2      	b.n	800217a <_printf_common+0x46>
 80021f4:	2030      	movs	r0, #48	; 0x30
 80021f6:	18e1      	adds	r1, r4, r3
 80021f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002202:	4422      	add	r2, r4
 8002204:	3302      	adds	r3, #2
 8002206:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800220a:	e7c4      	b.n	8002196 <_printf_common+0x62>
 800220c:	2301      	movs	r3, #1
 800220e:	4622      	mov	r2, r4
 8002210:	4639      	mov	r1, r7
 8002212:	4630      	mov	r0, r6
 8002214:	47c0      	blx	r8
 8002216:	3001      	adds	r0, #1
 8002218:	d0e6      	beq.n	80021e8 <_printf_common+0xb4>
 800221a:	f109 0901 	add.w	r9, r9, #1
 800221e:	e7d8      	b.n	80021d2 <_printf_common+0x9e>

08002220 <_printf_i>:
 8002220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002224:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002228:	460c      	mov	r4, r1
 800222a:	7e09      	ldrb	r1, [r1, #24]
 800222c:	b085      	sub	sp, #20
 800222e:	296e      	cmp	r1, #110	; 0x6e
 8002230:	4617      	mov	r7, r2
 8002232:	4606      	mov	r6, r0
 8002234:	4698      	mov	r8, r3
 8002236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002238:	f000 80b3 	beq.w	80023a2 <_printf_i+0x182>
 800223c:	d822      	bhi.n	8002284 <_printf_i+0x64>
 800223e:	2963      	cmp	r1, #99	; 0x63
 8002240:	d036      	beq.n	80022b0 <_printf_i+0x90>
 8002242:	d80a      	bhi.n	800225a <_printf_i+0x3a>
 8002244:	2900      	cmp	r1, #0
 8002246:	f000 80b9 	beq.w	80023bc <_printf_i+0x19c>
 800224a:	2958      	cmp	r1, #88	; 0x58
 800224c:	f000 8083 	beq.w	8002356 <_printf_i+0x136>
 8002250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002254:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002258:	e032      	b.n	80022c0 <_printf_i+0xa0>
 800225a:	2964      	cmp	r1, #100	; 0x64
 800225c:	d001      	beq.n	8002262 <_printf_i+0x42>
 800225e:	2969      	cmp	r1, #105	; 0x69
 8002260:	d1f6      	bne.n	8002250 <_printf_i+0x30>
 8002262:	6820      	ldr	r0, [r4, #0]
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	0605      	lsls	r5, r0, #24
 8002268:	f103 0104 	add.w	r1, r3, #4
 800226c:	d52a      	bpl.n	80022c4 <_printf_i+0xa4>
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6011      	str	r1, [r2, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da03      	bge.n	800227e <_printf_i+0x5e>
 8002276:	222d      	movs	r2, #45	; 0x2d
 8002278:	425b      	negs	r3, r3
 800227a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800227e:	486f      	ldr	r0, [pc, #444]	; (800243c <_printf_i+0x21c>)
 8002280:	220a      	movs	r2, #10
 8002282:	e039      	b.n	80022f8 <_printf_i+0xd8>
 8002284:	2973      	cmp	r1, #115	; 0x73
 8002286:	f000 809d 	beq.w	80023c4 <_printf_i+0x1a4>
 800228a:	d808      	bhi.n	800229e <_printf_i+0x7e>
 800228c:	296f      	cmp	r1, #111	; 0x6f
 800228e:	d020      	beq.n	80022d2 <_printf_i+0xb2>
 8002290:	2970      	cmp	r1, #112	; 0x70
 8002292:	d1dd      	bne.n	8002250 <_printf_i+0x30>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	e003      	b.n	80022a6 <_printf_i+0x86>
 800229e:	2975      	cmp	r1, #117	; 0x75
 80022a0:	d017      	beq.n	80022d2 <_printf_i+0xb2>
 80022a2:	2978      	cmp	r1, #120	; 0x78
 80022a4:	d1d4      	bne.n	8002250 <_printf_i+0x30>
 80022a6:	2378      	movs	r3, #120	; 0x78
 80022a8:	4865      	ldr	r0, [pc, #404]	; (8002440 <_printf_i+0x220>)
 80022aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022ae:	e055      	b.n	800235c <_printf_i+0x13c>
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b6:	1d19      	adds	r1, r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6011      	str	r1, [r2, #0]
 80022bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022c0:	2301      	movs	r3, #1
 80022c2:	e08c      	b.n	80023de <_printf_i+0x1be>
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022ca:	6011      	str	r1, [r2, #0]
 80022cc:	bf18      	it	ne
 80022ce:	b21b      	sxthne	r3, r3
 80022d0:	e7cf      	b.n	8002272 <_printf_i+0x52>
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	6825      	ldr	r5, [r4, #0]
 80022d6:	1d18      	adds	r0, r3, #4
 80022d8:	6010      	str	r0, [r2, #0]
 80022da:	0628      	lsls	r0, r5, #24
 80022dc:	d501      	bpl.n	80022e2 <_printf_i+0xc2>
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e002      	b.n	80022e8 <_printf_i+0xc8>
 80022e2:	0668      	lsls	r0, r5, #25
 80022e4:	d5fb      	bpl.n	80022de <_printf_i+0xbe>
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	296f      	cmp	r1, #111	; 0x6f
 80022ea:	bf14      	ite	ne
 80022ec:	220a      	movne	r2, #10
 80022ee:	2208      	moveq	r2, #8
 80022f0:	4852      	ldr	r0, [pc, #328]	; (800243c <_printf_i+0x21c>)
 80022f2:	2100      	movs	r1, #0
 80022f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022f8:	6865      	ldr	r5, [r4, #4]
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	60a5      	str	r5, [r4, #8]
 80022fe:	f2c0 8095 	blt.w	800242c <_printf_i+0x20c>
 8002302:	6821      	ldr	r1, [r4, #0]
 8002304:	f021 0104 	bic.w	r1, r1, #4
 8002308:	6021      	str	r1, [r4, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d13d      	bne.n	800238a <_printf_i+0x16a>
 800230e:	2d00      	cmp	r5, #0
 8002310:	f040 808e 	bne.w	8002430 <_printf_i+0x210>
 8002314:	4665      	mov	r5, ip
 8002316:	2a08      	cmp	r2, #8
 8002318:	d10b      	bne.n	8002332 <_printf_i+0x112>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	07db      	lsls	r3, r3, #31
 800231e:	d508      	bpl.n	8002332 <_printf_i+0x112>
 8002320:	6923      	ldr	r3, [r4, #16]
 8002322:	6862      	ldr	r2, [r4, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	bfde      	ittt	le
 8002328:	2330      	movle	r3, #48	; 0x30
 800232a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800232e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002332:	ebac 0305 	sub.w	r3, ip, r5
 8002336:	6123      	str	r3, [r4, #16]
 8002338:	f8cd 8000 	str.w	r8, [sp]
 800233c:	463b      	mov	r3, r7
 800233e:	aa03      	add	r2, sp, #12
 8002340:	4621      	mov	r1, r4
 8002342:	4630      	mov	r0, r6
 8002344:	f7ff fef6 	bl	8002134 <_printf_common>
 8002348:	3001      	adds	r0, #1
 800234a:	d14d      	bne.n	80023e8 <_printf_i+0x1c8>
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	b005      	add	sp, #20
 8002352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002356:	4839      	ldr	r0, [pc, #228]	; (800243c <_printf_i+0x21c>)
 8002358:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	6821      	ldr	r1, [r4, #0]
 8002360:	1d1d      	adds	r5, r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6015      	str	r5, [r2, #0]
 8002366:	060a      	lsls	r2, r1, #24
 8002368:	d50b      	bpl.n	8002382 <_printf_i+0x162>
 800236a:	07ca      	lsls	r2, r1, #31
 800236c:	bf44      	itt	mi
 800236e:	f041 0120 	orrmi.w	r1, r1, #32
 8002372:	6021      	strmi	r1, [r4, #0]
 8002374:	b91b      	cbnz	r3, 800237e <_printf_i+0x15e>
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	f022 0220 	bic.w	r2, r2, #32
 800237c:	6022      	str	r2, [r4, #0]
 800237e:	2210      	movs	r2, #16
 8002380:	e7b7      	b.n	80022f2 <_printf_i+0xd2>
 8002382:	064d      	lsls	r5, r1, #25
 8002384:	bf48      	it	mi
 8002386:	b29b      	uxthmi	r3, r3
 8002388:	e7ef      	b.n	800236a <_printf_i+0x14a>
 800238a:	4665      	mov	r5, ip
 800238c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002390:	fb02 3311 	mls	r3, r2, r1, r3
 8002394:	5cc3      	ldrb	r3, [r0, r3]
 8002396:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800239a:	460b      	mov	r3, r1
 800239c:	2900      	cmp	r1, #0
 800239e:	d1f5      	bne.n	800238c <_printf_i+0x16c>
 80023a0:	e7b9      	b.n	8002316 <_printf_i+0xf6>
 80023a2:	6813      	ldr	r3, [r2, #0]
 80023a4:	6825      	ldr	r5, [r4, #0]
 80023a6:	1d18      	adds	r0, r3, #4
 80023a8:	6961      	ldr	r1, [r4, #20]
 80023aa:	6010      	str	r0, [r2, #0]
 80023ac:	0628      	lsls	r0, r5, #24
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	d501      	bpl.n	80023b6 <_printf_i+0x196>
 80023b2:	6019      	str	r1, [r3, #0]
 80023b4:	e002      	b.n	80023bc <_printf_i+0x19c>
 80023b6:	066a      	lsls	r2, r5, #25
 80023b8:	d5fb      	bpl.n	80023b2 <_printf_i+0x192>
 80023ba:	8019      	strh	r1, [r3, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	4665      	mov	r5, ip
 80023c0:	6123      	str	r3, [r4, #16]
 80023c2:	e7b9      	b.n	8002338 <_printf_i+0x118>
 80023c4:	6813      	ldr	r3, [r2, #0]
 80023c6:	1d19      	adds	r1, r3, #4
 80023c8:	6011      	str	r1, [r2, #0]
 80023ca:	681d      	ldr	r5, [r3, #0]
 80023cc:	6862      	ldr	r2, [r4, #4]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4628      	mov	r0, r5
 80023d2:	f000 feaf 	bl	8003134 <memchr>
 80023d6:	b108      	cbz	r0, 80023dc <_printf_i+0x1bc>
 80023d8:	1b40      	subs	r0, r0, r5
 80023da:	6060      	str	r0, [r4, #4]
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	6123      	str	r3, [r4, #16]
 80023e0:	2300      	movs	r3, #0
 80023e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023e6:	e7a7      	b.n	8002338 <_printf_i+0x118>
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	462a      	mov	r2, r5
 80023ec:	4639      	mov	r1, r7
 80023ee:	4630      	mov	r0, r6
 80023f0:	47c0      	blx	r8
 80023f2:	3001      	adds	r0, #1
 80023f4:	d0aa      	beq.n	800234c <_printf_i+0x12c>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	079b      	lsls	r3, r3, #30
 80023fa:	d413      	bmi.n	8002424 <_printf_i+0x204>
 80023fc:	68e0      	ldr	r0, [r4, #12]
 80023fe:	9b03      	ldr	r3, [sp, #12]
 8002400:	4298      	cmp	r0, r3
 8002402:	bfb8      	it	lt
 8002404:	4618      	movlt	r0, r3
 8002406:	e7a3      	b.n	8002350 <_printf_i+0x130>
 8002408:	2301      	movs	r3, #1
 800240a:	464a      	mov	r2, r9
 800240c:	4639      	mov	r1, r7
 800240e:	4630      	mov	r0, r6
 8002410:	47c0      	blx	r8
 8002412:	3001      	adds	r0, #1
 8002414:	d09a      	beq.n	800234c <_printf_i+0x12c>
 8002416:	3501      	adds	r5, #1
 8002418:	68e3      	ldr	r3, [r4, #12]
 800241a:	9a03      	ldr	r2, [sp, #12]
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	42ab      	cmp	r3, r5
 8002420:	dcf2      	bgt.n	8002408 <_printf_i+0x1e8>
 8002422:	e7eb      	b.n	80023fc <_printf_i+0x1dc>
 8002424:	2500      	movs	r5, #0
 8002426:	f104 0919 	add.w	r9, r4, #25
 800242a:	e7f5      	b.n	8002418 <_printf_i+0x1f8>
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ac      	bne.n	800238a <_printf_i+0x16a>
 8002430:	7803      	ldrb	r3, [r0, #0]
 8002432:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002436:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800243a:	e76c      	b.n	8002316 <_printf_i+0xf6>
 800243c:	08003c97 	.word	0x08003c97
 8002440:	08003ca8 	.word	0x08003ca8

08002444 <siprintf>:
 8002444:	b40e      	push	{r1, r2, r3}
 8002446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800244a:	b500      	push	{lr}
 800244c:	b09c      	sub	sp, #112	; 0x70
 800244e:	ab1d      	add	r3, sp, #116	; 0x74
 8002450:	9002      	str	r0, [sp, #8]
 8002452:	9006      	str	r0, [sp, #24]
 8002454:	9107      	str	r1, [sp, #28]
 8002456:	9104      	str	r1, [sp, #16]
 8002458:	4808      	ldr	r0, [pc, #32]	; (800247c <siprintf+0x38>)
 800245a:	4909      	ldr	r1, [pc, #36]	; (8002480 <siprintf+0x3c>)
 800245c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002460:	9105      	str	r1, [sp, #20]
 8002462:	6800      	ldr	r0, [r0, #0]
 8002464:	a902      	add	r1, sp, #8
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	f001 fa68 	bl	800393c <_svfiprintf_r>
 800246c:	2200      	movs	r2, #0
 800246e:	9b02      	ldr	r3, [sp, #8]
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	b01c      	add	sp, #112	; 0x70
 8002474:	f85d eb04 	ldr.w	lr, [sp], #4
 8002478:	b003      	add	sp, #12
 800247a:	4770      	bx	lr
 800247c:	20000004 	.word	0x20000004
 8002480:	ffff0208 	.word	0xffff0208

08002484 <quorem>:
 8002484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	6903      	ldr	r3, [r0, #16]
 800248a:	690c      	ldr	r4, [r1, #16]
 800248c:	4680      	mov	r8, r0
 800248e:	42a3      	cmp	r3, r4
 8002490:	f2c0 8084 	blt.w	800259c <quorem+0x118>
 8002494:	3c01      	subs	r4, #1
 8002496:	f101 0714 	add.w	r7, r1, #20
 800249a:	f100 0614 	add.w	r6, r0, #20
 800249e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80024a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80024a6:	3501      	adds	r5, #1
 80024a8:	fbb0 f5f5 	udiv	r5, r0, r5
 80024ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80024b0:	eb06 030c 	add.w	r3, r6, ip
 80024b4:	eb07 090c 	add.w	r9, r7, ip
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	b39d      	cbz	r5, 8002524 <quorem+0xa0>
 80024bc:	f04f 0a00 	mov.w	sl, #0
 80024c0:	4638      	mov	r0, r7
 80024c2:	46b6      	mov	lr, r6
 80024c4:	46d3      	mov	fp, sl
 80024c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80024ca:	b293      	uxth	r3, r2
 80024cc:	fb05 a303 	mla	r3, r5, r3, sl
 80024d0:	0c12      	lsrs	r2, r2, #16
 80024d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80024d6:	fb05 a202 	mla	r2, r5, r2, sl
 80024da:	b29b      	uxth	r3, r3
 80024dc:	ebab 0303 	sub.w	r3, fp, r3
 80024e0:	f8de b000 	ldr.w	fp, [lr]
 80024e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80024e8:	fa1f fb8b 	uxth.w	fp, fp
 80024ec:	445b      	add	r3, fp
 80024ee:	fa1f fb82 	uxth.w	fp, r2
 80024f2:	f8de 2000 	ldr.w	r2, [lr]
 80024f6:	4581      	cmp	r9, r0
 80024f8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80024fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002500:	b29b      	uxth	r3, r3
 8002502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002506:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800250a:	f84e 3b04 	str.w	r3, [lr], #4
 800250e:	d2da      	bcs.n	80024c6 <quorem+0x42>
 8002510:	f856 300c 	ldr.w	r3, [r6, ip]
 8002514:	b933      	cbnz	r3, 8002524 <quorem+0xa0>
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	3b04      	subs	r3, #4
 800251a:	429e      	cmp	r6, r3
 800251c:	461a      	mov	r2, r3
 800251e:	d331      	bcc.n	8002584 <quorem+0x100>
 8002520:	f8c8 4010 	str.w	r4, [r8, #16]
 8002524:	4640      	mov	r0, r8
 8002526:	f001 f833 	bl	8003590 <__mcmp>
 800252a:	2800      	cmp	r0, #0
 800252c:	db26      	blt.n	800257c <quorem+0xf8>
 800252e:	4630      	mov	r0, r6
 8002530:	f04f 0c00 	mov.w	ip, #0
 8002534:	3501      	adds	r5, #1
 8002536:	f857 1b04 	ldr.w	r1, [r7], #4
 800253a:	f8d0 e000 	ldr.w	lr, [r0]
 800253e:	b28b      	uxth	r3, r1
 8002540:	ebac 0303 	sub.w	r3, ip, r3
 8002544:	fa1f f28e 	uxth.w	r2, lr
 8002548:	4413      	add	r3, r2
 800254a:	0c0a      	lsrs	r2, r1, #16
 800254c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002554:	b29b      	uxth	r3, r3
 8002556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800255a:	45b9      	cmp	r9, r7
 800255c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002560:	f840 3b04 	str.w	r3, [r0], #4
 8002564:	d2e7      	bcs.n	8002536 <quorem+0xb2>
 8002566:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800256a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800256e:	b92a      	cbnz	r2, 800257c <quorem+0xf8>
 8002570:	3b04      	subs	r3, #4
 8002572:	429e      	cmp	r6, r3
 8002574:	461a      	mov	r2, r3
 8002576:	d30b      	bcc.n	8002590 <quorem+0x10c>
 8002578:	f8c8 4010 	str.w	r4, [r8, #16]
 800257c:	4628      	mov	r0, r5
 800257e:	b003      	add	sp, #12
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	3b04      	subs	r3, #4
 8002588:	2a00      	cmp	r2, #0
 800258a:	d1c9      	bne.n	8002520 <quorem+0x9c>
 800258c:	3c01      	subs	r4, #1
 800258e:	e7c4      	b.n	800251a <quorem+0x96>
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	3b04      	subs	r3, #4
 8002594:	2a00      	cmp	r2, #0
 8002596:	d1ef      	bne.n	8002578 <quorem+0xf4>
 8002598:	3c01      	subs	r4, #1
 800259a:	e7ea      	b.n	8002572 <quorem+0xee>
 800259c:	2000      	movs	r0, #0
 800259e:	e7ee      	b.n	800257e <quorem+0xfa>

080025a0 <_dtoa_r>:
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	4616      	mov	r6, r2
 80025a6:	461f      	mov	r7, r3
 80025a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80025aa:	b095      	sub	sp, #84	; 0x54
 80025ac:	4604      	mov	r4, r0
 80025ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80025b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80025b6:	b93d      	cbnz	r5, 80025c8 <_dtoa_r+0x28>
 80025b8:	2010      	movs	r0, #16
 80025ba:	f000 fdb3 	bl	8003124 <malloc>
 80025be:	6260      	str	r0, [r4, #36]	; 0x24
 80025c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80025c4:	6005      	str	r5, [r0, #0]
 80025c6:	60c5      	str	r5, [r0, #12]
 80025c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	b151      	cbz	r1, 80025e4 <_dtoa_r+0x44>
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	2301      	movs	r3, #1
 80025d2:	4093      	lsls	r3, r2
 80025d4:	604a      	str	r2, [r1, #4]
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	4620      	mov	r0, r4
 80025da:	f000 fdf8 	bl	80031ce <_Bfree>
 80025de:	2200      	movs	r2, #0
 80025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	1e3b      	subs	r3, r7, #0
 80025e6:	bfaf      	iteee	ge
 80025e8:	2300      	movge	r3, #0
 80025ea:	2201      	movlt	r2, #1
 80025ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	9303      	strlt	r3, [sp, #12]
 80025f2:	bfac      	ite	ge
 80025f4:	f8c8 3000 	strge.w	r3, [r8]
 80025f8:	f8c8 2000 	strlt.w	r2, [r8]
 80025fc:	4bae      	ldr	r3, [pc, #696]	; (80028b8 <_dtoa_r+0x318>)
 80025fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002602:	ea33 0308 	bics.w	r3, r3, r8
 8002606:	d11b      	bne.n	8002640 <_dtoa_r+0xa0>
 8002608:	f242 730f 	movw	r3, #9999	; 0x270f
 800260c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	9b02      	ldr	r3, [sp, #8]
 8002612:	b923      	cbnz	r3, 800261e <_dtoa_r+0x7e>
 8002614:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002618:	2800      	cmp	r0, #0
 800261a:	f000 8545 	beq.w	80030a8 <_dtoa_r+0xb08>
 800261e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002620:	b953      	cbnz	r3, 8002638 <_dtoa_r+0x98>
 8002622:	4ba6      	ldr	r3, [pc, #664]	; (80028bc <_dtoa_r+0x31c>)
 8002624:	e021      	b.n	800266a <_dtoa_r+0xca>
 8002626:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <_dtoa_r+0x320>)
 8002628:	9306      	str	r3, [sp, #24]
 800262a:	3308      	adds	r3, #8
 800262c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	9806      	ldr	r0, [sp, #24]
 8002632:	b015      	add	sp, #84	; 0x54
 8002634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002638:	4ba0      	ldr	r3, [pc, #640]	; (80028bc <_dtoa_r+0x31c>)
 800263a:	9306      	str	r3, [sp, #24]
 800263c:	3303      	adds	r3, #3
 800263e:	e7f5      	b.n	800262c <_dtoa_r+0x8c>
 8002640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002644:	2200      	movs	r2, #0
 8002646:	2300      	movs	r3, #0
 8002648:	4630      	mov	r0, r6
 800264a:	4639      	mov	r1, r7
 800264c:	f7fe f9bc 	bl	80009c8 <__aeabi_dcmpeq>
 8002650:	4682      	mov	sl, r0
 8002652:	b160      	cbz	r0, 800266e <_dtoa_r+0xce>
 8002654:	2301      	movs	r3, #1
 8002656:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8520 	beq.w	80030a2 <_dtoa_r+0xb02>
 8002662:	4b98      	ldr	r3, [pc, #608]	; (80028c4 <_dtoa_r+0x324>)
 8002664:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	3b01      	subs	r3, #1
 800266a:	9306      	str	r3, [sp, #24]
 800266c:	e7e0      	b.n	8002630 <_dtoa_r+0x90>
 800266e:	ab12      	add	r3, sp, #72	; 0x48
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	ab13      	add	r3, sp, #76	; 0x4c
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4632      	mov	r2, r6
 8002678:	463b      	mov	r3, r7
 800267a:	4620      	mov	r0, r4
 800267c:	f001 f800 	bl	8003680 <__d2b>
 8002680:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002684:	4683      	mov	fp, r0
 8002686:	2d00      	cmp	r5, #0
 8002688:	d07d      	beq.n	8002786 <_dtoa_r+0x1e6>
 800268a:	46b0      	mov	r8, r6
 800268c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002690:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002694:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002698:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800269c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80026a0:	2200      	movs	r2, #0
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <_dtoa_r+0x328>)
 80026a4:	4640      	mov	r0, r8
 80026a6:	4649      	mov	r1, r9
 80026a8:	f7fd fd6e 	bl	8000188 <__aeabi_dsub>
 80026ac:	a37c      	add	r3, pc, #496	; (adr r3, 80028a0 <_dtoa_r+0x300>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ff21 	bl	80004f8 <__aeabi_dmul>
 80026b6:	a37c      	add	r3, pc, #496	; (adr r3, 80028a8 <_dtoa_r+0x308>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd fd66 	bl	800018c <__adddf3>
 80026c0:	4606      	mov	r6, r0
 80026c2:	4628      	mov	r0, r5
 80026c4:	460f      	mov	r7, r1
 80026c6:	f7fd fead 	bl	8000424 <__aeabi_i2d>
 80026ca:	a379      	add	r3, pc, #484	; (adr r3, 80028b0 <_dtoa_r+0x310>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	f7fd ff12 	bl	80004f8 <__aeabi_dmul>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4630      	mov	r0, r6
 80026da:	4639      	mov	r1, r7
 80026dc:	f7fd fd56 	bl	800018c <__adddf3>
 80026e0:	4606      	mov	r6, r0
 80026e2:	460f      	mov	r7, r1
 80026e4:	f7fe f9b8 	bl	8000a58 <__aeabi_d2iz>
 80026e8:	2200      	movs	r2, #0
 80026ea:	4682      	mov	sl, r0
 80026ec:	2300      	movs	r3, #0
 80026ee:	4630      	mov	r0, r6
 80026f0:	4639      	mov	r1, r7
 80026f2:	f7fe f973 	bl	80009dc <__aeabi_dcmplt>
 80026f6:	b148      	cbz	r0, 800270c <_dtoa_r+0x16c>
 80026f8:	4650      	mov	r0, sl
 80026fa:	f7fd fe93 	bl	8000424 <__aeabi_i2d>
 80026fe:	4632      	mov	r2, r6
 8002700:	463b      	mov	r3, r7
 8002702:	f7fe f961 	bl	80009c8 <__aeabi_dcmpeq>
 8002706:	b908      	cbnz	r0, 800270c <_dtoa_r+0x16c>
 8002708:	f10a 3aff 	add.w	sl, sl, #4294967295
 800270c:	f1ba 0f16 	cmp.w	sl, #22
 8002710:	d85a      	bhi.n	80027c8 <_dtoa_r+0x228>
 8002712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002716:	496d      	ldr	r1, [pc, #436]	; (80028cc <_dtoa_r+0x32c>)
 8002718:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800271c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002720:	f7fe f97a 	bl	8000a18 <__aeabi_dcmpgt>
 8002724:	2800      	cmp	r0, #0
 8002726:	d051      	beq.n	80027cc <_dtoa_r+0x22c>
 8002728:	2300      	movs	r3, #0
 800272a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800272e:	930d      	str	r3, [sp, #52]	; 0x34
 8002730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002732:	1b5d      	subs	r5, r3, r5
 8002734:	1e6b      	subs	r3, r5, #1
 8002736:	9307      	str	r3, [sp, #28]
 8002738:	bf43      	ittte	mi
 800273a:	2300      	movmi	r3, #0
 800273c:	f1c5 0901 	rsbmi	r9, r5, #1
 8002740:	9307      	strmi	r3, [sp, #28]
 8002742:	f04f 0900 	movpl.w	r9, #0
 8002746:	f1ba 0f00 	cmp.w	sl, #0
 800274a:	db41      	blt.n	80027d0 <_dtoa_r+0x230>
 800274c:	9b07      	ldr	r3, [sp, #28]
 800274e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002752:	4453      	add	r3, sl
 8002754:	9307      	str	r3, [sp, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	9308      	str	r3, [sp, #32]
 800275a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800275c:	2b09      	cmp	r3, #9
 800275e:	f200 808f 	bhi.w	8002880 <_dtoa_r+0x2e0>
 8002762:	2b05      	cmp	r3, #5
 8002764:	bfc4      	itt	gt
 8002766:	3b04      	subgt	r3, #4
 8002768:	931e      	strgt	r3, [sp, #120]	; 0x78
 800276a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800276c:	bfc8      	it	gt
 800276e:	2500      	movgt	r5, #0
 8002770:	f1a3 0302 	sub.w	r3, r3, #2
 8002774:	bfd8      	it	le
 8002776:	2501      	movle	r5, #1
 8002778:	2b03      	cmp	r3, #3
 800277a:	f200 808d 	bhi.w	8002898 <_dtoa_r+0x2f8>
 800277e:	e8df f003 	tbb	[pc, r3]
 8002782:	7d7b      	.short	0x7d7b
 8002784:	6f2f      	.short	0x6f2f
 8002786:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800278a:	441d      	add	r5, r3
 800278c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002790:	2820      	cmp	r0, #32
 8002792:	dd13      	ble.n	80027bc <_dtoa_r+0x21c>
 8002794:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002798:	9b02      	ldr	r3, [sp, #8]
 800279a:	fa08 f800 	lsl.w	r8, r8, r0
 800279e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80027a2:	fa23 f000 	lsr.w	r0, r3, r0
 80027a6:	ea48 0000 	orr.w	r0, r8, r0
 80027aa:	f7fd fe2b 	bl	8000404 <__aeabi_ui2d>
 80027ae:	2301      	movs	r3, #1
 80027b0:	4680      	mov	r8, r0
 80027b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80027b6:	3d01      	subs	r5, #1
 80027b8:	9310      	str	r3, [sp, #64]	; 0x40
 80027ba:	e771      	b.n	80026a0 <_dtoa_r+0x100>
 80027bc:	9b02      	ldr	r3, [sp, #8]
 80027be:	f1c0 0020 	rsb	r0, r0, #32
 80027c2:	fa03 f000 	lsl.w	r0, r3, r0
 80027c6:	e7f0      	b.n	80027aa <_dtoa_r+0x20a>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e7b0      	b.n	800272e <_dtoa_r+0x18e>
 80027cc:	900d      	str	r0, [sp, #52]	; 0x34
 80027ce:	e7af      	b.n	8002730 <_dtoa_r+0x190>
 80027d0:	f1ca 0300 	rsb	r3, sl, #0
 80027d4:	9308      	str	r3, [sp, #32]
 80027d6:	2300      	movs	r3, #0
 80027d8:	eba9 090a 	sub.w	r9, r9, sl
 80027dc:	930c      	str	r3, [sp, #48]	; 0x30
 80027de:	e7bc      	b.n	800275a <_dtoa_r+0x1ba>
 80027e0:	2301      	movs	r3, #1
 80027e2:	9309      	str	r3, [sp, #36]	; 0x24
 80027e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	dd74      	ble.n	80028d4 <_dtoa_r+0x334>
 80027ea:	4698      	mov	r8, r3
 80027ec:	9304      	str	r3, [sp, #16]
 80027ee:	2200      	movs	r2, #0
 80027f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80027f2:	6072      	str	r2, [r6, #4]
 80027f4:	2204      	movs	r2, #4
 80027f6:	f102 0014 	add.w	r0, r2, #20
 80027fa:	4298      	cmp	r0, r3
 80027fc:	6871      	ldr	r1, [r6, #4]
 80027fe:	d96e      	bls.n	80028de <_dtoa_r+0x33e>
 8002800:	4620      	mov	r0, r4
 8002802:	f000 fcb0 	bl	8003166 <_Balloc>
 8002806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002808:	6030      	str	r0, [r6, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b8 0f0e 	cmp.w	r8, #14
 8002810:	9306      	str	r3, [sp, #24]
 8002812:	f200 80ed 	bhi.w	80029f0 <_dtoa_r+0x450>
 8002816:	2d00      	cmp	r5, #0
 8002818:	f000 80ea 	beq.w	80029f0 <_dtoa_r+0x450>
 800281c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002820:	f1ba 0f00 	cmp.w	sl, #0
 8002824:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002828:	dd77      	ble.n	800291a <_dtoa_r+0x37a>
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <_dtoa_r+0x32c>)
 800282c:	f00a 030f 	and.w	r3, sl, #15
 8002830:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002834:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002838:	06f0      	lsls	r0, r6, #27
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002842:	d568      	bpl.n	8002916 <_dtoa_r+0x376>
 8002844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <_dtoa_r+0x330>)
 800284a:	2503      	movs	r5, #3
 800284c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002850:	f7fd ff7c 	bl	800074c <__aeabi_ddiv>
 8002854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002858:	f006 060f 	and.w	r6, r6, #15
 800285c:	4f1c      	ldr	r7, [pc, #112]	; (80028d0 <_dtoa_r+0x330>)
 800285e:	e04f      	b.n	8002900 <_dtoa_r+0x360>
 8002860:	2301      	movs	r3, #1
 8002862:	9309      	str	r3, [sp, #36]	; 0x24
 8002864:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002866:	4453      	add	r3, sl
 8002868:	f103 0801 	add.w	r8, r3, #1
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	4643      	mov	r3, r8
 8002870:	2b01      	cmp	r3, #1
 8002872:	bfb8      	it	lt
 8002874:	2301      	movlt	r3, #1
 8002876:	e7ba      	b.n	80027ee <_dtoa_r+0x24e>
 8002878:	2300      	movs	r3, #0
 800287a:	e7b2      	b.n	80027e2 <_dtoa_r+0x242>
 800287c:	2300      	movs	r3, #0
 800287e:	e7f0      	b.n	8002862 <_dtoa_r+0x2c2>
 8002880:	2501      	movs	r5, #1
 8002882:	2300      	movs	r3, #0
 8002884:	9509      	str	r5, [sp, #36]	; 0x24
 8002886:	931e      	str	r3, [sp, #120]	; 0x78
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	2200      	movs	r2, #0
 800288e:	9304      	str	r3, [sp, #16]
 8002890:	4698      	mov	r8, r3
 8002892:	2312      	movs	r3, #18
 8002894:	921f      	str	r2, [sp, #124]	; 0x7c
 8002896:	e7aa      	b.n	80027ee <_dtoa_r+0x24e>
 8002898:	2301      	movs	r3, #1
 800289a:	9309      	str	r3, [sp, #36]	; 0x24
 800289c:	e7f4      	b.n	8002888 <_dtoa_r+0x2e8>
 800289e:	bf00      	nop
 80028a0:	636f4361 	.word	0x636f4361
 80028a4:	3fd287a7 	.word	0x3fd287a7
 80028a8:	8b60c8b3 	.word	0x8b60c8b3
 80028ac:	3fc68a28 	.word	0x3fc68a28
 80028b0:	509f79fb 	.word	0x509f79fb
 80028b4:	3fd34413 	.word	0x3fd34413
 80028b8:	7ff00000 	.word	0x7ff00000
 80028bc:	08003cc2 	.word	0x08003cc2
 80028c0:	08003cb9 	.word	0x08003cb9
 80028c4:	08003c96 	.word	0x08003c96
 80028c8:	3ff80000 	.word	0x3ff80000
 80028cc:	08003cf0 	.word	0x08003cf0
 80028d0:	08003cc8 	.word	0x08003cc8
 80028d4:	2301      	movs	r3, #1
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	4698      	mov	r8, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	e7da      	b.n	8002894 <_dtoa_r+0x2f4>
 80028de:	3101      	adds	r1, #1
 80028e0:	6071      	str	r1, [r6, #4]
 80028e2:	0052      	lsls	r2, r2, #1
 80028e4:	e787      	b.n	80027f6 <_dtoa_r+0x256>
 80028e6:	07f1      	lsls	r1, r6, #31
 80028e8:	d508      	bpl.n	80028fc <_dtoa_r+0x35c>
 80028ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80028ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f2:	f7fd fe01 	bl	80004f8 <__aeabi_dmul>
 80028f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80028fa:	3501      	adds	r5, #1
 80028fc:	1076      	asrs	r6, r6, #1
 80028fe:	3708      	adds	r7, #8
 8002900:	2e00      	cmp	r6, #0
 8002902:	d1f0      	bne.n	80028e6 <_dtoa_r+0x346>
 8002904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800290c:	f7fd ff1e 	bl	800074c <__aeabi_ddiv>
 8002910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002914:	e01b      	b.n	800294e <_dtoa_r+0x3ae>
 8002916:	2502      	movs	r5, #2
 8002918:	e7a0      	b.n	800285c <_dtoa_r+0x2bc>
 800291a:	f000 80a4 	beq.w	8002a66 <_dtoa_r+0x4c6>
 800291e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002922:	f1ca 0600 	rsb	r6, sl, #0
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <_dtoa_r+0x608>)
 8002928:	f006 020f 	and.w	r2, r6, #15
 800292c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fde0 	bl	80004f8 <__aeabi_dmul>
 8002938:	2502      	movs	r5, #2
 800293a:	2300      	movs	r3, #0
 800293c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002940:	4f9a      	ldr	r7, [pc, #616]	; (8002bac <_dtoa_r+0x60c>)
 8002942:	1136      	asrs	r6, r6, #4
 8002944:	2e00      	cmp	r6, #0
 8002946:	f040 8083 	bne.w	8002a50 <_dtoa_r+0x4b0>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e0      	bne.n	8002910 <_dtoa_r+0x370>
 800294e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808a 	beq.w	8002a6a <_dtoa_r+0x4ca>
 8002956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800295a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800295e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <_dtoa_r+0x610>)
 8002966:	f7fe f839 	bl	80009dc <__aeabi_dcmplt>
 800296a:	2800      	cmp	r0, #0
 800296c:	d07d      	beq.n	8002a6a <_dtoa_r+0x4ca>
 800296e:	f1b8 0f00 	cmp.w	r8, #0
 8002972:	d07a      	beq.n	8002a6a <_dtoa_r+0x4ca>
 8002974:	9b04      	ldr	r3, [sp, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	dd36      	ble.n	80029e8 <_dtoa_r+0x448>
 800297a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <_dtoa_r+0x614>)
 8002982:	f7fd fdb9 	bl	80004f8 <__aeabi_dmul>
 8002986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800298a:	9e04      	ldr	r6, [sp, #16]
 800298c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002990:	3501      	adds	r5, #1
 8002992:	4628      	mov	r0, r5
 8002994:	f7fd fd46 	bl	8000424 <__aeabi_i2d>
 8002998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800299c:	f7fd fdac 	bl	80004f8 <__aeabi_dmul>
 80029a0:	2200      	movs	r2, #0
 80029a2:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <_dtoa_r+0x618>)
 80029a4:	f7fd fbf2 	bl	800018c <__adddf3>
 80029a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80029ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80029b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80029b2:	2e00      	cmp	r6, #0
 80029b4:	d15c      	bne.n	8002a70 <_dtoa_r+0x4d0>
 80029b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <_dtoa_r+0x61c>)
 80029be:	f7fd fbe3 	bl	8000188 <__aeabi_dsub>
 80029c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029c4:	462b      	mov	r3, r5
 80029c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029ca:	f7fe f825 	bl	8000a18 <__aeabi_dcmpgt>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	f040 8281 	bne.w	8002ed6 <_dtoa_r+0x936>
 80029d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80029de:	f7fd fffd 	bl	80009dc <__aeabi_dcmplt>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	f040 8275 	bne.w	8002ed2 <_dtoa_r+0x932>
 80029e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80029ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f2c0 814b 	blt.w	8002c8e <_dtoa_r+0x6ee>
 80029f8:	f1ba 0f0e 	cmp.w	sl, #14
 80029fc:	f300 8147 	bgt.w	8002c8e <_dtoa_r+0x6ee>
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <_dtoa_r+0x608>)
 8002a02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f280 80d7 	bge.w	8002bc4 <_dtoa_r+0x624>
 8002a16:	f1b8 0f00 	cmp.w	r8, #0
 8002a1a:	f300 80d3 	bgt.w	8002bc4 <_dtoa_r+0x624>
 8002a1e:	f040 8257 	bne.w	8002ed0 <_dtoa_r+0x930>
 8002a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a26:	2200      	movs	r2, #0
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <_dtoa_r+0x61c>)
 8002a2a:	f7fd fd65 	bl	80004f8 <__aeabi_dmul>
 8002a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a32:	f7fd ffe7 	bl	8000a04 <__aeabi_dcmpge>
 8002a36:	4646      	mov	r6, r8
 8002a38:	4647      	mov	r7, r8
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	f040 822d 	bne.w	8002e9a <_dtoa_r+0x8fa>
 8002a40:	9b06      	ldr	r3, [sp, #24]
 8002a42:	9a06      	ldr	r2, [sp, #24]
 8002a44:	1c5d      	adds	r5, r3, #1
 8002a46:	2331      	movs	r3, #49	; 0x31
 8002a48:	f10a 0a01 	add.w	sl, sl, #1
 8002a4c:	7013      	strb	r3, [r2, #0]
 8002a4e:	e228      	b.n	8002ea2 <_dtoa_r+0x902>
 8002a50:	07f2      	lsls	r2, r6, #31
 8002a52:	d505      	bpl.n	8002a60 <_dtoa_r+0x4c0>
 8002a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a58:	f7fd fd4e 	bl	80004f8 <__aeabi_dmul>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	3501      	adds	r5, #1
 8002a60:	1076      	asrs	r6, r6, #1
 8002a62:	3708      	adds	r7, #8
 8002a64:	e76e      	b.n	8002944 <_dtoa_r+0x3a4>
 8002a66:	2502      	movs	r5, #2
 8002a68:	e771      	b.n	800294e <_dtoa_r+0x3ae>
 8002a6a:	4657      	mov	r7, sl
 8002a6c:	4646      	mov	r6, r8
 8002a6e:	e790      	b.n	8002992 <_dtoa_r+0x3f2>
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <_dtoa_r+0x608>)
 8002a72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002a76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d048      	beq.n	8002b12 <_dtoa_r+0x572>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	2000      	movs	r0, #0
 8002a86:	494e      	ldr	r1, [pc, #312]	; (8002bc0 <_dtoa_r+0x620>)
 8002a88:	f7fd fe60 	bl	800074c <__aeabi_ddiv>
 8002a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a90:	f7fd fb7a 	bl	8000188 <__aeabi_dsub>
 8002a94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a98:	9d06      	ldr	r5, [sp, #24]
 8002a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a9e:	f7fd ffdb 	bl	8000a58 <__aeabi_d2iz>
 8002aa2:	9011      	str	r0, [sp, #68]	; 0x44
 8002aa4:	f7fd fcbe 	bl	8000424 <__aeabi_i2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ab0:	f7fd fb6a 	bl	8000188 <__aeabi_dsub>
 8002ab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002aba:	3330      	adds	r3, #48	; 0x30
 8002abc:	f805 3b01 	strb.w	r3, [r5], #1
 8002ac0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ac4:	f7fd ff8a 	bl	80009dc <__aeabi_dcmplt>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d163      	bne.n	8002b94 <_dtoa_r+0x5f4>
 8002acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <_dtoa_r+0x610>)
 8002ad4:	f7fd fb58 	bl	8000188 <__aeabi_dsub>
 8002ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002adc:	f7fd ff7e 	bl	80009dc <__aeabi_dcmplt>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	f040 80b5 	bne.w	8002c50 <_dtoa_r+0x6b0>
 8002ae6:	9b06      	ldr	r3, [sp, #24]
 8002ae8:	1aeb      	subs	r3, r5, r3
 8002aea:	429e      	cmp	r6, r3
 8002aec:	f77f af7c 	ble.w	80029e8 <_dtoa_r+0x448>
 8002af0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002af4:	2200      	movs	r2, #0
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <_dtoa_r+0x614>)
 8002af8:	f7fd fcfe 	bl	80004f8 <__aeabi_dmul>
 8002afc:	2200      	movs	r2, #0
 8002afe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <_dtoa_r+0x614>)
 8002b08:	f7fd fcf6 	bl	80004f8 <__aeabi_dmul>
 8002b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b10:	e7c3      	b.n	8002a9a <_dtoa_r+0x4fa>
 8002b12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b16:	f7fd fcef 	bl	80004f8 <__aeabi_dmul>
 8002b1a:	9b06      	ldr	r3, [sp, #24]
 8002b1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002b20:	199d      	adds	r5, r3, r6
 8002b22:	461e      	mov	r6, r3
 8002b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b28:	f7fd ff96 	bl	8000a58 <__aeabi_d2iz>
 8002b2c:	9011      	str	r0, [sp, #68]	; 0x44
 8002b2e:	f7fd fc79 	bl	8000424 <__aeabi_i2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b3a:	f7fd fb25 	bl	8000188 <__aeabi_dsub>
 8002b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b44:	3330      	adds	r3, #48	; 0x30
 8002b46:	f806 3b01 	strb.w	r3, [r6], #1
 8002b4a:	42ae      	cmp	r6, r5
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	d124      	bne.n	8002b9c <_dtoa_r+0x5fc>
 8002b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <_dtoa_r+0x620>)
 8002b58:	f7fd fb18 	bl	800018c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b64:	f7fd ff58 	bl	8000a18 <__aeabi_dcmpgt>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d171      	bne.n	8002c50 <_dtoa_r+0x6b0>
 8002b6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002b70:	2000      	movs	r0, #0
 8002b72:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <_dtoa_r+0x620>)
 8002b74:	f7fd fb08 	bl	8000188 <__aeabi_dsub>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b80:	f7fd ff2c 	bl	80009dc <__aeabi_dcmplt>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	f43f af2f 	beq.w	80029e8 <_dtoa_r+0x448>
 8002b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002b8e:	1e6a      	subs	r2, r5, #1
 8002b90:	2b30      	cmp	r3, #48	; 0x30
 8002b92:	d001      	beq.n	8002b98 <_dtoa_r+0x5f8>
 8002b94:	46ba      	mov	sl, r7
 8002b96:	e04a      	b.n	8002c2e <_dtoa_r+0x68e>
 8002b98:	4615      	mov	r5, r2
 8002b9a:	e7f6      	b.n	8002b8a <_dtoa_r+0x5ea>
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_dtoa_r+0x614>)
 8002b9e:	f7fd fcab 	bl	80004f8 <__aeabi_dmul>
 8002ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ba6:	e7bd      	b.n	8002b24 <_dtoa_r+0x584>
 8002ba8:	08003cf0 	.word	0x08003cf0
 8002bac:	08003cc8 	.word	0x08003cc8
 8002bb0:	3ff00000 	.word	0x3ff00000
 8002bb4:	40240000 	.word	0x40240000
 8002bb8:	401c0000 	.word	0x401c0000
 8002bbc:	40140000 	.word	0x40140000
 8002bc0:	3fe00000 	.word	0x3fe00000
 8002bc4:	9d06      	ldr	r5, [sp, #24]
 8002bc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bce:	4630      	mov	r0, r6
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	f7fd fdbb 	bl	800074c <__aeabi_ddiv>
 8002bd6:	f7fd ff3f 	bl	8000a58 <__aeabi_d2iz>
 8002bda:	4681      	mov	r9, r0
 8002bdc:	f7fd fc22 	bl	8000424 <__aeabi_i2d>
 8002be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002be4:	f7fd fc88 	bl	80004f8 <__aeabi_dmul>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4630      	mov	r0, r6
 8002bee:	4639      	mov	r1, r7
 8002bf0:	f7fd faca 	bl	8000188 <__aeabi_dsub>
 8002bf4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8002bfc:	9e06      	ldr	r6, [sp, #24]
 8002bfe:	4602      	mov	r2, r0
 8002c00:	1bae      	subs	r6, r5, r6
 8002c02:	45b0      	cmp	r8, r6
 8002c04:	460b      	mov	r3, r1
 8002c06:	d135      	bne.n	8002c74 <_dtoa_r+0x6d4>
 8002c08:	f7fd fac0 	bl	800018c <__adddf3>
 8002c0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c10:	4606      	mov	r6, r0
 8002c12:	460f      	mov	r7, r1
 8002c14:	f7fd ff00 	bl	8000a18 <__aeabi_dcmpgt>
 8002c18:	b9c8      	cbnz	r0, 8002c4e <_dtoa_r+0x6ae>
 8002c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c1e:	4630      	mov	r0, r6
 8002c20:	4639      	mov	r1, r7
 8002c22:	f7fd fed1 	bl	80009c8 <__aeabi_dcmpeq>
 8002c26:	b110      	cbz	r0, 8002c2e <_dtoa_r+0x68e>
 8002c28:	f019 0f01 	tst.w	r9, #1
 8002c2c:	d10f      	bne.n	8002c4e <_dtoa_r+0x6ae>
 8002c2e:	4659      	mov	r1, fp
 8002c30:	4620      	mov	r0, r4
 8002c32:	f000 facc 	bl	80031ce <_Bfree>
 8002c36:	2300      	movs	r3, #0
 8002c38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c3a:	702b      	strb	r3, [r5, #0]
 8002c3c:	f10a 0301 	add.w	r3, sl, #1
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f43f acf3 	beq.w	8002630 <_dtoa_r+0x90>
 8002c4a:	601d      	str	r5, [r3, #0]
 8002c4c:	e4f0      	b.n	8002630 <_dtoa_r+0x90>
 8002c4e:	4657      	mov	r7, sl
 8002c50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002c54:	1e6b      	subs	r3, r5, #1
 8002c56:	2a39      	cmp	r2, #57	; 0x39
 8002c58:	d106      	bne.n	8002c68 <_dtoa_r+0x6c8>
 8002c5a:	9a06      	ldr	r2, [sp, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d107      	bne.n	8002c70 <_dtoa_r+0x6d0>
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	7013      	strb	r3, [r2, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	3701      	adds	r7, #1
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	3201      	adds	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e791      	b.n	8002b94 <_dtoa_r+0x5f4>
 8002c70:	461d      	mov	r5, r3
 8002c72:	e7ed      	b.n	8002c50 <_dtoa_r+0x6b0>
 8002c74:	2200      	movs	r2, #0
 8002c76:	4b99      	ldr	r3, [pc, #612]	; (8002edc <_dtoa_r+0x93c>)
 8002c78:	f7fd fc3e 	bl	80004f8 <__aeabi_dmul>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2300      	movs	r3, #0
 8002c80:	4606      	mov	r6, r0
 8002c82:	460f      	mov	r7, r1
 8002c84:	f7fd fea0 	bl	80009c8 <__aeabi_dcmpeq>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d09e      	beq.n	8002bca <_dtoa_r+0x62a>
 8002c8c:	e7cf      	b.n	8002c2e <_dtoa_r+0x68e>
 8002c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	f000 8088 	beq.w	8002da6 <_dtoa_r+0x806>
 8002c96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002c98:	2a01      	cmp	r2, #1
 8002c9a:	dc6d      	bgt.n	8002d78 <_dtoa_r+0x7d8>
 8002c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d066      	beq.n	8002d70 <_dtoa_r+0x7d0>
 8002ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002ca6:	464d      	mov	r5, r9
 8002ca8:	9e08      	ldr	r6, [sp, #32]
 8002caa:	9a07      	ldr	r2, [sp, #28]
 8002cac:	2101      	movs	r1, #1
 8002cae:	441a      	add	r2, r3
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4499      	add	r9, r3
 8002cb4:	9207      	str	r2, [sp, #28]
 8002cb6:	f000 fb2a 	bl	800330e <__i2b>
 8002cba:	4607      	mov	r7, r0
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	dd0b      	ble.n	8002cd8 <_dtoa_r+0x738>
 8002cc0:	9b07      	ldr	r3, [sp, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dd08      	ble.n	8002cd8 <_dtoa_r+0x738>
 8002cc6:	42ab      	cmp	r3, r5
 8002cc8:	bfa8      	it	ge
 8002cca:	462b      	movge	r3, r5
 8002ccc:	9a07      	ldr	r2, [sp, #28]
 8002cce:	eba9 0903 	sub.w	r9, r9, r3
 8002cd2:	1aed      	subs	r5, r5, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	9307      	str	r3, [sp, #28]
 8002cd8:	9b08      	ldr	r3, [sp, #32]
 8002cda:	b1eb      	cbz	r3, 8002d18 <_dtoa_r+0x778>
 8002cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d065      	beq.n	8002dae <_dtoa_r+0x80e>
 8002ce2:	b18e      	cbz	r6, 8002d08 <_dtoa_r+0x768>
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f000 fbaf 	bl	800344c <__pow5mult>
 8002cee:	465a      	mov	r2, fp
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4607      	mov	r7, r0
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 fb13 	bl	8003320 <__multiply>
 8002cfa:	4659      	mov	r1, fp
 8002cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f000 fa65 	bl	80031ce <_Bfree>
 8002d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d06:	469b      	mov	fp, r3
 8002d08:	9b08      	ldr	r3, [sp, #32]
 8002d0a:	1b9a      	subs	r2, r3, r6
 8002d0c:	d004      	beq.n	8002d18 <_dtoa_r+0x778>
 8002d0e:	4659      	mov	r1, fp
 8002d10:	4620      	mov	r0, r4
 8002d12:	f000 fb9b 	bl	800344c <__pow5mult>
 8002d16:	4683      	mov	fp, r0
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f000 faf7 	bl	800330e <__i2b>
 8002d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d22:	4606      	mov	r6, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 81c6 	beq.w	80030b6 <_dtoa_r+0xb16>
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 fb8c 	bl	800344c <__pow5mult>
 8002d34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d36:	4606      	mov	r6, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	dc3e      	bgt.n	8002dba <_dtoa_r+0x81a>
 8002d3c:	9b02      	ldr	r3, [sp, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d137      	bne.n	8002db2 <_dtoa_r+0x812>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d134      	bne.n	8002db6 <_dtoa_r+0x816>
 8002d4c:	9b03      	ldr	r3, [sp, #12]
 8002d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	0d1b      	lsrs	r3, r3, #20
 8002d54:	051b      	lsls	r3, r3, #20
 8002d56:	b12b      	cbz	r3, 8002d64 <_dtoa_r+0x7c4>
 8002d58:	9b07      	ldr	r3, [sp, #28]
 8002d5a:	f109 0901 	add.w	r9, r9, #1
 8002d5e:	3301      	adds	r3, #1
 8002d60:	9307      	str	r3, [sp, #28]
 8002d62:	2301      	movs	r3, #1
 8002d64:	9308      	str	r3, [sp, #32]
 8002d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d128      	bne.n	8002dbe <_dtoa_r+0x81e>
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e02e      	b.n	8002dce <_dtoa_r+0x82e>
 8002d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002d72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002d76:	e796      	b.n	8002ca6 <_dtoa_r+0x706>
 8002d78:	9b08      	ldr	r3, [sp, #32]
 8002d7a:	f108 36ff 	add.w	r6, r8, #4294967295
 8002d7e:	42b3      	cmp	r3, r6
 8002d80:	bfb7      	itett	lt
 8002d82:	9b08      	ldrlt	r3, [sp, #32]
 8002d84:	1b9e      	subge	r6, r3, r6
 8002d86:	1af2      	sublt	r2, r6, r3
 8002d88:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002d8a:	bfbf      	itttt	lt
 8002d8c:	9608      	strlt	r6, [sp, #32]
 8002d8e:	189b      	addlt	r3, r3, r2
 8002d90:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002d92:	2600      	movlt	r6, #0
 8002d94:	f1b8 0f00 	cmp.w	r8, #0
 8002d98:	bfb9      	ittee	lt
 8002d9a:	eba9 0508 	sublt.w	r5, r9, r8
 8002d9e:	2300      	movlt	r3, #0
 8002da0:	464d      	movge	r5, r9
 8002da2:	4643      	movge	r3, r8
 8002da4:	e781      	b.n	8002caa <_dtoa_r+0x70a>
 8002da6:	9e08      	ldr	r6, [sp, #32]
 8002da8:	464d      	mov	r5, r9
 8002daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002dac:	e786      	b.n	8002cbc <_dtoa_r+0x71c>
 8002dae:	9a08      	ldr	r2, [sp, #32]
 8002db0:	e7ad      	b.n	8002d0e <_dtoa_r+0x76e>
 8002db2:	2300      	movs	r3, #0
 8002db4:	e7d6      	b.n	8002d64 <_dtoa_r+0x7c4>
 8002db6:	9b02      	ldr	r3, [sp, #8]
 8002db8:	e7d4      	b.n	8002d64 <_dtoa_r+0x7c4>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9308      	str	r3, [sp, #32]
 8002dbe:	6933      	ldr	r3, [r6, #16]
 8002dc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002dc4:	6918      	ldr	r0, [r3, #16]
 8002dc6:	f000 fa54 	bl	8003272 <__hi0bits>
 8002dca:	f1c0 0020 	rsb	r0, r0, #32
 8002dce:	9b07      	ldr	r3, [sp, #28]
 8002dd0:	4418      	add	r0, r3
 8002dd2:	f010 001f 	ands.w	r0, r0, #31
 8002dd6:	d047      	beq.n	8002e68 <_dtoa_r+0x8c8>
 8002dd8:	f1c0 0320 	rsb	r3, r0, #32
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	dd3b      	ble.n	8002e58 <_dtoa_r+0x8b8>
 8002de0:	9b07      	ldr	r3, [sp, #28]
 8002de2:	f1c0 001c 	rsb	r0, r0, #28
 8002de6:	4481      	add	r9, r0
 8002de8:	4405      	add	r5, r0
 8002dea:	4403      	add	r3, r0
 8002dec:	9307      	str	r3, [sp, #28]
 8002dee:	f1b9 0f00 	cmp.w	r9, #0
 8002df2:	dd05      	ble.n	8002e00 <_dtoa_r+0x860>
 8002df4:	4659      	mov	r1, fp
 8002df6:	464a      	mov	r2, r9
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 fb75 	bl	80034e8 <__lshift>
 8002dfe:	4683      	mov	fp, r0
 8002e00:	9b07      	ldr	r3, [sp, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dd05      	ble.n	8002e12 <_dtoa_r+0x872>
 8002e06:	4631      	mov	r1, r6
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f000 fb6c 	bl	80034e8 <__lshift>
 8002e10:	4606      	mov	r6, r0
 8002e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e14:	b353      	cbz	r3, 8002e6c <_dtoa_r+0x8cc>
 8002e16:	4631      	mov	r1, r6
 8002e18:	4658      	mov	r0, fp
 8002e1a:	f000 fbb9 	bl	8003590 <__mcmp>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	da24      	bge.n	8002e6c <_dtoa_r+0x8cc>
 8002e22:	2300      	movs	r3, #0
 8002e24:	4659      	mov	r1, fp
 8002e26:	220a      	movs	r2, #10
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f000 f9e7 	bl	80031fc <__multadd>
 8002e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e34:	4683      	mov	fp, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8144 	beq.w	80030c4 <_dtoa_r+0xb24>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	4639      	mov	r1, r7
 8002e40:	220a      	movs	r2, #10
 8002e42:	4620      	mov	r0, r4
 8002e44:	f000 f9da 	bl	80031fc <__multadd>
 8002e48:	9b04      	ldr	r3, [sp, #16]
 8002e4a:	4607      	mov	r7, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dc4d      	bgt.n	8002eec <_dtoa_r+0x94c>
 8002e50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	dd4a      	ble.n	8002eec <_dtoa_r+0x94c>
 8002e56:	e011      	b.n	8002e7c <_dtoa_r+0x8dc>
 8002e58:	d0c9      	beq.n	8002dee <_dtoa_r+0x84e>
 8002e5a:	9a07      	ldr	r2, [sp, #28]
 8002e5c:	331c      	adds	r3, #28
 8002e5e:	441a      	add	r2, r3
 8002e60:	4499      	add	r9, r3
 8002e62:	441d      	add	r5, r3
 8002e64:	4613      	mov	r3, r2
 8002e66:	e7c1      	b.n	8002dec <_dtoa_r+0x84c>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	e7f6      	b.n	8002e5a <_dtoa_r+0x8ba>
 8002e6c:	f1b8 0f00 	cmp.w	r8, #0
 8002e70:	dc36      	bgt.n	8002ee0 <_dtoa_r+0x940>
 8002e72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	dd33      	ble.n	8002ee0 <_dtoa_r+0x940>
 8002e78:	f8cd 8010 	str.w	r8, [sp, #16]
 8002e7c:	9b04      	ldr	r3, [sp, #16]
 8002e7e:	b963      	cbnz	r3, 8002e9a <_dtoa_r+0x8fa>
 8002e80:	4631      	mov	r1, r6
 8002e82:	2205      	movs	r2, #5
 8002e84:	4620      	mov	r0, r4
 8002e86:	f000 f9b9 	bl	80031fc <__multadd>
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	4658      	mov	r0, fp
 8002e90:	f000 fb7e 	bl	8003590 <__mcmp>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f73f add3 	bgt.w	8002a40 <_dtoa_r+0x4a0>
 8002e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e9c:	9d06      	ldr	r5, [sp, #24]
 8002e9e:	ea6f 0a03 	mvn.w	sl, r3
 8002ea2:	f04f 0900 	mov.w	r9, #0
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 f990 	bl	80031ce <_Bfree>
 8002eae:	2f00      	cmp	r7, #0
 8002eb0:	f43f aebd 	beq.w	8002c2e <_dtoa_r+0x68e>
 8002eb4:	f1b9 0f00 	cmp.w	r9, #0
 8002eb8:	d005      	beq.n	8002ec6 <_dtoa_r+0x926>
 8002eba:	45b9      	cmp	r9, r7
 8002ebc:	d003      	beq.n	8002ec6 <_dtoa_r+0x926>
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f000 f984 	bl	80031ce <_Bfree>
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 f980 	bl	80031ce <_Bfree>
 8002ece:	e6ae      	b.n	8002c2e <_dtoa_r+0x68e>
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	4637      	mov	r7, r6
 8002ed4:	e7e1      	b.n	8002e9a <_dtoa_r+0x8fa>
 8002ed6:	46ba      	mov	sl, r7
 8002ed8:	4637      	mov	r7, r6
 8002eda:	e5b1      	b.n	8002a40 <_dtoa_r+0x4a0>
 8002edc:	40240000 	.word	0x40240000
 8002ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee2:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80f3 	beq.w	80030d2 <_dtoa_r+0xb32>
 8002eec:	2d00      	cmp	r5, #0
 8002eee:	dd05      	ble.n	8002efc <_dtoa_r+0x95c>
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	462a      	mov	r2, r5
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f000 faf7 	bl	80034e8 <__lshift>
 8002efa:	4607      	mov	r7, r0
 8002efc:	9b08      	ldr	r3, [sp, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d04c      	beq.n	8002f9c <_dtoa_r+0x9fc>
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 f92e 	bl	8003166 <_Balloc>
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	f107 010c 	add.w	r1, r7, #12
 8002f12:	3202      	adds	r2, #2
 8002f14:	0092      	lsls	r2, r2, #2
 8002f16:	300c      	adds	r0, #12
 8002f18:	f000 f91a 	bl	8003150 <memcpy>
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	4629      	mov	r1, r5
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 fae1 	bl	80034e8 <__lshift>
 8002f26:	46b9      	mov	r9, r7
 8002f28:	4607      	mov	r7, r0
 8002f2a:	9b06      	ldr	r3, [sp, #24]
 8002f2c:	9307      	str	r3, [sp, #28]
 8002f2e:	9b02      	ldr	r3, [sp, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	9308      	str	r3, [sp, #32]
 8002f36:	4631      	mov	r1, r6
 8002f38:	4658      	mov	r0, fp
 8002f3a:	f7ff faa3 	bl	8002484 <quorem>
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4605      	mov	r5, r0
 8002f42:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002f46:	4658      	mov	r0, fp
 8002f48:	f000 fb22 	bl	8003590 <__mcmp>
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	9002      	str	r0, [sp, #8]
 8002f50:	4631      	mov	r1, r6
 8002f52:	4620      	mov	r0, r4
 8002f54:	f000 fb36 	bl	80035c4 <__mdiff>
 8002f58:	68c3      	ldr	r3, [r0, #12]
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	bb03      	cbnz	r3, 8002fa0 <_dtoa_r+0xa00>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	9009      	str	r0, [sp, #36]	; 0x24
 8002f62:	4658      	mov	r0, fp
 8002f64:	f000 fb14 	bl	8003590 <__mcmp>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4620      	mov	r0, r4
 8002f70:	9309      	str	r3, [sp, #36]	; 0x24
 8002f72:	f000 f92c 	bl	80031ce <_Bfree>
 8002f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f78:	b9a3      	cbnz	r3, 8002fa4 <_dtoa_r+0xa04>
 8002f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f7c:	b992      	cbnz	r2, 8002fa4 <_dtoa_r+0xa04>
 8002f7e:	9a08      	ldr	r2, [sp, #32]
 8002f80:	b982      	cbnz	r2, 8002fa4 <_dtoa_r+0xa04>
 8002f82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f86:	d029      	beq.n	8002fdc <_dtoa_r+0xa3c>
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd01      	ble.n	8002f92 <_dtoa_r+0x9f2>
 8002f8e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002f92:	9b07      	ldr	r3, [sp, #28]
 8002f94:	1c5d      	adds	r5, r3, #1
 8002f96:	f883 8000 	strb.w	r8, [r3]
 8002f9a:	e784      	b.n	8002ea6 <_dtoa_r+0x906>
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	e7c2      	b.n	8002f26 <_dtoa_r+0x986>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e7e3      	b.n	8002f6c <_dtoa_r+0x9cc>
 8002fa4:	9a02      	ldr	r2, [sp, #8]
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	db04      	blt.n	8002fb4 <_dtoa_r+0xa14>
 8002faa:	d123      	bne.n	8002ff4 <_dtoa_r+0xa54>
 8002fac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002fae:	bb0a      	cbnz	r2, 8002ff4 <_dtoa_r+0xa54>
 8002fb0:	9a08      	ldr	r2, [sp, #32]
 8002fb2:	b9fa      	cbnz	r2, 8002ff4 <_dtoa_r+0xa54>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	ddec      	ble.n	8002f92 <_dtoa_r+0x9f2>
 8002fb8:	4659      	mov	r1, fp
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 fa93 	bl	80034e8 <__lshift>
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4683      	mov	fp, r0
 8002fc6:	f000 fae3 	bl	8003590 <__mcmp>
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	dc03      	bgt.n	8002fd6 <_dtoa_r+0xa36>
 8002fce:	d1e0      	bne.n	8002f92 <_dtoa_r+0x9f2>
 8002fd0:	f018 0f01 	tst.w	r8, #1
 8002fd4:	d0dd      	beq.n	8002f92 <_dtoa_r+0x9f2>
 8002fd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002fda:	d1d8      	bne.n	8002f8e <_dtoa_r+0x9ee>
 8002fdc:	9b07      	ldr	r3, [sp, #28]
 8002fde:	9a07      	ldr	r2, [sp, #28]
 8002fe0:	1c5d      	adds	r5, r3, #1
 8002fe2:	2339      	movs	r3, #57	; 0x39
 8002fe4:	7013      	strb	r3, [r2, #0]
 8002fe6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002fea:	1e6a      	subs	r2, r5, #1
 8002fec:	2b39      	cmp	r3, #57	; 0x39
 8002fee:	d04d      	beq.n	800308c <_dtoa_r+0xaec>
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e052      	b.n	800309a <_dtoa_r+0xafa>
 8002ff4:	9a07      	ldr	r2, [sp, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f102 0501 	add.w	r5, r2, #1
 8002ffc:	dd06      	ble.n	800300c <_dtoa_r+0xa6c>
 8002ffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003002:	d0eb      	beq.n	8002fdc <_dtoa_r+0xa3c>
 8003004:	f108 0801 	add.w	r8, r8, #1
 8003008:	9b07      	ldr	r3, [sp, #28]
 800300a:	e7c4      	b.n	8002f96 <_dtoa_r+0x9f6>
 800300c:	9b06      	ldr	r3, [sp, #24]
 800300e:	9a04      	ldr	r2, [sp, #16]
 8003010:	1aeb      	subs	r3, r5, r3
 8003012:	4293      	cmp	r3, r2
 8003014:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003018:	d021      	beq.n	800305e <_dtoa_r+0xabe>
 800301a:	4659      	mov	r1, fp
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	4620      	mov	r0, r4
 8003022:	f000 f8eb 	bl	80031fc <__multadd>
 8003026:	45b9      	cmp	r9, r7
 8003028:	4683      	mov	fp, r0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f04f 020a 	mov.w	r2, #10
 8003032:	4649      	mov	r1, r9
 8003034:	4620      	mov	r0, r4
 8003036:	d105      	bne.n	8003044 <_dtoa_r+0xaa4>
 8003038:	f000 f8e0 	bl	80031fc <__multadd>
 800303c:	4681      	mov	r9, r0
 800303e:	4607      	mov	r7, r0
 8003040:	9507      	str	r5, [sp, #28]
 8003042:	e778      	b.n	8002f36 <_dtoa_r+0x996>
 8003044:	f000 f8da 	bl	80031fc <__multadd>
 8003048:	4639      	mov	r1, r7
 800304a:	4681      	mov	r9, r0
 800304c:	2300      	movs	r3, #0
 800304e:	220a      	movs	r2, #10
 8003050:	4620      	mov	r0, r4
 8003052:	f000 f8d3 	bl	80031fc <__multadd>
 8003056:	4607      	mov	r7, r0
 8003058:	e7f2      	b.n	8003040 <_dtoa_r+0xaa0>
 800305a:	f04f 0900 	mov.w	r9, #0
 800305e:	4659      	mov	r1, fp
 8003060:	2201      	movs	r2, #1
 8003062:	4620      	mov	r0, r4
 8003064:	f000 fa40 	bl	80034e8 <__lshift>
 8003068:	4631      	mov	r1, r6
 800306a:	4683      	mov	fp, r0
 800306c:	f000 fa90 	bl	8003590 <__mcmp>
 8003070:	2800      	cmp	r0, #0
 8003072:	dcb8      	bgt.n	8002fe6 <_dtoa_r+0xa46>
 8003074:	d102      	bne.n	800307c <_dtoa_r+0xadc>
 8003076:	f018 0f01 	tst.w	r8, #1
 800307a:	d1b4      	bne.n	8002fe6 <_dtoa_r+0xa46>
 800307c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003080:	1e6a      	subs	r2, r5, #1
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	f47f af0f 	bne.w	8002ea6 <_dtoa_r+0x906>
 8003088:	4615      	mov	r5, r2
 800308a:	e7f7      	b.n	800307c <_dtoa_r+0xadc>
 800308c:	9b06      	ldr	r3, [sp, #24]
 800308e:	4293      	cmp	r3, r2
 8003090:	d105      	bne.n	800309e <_dtoa_r+0xafe>
 8003092:	2331      	movs	r3, #49	; 0x31
 8003094:	9a06      	ldr	r2, [sp, #24]
 8003096:	f10a 0a01 	add.w	sl, sl, #1
 800309a:	7013      	strb	r3, [r2, #0]
 800309c:	e703      	b.n	8002ea6 <_dtoa_r+0x906>
 800309e:	4615      	mov	r5, r2
 80030a0:	e7a1      	b.n	8002fe6 <_dtoa_r+0xa46>
 80030a2:	4b17      	ldr	r3, [pc, #92]	; (8003100 <_dtoa_r+0xb60>)
 80030a4:	f7ff bae1 	b.w	800266a <_dtoa_r+0xca>
 80030a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f47f aabb 	bne.w	8002626 <_dtoa_r+0x86>
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <_dtoa_r+0xb64>)
 80030b2:	f7ff bada 	b.w	800266a <_dtoa_r+0xca>
 80030b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f77f ae3f 	ble.w	8002d3c <_dtoa_r+0x79c>
 80030be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030c0:	9308      	str	r3, [sp, #32]
 80030c2:	e653      	b.n	8002d6c <_dtoa_r+0x7cc>
 80030c4:	9b04      	ldr	r3, [sp, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dc03      	bgt.n	80030d2 <_dtoa_r+0xb32>
 80030ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	f73f aed5 	bgt.w	8002e7c <_dtoa_r+0x8dc>
 80030d2:	9d06      	ldr	r5, [sp, #24]
 80030d4:	4631      	mov	r1, r6
 80030d6:	4658      	mov	r0, fp
 80030d8:	f7ff f9d4 	bl	8002484 <quorem>
 80030dc:	9b06      	ldr	r3, [sp, #24]
 80030de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80030e2:	f805 8b01 	strb.w	r8, [r5], #1
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	1aeb      	subs	r3, r5, r3
 80030ea:	429a      	cmp	r2, r3
 80030ec:	ddb5      	ble.n	800305a <_dtoa_r+0xaba>
 80030ee:	4659      	mov	r1, fp
 80030f0:	2300      	movs	r3, #0
 80030f2:	220a      	movs	r2, #10
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 f881 	bl	80031fc <__multadd>
 80030fa:	4683      	mov	fp, r0
 80030fc:	e7ea      	b.n	80030d4 <_dtoa_r+0xb34>
 80030fe:	bf00      	nop
 8003100:	08003c95 	.word	0x08003c95
 8003104:	08003cb9 	.word	0x08003cb9

08003108 <_localeconv_r>:
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <_localeconv_r+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a18      	ldr	r0, [r3, #32]
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <_localeconv_r+0x18>)
 8003110:	2800      	cmp	r0, #0
 8003112:	bf08      	it	eq
 8003114:	4618      	moveq	r0, r3
 8003116:	30f0      	adds	r0, #240	; 0xf0
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000004 	.word	0x20000004
 8003120:	20000068 	.word	0x20000068

08003124 <malloc>:
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <malloc+0xc>)
 8003126:	4601      	mov	r1, r0
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 bb53 	b.w	80037d4 <_malloc_r>
 800312e:	bf00      	nop
 8003130:	20000004 	.word	0x20000004

08003134 <memchr>:
 8003134:	b510      	push	{r4, lr}
 8003136:	b2c9      	uxtb	r1, r1
 8003138:	4402      	add	r2, r0
 800313a:	4290      	cmp	r0, r2
 800313c:	4603      	mov	r3, r0
 800313e:	d101      	bne.n	8003144 <memchr+0x10>
 8003140:	2300      	movs	r3, #0
 8003142:	e003      	b.n	800314c <memchr+0x18>
 8003144:	781c      	ldrb	r4, [r3, #0]
 8003146:	3001      	adds	r0, #1
 8003148:	428c      	cmp	r4, r1
 800314a:	d1f6      	bne.n	800313a <memchr+0x6>
 800314c:	4618      	mov	r0, r3
 800314e:	bd10      	pop	{r4, pc}

08003150 <memcpy>:
 8003150:	b510      	push	{r4, lr}
 8003152:	1e43      	subs	r3, r0, #1
 8003154:	440a      	add	r2, r1
 8003156:	4291      	cmp	r1, r2
 8003158:	d100      	bne.n	800315c <memcpy+0xc>
 800315a:	bd10      	pop	{r4, pc}
 800315c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003164:	e7f7      	b.n	8003156 <memcpy+0x6>

08003166 <_Balloc>:
 8003166:	b570      	push	{r4, r5, r6, lr}
 8003168:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800316a:	4604      	mov	r4, r0
 800316c:	460e      	mov	r6, r1
 800316e:	b93d      	cbnz	r5, 8003180 <_Balloc+0x1a>
 8003170:	2010      	movs	r0, #16
 8003172:	f7ff ffd7 	bl	8003124 <malloc>
 8003176:	6260      	str	r0, [r4, #36]	; 0x24
 8003178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800317c:	6005      	str	r5, [r0, #0]
 800317e:	60c5      	str	r5, [r0, #12]
 8003180:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003182:	68eb      	ldr	r3, [r5, #12]
 8003184:	b183      	cbz	r3, 80031a8 <_Balloc+0x42>
 8003186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800318e:	b9b8      	cbnz	r0, 80031c0 <_Balloc+0x5a>
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f506 	lsl.w	r5, r1, r6
 8003196:	1d6a      	adds	r2, r5, #5
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	4620      	mov	r0, r4
 800319c:	f000 fabf 	bl	800371e <_calloc_r>
 80031a0:	b160      	cbz	r0, 80031bc <_Balloc+0x56>
 80031a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80031a6:	e00e      	b.n	80031c6 <_Balloc+0x60>
 80031a8:	2221      	movs	r2, #33	; 0x21
 80031aa:	2104      	movs	r1, #4
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fab6 	bl	800371e <_calloc_r>
 80031b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b4:	60e8      	str	r0, [r5, #12]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e4      	bne.n	8003186 <_Balloc+0x20>
 80031bc:	2000      	movs	r0, #0
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	6802      	ldr	r2, [r0, #0]
 80031c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80031c6:	2300      	movs	r3, #0
 80031c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80031cc:	e7f7      	b.n	80031be <_Balloc+0x58>

080031ce <_Bfree>:
 80031ce:	b570      	push	{r4, r5, r6, lr}
 80031d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80031d2:	4606      	mov	r6, r0
 80031d4:	460d      	mov	r5, r1
 80031d6:	b93c      	cbnz	r4, 80031e8 <_Bfree+0x1a>
 80031d8:	2010      	movs	r0, #16
 80031da:	f7ff ffa3 	bl	8003124 <malloc>
 80031de:	6270      	str	r0, [r6, #36]	; 0x24
 80031e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80031e4:	6004      	str	r4, [r0, #0]
 80031e6:	60c4      	str	r4, [r0, #12]
 80031e8:	b13d      	cbz	r5, 80031fa <_Bfree+0x2c>
 80031ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80031ec:	686a      	ldr	r2, [r5, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031f4:	6029      	str	r1, [r5, #0]
 80031f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80031fa:	bd70      	pop	{r4, r5, r6, pc}

080031fc <__multadd>:
 80031fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003200:	461f      	mov	r7, r3
 8003202:	4606      	mov	r6, r0
 8003204:	460c      	mov	r4, r1
 8003206:	2300      	movs	r3, #0
 8003208:	690d      	ldr	r5, [r1, #16]
 800320a:	f101 0c14 	add.w	ip, r1, #20
 800320e:	f8dc 0000 	ldr.w	r0, [ip]
 8003212:	3301      	adds	r3, #1
 8003214:	b281      	uxth	r1, r0
 8003216:	fb02 7101 	mla	r1, r2, r1, r7
 800321a:	0c00      	lsrs	r0, r0, #16
 800321c:	0c0f      	lsrs	r7, r1, #16
 800321e:	fb02 7000 	mla	r0, r2, r0, r7
 8003222:	b289      	uxth	r1, r1
 8003224:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003228:	429d      	cmp	r5, r3
 800322a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800322e:	f84c 1b04 	str.w	r1, [ip], #4
 8003232:	dcec      	bgt.n	800320e <__multadd+0x12>
 8003234:	b1d7      	cbz	r7, 800326c <__multadd+0x70>
 8003236:	68a3      	ldr	r3, [r4, #8]
 8003238:	42ab      	cmp	r3, r5
 800323a:	dc12      	bgt.n	8003262 <__multadd+0x66>
 800323c:	6861      	ldr	r1, [r4, #4]
 800323e:	4630      	mov	r0, r6
 8003240:	3101      	adds	r1, #1
 8003242:	f7ff ff90 	bl	8003166 <_Balloc>
 8003246:	4680      	mov	r8, r0
 8003248:	6922      	ldr	r2, [r4, #16]
 800324a:	f104 010c 	add.w	r1, r4, #12
 800324e:	3202      	adds	r2, #2
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	300c      	adds	r0, #12
 8003254:	f7ff ff7c 	bl	8003150 <memcpy>
 8003258:	4621      	mov	r1, r4
 800325a:	4630      	mov	r0, r6
 800325c:	f7ff ffb7 	bl	80031ce <_Bfree>
 8003260:	4644      	mov	r4, r8
 8003262:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003266:	3501      	adds	r5, #1
 8003268:	615f      	str	r7, [r3, #20]
 800326a:	6125      	str	r5, [r4, #16]
 800326c:	4620      	mov	r0, r4
 800326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003272 <__hi0bits>:
 8003272:	0c02      	lsrs	r2, r0, #16
 8003274:	0412      	lsls	r2, r2, #16
 8003276:	4603      	mov	r3, r0
 8003278:	b9b2      	cbnz	r2, 80032a8 <__hi0bits+0x36>
 800327a:	0403      	lsls	r3, r0, #16
 800327c:	2010      	movs	r0, #16
 800327e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003282:	bf04      	itt	eq
 8003284:	021b      	lsleq	r3, r3, #8
 8003286:	3008      	addeq	r0, #8
 8003288:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800328c:	bf04      	itt	eq
 800328e:	011b      	lsleq	r3, r3, #4
 8003290:	3004      	addeq	r0, #4
 8003292:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003296:	bf04      	itt	eq
 8003298:	009b      	lsleq	r3, r3, #2
 800329a:	3002      	addeq	r0, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	db06      	blt.n	80032ae <__hi0bits+0x3c>
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	d503      	bpl.n	80032ac <__hi0bits+0x3a>
 80032a4:	3001      	adds	r0, #1
 80032a6:	4770      	bx	lr
 80032a8:	2000      	movs	r0, #0
 80032aa:	e7e8      	b.n	800327e <__hi0bits+0xc>
 80032ac:	2020      	movs	r0, #32
 80032ae:	4770      	bx	lr

080032b0 <__lo0bits>:
 80032b0:	6803      	ldr	r3, [r0, #0]
 80032b2:	4601      	mov	r1, r0
 80032b4:	f013 0207 	ands.w	r2, r3, #7
 80032b8:	d00b      	beq.n	80032d2 <__lo0bits+0x22>
 80032ba:	07da      	lsls	r2, r3, #31
 80032bc:	d423      	bmi.n	8003306 <__lo0bits+0x56>
 80032be:	0798      	lsls	r0, r3, #30
 80032c0:	bf49      	itett	mi
 80032c2:	085b      	lsrmi	r3, r3, #1
 80032c4:	089b      	lsrpl	r3, r3, #2
 80032c6:	2001      	movmi	r0, #1
 80032c8:	600b      	strmi	r3, [r1, #0]
 80032ca:	bf5c      	itt	pl
 80032cc:	600b      	strpl	r3, [r1, #0]
 80032ce:	2002      	movpl	r0, #2
 80032d0:	4770      	bx	lr
 80032d2:	b298      	uxth	r0, r3
 80032d4:	b9a8      	cbnz	r0, 8003302 <__lo0bits+0x52>
 80032d6:	2010      	movs	r0, #16
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80032de:	bf04      	itt	eq
 80032e0:	0a1b      	lsreq	r3, r3, #8
 80032e2:	3008      	addeq	r0, #8
 80032e4:	071a      	lsls	r2, r3, #28
 80032e6:	bf04      	itt	eq
 80032e8:	091b      	lsreq	r3, r3, #4
 80032ea:	3004      	addeq	r0, #4
 80032ec:	079a      	lsls	r2, r3, #30
 80032ee:	bf04      	itt	eq
 80032f0:	089b      	lsreq	r3, r3, #2
 80032f2:	3002      	addeq	r0, #2
 80032f4:	07da      	lsls	r2, r3, #31
 80032f6:	d402      	bmi.n	80032fe <__lo0bits+0x4e>
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	d006      	beq.n	800330a <__lo0bits+0x5a>
 80032fc:	3001      	adds	r0, #1
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	4770      	bx	lr
 8003302:	4610      	mov	r0, r2
 8003304:	e7e9      	b.n	80032da <__lo0bits+0x2a>
 8003306:	2000      	movs	r0, #0
 8003308:	4770      	bx	lr
 800330a:	2020      	movs	r0, #32
 800330c:	4770      	bx	lr

0800330e <__i2b>:
 800330e:	b510      	push	{r4, lr}
 8003310:	460c      	mov	r4, r1
 8003312:	2101      	movs	r1, #1
 8003314:	f7ff ff27 	bl	8003166 <_Balloc>
 8003318:	2201      	movs	r2, #1
 800331a:	6144      	str	r4, [r0, #20]
 800331c:	6102      	str	r2, [r0, #16]
 800331e:	bd10      	pop	{r4, pc}

08003320 <__multiply>:
 8003320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	4614      	mov	r4, r2
 8003326:	690a      	ldr	r2, [r1, #16]
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	4688      	mov	r8, r1
 800332c:	429a      	cmp	r2, r3
 800332e:	bfbe      	ittt	lt
 8003330:	460b      	movlt	r3, r1
 8003332:	46a0      	movlt	r8, r4
 8003334:	461c      	movlt	r4, r3
 8003336:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800333a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800333e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003342:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003346:	eb07 0609 	add.w	r6, r7, r9
 800334a:	42b3      	cmp	r3, r6
 800334c:	bfb8      	it	lt
 800334e:	3101      	addlt	r1, #1
 8003350:	f7ff ff09 	bl	8003166 <_Balloc>
 8003354:	f100 0514 	add.w	r5, r0, #20
 8003358:	462b      	mov	r3, r5
 800335a:	2200      	movs	r2, #0
 800335c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003360:	4573      	cmp	r3, lr
 8003362:	d316      	bcc.n	8003392 <__multiply+0x72>
 8003364:	f104 0214 	add.w	r2, r4, #20
 8003368:	f108 0114 	add.w	r1, r8, #20
 800336c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003370:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	9b00      	ldr	r3, [sp, #0]
 8003378:	9201      	str	r2, [sp, #4]
 800337a:	4293      	cmp	r3, r2
 800337c:	d80c      	bhi.n	8003398 <__multiply+0x78>
 800337e:	2e00      	cmp	r6, #0
 8003380:	dd03      	ble.n	800338a <__multiply+0x6a>
 8003382:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003386:	2b00      	cmp	r3, #0
 8003388:	d05d      	beq.n	8003446 <__multiply+0x126>
 800338a:	6106      	str	r6, [r0, #16]
 800338c:	b003      	add	sp, #12
 800338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003392:	f843 2b04 	str.w	r2, [r3], #4
 8003396:	e7e3      	b.n	8003360 <__multiply+0x40>
 8003398:	f8b2 b000 	ldrh.w	fp, [r2]
 800339c:	f1bb 0f00 	cmp.w	fp, #0
 80033a0:	d023      	beq.n	80033ea <__multiply+0xca>
 80033a2:	4689      	mov	r9, r1
 80033a4:	46ac      	mov	ip, r5
 80033a6:	f04f 0800 	mov.w	r8, #0
 80033aa:	f859 4b04 	ldr.w	r4, [r9], #4
 80033ae:	f8dc a000 	ldr.w	sl, [ip]
 80033b2:	b2a3      	uxth	r3, r4
 80033b4:	fa1f fa8a 	uxth.w	sl, sl
 80033b8:	fb0b a303 	mla	r3, fp, r3, sl
 80033bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80033c0:	f8dc 4000 	ldr.w	r4, [ip]
 80033c4:	4443      	add	r3, r8
 80033c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033ca:	fb0b 840a 	mla	r4, fp, sl, r8
 80033ce:	46e2      	mov	sl, ip
 80033d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80033da:	454f      	cmp	r7, r9
 80033dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80033e0:	f84a 3b04 	str.w	r3, [sl], #4
 80033e4:	d82b      	bhi.n	800343e <__multiply+0x11e>
 80033e6:	f8cc 8004 	str.w	r8, [ip, #4]
 80033ea:	9b01      	ldr	r3, [sp, #4]
 80033ec:	3204      	adds	r2, #4
 80033ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80033f2:	f1ba 0f00 	cmp.w	sl, #0
 80033f6:	d020      	beq.n	800343a <__multiply+0x11a>
 80033f8:	4689      	mov	r9, r1
 80033fa:	46a8      	mov	r8, r5
 80033fc:	f04f 0b00 	mov.w	fp, #0
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	f8b9 c000 	ldrh.w	ip, [r9]
 8003406:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800340a:	b29b      	uxth	r3, r3
 800340c:	fb0a 440c 	mla	r4, sl, ip, r4
 8003410:	46c4      	mov	ip, r8
 8003412:	445c      	add	r4, fp
 8003414:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003418:	f84c 3b04 	str.w	r3, [ip], #4
 800341c:	f859 3b04 	ldr.w	r3, [r9], #4
 8003420:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	fb0a b303 	mla	r3, sl, r3, fp
 800342a:	454f      	cmp	r7, r9
 800342c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003430:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003434:	d805      	bhi.n	8003442 <__multiply+0x122>
 8003436:	f8c8 3004 	str.w	r3, [r8, #4]
 800343a:	3504      	adds	r5, #4
 800343c:	e79b      	b.n	8003376 <__multiply+0x56>
 800343e:	46d4      	mov	ip, sl
 8003440:	e7b3      	b.n	80033aa <__multiply+0x8a>
 8003442:	46e0      	mov	r8, ip
 8003444:	e7dd      	b.n	8003402 <__multiply+0xe2>
 8003446:	3e01      	subs	r6, #1
 8003448:	e799      	b.n	800337e <__multiply+0x5e>
	...

0800344c <__pow5mult>:
 800344c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003450:	4615      	mov	r5, r2
 8003452:	f012 0203 	ands.w	r2, r2, #3
 8003456:	4606      	mov	r6, r0
 8003458:	460f      	mov	r7, r1
 800345a:	d007      	beq.n	800346c <__pow5mult+0x20>
 800345c:	4c21      	ldr	r4, [pc, #132]	; (80034e4 <__pow5mult+0x98>)
 800345e:	3a01      	subs	r2, #1
 8003460:	2300      	movs	r3, #0
 8003462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003466:	f7ff fec9 	bl	80031fc <__multadd>
 800346a:	4607      	mov	r7, r0
 800346c:	10ad      	asrs	r5, r5, #2
 800346e:	d035      	beq.n	80034dc <__pow5mult+0x90>
 8003470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003472:	b93c      	cbnz	r4, 8003484 <__pow5mult+0x38>
 8003474:	2010      	movs	r0, #16
 8003476:	f7ff fe55 	bl	8003124 <malloc>
 800347a:	6270      	str	r0, [r6, #36]	; 0x24
 800347c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003480:	6004      	str	r4, [r0, #0]
 8003482:	60c4      	str	r4, [r0, #12]
 8003484:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800348c:	b94c      	cbnz	r4, 80034a2 <__pow5mult+0x56>
 800348e:	f240 2171 	movw	r1, #625	; 0x271
 8003492:	4630      	mov	r0, r6
 8003494:	f7ff ff3b 	bl	800330e <__i2b>
 8003498:	2300      	movs	r3, #0
 800349a:	4604      	mov	r4, r0
 800349c:	f8c8 0008 	str.w	r0, [r8, #8]
 80034a0:	6003      	str	r3, [r0, #0]
 80034a2:	f04f 0800 	mov.w	r8, #0
 80034a6:	07eb      	lsls	r3, r5, #31
 80034a8:	d50a      	bpl.n	80034c0 <__pow5mult+0x74>
 80034aa:	4639      	mov	r1, r7
 80034ac:	4622      	mov	r2, r4
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff ff36 	bl	8003320 <__multiply>
 80034b4:	4681      	mov	r9, r0
 80034b6:	4639      	mov	r1, r7
 80034b8:	4630      	mov	r0, r6
 80034ba:	f7ff fe88 	bl	80031ce <_Bfree>
 80034be:	464f      	mov	r7, r9
 80034c0:	106d      	asrs	r5, r5, #1
 80034c2:	d00b      	beq.n	80034dc <__pow5mult+0x90>
 80034c4:	6820      	ldr	r0, [r4, #0]
 80034c6:	b938      	cbnz	r0, 80034d8 <__pow5mult+0x8c>
 80034c8:	4622      	mov	r2, r4
 80034ca:	4621      	mov	r1, r4
 80034cc:	4630      	mov	r0, r6
 80034ce:	f7ff ff27 	bl	8003320 <__multiply>
 80034d2:	6020      	str	r0, [r4, #0]
 80034d4:	f8c0 8000 	str.w	r8, [r0]
 80034d8:	4604      	mov	r4, r0
 80034da:	e7e4      	b.n	80034a6 <__pow5mult+0x5a>
 80034dc:	4638      	mov	r0, r7
 80034de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e2:	bf00      	nop
 80034e4:	08003db8 	.word	0x08003db8

080034e8 <__lshift>:
 80034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	460c      	mov	r4, r1
 80034ee:	4607      	mov	r7, r0
 80034f0:	4616      	mov	r6, r2
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80034f8:	eb0a 0903 	add.w	r9, sl, r3
 80034fc:	6849      	ldr	r1, [r1, #4]
 80034fe:	68a3      	ldr	r3, [r4, #8]
 8003500:	f109 0501 	add.w	r5, r9, #1
 8003504:	42ab      	cmp	r3, r5
 8003506:	db32      	blt.n	800356e <__lshift+0x86>
 8003508:	4638      	mov	r0, r7
 800350a:	f7ff fe2c 	bl	8003166 <_Balloc>
 800350e:	2300      	movs	r3, #0
 8003510:	4680      	mov	r8, r0
 8003512:	461a      	mov	r2, r3
 8003514:	f100 0114 	add.w	r1, r0, #20
 8003518:	4553      	cmp	r3, sl
 800351a:	db2b      	blt.n	8003574 <__lshift+0x8c>
 800351c:	6920      	ldr	r0, [r4, #16]
 800351e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003522:	f104 0314 	add.w	r3, r4, #20
 8003526:	f016 021f 	ands.w	r2, r6, #31
 800352a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800352e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003532:	d025      	beq.n	8003580 <__lshift+0x98>
 8003534:	2000      	movs	r0, #0
 8003536:	f1c2 0e20 	rsb	lr, r2, #32
 800353a:	468a      	mov	sl, r1
 800353c:	681e      	ldr	r6, [r3, #0]
 800353e:	4096      	lsls	r6, r2
 8003540:	4330      	orrs	r0, r6
 8003542:	f84a 0b04 	str.w	r0, [sl], #4
 8003546:	f853 0b04 	ldr.w	r0, [r3], #4
 800354a:	459c      	cmp	ip, r3
 800354c:	fa20 f00e 	lsr.w	r0, r0, lr
 8003550:	d814      	bhi.n	800357c <__lshift+0x94>
 8003552:	6048      	str	r0, [r1, #4]
 8003554:	b108      	cbz	r0, 800355a <__lshift+0x72>
 8003556:	f109 0502 	add.w	r5, r9, #2
 800355a:	3d01      	subs	r5, #1
 800355c:	4638      	mov	r0, r7
 800355e:	f8c8 5010 	str.w	r5, [r8, #16]
 8003562:	4621      	mov	r1, r4
 8003564:	f7ff fe33 	bl	80031ce <_Bfree>
 8003568:	4640      	mov	r0, r8
 800356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356e:	3101      	adds	r1, #1
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	e7c7      	b.n	8003504 <__lshift+0x1c>
 8003574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003578:	3301      	adds	r3, #1
 800357a:	e7cd      	b.n	8003518 <__lshift+0x30>
 800357c:	4651      	mov	r1, sl
 800357e:	e7dc      	b.n	800353a <__lshift+0x52>
 8003580:	3904      	subs	r1, #4
 8003582:	f853 2b04 	ldr.w	r2, [r3], #4
 8003586:	459c      	cmp	ip, r3
 8003588:	f841 2f04 	str.w	r2, [r1, #4]!
 800358c:	d8f9      	bhi.n	8003582 <__lshift+0x9a>
 800358e:	e7e4      	b.n	800355a <__lshift+0x72>

08003590 <__mcmp>:
 8003590:	6903      	ldr	r3, [r0, #16]
 8003592:	690a      	ldr	r2, [r1, #16]
 8003594:	b530      	push	{r4, r5, lr}
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	d10c      	bne.n	80035b4 <__mcmp+0x24>
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	3014      	adds	r0, #20
 800359e:	3114      	adds	r1, #20
 80035a0:	1884      	adds	r4, r0, r2
 80035a2:	4411      	add	r1, r2
 80035a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80035a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80035ac:	4295      	cmp	r5, r2
 80035ae:	d003      	beq.n	80035b8 <__mcmp+0x28>
 80035b0:	d305      	bcc.n	80035be <__mcmp+0x2e>
 80035b2:	2301      	movs	r3, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd30      	pop	{r4, r5, pc}
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d3f3      	bcc.n	80035a4 <__mcmp+0x14>
 80035bc:	e7fa      	b.n	80035b4 <__mcmp+0x24>
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e7f7      	b.n	80035b4 <__mcmp+0x24>

080035c4 <__mdiff>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	460d      	mov	r5, r1
 80035ca:	4607      	mov	r7, r0
 80035cc:	4611      	mov	r1, r2
 80035ce:	4628      	mov	r0, r5
 80035d0:	4614      	mov	r4, r2
 80035d2:	f7ff ffdd 	bl	8003590 <__mcmp>
 80035d6:	1e06      	subs	r6, r0, #0
 80035d8:	d108      	bne.n	80035ec <__mdiff+0x28>
 80035da:	4631      	mov	r1, r6
 80035dc:	4638      	mov	r0, r7
 80035de:	f7ff fdc2 	bl	8003166 <_Balloc>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	bfa4      	itt	ge
 80035ee:	4623      	movge	r3, r4
 80035f0:	462c      	movge	r4, r5
 80035f2:	4638      	mov	r0, r7
 80035f4:	6861      	ldr	r1, [r4, #4]
 80035f6:	bfa6      	itte	ge
 80035f8:	461d      	movge	r5, r3
 80035fa:	2600      	movge	r6, #0
 80035fc:	2601      	movlt	r6, #1
 80035fe:	f7ff fdb2 	bl	8003166 <_Balloc>
 8003602:	f04f 0e00 	mov.w	lr, #0
 8003606:	60c6      	str	r6, [r0, #12]
 8003608:	692b      	ldr	r3, [r5, #16]
 800360a:	6926      	ldr	r6, [r4, #16]
 800360c:	f104 0214 	add.w	r2, r4, #20
 8003610:	f105 0914 	add.w	r9, r5, #20
 8003614:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003618:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800361c:	f100 0114 	add.w	r1, r0, #20
 8003620:	f852 ab04 	ldr.w	sl, [r2], #4
 8003624:	f859 5b04 	ldr.w	r5, [r9], #4
 8003628:	fa1f f38a 	uxth.w	r3, sl
 800362c:	4473      	add	r3, lr
 800362e:	b2ac      	uxth	r4, r5
 8003630:	1b1b      	subs	r3, r3, r4
 8003632:	0c2c      	lsrs	r4, r5, #16
 8003634:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003638:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800363c:	b29b      	uxth	r3, r3
 800363e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003642:	45c8      	cmp	r8, r9
 8003644:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003648:	4694      	mov	ip, r2
 800364a:	f841 4b04 	str.w	r4, [r1], #4
 800364e:	d8e7      	bhi.n	8003620 <__mdiff+0x5c>
 8003650:	45bc      	cmp	ip, r7
 8003652:	d304      	bcc.n	800365e <__mdiff+0x9a>
 8003654:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003658:	b183      	cbz	r3, 800367c <__mdiff+0xb8>
 800365a:	6106      	str	r6, [r0, #16]
 800365c:	e7c4      	b.n	80035e8 <__mdiff+0x24>
 800365e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003662:	b2a2      	uxth	r2, r4
 8003664:	4472      	add	r2, lr
 8003666:	1413      	asrs	r3, r2, #16
 8003668:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800366c:	b292      	uxth	r2, r2
 800366e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003672:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003676:	f841 2b04 	str.w	r2, [r1], #4
 800367a:	e7e9      	b.n	8003650 <__mdiff+0x8c>
 800367c:	3e01      	subs	r6, #1
 800367e:	e7e9      	b.n	8003654 <__mdiff+0x90>

08003680 <__d2b>:
 8003680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003684:	461c      	mov	r4, r3
 8003686:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800368a:	2101      	movs	r1, #1
 800368c:	4690      	mov	r8, r2
 800368e:	f7ff fd6a 	bl	8003166 <_Balloc>
 8003692:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003696:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800369a:	4607      	mov	r7, r0
 800369c:	bb34      	cbnz	r4, 80036ec <__d2b+0x6c>
 800369e:	9201      	str	r2, [sp, #4]
 80036a0:	f1b8 0200 	subs.w	r2, r8, #0
 80036a4:	d027      	beq.n	80036f6 <__d2b+0x76>
 80036a6:	a802      	add	r0, sp, #8
 80036a8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80036ac:	f7ff fe00 	bl	80032b0 <__lo0bits>
 80036b0:	9900      	ldr	r1, [sp, #0]
 80036b2:	b1f0      	cbz	r0, 80036f2 <__d2b+0x72>
 80036b4:	9a01      	ldr	r2, [sp, #4]
 80036b6:	f1c0 0320 	rsb	r3, r0, #32
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	430b      	orrs	r3, r1
 80036c0:	40c2      	lsrs	r2, r0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	9201      	str	r2, [sp, #4]
 80036c6:	9b01      	ldr	r3, [sp, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2102      	movne	r1, #2
 80036ce:	2101      	moveq	r1, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	6139      	str	r1, [r7, #16]
 80036d4:	b1c4      	cbz	r4, 8003708 <__d2b+0x88>
 80036d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80036da:	4404      	add	r4, r0
 80036dc:	6034      	str	r4, [r6, #0]
 80036de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80036e2:	6028      	str	r0, [r5, #0]
 80036e4:	4638      	mov	r0, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036f0:	e7d5      	b.n	800369e <__d2b+0x1e>
 80036f2:	6179      	str	r1, [r7, #20]
 80036f4:	e7e7      	b.n	80036c6 <__d2b+0x46>
 80036f6:	a801      	add	r0, sp, #4
 80036f8:	f7ff fdda 	bl	80032b0 <__lo0bits>
 80036fc:	2101      	movs	r1, #1
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	3020      	adds	r0, #32
 8003706:	e7e5      	b.n	80036d4 <__d2b+0x54>
 8003708:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800370c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003710:	6030      	str	r0, [r6, #0]
 8003712:	6918      	ldr	r0, [r3, #16]
 8003714:	f7ff fdad 	bl	8003272 <__hi0bits>
 8003718:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800371c:	e7e1      	b.n	80036e2 <__d2b+0x62>

0800371e <_calloc_r>:
 800371e:	b538      	push	{r3, r4, r5, lr}
 8003720:	fb02 f401 	mul.w	r4, r2, r1
 8003724:	4621      	mov	r1, r4
 8003726:	f000 f855 	bl	80037d4 <_malloc_r>
 800372a:	4605      	mov	r5, r0
 800372c:	b118      	cbz	r0, 8003736 <_calloc_r+0x18>
 800372e:	4622      	mov	r2, r4
 8003730:	2100      	movs	r1, #0
 8003732:	f7fe fa2f 	bl	8001b94 <memset>
 8003736:	4628      	mov	r0, r5
 8003738:	bd38      	pop	{r3, r4, r5, pc}
	...

0800373c <_free_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	2900      	cmp	r1, #0
 8003742:	d043      	beq.n	80037cc <_free_r+0x90>
 8003744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003748:	1f0c      	subs	r4, r1, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	18e4      	addlt	r4, r4, r3
 8003750:	f000 fa27 	bl	8003ba2 <__malloc_lock>
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <_free_r+0x94>)
 8003756:	6813      	ldr	r3, [r2, #0]
 8003758:	4610      	mov	r0, r2
 800375a:	b933      	cbnz	r3, 800376a <_free_r+0x2e>
 800375c:	6063      	str	r3, [r4, #4]
 800375e:	6014      	str	r4, [r2, #0]
 8003760:	4628      	mov	r0, r5
 8003762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003766:	f000 ba1d 	b.w	8003ba4 <__malloc_unlock>
 800376a:	42a3      	cmp	r3, r4
 800376c:	d90b      	bls.n	8003786 <_free_r+0x4a>
 800376e:	6821      	ldr	r1, [r4, #0]
 8003770:	1862      	adds	r2, r4, r1
 8003772:	4293      	cmp	r3, r2
 8003774:	bf01      	itttt	eq
 8003776:	681a      	ldreq	r2, [r3, #0]
 8003778:	685b      	ldreq	r3, [r3, #4]
 800377a:	1852      	addeq	r2, r2, r1
 800377c:	6022      	streq	r2, [r4, #0]
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	6004      	str	r4, [r0, #0]
 8003782:	e7ed      	b.n	8003760 <_free_r+0x24>
 8003784:	4613      	mov	r3, r2
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	b10a      	cbz	r2, 800378e <_free_r+0x52>
 800378a:	42a2      	cmp	r2, r4
 800378c:	d9fa      	bls.n	8003784 <_free_r+0x48>
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	1858      	adds	r0, r3, r1
 8003792:	42a0      	cmp	r0, r4
 8003794:	d10b      	bne.n	80037ae <_free_r+0x72>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	4401      	add	r1, r0
 800379a:	1858      	adds	r0, r3, r1
 800379c:	4282      	cmp	r2, r0
 800379e:	6019      	str	r1, [r3, #0]
 80037a0:	d1de      	bne.n	8003760 <_free_r+0x24>
 80037a2:	6810      	ldr	r0, [r2, #0]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	4401      	add	r1, r0
 80037a8:	6019      	str	r1, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	e7d8      	b.n	8003760 <_free_r+0x24>
 80037ae:	d902      	bls.n	80037b6 <_free_r+0x7a>
 80037b0:	230c      	movs	r3, #12
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	e7d4      	b.n	8003760 <_free_r+0x24>
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	1821      	adds	r1, r4, r0
 80037ba:	428a      	cmp	r2, r1
 80037bc:	bf01      	itttt	eq
 80037be:	6811      	ldreq	r1, [r2, #0]
 80037c0:	6852      	ldreq	r2, [r2, #4]
 80037c2:	1809      	addeq	r1, r1, r0
 80037c4:	6021      	streq	r1, [r4, #0]
 80037c6:	6062      	str	r2, [r4, #4]
 80037c8:	605c      	str	r4, [r3, #4]
 80037ca:	e7c9      	b.n	8003760 <_free_r+0x24>
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	200001fc 	.word	0x200001fc

080037d4 <_malloc_r>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	1ccd      	adds	r5, r1, #3
 80037d8:	f025 0503 	bic.w	r5, r5, #3
 80037dc:	3508      	adds	r5, #8
 80037de:	2d0c      	cmp	r5, #12
 80037e0:	bf38      	it	cc
 80037e2:	250c      	movcc	r5, #12
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	4606      	mov	r6, r0
 80037e8:	db01      	blt.n	80037ee <_malloc_r+0x1a>
 80037ea:	42a9      	cmp	r1, r5
 80037ec:	d903      	bls.n	80037f6 <_malloc_r+0x22>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
 80037f6:	f000 f9d4 	bl	8003ba2 <__malloc_lock>
 80037fa:	4a21      	ldr	r2, [pc, #132]	; (8003880 <_malloc_r+0xac>)
 80037fc:	6814      	ldr	r4, [r2, #0]
 80037fe:	4621      	mov	r1, r4
 8003800:	b991      	cbnz	r1, 8003828 <_malloc_r+0x54>
 8003802:	4c20      	ldr	r4, [pc, #128]	; (8003884 <_malloc_r+0xb0>)
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	b91b      	cbnz	r3, 8003810 <_malloc_r+0x3c>
 8003808:	4630      	mov	r0, r6
 800380a:	f000 f98f 	bl	8003b2c <_sbrk_r>
 800380e:	6020      	str	r0, [r4, #0]
 8003810:	4629      	mov	r1, r5
 8003812:	4630      	mov	r0, r6
 8003814:	f000 f98a 	bl	8003b2c <_sbrk_r>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d124      	bne.n	8003866 <_malloc_r+0x92>
 800381c:	230c      	movs	r3, #12
 800381e:	4630      	mov	r0, r6
 8003820:	6033      	str	r3, [r6, #0]
 8003822:	f000 f9bf 	bl	8003ba4 <__malloc_unlock>
 8003826:	e7e4      	b.n	80037f2 <_malloc_r+0x1e>
 8003828:	680b      	ldr	r3, [r1, #0]
 800382a:	1b5b      	subs	r3, r3, r5
 800382c:	d418      	bmi.n	8003860 <_malloc_r+0x8c>
 800382e:	2b0b      	cmp	r3, #11
 8003830:	d90f      	bls.n	8003852 <_malloc_r+0x7e>
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	18cc      	adds	r4, r1, r3
 8003836:	50cd      	str	r5, [r1, r3]
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f9b3 	bl	8003ba4 <__malloc_unlock>
 800383e:	f104 000b 	add.w	r0, r4, #11
 8003842:	1d23      	adds	r3, r4, #4
 8003844:	f020 0007 	bic.w	r0, r0, #7
 8003848:	1ac3      	subs	r3, r0, r3
 800384a:	d0d3      	beq.n	80037f4 <_malloc_r+0x20>
 800384c:	425a      	negs	r2, r3
 800384e:	50e2      	str	r2, [r4, r3]
 8003850:	e7d0      	b.n	80037f4 <_malloc_r+0x20>
 8003852:	684b      	ldr	r3, [r1, #4]
 8003854:	428c      	cmp	r4, r1
 8003856:	bf16      	itet	ne
 8003858:	6063      	strne	r3, [r4, #4]
 800385a:	6013      	streq	r3, [r2, #0]
 800385c:	460c      	movne	r4, r1
 800385e:	e7eb      	b.n	8003838 <_malloc_r+0x64>
 8003860:	460c      	mov	r4, r1
 8003862:	6849      	ldr	r1, [r1, #4]
 8003864:	e7cc      	b.n	8003800 <_malloc_r+0x2c>
 8003866:	1cc4      	adds	r4, r0, #3
 8003868:	f024 0403 	bic.w	r4, r4, #3
 800386c:	42a0      	cmp	r0, r4
 800386e:	d005      	beq.n	800387c <_malloc_r+0xa8>
 8003870:	1a21      	subs	r1, r4, r0
 8003872:	4630      	mov	r0, r6
 8003874:	f000 f95a 	bl	8003b2c <_sbrk_r>
 8003878:	3001      	adds	r0, #1
 800387a:	d0cf      	beq.n	800381c <_malloc_r+0x48>
 800387c:	6025      	str	r5, [r4, #0]
 800387e:	e7db      	b.n	8003838 <_malloc_r+0x64>
 8003880:	200001fc 	.word	0x200001fc
 8003884:	20000200 	.word	0x20000200

08003888 <__ssputs_r>:
 8003888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	688e      	ldr	r6, [r1, #8]
 800388e:	4682      	mov	sl, r0
 8003890:	429e      	cmp	r6, r3
 8003892:	460c      	mov	r4, r1
 8003894:	4690      	mov	r8, r2
 8003896:	4699      	mov	r9, r3
 8003898:	d837      	bhi.n	800390a <__ssputs_r+0x82>
 800389a:	898a      	ldrh	r2, [r1, #12]
 800389c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a0:	d031      	beq.n	8003906 <__ssputs_r+0x7e>
 80038a2:	2302      	movs	r3, #2
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	6909      	ldr	r1, [r1, #16]
 80038a8:	1a6f      	subs	r7, r5, r1
 80038aa:	6965      	ldr	r5, [r4, #20]
 80038ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80038b4:	f109 0301 	add.w	r3, r9, #1
 80038b8:	443b      	add	r3, r7
 80038ba:	429d      	cmp	r5, r3
 80038bc:	bf38      	it	cc
 80038be:	461d      	movcc	r5, r3
 80038c0:	0553      	lsls	r3, r2, #21
 80038c2:	d530      	bpl.n	8003926 <__ssputs_r+0x9e>
 80038c4:	4629      	mov	r1, r5
 80038c6:	f7ff ff85 	bl	80037d4 <_malloc_r>
 80038ca:	4606      	mov	r6, r0
 80038cc:	b950      	cbnz	r0, 80038e4 <__ssputs_r+0x5c>
 80038ce:	230c      	movs	r3, #12
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f8ca 3000 	str.w	r3, [sl]
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e4:	463a      	mov	r2, r7
 80038e6:	6921      	ldr	r1, [r4, #16]
 80038e8:	f7ff fc32 	bl	8003150 <memcpy>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	6126      	str	r6, [r4, #16]
 80038fa:	443e      	add	r6, r7
 80038fc:	6026      	str	r6, [r4, #0]
 80038fe:	464e      	mov	r6, r9
 8003900:	6165      	str	r5, [r4, #20]
 8003902:	1bed      	subs	r5, r5, r7
 8003904:	60a5      	str	r5, [r4, #8]
 8003906:	454e      	cmp	r6, r9
 8003908:	d900      	bls.n	800390c <__ssputs_r+0x84>
 800390a:	464e      	mov	r6, r9
 800390c:	4632      	mov	r2, r6
 800390e:	4641      	mov	r1, r8
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	f000 f92d 	bl	8003b70 <memmove>
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	2000      	movs	r0, #0
 800391a:	1b9b      	subs	r3, r3, r6
 800391c:	60a3      	str	r3, [r4, #8]
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	441e      	add	r6, r3
 8003922:	6026      	str	r6, [r4, #0]
 8003924:	e7dc      	b.n	80038e0 <__ssputs_r+0x58>
 8003926:	462a      	mov	r2, r5
 8003928:	f000 f93d 	bl	8003ba6 <_realloc_r>
 800392c:	4606      	mov	r6, r0
 800392e:	2800      	cmp	r0, #0
 8003930:	d1e2      	bne.n	80038f8 <__ssputs_r+0x70>
 8003932:	6921      	ldr	r1, [r4, #16]
 8003934:	4650      	mov	r0, sl
 8003936:	f7ff ff01 	bl	800373c <_free_r>
 800393a:	e7c8      	b.n	80038ce <__ssputs_r+0x46>

0800393c <_svfiprintf_r>:
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	461d      	mov	r5, r3
 8003942:	898b      	ldrh	r3, [r1, #12]
 8003944:	b09d      	sub	sp, #116	; 0x74
 8003946:	061f      	lsls	r7, r3, #24
 8003948:	4680      	mov	r8, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4616      	mov	r6, r2
 800394e:	d50f      	bpl.n	8003970 <_svfiprintf_r+0x34>
 8003950:	690b      	ldr	r3, [r1, #16]
 8003952:	b96b      	cbnz	r3, 8003970 <_svfiprintf_r+0x34>
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	f7ff ff3d 	bl	80037d4 <_malloc_r>
 800395a:	6020      	str	r0, [r4, #0]
 800395c:	6120      	str	r0, [r4, #16]
 800395e:	b928      	cbnz	r0, 800396c <_svfiprintf_r+0x30>
 8003960:	230c      	movs	r3, #12
 8003962:	f8c8 3000 	str.w	r3, [r8]
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	e0c8      	b.n	8003afe <_svfiprintf_r+0x1c2>
 800396c:	2340      	movs	r3, #64	; 0x40
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	2300      	movs	r3, #0
 8003972:	9309      	str	r3, [sp, #36]	; 0x24
 8003974:	2320      	movs	r3, #32
 8003976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800397a:	2330      	movs	r3, #48	; 0x30
 800397c:	f04f 0b01 	mov.w	fp, #1
 8003980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003984:	9503      	str	r5, [sp, #12]
 8003986:	4637      	mov	r7, r6
 8003988:	463d      	mov	r5, r7
 800398a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800398e:	b10b      	cbz	r3, 8003994 <_svfiprintf_r+0x58>
 8003990:	2b25      	cmp	r3, #37	; 0x25
 8003992:	d13e      	bne.n	8003a12 <_svfiprintf_r+0xd6>
 8003994:	ebb7 0a06 	subs.w	sl, r7, r6
 8003998:	d00b      	beq.n	80039b2 <_svfiprintf_r+0x76>
 800399a:	4653      	mov	r3, sl
 800399c:	4632      	mov	r2, r6
 800399e:	4621      	mov	r1, r4
 80039a0:	4640      	mov	r0, r8
 80039a2:	f7ff ff71 	bl	8003888 <__ssputs_r>
 80039a6:	3001      	adds	r0, #1
 80039a8:	f000 80a4 	beq.w	8003af4 <_svfiprintf_r+0x1b8>
 80039ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ae:	4453      	add	r3, sl
 80039b0:	9309      	str	r3, [sp, #36]	; 0x24
 80039b2:	783b      	ldrb	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 809d 	beq.w	8003af4 <_svfiprintf_r+0x1b8>
 80039ba:	2300      	movs	r3, #0
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	9307      	str	r3, [sp, #28]
 80039c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039cc:	931a      	str	r3, [sp, #104]	; 0x68
 80039ce:	462f      	mov	r7, r5
 80039d0:	2205      	movs	r2, #5
 80039d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039d6:	4850      	ldr	r0, [pc, #320]	; (8003b18 <_svfiprintf_r+0x1dc>)
 80039d8:	f7ff fbac 	bl	8003134 <memchr>
 80039dc:	9b04      	ldr	r3, [sp, #16]
 80039de:	b9d0      	cbnz	r0, 8003a16 <_svfiprintf_r+0xda>
 80039e0:	06d9      	lsls	r1, r3, #27
 80039e2:	bf44      	itt	mi
 80039e4:	2220      	movmi	r2, #32
 80039e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ea:	071a      	lsls	r2, r3, #28
 80039ec:	bf44      	itt	mi
 80039ee:	222b      	movmi	r2, #43	; 0x2b
 80039f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039f4:	782a      	ldrb	r2, [r5, #0]
 80039f6:	2a2a      	cmp	r2, #42	; 0x2a
 80039f8:	d015      	beq.n	8003a26 <_svfiprintf_r+0xea>
 80039fa:	462f      	mov	r7, r5
 80039fc:	2000      	movs	r0, #0
 80039fe:	250a      	movs	r5, #10
 8003a00:	9a07      	ldr	r2, [sp, #28]
 8003a02:	4639      	mov	r1, r7
 8003a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a08:	3b30      	subs	r3, #48	; 0x30
 8003a0a:	2b09      	cmp	r3, #9
 8003a0c:	d94d      	bls.n	8003aaa <_svfiprintf_r+0x16e>
 8003a0e:	b1b8      	cbz	r0, 8003a40 <_svfiprintf_r+0x104>
 8003a10:	e00f      	b.n	8003a32 <_svfiprintf_r+0xf6>
 8003a12:	462f      	mov	r7, r5
 8003a14:	e7b8      	b.n	8003988 <_svfiprintf_r+0x4c>
 8003a16:	4a40      	ldr	r2, [pc, #256]	; (8003b18 <_svfiprintf_r+0x1dc>)
 8003a18:	463d      	mov	r5, r7
 8003a1a:	1a80      	subs	r0, r0, r2
 8003a1c:	fa0b f000 	lsl.w	r0, fp, r0
 8003a20:	4318      	orrs	r0, r3
 8003a22:	9004      	str	r0, [sp, #16]
 8003a24:	e7d3      	b.n	80039ce <_svfiprintf_r+0x92>
 8003a26:	9a03      	ldr	r2, [sp, #12]
 8003a28:	1d11      	adds	r1, r2, #4
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	9103      	str	r1, [sp, #12]
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	db01      	blt.n	8003a36 <_svfiprintf_r+0xfa>
 8003a32:	9207      	str	r2, [sp, #28]
 8003a34:	e004      	b.n	8003a40 <_svfiprintf_r+0x104>
 8003a36:	4252      	negs	r2, r2
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	9207      	str	r2, [sp, #28]
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	783b      	ldrb	r3, [r7, #0]
 8003a42:	2b2e      	cmp	r3, #46	; 0x2e
 8003a44:	d10c      	bne.n	8003a60 <_svfiprintf_r+0x124>
 8003a46:	787b      	ldrb	r3, [r7, #1]
 8003a48:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4a:	d133      	bne.n	8003ab4 <_svfiprintf_r+0x178>
 8003a4c:	9b03      	ldr	r3, [sp, #12]
 8003a4e:	3702      	adds	r7, #2
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	9203      	str	r2, [sp, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a5e:	9305      	str	r3, [sp, #20]
 8003a60:	4d2e      	ldr	r5, [pc, #184]	; (8003b1c <_svfiprintf_r+0x1e0>)
 8003a62:	2203      	movs	r2, #3
 8003a64:	7839      	ldrb	r1, [r7, #0]
 8003a66:	4628      	mov	r0, r5
 8003a68:	f7ff fb64 	bl	8003134 <memchr>
 8003a6c:	b138      	cbz	r0, 8003a7e <_svfiprintf_r+0x142>
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	fa03 f000 	lsl.w	r0, r3, r0
 8003a76:	9b04      	ldr	r3, [sp, #16]
 8003a78:	3701      	adds	r7, #1
 8003a7a:	4303      	orrs	r3, r0
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	7839      	ldrb	r1, [r7, #0]
 8003a80:	2206      	movs	r2, #6
 8003a82:	4827      	ldr	r0, [pc, #156]	; (8003b20 <_svfiprintf_r+0x1e4>)
 8003a84:	1c7e      	adds	r6, r7, #1
 8003a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8a:	f7ff fb53 	bl	8003134 <memchr>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d038      	beq.n	8003b04 <_svfiprintf_r+0x1c8>
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <_svfiprintf_r+0x1e8>)
 8003a94:	bb13      	cbnz	r3, 8003adc <_svfiprintf_r+0x1a0>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	444b      	add	r3, r9
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e76d      	b.n	8003986 <_svfiprintf_r+0x4a>
 8003aaa:	fb05 3202 	mla	r2, r5, r2, r3
 8003aae:	2001      	movs	r0, #1
 8003ab0:	460f      	mov	r7, r1
 8003ab2:	e7a6      	b.n	8003a02 <_svfiprintf_r+0xc6>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	250a      	movs	r5, #10
 8003ab8:	4619      	mov	r1, r3
 8003aba:	3701      	adds	r7, #1
 8003abc:	9305      	str	r3, [sp, #20]
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac4:	3a30      	subs	r2, #48	; 0x30
 8003ac6:	2a09      	cmp	r2, #9
 8003ac8:	d903      	bls.n	8003ad2 <_svfiprintf_r+0x196>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0c8      	beq.n	8003a60 <_svfiprintf_r+0x124>
 8003ace:	9105      	str	r1, [sp, #20]
 8003ad0:	e7c6      	b.n	8003a60 <_svfiprintf_r+0x124>
 8003ad2:	fb05 2101 	mla	r1, r5, r1, r2
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4607      	mov	r7, r0
 8003ada:	e7f0      	b.n	8003abe <_svfiprintf_r+0x182>
 8003adc:	ab03      	add	r3, sp, #12
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <_svfiprintf_r+0x1ec>)
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7fe f8ee 	bl	8001cc8 <_printf_float>
 8003aec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003af0:	4681      	mov	r9, r0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfiprintf_r+0x166>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	065b      	lsls	r3, r3, #25
 8003af8:	f53f af35 	bmi.w	8003966 <_svfiprintf_r+0x2a>
 8003afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afe:	b01d      	add	sp, #116	; 0x74
 8003b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	ab03      	add	r3, sp, #12
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <_svfiprintf_r+0x1ec>)
 8003b0c:	a904      	add	r1, sp, #16
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f7fe fb86 	bl	8002220 <_printf_i>
 8003b14:	e7ea      	b.n	8003aec <_svfiprintf_r+0x1b0>
 8003b16:	bf00      	nop
 8003b18:	08003dc4 	.word	0x08003dc4
 8003b1c:	08003dca 	.word	0x08003dca
 8003b20:	08003dce 	.word	0x08003dce
 8003b24:	08001cc9 	.word	0x08001cc9
 8003b28:	08003889 	.word	0x08003889

08003b2c <_sbrk_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4c05      	ldr	r4, [pc, #20]	; (8003b48 <_sbrk_r+0x1c>)
 8003b32:	4605      	mov	r5, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	f7fd ffa2 	bl	8001a80 <_sbrk>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_sbrk_r+0x1a>
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_sbrk_r+0x1a>
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	2000025c 	.word	0x2000025c

08003b4c <__ascii_mbtowc>:
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	b901      	cbnz	r1, 8003b52 <__ascii_mbtowc+0x6>
 8003b50:	a901      	add	r1, sp, #4
 8003b52:	b142      	cbz	r2, 8003b66 <__ascii_mbtowc+0x1a>
 8003b54:	b14b      	cbz	r3, 8003b6a <__ascii_mbtowc+0x1e>
 8003b56:	7813      	ldrb	r3, [r2, #0]
 8003b58:	600b      	str	r3, [r1, #0]
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	1c10      	adds	r0, r2, #0
 8003b5e:	bf18      	it	ne
 8003b60:	2001      	movne	r0, #1
 8003b62:	b002      	add	sp, #8
 8003b64:	4770      	bx	lr
 8003b66:	4610      	mov	r0, r2
 8003b68:	e7fb      	b.n	8003b62 <__ascii_mbtowc+0x16>
 8003b6a:	f06f 0001 	mvn.w	r0, #1
 8003b6e:	e7f8      	b.n	8003b62 <__ascii_mbtowc+0x16>

08003b70 <memmove>:
 8003b70:	4288      	cmp	r0, r1
 8003b72:	b510      	push	{r4, lr}
 8003b74:	eb01 0302 	add.w	r3, r1, r2
 8003b78:	d807      	bhi.n	8003b8a <memmove+0x1a>
 8003b7a:	1e42      	subs	r2, r0, #1
 8003b7c:	4299      	cmp	r1, r3
 8003b7e:	d00a      	beq.n	8003b96 <memmove+0x26>
 8003b80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b88:	e7f8      	b.n	8003b7c <memmove+0xc>
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	d9f5      	bls.n	8003b7a <memmove+0xa>
 8003b8e:	1881      	adds	r1, r0, r2
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	42d3      	cmn	r3, r2
 8003b94:	d100      	bne.n	8003b98 <memmove+0x28>
 8003b96:	bd10      	pop	{r4, pc}
 8003b98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ba0:	e7f7      	b.n	8003b92 <memmove+0x22>

08003ba2 <__malloc_lock>:
 8003ba2:	4770      	bx	lr

08003ba4 <__malloc_unlock>:
 8003ba4:	4770      	bx	lr

08003ba6 <_realloc_r>:
 8003ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba8:	4607      	mov	r7, r0
 8003baa:	4614      	mov	r4, r2
 8003bac:	460e      	mov	r6, r1
 8003bae:	b921      	cbnz	r1, 8003bba <_realloc_r+0x14>
 8003bb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	f7ff be0d 	b.w	80037d4 <_malloc_r>
 8003bba:	b922      	cbnz	r2, 8003bc6 <_realloc_r+0x20>
 8003bbc:	f7ff fdbe 	bl	800373c <_free_r>
 8003bc0:	4625      	mov	r5, r4
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc6:	f000 f821 	bl	8003c0c <_malloc_usable_size_r>
 8003bca:	42a0      	cmp	r0, r4
 8003bcc:	d20f      	bcs.n	8003bee <_realloc_r+0x48>
 8003bce:	4621      	mov	r1, r4
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f7ff fdff 	bl	80037d4 <_malloc_r>
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d0f2      	beq.n	8003bc2 <_realloc_r+0x1c>
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4622      	mov	r2, r4
 8003be0:	f7ff fab6 	bl	8003150 <memcpy>
 8003be4:	4631      	mov	r1, r6
 8003be6:	4638      	mov	r0, r7
 8003be8:	f7ff fda8 	bl	800373c <_free_r>
 8003bec:	e7e9      	b.n	8003bc2 <_realloc_r+0x1c>
 8003bee:	4635      	mov	r5, r6
 8003bf0:	e7e7      	b.n	8003bc2 <_realloc_r+0x1c>

08003bf2 <__ascii_wctomb>:
 8003bf2:	b149      	cbz	r1, 8003c08 <__ascii_wctomb+0x16>
 8003bf4:	2aff      	cmp	r2, #255	; 0xff
 8003bf6:	bf8b      	itete	hi
 8003bf8:	238a      	movhi	r3, #138	; 0x8a
 8003bfa:	700a      	strbls	r2, [r1, #0]
 8003bfc:	6003      	strhi	r3, [r0, #0]
 8003bfe:	2001      	movls	r0, #1
 8003c00:	bf88      	it	hi
 8003c02:	f04f 30ff 	movhi.w	r0, #4294967295
 8003c06:	4770      	bx	lr
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4770      	bx	lr

08003c0c <_malloc_usable_size_r>:
 8003c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c10:	1f18      	subs	r0, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfbc      	itt	lt
 8003c16:	580b      	ldrlt	r3, [r1, r0]
 8003c18:	18c0      	addlt	r0, r0, r3
 8003c1a:	4770      	bx	lr

08003c1c <_init>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr

08003c28 <_fini>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	bf00      	nop
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr
