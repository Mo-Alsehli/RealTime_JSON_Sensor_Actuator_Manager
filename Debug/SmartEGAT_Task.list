
SmartEGAT_Task.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004630  08004630  00014630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  080048ec  080048ec  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048ec  080048ec  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080048f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001d8  08004acc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004acc  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000818b  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001645  00000000  00000000  0002838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000338  00000000  00000000  000299d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000280  00000000  00000000  00029d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002460  00000000  00000000  00029f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004bc0  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000cbd5  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003db85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001650  00000000  00000000  0003dc00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d8 	.word	0x200001d8
 800014c:	00000000 	.word	0x00000000
 8000150:	08004614 	.word	0x08004614

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001dc 	.word	0x200001dc
 800016c:	08004614 	.word	0x08004614

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	d1ed      	bne.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000db6:	2afd      	cmp	r2, #253	; 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	; 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	; 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	; 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <Calculate_LightIntensityPercentage>:

#include "LDR_Light_Sensor.h"

// Local Functions

float Calculate_LightIntensityPercentage(uint16_t adcValue) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b08d      	sub	sp, #52	; 0x34
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	80fb      	strh	r3, [r7, #6]
    // Constants
    const float Vcc = 3.3;       // Supply voltage
 80010fa:	4b46      	ldr	r3, [pc, #280]	; (8001214 <Calculate_LightIntensityPercentage+0x124>)
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
    const float R_fixed = 10000; // Fixed resistor value (10kΩ)
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <Calculate_LightIntensityPercentage+0x128>)
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    const float R_min = 100;     // Minimum LDR resistance (100Ω)
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <Calculate_LightIntensityPercentage+0x12c>)
 8001104:	623b      	str	r3, [r7, #32]
    const float R_max = 200000;  // Maximum LDR resistance (200kΩ)
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <Calculate_LightIntensityPercentage+0x130>)
 8001108:	61fb      	str	r3, [r7, #28]

    // Calculate Vout from ADC value
    float Vout = (adcValue * Vcc) / 4096.0;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fdd5 	bl	8000cbc <__aeabi_i2f>
 8001112:	4603      	mov	r3, r0
 8001114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe24 	bl	8000d64 <__aeabi_fmul>
 800111c:	4603      	mov	r3, r0
 800111e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fed2 	bl	8000ecc <__aeabi_fdiv>
 8001128:	4603      	mov	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]

    // Calculate LDR resistance
    float R_LDR = R_fixed * ((Vcc / Vout) - 1);
 800112c:	69b9      	ldr	r1, [r7, #24]
 800112e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001130:	f7ff fecc 	bl	8000ecc <__aeabi_fdiv>
 8001134:	4603      	mov	r3, r0
 8001136:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fd08 	bl	8000b50 <__aeabi_fsub>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001146:	f7ff fe0d 	bl	8000d64 <__aeabi_fmul>
 800114a:	4603      	mov	r3, r0
 800114c:	617b      	str	r3, [r7, #20]

    // Apply a logarithmic scale
    float log_R_LDR = log(R_LDR);
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff f97a 	bl	8000448 <__aeabi_f2d>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	f003 f826 	bl	80041ac <log>
 8001160:	4603      	mov	r3, r0
 8001162:	460c      	mov	r4, r1
 8001164:	4618      	mov	r0, r3
 8001166:	4621      	mov	r1, r4
 8001168:	f7ff fc9e 	bl	8000aa8 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	613b      	str	r3, [r7, #16]
    float log_R_min = log(R_min);
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f7ff f969 	bl	8000448 <__aeabi_f2d>
 8001176:	4603      	mov	r3, r0
 8001178:	460c      	mov	r4, r1
 800117a:	4618      	mov	r0, r3
 800117c:	4621      	mov	r1, r4
 800117e:	f003 f815 	bl	80041ac <log>
 8001182:	4603      	mov	r3, r0
 8001184:	460c      	mov	r4, r1
 8001186:	4618      	mov	r0, r3
 8001188:	4621      	mov	r1, r4
 800118a:	f7ff fc8d 	bl	8000aa8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	60fb      	str	r3, [r7, #12]
    float log_R_max = log(R_max);
 8001192:	69f8      	ldr	r0, [r7, #28]
 8001194:	f7ff f958 	bl	8000448 <__aeabi_f2d>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f003 f804 	bl	80041ac <log>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4618      	mov	r0, r3
 80011aa:	4621      	mov	r1, r4
 80011ac:	f7ff fc7c 	bl	8000aa8 <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	60bb      	str	r3, [r7, #8]
    float intensityPercentage = ((log_R_LDR - log_R_min) / (log_R_max - log_R_min)) * 100;
 80011b4:	68f9      	ldr	r1, [r7, #12]
 80011b6:	6938      	ldr	r0, [r7, #16]
 80011b8:	f7ff fcca 	bl	8000b50 <__aeabi_fsub>
 80011bc:	4603      	mov	r3, r0
 80011be:	461c      	mov	r4, r3
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f7ff fcc4 	bl	8000b50 <__aeabi_fsub>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff fe7d 	bl	8000ecc <__aeabi_fdiv>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4911      	ldr	r1, [pc, #68]	; (800121c <Calculate_LightIntensityPercentage+0x12c>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdc4 	bl	8000d64 <__aeabi_fmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Clamp percentage to [0, 100] to avoid invalid values
    if (intensityPercentage > 100) {
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <Calculate_LightIntensityPercentage+0x12c>)
 80011e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011e4:	f7ff ff7a 	bl	80010dc <__aeabi_fcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <Calculate_LightIntensityPercentage+0x104>
        intensityPercentage = 100;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <Calculate_LightIntensityPercentage+0x12c>)
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	e00a      	b.n	800120a <Calculate_LightIntensityPercentage+0x11a>
    } else if (intensityPercentage < 0) {
 80011f4:	f04f 0100 	mov.w	r1, #0
 80011f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011fa:	f7ff ff51 	bl	80010a0 <__aeabi_fcmplt>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <Calculate_LightIntensityPercentage+0x11a>
        intensityPercentage = 0;
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return intensityPercentage;
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800120c:	4618      	mov	r0, r3
 800120e:	3734      	adds	r7, #52	; 0x34
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	40533333 	.word	0x40533333
 8001218:	461c4000 	.word	0x461c4000
 800121c:	42c80000 	.word	0x42c80000
 8001220:	48435000 	.word	0x48435000

08001224 <HAL_LDR_Init>:



// APIs
void HAL_LDR_Init(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
	// ADC Configuration
		ADC_Config_t ADCCfg = {
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
				.conversions = ADC_NumOfConvs_1,
				.dataAlginement = ADC_DataAlign_Right,
				.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
				.P_IRQ_Callback = NULL
		};
		ADC_Init(ADC1, &ADCCfg, GPIO_PIN_1);
 8001236:	463b      	mov	r3, r7
 8001238:	2202      	movs	r2, #2
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_LDR_Init+0x30>)
 800123e:	f000 f8f5 	bl	800142c <ADC_Init>

		// Perform a Dummy Read.
		HAL_LDR_Read_Intensity();
 8001242:	f000 f809 	bl	8001258 <HAL_LDR_Read_Intensity>
		wait(50);
 8001246:	2032      	movs	r0, #50	; 0x32
 8001248:	f000 fc04 	bl	8001a54 <wait>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40012400 	.word	0x40012400

08001258 <HAL_LDR_Read_Intensity>:


float HAL_LDR_Read_Intensity(){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	uint16_t adcValue = ADC_Read_SingleChannel(ADC1, LDR_ADC_CH);
 800125e:	2101      	movs	r1, #1
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <HAL_LDR_Read_Intensity+0x28>)
 8001262:	f000 f98b 	bl	800157c <ADC_Read_SingleChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	// Calculate Intensity as a Percentage.
	float intensity = Calculate_LightIntensityPercentage(adcValue);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff3f 	bl	80010f0 <Calculate_LightIntensityPercentage>
 8001272:	6038      	str	r0, [r7, #0]

	return intensity;
 8001274:	683b      	ldr	r3, [r7, #0]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40012400 	.word	0x40012400

08001284 <HAL_LDR_UART_SendData>:

void HAL_LDR_UART_SendData(){
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b08f      	sub	sp, #60	; 0x3c
 8001288:	af00      	add	r7, sp, #0
	float intensity = HAL_LDR_Read_Intensity();
 800128a:	f7ff ffe5 	bl	8001258 <HAL_LDR_Read_Intensity>
 800128e:	6378      	str	r0, [r7, #52]	; 0x34
	char buffer[50];
	sprintf(buffer, "Intensity: %.1f %% \r\n", intensity);
 8001290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001292:	f7ff f8d9 	bl	8000448 <__aeabi_f2d>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	4638      	mov	r0, r7
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <HAL_LDR_UART_SendData+0x40>)
 80012a2:	f001 fb95 	bl	80029d0 <siprintf>
	MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ff61 	bl	8000170 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4639      	mov	r1, r7
 80012b4:	2300      	movs	r3, #0
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <HAL_LDR_UART_SendData+0x44>)
 80012b8:	f000 fd76 	bl	8001da8 <MCAL_UART_SendData>
}
 80012bc:	bf00      	nop
 80012be:	373c      	adds	r7, #60	; 0x3c
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	08004630 	.word	0x08004630
 80012c8:	40013800 	.word	0x40013800

080012cc <HAL_LM35_Init>:
 */

#include "LM35_Temp_Sensor.h"

// APIs
void HAL_LM35_Init(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
	// ADC Configuration
	ADC_Config_t ADCCfg = {
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
			.conversions = ADC_NumOfConvs_1,
			.dataAlginement = ADC_DataAlign_Right,
			.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
			.P_IRQ_Callback = NULL
	};
	ADC_Init(ADC1, &ADCCfg, GPIO_PIN_0);
 80012de:	463b      	mov	r3, r7
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_LM35_Init+0x30>)
 80012e6:	f000 f8a1 	bl	800142c <ADC_Init>

	// Perform a Dummy Read.
	HAL_LM35_Read();
 80012ea:	f000 f809 	bl	8001300 <HAL_LM35_Read>
	wait(50);
 80012ee:	2032      	movs	r0, #50	; 0x32
 80012f0:	f000 fbb0 	bl	8001a54 <wait>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40012400 	.word	0x40012400

08001300 <HAL_LM35_Read>:


float HAL_LM35_Read(){
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
	uint16_t adcValue = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	81fb      	strh	r3, [r7, #14]

	adcValue = ADC_Read_SingleChannel(ADC1, LM35_ADC_CH);
 800130a:	2100      	movs	r1, #0
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <HAL_LM35_Read+0x68>)
 800130e:	f000 f935 	bl	800157c <ADC_Read_SingleChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	81fb      	strh	r3, [r7, #14]
	float voltage = (adcValue * 3.3) / 4096.0;
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f883 	bl	8000424 <__aeabi_i2d>
 800131e:	a310      	add	r3, pc, #64	; (adr r3, 8001360 <HAL_LM35_Read+0x60>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f8e8 	bl	80004f8 <__aeabi_dmul>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_LM35_Read+0x6c>)
 8001336:	f7ff fa09 	bl	800074c <__aeabi_ddiv>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	4618      	mov	r0, r3
 8001340:	4621      	mov	r1, r4
 8001342:	f7ff fbb1 	bl	8000aa8 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	60bb      	str	r3, [r7, #8]
	float temperature = voltage * 100.0;
 800134a:	4909      	ldr	r1, [pc, #36]	; (8001370 <HAL_LM35_Read+0x70>)
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f7ff fd09 	bl	8000d64 <__aeabi_fmul>
 8001352:	4603      	mov	r3, r0
 8001354:	607b      	str	r3, [r7, #4]

	return temperature;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	66666666 	.word	0x66666666
 8001364:	400a6666 	.word	0x400a6666
 8001368:	40012400 	.word	0x40012400
 800136c:	40b00000 	.word	0x40b00000
 8001370:	42c80000 	.word	0x42c80000

08001374 <HAL_LM35_UART_SendDAta>:

void HAL_LM35_UART_SendDAta(){
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b08f      	sub	sp, #60	; 0x3c
 8001378:	af00      	add	r7, sp, #0
	float temperature = HAL_LM35_Read();
 800137a:	f7ff ffc1 	bl	8001300 <HAL_LM35_Read>
 800137e:	6378      	str	r0, [r7, #52]	; 0x34
	char buffer[50];
	sprintf(buffer, "Temperature: %.2f C \r\n", temperature);
 8001380:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001382:	f7ff f861 	bl	8000448 <__aeabi_f2d>
 8001386:	4603      	mov	r3, r0
 8001388:	460c      	mov	r4, r1
 800138a:	4638      	mov	r0, r7
 800138c:	461a      	mov	r2, r3
 800138e:	4623      	mov	r3, r4
 8001390:	4908      	ldr	r1, [pc, #32]	; (80013b4 <HAL_LM35_UART_SendDAta+0x40>)
 8001392:	f001 fb1d 	bl	80029d0 <siprintf>

    MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 8001396:	463b      	mov	r3, r7
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe fee9 	bl	8000170 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4639      	mov	r1, r7
 80013a4:	2300      	movs	r3, #0
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <HAL_LM35_UART_SendDAta+0x44>)
 80013a8:	f000 fcfe 	bl	8001da8 <MCAL_UART_SendData>
}
 80013ac:	bf00      	nop
 80013ae:	373c      	adds	r7, #60	; 0x3c
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	08004648 	.word	0x08004648
 80013b8:	40013800 	.word	0x40013800

080013bc <HAL_Relay_Init>:

#include "Relay_5V_Actuator.h"



void HAL_Relay_Init(GPIO_TYPE_DEF* gpio, uint16_t GPIO_PIN_NUM){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
	GPIO_PinConfig_t gpioCfg;
	gpioCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80013c8:	2304      	movs	r3, #4
 80013ca:	73bb      	strb	r3, [r7, #14]
	gpioCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 80013cc:	2302      	movs	r3, #2
 80013ce:	73fb      	strb	r3, [r7, #15]
	gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(gpio, &gpioCfg);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fa91 	bl	8001902 <MCAL_GPIO_Init>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_Control_Relay_Light>:


void HAL_Control_Relay_Light(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	float intensity = HAL_LDR_Read_Intensity();
 80013ee:	f7ff ff33 	bl	8001258 <HAL_LDR_Read_Intensity>
 80013f2:	6078      	str	r0, [r7, #4]

	if(intensity > 40){
 80013f4:	490b      	ldr	r1, [pc, #44]	; (8001424 <HAL_Control_Relay_Light+0x3c>)
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe70 	bl	80010dc <__aeabi_fcmpgt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_Control_Relay_Light+0x28>
		// High means to open the relay as it's NC by default.
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_HIGH);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <HAL_Control_Relay_Light+0x40>)
 800140a:	f000 fb05 	bl	8001a18 <MCAL_GPIO_WritePin>
	}else{
		// Low means to close the relay (switch lamp on).
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_LOW);
	}
}
 800140e:	e005      	b.n	800141c <HAL_Control_Relay_Light+0x34>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_LOW);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <HAL_Control_Relay_Light+0x40>)
 8001418:	f000 fafe 	bl	8001a18 <MCAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	42200000 	.word	0x42200000
 8001428:	40010800 	.word	0x40010800

0800142c <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_TYPE_DEF* ADC , ADC_Config_t* ADCCfg, uint16_t GPIO_PIN_NUM) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
    // Enable clocks for ADC and GPIO
    RCC_GPIOA_CLk_EN();
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <ADC_Init+0x138>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a49      	ldr	r2, [pc, #292]	; (8001564 <ADC_Init+0x138>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6193      	str	r3, [r2, #24]
    if(ADC == ADC1){
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a47      	ldr	r2, [pc, #284]	; (8001568 <ADC_Init+0x13c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d106      	bne.n	800145c <ADC_Init+0x30>
    	RCC_ADC1_CLK_EN();
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <ADC_Init+0x138>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a44      	ldr	r2, [pc, #272]	; (8001564 <ADC_Init+0x138>)
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	e009      	b.n	8001470 <ADC_Init+0x44>
    }else if(ADC == ADC2){
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <ADC_Init+0x140>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d105      	bne.n	8001470 <ADC_Init+0x44>
    	RCC_ADC2_CLK_EN();
 8001464:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <ADC_Init+0x138>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <ADC_Init+0x138>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146e:	6193      	str	r3, [r2, #24]
    }

    GPIO_PinConfig_t gpioCfg;
    gpioCfg.GPIO_MODE = GPIO_MODE_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	74bb      	strb	r3, [r7, #18]
    gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	823b      	strh	r3, [r7, #16]

    // Channel Pin Analog Mode Initilization.
    MCAL_GPIO_Init(GPIOA, &gpioCfg);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	483c      	ldr	r0, [pc, #240]	; (8001570 <ADC_Init+0x144>)
 8001480:	f000 fa3f 	bl	8001902 <MCAL_GPIO_Init>

    // Configure GPIO Pins PA0 and PA1 for analog input (reset to analog mode)
    GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <ADC_Init+0x144>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a39      	ldr	r2, [pc, #228]	; (8001570 <ADC_Init+0x144>)
 800148a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800148e:	6013      	str	r3, [r2, #0]

    // Enable ADC by setting ADON bit
    ADC->CR2 |= (1 << 0);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	609a      	str	r2, [r3, #8]

    // SCAN mode Enabled
    ADC->CR1 |= ADCCfg->mode;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	605a      	str	r2, [r3, #4]

    // Set continuous or single conversion mode
    if (ADCCfg->convMode == ADC_Conv_CONT_MODE) {
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	799b      	ldrb	r3, [r3, #6]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d106      	bne.n	80014c0 <ADC_Init+0x94>
        ADC->CR2 |= (1 << 1); // Enable continuous mode
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	e009      	b.n	80014d4 <ADC_Init+0xa8>
    } else if (ADCCfg->convMode == ADC_Conv_Single_MODE) {
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	799b      	ldrb	r3, [r3, #6]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <ADC_Init+0xa8>
        ADC->CR2 &= ~(1 << 1); // Disable continuous mode (single conversion)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 0202 	bic.w	r2, r3, #2
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	609a      	str	r2, [r3, #8]
    }

    // Configure data alignment (right or left)
    if (ADCCfg->dataAlginement == ADC_DataAlign_Right) {
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	79db      	ldrb	r3, [r3, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <ADC_Init+0xbe>
        ADC->CR2 &= ~(1 << 11); // Right alignment
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	e009      	b.n	80014fe <ADC_Init+0xd2>
    } else if (ADCCfg->dataAlginement == ADC_DataAlign_Left) {
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	79db      	ldrb	r3, [r3, #7]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d105      	bne.n	80014fe <ADC_Init+0xd2>
        ADC->CR2 |= (1 << 11); // Left alignment
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	609a      	str	r2, [r3, #8]
    }

    // Enable or disable End of Conversion (EOC) interrupt
    if (ADCCfg->IRQ_Enable == ADC_IRQ_Enable) {
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	7a1b      	ldrb	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10c      	bne.n	8001520 <ADC_Init+0xf4>
        NVIC_IRQ18_ADC_Enable; // Enable ADC interrupt in NVIC
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <ADC_Init+0x148>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <ADC_Init+0x148>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
        ADC->CR1 |= (1 << 5); // Enable EOC interrupt
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f043 0220 	orr.w	r2, r3, #32
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	e009      	b.n	8001534 <ADC_Init+0x108>
    } else if (ADCCfg->IRQ_Enable == ADC_IRQ_Disable) {
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	7a1b      	ldrb	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <ADC_Init+0x108>
        ADC->CR1 &= ~(1 << 5); // Disable EOC interrupt
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 0220 	bic.w	r2, r3, #32
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	605a      	str	r2, [r3, #4]
    }

    // Set ADC callback if interrupt mode is enabled
    G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <ADC_Init+0x14c>)
 800153a:	6013      	str	r3, [r2, #0]

    // Wait for ADC stabilization (tSTAB)
    for (int i = 0; i <= 1000; i++);
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e002      	b.n	8001548 <ADC_Init+0x11c>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154e:	ddf8      	ble.n	8001542 <ADC_Init+0x116>

    // Set ADON again to start the ADC
    ADC->CR2 |= (1 << 0);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40012400 	.word	0x40012400
 800156c:	40012800 	.word	0x40012800
 8001570:	40010800 	.word	0x40010800
 8001574:	e000e100 	.word	0xe000e100
 8001578:	20000208 	.word	0x20000208

0800157c <ADC_Read_SingleChannel>:


uint16_t ADC_Read_SingleChannel(ADC_TYPE_DEF* ADC, uint16_t channel) {
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]

	uint16_t adcValue = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	81fb      	strh	r3, [r7, #14]
    // Select the ADC channel
    ADC->SQR3 = channel;
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the conversion
    ADC->CR2 |= ADC_CR2_SWSTART;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	609a      	str	r2, [r3, #8]

    // Wait for the End of  First Conversion Conversion (EOC) flag
    while (!(ADC->SR & ADC_SR_EOC));
 800159e:	bf00      	nop
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f9      	beq.n	80015a0 <ADC_Read_SingleChannel+0x24>
    // Read the ADC value For Channel 1.
    adcValue = ADC->DR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	81fb      	strh	r3, [r7, #14]

    return adcValue;
 80015b2:	89fb      	ldrh	r3, [r7, #14]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
	...

080015c0 <ADC1_2_IRQHandler>:
	 ADC->CR2 = 0;                  // Clear control register 2


}

void ADC1_2_IRQHandler(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <ADC1_2_IRQHandler+0x30>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <ADC1_2_IRQHandler+0x30>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <ADC1_2_IRQHandler+0x34>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <ADC1_2_IRQHandler+0x34>)
 80015d8:	f023 0302 	bic.w	r3, r3, #2
 80015dc:	6013      	str	r3, [r2, #0]
	ADC2->SR &= ~(1 << 1);
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <ADC1_2_IRQHandler+0x38>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <ADC1_2_IRQHandler+0x38>)
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000208 	.word	0x20000208
 80015f4:	40012400 	.word	0x40012400
 80015f8:	40012800 	.word	0x40012800

080015fc <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <EXTI0_IRQHandler+0x1c>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <EXTI0_IRQHandler+0x1c>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <EXTI0_IRQHandler+0x20>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4798      	blx	r3
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40010400 	.word	0x40010400
 800161c:	2000020c 	.word	0x2000020c

08001620 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <EXTI1_IRQHandler+0x1c>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <EXTI1_IRQHandler+0x1c>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <EXTI1_IRQHandler+0x20>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4798      	blx	r3
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010400 	.word	0x40010400
 8001640:	2000020c 	.word	0x2000020c

08001644 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <EXTI2_IRQHandler+0x1c>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <EXTI2_IRQHandler+0x1c>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <EXTI2_IRQHandler+0x20>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4798      	blx	r3
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010400 	.word	0x40010400
 8001664:	2000020c 	.word	0x2000020c

08001668 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <EXTI3_IRQHandler+0x1c>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <EXTI3_IRQHandler+0x1c>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <EXTI3_IRQHandler+0x20>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4798      	blx	r3
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010400 	.word	0x40010400
 8001688:	2000020c 	.word	0x2000020c

0800168c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <EXTI4_IRQHandler+0x1c>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <EXTI4_IRQHandler+0x1c>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <EXTI4_IRQHandler+0x20>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4798      	blx	r3
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40010400 	.word	0x40010400
 80016ac:	2000020c 	.word	0x2000020c

080016b0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <EXTI9_5_IRQHandler+0xa4>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <EXTI9_5_IRQHandler+0xa4>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 8001702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001706:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <EXTI9_5_IRQHandler+0xa4>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 8001720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001724:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <EXTI9_5_IRQHandler+0xa4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <EXTI9_5_IRQHandler+0xa0>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EXTI9_5_IRQHandler+0xa4>)
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	4798      	blx	r3
	}
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40010400 	.word	0x40010400
 8001754:	2000020c 	.word	0x2000020c

08001758 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4a31      	ldr	r2, [pc, #196]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001772:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800178c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001790:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8001792:	4b29      	ldr	r3, [pc, #164]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8001798:	4b26      	ldr	r3, [pc, #152]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ae:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017cc:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ea:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <EXTI15_10_IRQHandler+0xdc>)
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <EXTI15_10_IRQHandler+0xe0>)
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	4798      	blx	r3
	}
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40010400 	.word	0x40010400
 8001838:	2000020c 	.word	0x2000020c

0800183c <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	2b80      	cmp	r3, #128	; 0x80
 800184a:	d042      	beq.n	80018d2 <getCRLHPinPos+0x96>
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	dc11      	bgt.n	8001874 <getCRLHPinPos+0x38>
 8001850:	2b08      	cmp	r3, #8
 8001852:	d036      	beq.n	80018c2 <getCRLHPinPos+0x86>
 8001854:	2b08      	cmp	r3, #8
 8001856:	dc06      	bgt.n	8001866 <getCRLHPinPos+0x2a>
 8001858:	2b02      	cmp	r3, #2
 800185a:	d02e      	beq.n	80018ba <getCRLHPinPos+0x7e>
 800185c:	2b04      	cmp	r3, #4
 800185e:	d02e      	beq.n	80018be <getCRLHPinPos+0x82>
 8001860:	2b01      	cmp	r3, #1
 8001862:	d028      	beq.n	80018b6 <getCRLHPinPos+0x7a>
 8001864:	e047      	b.n	80018f6 <getCRLHPinPos+0xba>
 8001866:	2b20      	cmp	r3, #32
 8001868:	d02f      	beq.n	80018ca <getCRLHPinPos+0x8e>
 800186a:	2b40      	cmp	r3, #64	; 0x40
 800186c:	d02f      	beq.n	80018ce <getCRLHPinPos+0x92>
 800186e:	2b10      	cmp	r3, #16
 8001870:	d029      	beq.n	80018c6 <getCRLHPinPos+0x8a>
 8001872:	e040      	b.n	80018f6 <getCRLHPinPos+0xba>
 8001874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001878:	d033      	beq.n	80018e2 <getCRLHPinPos+0xa6>
 800187a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800187e:	dc09      	bgt.n	8001894 <getCRLHPinPos+0x58>
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d029      	beq.n	80018da <getCRLHPinPos+0x9e>
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d028      	beq.n	80018de <getCRLHPinPos+0xa2>
 800188c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001890:	d021      	beq.n	80018d6 <getCRLHPinPos+0x9a>
 8001892:	e030      	b.n	80018f6 <getCRLHPinPos+0xba>
 8001894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001898:	d027      	beq.n	80018ea <getCRLHPinPos+0xae>
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	dc03      	bgt.n	80018a8 <getCRLHPinPos+0x6c>
 80018a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a4:	d01f      	beq.n	80018e6 <getCRLHPinPos+0xaa>
 80018a6:	e026      	b.n	80018f6 <getCRLHPinPos+0xba>
 80018a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ac:	d01f      	beq.n	80018ee <getCRLHPinPos+0xb2>
 80018ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b2:	d01e      	beq.n	80018f2 <getCRLHPinPos+0xb6>
 80018b4:	e01f      	b.n	80018f6 <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e01e      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 80018ba:	2304      	movs	r3, #4
 80018bc:	e01c      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 80018be:	2308      	movs	r3, #8
 80018c0:	e01a      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 80018c2:	230c      	movs	r3, #12
 80018c4:	e018      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	e016      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 80018ca:	2314      	movs	r3, #20
 80018cc:	e014      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 80018ce:	2318      	movs	r3, #24
 80018d0:	e012      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 80018d2:	231c      	movs	r3, #28
 80018d4:	e010      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e00e      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 80018da:	2304      	movs	r3, #4
 80018dc:	e00c      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 80018de:	2308      	movs	r3, #8
 80018e0:	e00a      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 80018e2:	230c      	movs	r3, #12
 80018e4:	e008      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 80018e6:	2310      	movs	r3, #16
 80018e8:	e006      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 80018ea:	2314      	movs	r3, #20
 80018ec:	e004      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 80018ee:	2318      	movs	r3, #24
 80018f0:	e002      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 80018f2:	231c      	movs	r3, #28
 80018f4:	e000      	b.n	80018f8 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d902      	bls.n	8001922 <MCAL_GPIO_Init+0x20>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	e000      	b.n	8001924 <MCAL_GPIO_Init+0x22>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff86 	bl	800183c <getCRLHPinPos>
 8001930:	4602      	mov	r2, r0
 8001932:	230f      	movs	r3, #15
 8001934:	4093      	lsls	r3, r2
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	401a      	ands	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	789b      	ldrb	r3, [r3, #2]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d00b      	beq.n	8001962 <MCAL_GPIO_Init+0x60>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d007      	beq.n	8001962 <MCAL_GPIO_Init+0x60>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	789b      	ldrb	r3, [r3, #2]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d003      	beq.n	8001962 <MCAL_GPIO_Init+0x60>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d10e      	bne.n	8001980 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	789b      	ldrb	r3, [r3, #2]
 8001966:	3b04      	subs	r3, #4
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	b25a      	sxtb	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	b25b      	sxtb	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b25b      	sxtb	r3, r3
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e039      	b.n	80019f4 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d003      	beq.n	8001990 <MCAL_GPIO_Init+0x8e>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10c      	bne.n	80019aa <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	b25a      	sxtb	r2, r3
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e024      	b.n	80019f4 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d104      	bne.n	80019bc <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e01b      	b.n	80019f4 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	e00b      	b.n	80019f4 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	789b      	ldrb	r3, [r3, #2]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d107      	bne.n	80019f4 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	43d2      	mvns	r2, r2
 80019ee:	401a      	ands	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80019f4:	7bfc      	ldrb	r4, [r7, #15]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff1e 	bl	800183c <getCRLHPinPos>
 8001a00:	4603      	mov	r3, r0
 8001a02:	fa04 f203 	lsl.w	r2, r4, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	601a      	str	r2, [r3, #0]

}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <MCAL_GPIO_WritePin>:
 * @param [in]	- value: Set pin to a specific value.
 * @retval 		- none.
 * Note 		- none
 */

void MCAL_GPIO_WritePin(GPIO_TYPE_DEF* gpiox, uint16_t pinNum, uint8_t value){
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_HIGH){
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <MCAL_GPIO_WritePin+0x24>
		gpiox->ODR |= (uint32_t)pinNum;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60da      	str	r2, [r3, #12]
	}else {
		gpiox->ODR &= (uint32_t)(~pinNum);
		// OR
		// gpiox->BRR = (uint32_t)pinNum;
	}
}
 8001a3a:	e006      	b.n	8001a4a <MCAL_GPIO_WritePin+0x32>
		gpiox->ODR &= (uint32_t)(~pinNum);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	887a      	ldrh	r2, [r7, #2]
 8001a42:	43d2      	mvns	r2, r2
 8001a44:	401a      	ands	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60da      	str	r2, [r3, #12]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <wait>:
}

// Execution Time (seconds) = (time * 255 * 4) / F_CPU
// when time = 1, It takes 1 Melli-seconds.
void wait(uint32_t time)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e00b      	b.n	8001a7a <wait+0x26>
	{
		for (j = 0; j < 255; j++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	e002      	b.n	8001a6e <wait+0x1a>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2bfe      	cmp	r3, #254	; 0xfe
 8001a72:	d9f9      	bls.n	8001a68 <wait+0x14>
	for (i = 0; i < time; i++)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3ef      	bcc.n	8001a62 <wait+0xe>
		;
	}
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d006      	beq.n	8001aac <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d302      	bcc.n	8001aa8 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d004      	beq.n	8001ab0 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8001aa6:	e005      	b.n	8001ab4 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8001aaa:	e004      	b.n	8001ab6 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8001aae:	e002      	b.n	8001ab6 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 8001ab2:	e000      	b.n	8001ab6 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	007a1200 	.word	0x007a1200
 8001ac8:	00186a00 	.word	0x00186a00
 8001acc:	00f42400 	.word	0x00f42400

08001ad0 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8001ad4:	f7ff ffda 	bl	8001a8c <MCAL_RCC_GET_SYS_CLKFreq>
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	0800467c 	.word	0x0800467c

08001af8 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8001afc:	f7ff ffe8 	bl	8001ad0 <MCAL_RCC_GET_HCLKFreq>
 8001b00:	4601      	mov	r1, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	08004674 	.word	0x08004674

08001b20 <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8001b24:	f7ff ffd4 	bl	8001ad0 <MCAL_RCC_GET_HCLKFreq>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4a03      	ldr	r2, [pc, #12]	; (8001b44 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08004674 	.word	0x08004674

08001b48 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(void) {
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
    if (TIM2->SR & (1 << 0)) { // Check update interrupt flag
 8001b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <TIM2_IRQHandler+0x28>
        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
 8001b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6113      	str	r3, [r2, #16]
        delayFlag = 0;           // Signal delay completion
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <TIM2_IRQHandler+0x30>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
    }
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000000 	.word	0x20000000

08001b7c <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler() {
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <TIM1_UP_IRQHandler+0x24>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <TIM1_UP_IRQHandler+0x24>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <TIM1_UP_IRQHandler+0x28>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <TIM1_UP_IRQHandler+0x28>)
 8001b96:	801a      	strh	r2, [r3, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	200001f8 	.word	0x200001f8

08001ba8 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <TIM3_IRQHandler+0x24>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <TIM3_IRQHandler+0x24>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <TIM3_IRQHandler+0x28>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <TIM3_IRQHandler+0x28>)
 8001bc2:	801a      	strh	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	200001f6 	.word	0x200001f6

08001bd4 <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <TIM4_IRQHandler+0x24>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <TIM4_IRQHandler+0x24>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <TIM4_IRQHandler+0x28>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <TIM4_IRQHandler+0x28>)
 8001bee:	801a      	strh	r2, [r3, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	200001f4 	.word	0x200001f4

08001c00 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	; (8001d84 <MCAL_UART_Init+0x184>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d109      	bne.n	8001c26 <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 8001c12:	4a5d      	ldr	r2, [pc, #372]	; (8001d88 <MCAL_UART_Init+0x188>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8001c18:	4b5c      	ldr	r3, [pc, #368]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a5b      	ldr	r2, [pc, #364]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	e01a      	b.n	8001c5c <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a59      	ldr	r2, [pc, #356]	; (8001d90 <MCAL_UART_Init+0x190>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d109      	bne.n	8001c42 <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 8001c2e:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <MCAL_UART_Init+0x188>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 8001c34:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a54      	ldr	r2, [pc, #336]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	e00c      	b.n	8001c5c <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <MCAL_UART_Init+0x194>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d108      	bne.n	8001c5c <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8001c4a:	4a4f      	ldr	r2, [pc, #316]	; (8001d88 <MCAL_UART_Init+0x188>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <MCAL_UART_Init+0x18c>)
 8001c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5a:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	7a12      	ldrb	r2, [r2, #8]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	7a52      	ldrb	r2, [r2, #9]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	7a92      	ldrb	r2, [r2, #10]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	7ad2      	ldrb	r2, [r2, #11]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <MCAL_UART_Init+0x184>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d105      	bne.n	8001cc2 <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 8001cb6:	f7ff ff33 	bl	8001b20 <MCAL_RCC_GET_PCLK2Freq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <MCAL_UART_Init+0x198>)
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e004      	b.n	8001ccc <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 8001cc2:	f7ff ff19 	bl	8001af8 <MCAL_RCC_GET_PCLK1Freq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <MCAL_UART_Init+0x198>)
 8001cca:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <MCAL_UART_Init+0x198>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	0119      	lsls	r1, r3, #4
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <MCAL_UART_Init+0x198>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <MCAL_UART_Init+0x198>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	2064      	movs	r0, #100	; 0x64
 8001d04:	fb00 f303 	mul.w	r3, r0, r3
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <MCAL_UART_Init+0x19c>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	4a21      	ldr	r2, [pc, #132]	; (8001da0 <MCAL_UART_Init+0x1a0>)
 8001d1c:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <MCAL_UART_Init+0x1a0>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7b1b      	ldrb	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d026      	beq.n	8001d7c <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	7b12      	ldrb	r2, [r2, #12]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <MCAL_UART_Init+0x184>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d106      	bne.n	8001d52 <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d4a:	f043 0320 	orr.w	r3, r3, #32
 8001d4e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 8001d50:	e014      	b.n	8001d7c <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <MCAL_UART_Init+0x190>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d106      	bne.n	8001d68 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	6013      	str	r3, [r2, #0]
}
 8001d66:	e009      	b.n	8001d7c <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <MCAL_UART_Init+0x194>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d105      	bne.n	8001d7c <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <MCAL_UART_Init+0x1a4>)
 8001d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40013800 	.word	0x40013800
 8001d88:	20000254 	.word	0x20000254
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40014800 	.word	0x40014800
 8001d98:	20000250 	.word	0x20000250
 8001d9c:	51eb851f 	.word	0x51eb851f
 8001da0:	2000024c 	.word	0x2000024c
 8001da4:	e000e104 	.word	0xe000e104

08001da8 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint8_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	460b      	mov	r3, r1
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.


	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <MCAL_UART_SendData+0xb4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d103      	bne.n	8001dd2 <MCAL_UART_SendData+0x2a>
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	7a1b      	ldrb	r3, [r3, #8]
 8001dd0:	e00a      	b.n	8001de8 <MCAL_UART_SendData+0x40>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <MCAL_UART_SendData+0xbc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d103      	bne.n	8001de2 <MCAL_UART_SendData+0x3a>
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	7a1b      	ldrb	r3, [r3, #8]
 8001de0:	e002      	b.n	8001de8 <MCAL_UART_SendData+0x40>
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	7a1b      	ldrb	r3, [r3, #8]
 8001de8:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <MCAL_UART_SendData+0xb4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d103      	bne.n	8001dfa <MCAL_UART_SendData+0x52>
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	7a5b      	ldrb	r3, [r3, #9]
 8001df8:	e00a      	b.n	8001e10 <MCAL_UART_SendData+0x68>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <MCAL_UART_SendData+0xbc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d103      	bne.n	8001e0a <MCAL_UART_SendData+0x62>
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	7a5b      	ldrb	r3, [r3, #9]
 8001e08:	e002      	b.n	8001e10 <MCAL_UART_SendData+0x68>
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MCAL_UART_SendData+0xb8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	7a5b      	ldrb	r3, [r3, #9]
 8001e10:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11c      	bne.n	8001e52 <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	e015      	b.n	8001e4a <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}
			if (pollingEn == enable) {
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <MCAL_UART_SendData+0x90>
					while (!(uartx->SR & 1 << 7));
 8001e2a:	bf00      	nop
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f9      	beq.n	8001e2c <MCAL_UART_SendData+0x84>
			}
			uartx->DR = data;
 8001e38:	7d7a      	ldrb	r2, [r7, #21]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbe5      	blt.n	8001e1e <MCAL_UART_SendData+0x76>
		}
	}

}
 8001e52:	bf00      	nop
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	20000254 	.word	0x20000254
 8001e64:	40004400 	.word	0x40004400

08001e68 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <MCAL_UART_GPIO_SetPins+0xb8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d118      	bne.n	8001eaa <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e7c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001e7e:	2306      	movs	r3, #6
 8001e80:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4825      	ldr	r0, [pc, #148]	; (8001f24 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001e8e:	f7ff fd38 	bl	8001902 <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e96:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4820      	ldr	r0, [pc, #128]	; (8001f24 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001ea4:	f7ff fd2d 	bl	8001902 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8001ea8:	e036      	b.n	8001f18 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <MCAL_UART_GPIO_SetPins+0xc0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d116      	bne.n	8001ee0 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4817      	ldr	r0, [pc, #92]	; (8001f24 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001ec6:	f7ff fd1c 	bl	8001902 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001eca:	2308      	movs	r3, #8
 8001ecc:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4812      	ldr	r0, [pc, #72]	; (8001f24 <MCAL_UART_GPIO_SetPins+0xbc>)
 8001eda:	f7ff fd12 	bl	8001902 <MCAL_GPIO_Init>
}
 8001ede:	e01b      	b.n	8001f18 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MCAL_UART_GPIO_SetPins+0xc4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d117      	bne.n	8001f18 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eec:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001eee:	2306      	movs	r3, #6
 8001ef0:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001efe:	f7ff fd00 	bl	8001902 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f06:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001f14:	f7ff fcf5 	bl	8001902 <MCAL_GPIO_Init>
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40014800 	.word	0x40014800
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <USART1_IRQHandler+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4798      	blx	r3
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000254 	.word	0x20000254

08001f48 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <USART2_IRQHandler+0x10>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	4798      	blx	r3
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000254 	.word	0x20000254

08001f5c <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <USART3_IRQHandler+0x10>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	4798      	blx	r3
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000254 	.word	0x20000254

08001f70 <clockInit>:
	float voltage = (adcValue * 5.0) / 4096.0;
	temperature = (voltage - 5.0) * 100.0;
}
*/

void clockInit(){
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <clockInit+0x24>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <clockInit+0x24>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <clockInit+0x24>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <clockInit+0x24>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40021000 	.word	0x40021000

08001f98 <main>:
// ------------------------------------------------------------------
// Main Function
// ------------------------------------------------------------------


int main(void) {
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
    // Clock Initialization
    clockInit();
 8001f9e:	f7ff ffe7 	bl	8001f70 <clockInit>
    //GPIOAInit();
    //LCDInit();

    // UART Configuration
    UART_Config_t uartCfg = {
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <main+0x68>)
 8001fa4:	1d3c      	adds	r4, r7, #4
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	6023      	str	r3, [r4, #0]
        .Mode = UART_Mode_TX_RX,
        .Payload = UART_PayloadLength_8B,
        .StopBits = UART_StopBits_One,
        .P_IRQ_Callback = NULL
    };
    MCAL_UART_Init(UART1, &uartCfg);
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4813      	ldr	r0, [pc, #76]	; (8002004 <main+0x6c>)
 8001fb6:	f7ff fe23 	bl	8001c00 <MCAL_UART_Init>
    MCAL_UART_GPIO_SetPins(UART1);
 8001fba:	4812      	ldr	r0, [pc, #72]	; (8002004 <main+0x6c>)
 8001fbc:	f7ff ff54 	bl	8001e68 <MCAL_UART_GPIO_SetPins>

    GPIO_PinConfig_t gpioCfg;
    gpioCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	70bb      	strb	r3, [r7, #2]
    gpioCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	70fb      	strb	r3, [r7, #3]
    gpioCfg.GPIO_PinNumber = GPIO_PIN_11;
 8001fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fcc:	803b      	strh	r3, [r7, #0]
    MCAL_GPIO_Init(GPIOA, &gpioCfg);
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480d      	ldr	r0, [pc, #52]	; (8002008 <main+0x70>)
 8001fd4:	f7ff fc95 	bl	8001902 <MCAL_GPIO_Init>


    // Initialize LM35 with ADC1 ch0.
    HAL_LM35_Init();
 8001fd8:	f7ff f978 	bl	80012cc <HAL_LM35_Init>

    // Initialize LDR with ADC1 ch1.
    HAL_LDR_Init();
 8001fdc:	f7ff f922 	bl	8001224 <HAL_LDR_Init>

    // Initialize Relay Actuator.
    HAL_Relay_Init(GPIOA, GPIO_PIN_11);
 8001fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe4:	4808      	ldr	r0, [pc, #32]	; (8002008 <main+0x70>)
 8001fe6:	f7ff f9e9 	bl	80013bc <HAL_Relay_Init>
    while (1) {
    	HAL_LM35_UART_SendDAta();
 8001fea:	f7ff f9c3 	bl	8001374 <HAL_LM35_UART_SendDAta>

        HAL_LDR_UART_SendData();
 8001fee:	f7ff f949 	bl	8001284 <HAL_LDR_UART_SendData>
    	//delay(500, U_ms, clk);
        HAL_Control_Relay_Light();
 8001ff2:	f7ff f9f9 	bl	80013e8 <HAL_Control_Relay_Light>
        wait(500);
 8001ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ffa:	f7ff fd2b 	bl	8001a54 <wait>
    	HAL_LM35_UART_SendDAta();
 8001ffe:	e7f4      	b.n	8001fea <main+0x52>
 8002000:	08004660 	.word	0x08004660
 8002004:	40013800 	.word	0x40013800
 8002008:	40010800 	.word	0x40010800

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f000 f846 	bl	80020cc <__errno>
 8002040:	4602      	mov	r2, r0
 8002042:	230c      	movs	r3, #12
 8002044:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20005000 	.word	0x20005000
 800206c:	00000400 	.word	0x00000400
 8002070:	200001fc 	.word	0x200001fc
 8002074:	20000268 	.word	0x20000268

08002078 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800207c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <LoopForever+0x16>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020a6:	f000 f817 	bl	80020d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020aa:	f7ff ff75 	bl	8001f98 <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   r0, =_estack
 80020b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020bc:	080048f4 	.word	0x080048f4
  ldr r2, =_sbss
 80020c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80020c4:	20000264 	.word	0x20000264

080020c8 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC3_IRQHandler>
	...

080020cc <__errno>:
 80020cc:	4b01      	ldr	r3, [pc, #4]	; (80020d4 <__errno+0x8>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000004 	.word	0x20000004

080020d8 <__libc_init_array>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	2500      	movs	r5, #0
 80020dc:	4e0c      	ldr	r6, [pc, #48]	; (8002110 <__libc_init_array+0x38>)
 80020de:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <__libc_init_array+0x3c>)
 80020e0:	1ba4      	subs	r4, r4, r6
 80020e2:	10a4      	asrs	r4, r4, #2
 80020e4:	42a5      	cmp	r5, r4
 80020e6:	d109      	bne.n	80020fc <__libc_init_array+0x24>
 80020e8:	f002 fa94 	bl	8004614 <_init>
 80020ec:	2500      	movs	r5, #0
 80020ee:	4e0a      	ldr	r6, [pc, #40]	; (8002118 <__libc_init_array+0x40>)
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <__libc_init_array+0x44>)
 80020f2:	1ba4      	subs	r4, r4, r6
 80020f4:	10a4      	asrs	r4, r4, #2
 80020f6:	42a5      	cmp	r5, r4
 80020f8:	d105      	bne.n	8002106 <__libc_init_array+0x2e>
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002100:	4798      	blx	r3
 8002102:	3501      	adds	r5, #1
 8002104:	e7ee      	b.n	80020e4 <__libc_init_array+0xc>
 8002106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800210a:	4798      	blx	r3
 800210c:	3501      	adds	r5, #1
 800210e:	e7f2      	b.n	80020f6 <__libc_init_array+0x1e>
 8002110:	080048ec 	.word	0x080048ec
 8002114:	080048ec 	.word	0x080048ec
 8002118:	080048ec 	.word	0x080048ec
 800211c:	080048f0 	.word	0x080048f0

08002120 <memset>:
 8002120:	4603      	mov	r3, r0
 8002122:	4402      	add	r2, r0
 8002124:	4293      	cmp	r3, r2
 8002126:	d100      	bne.n	800212a <memset+0xa>
 8002128:	4770      	bx	lr
 800212a:	f803 1b01 	strb.w	r1, [r3], #1
 800212e:	e7f9      	b.n	8002124 <memset+0x4>

08002130 <__cvt>:
 8002130:	2b00      	cmp	r3, #0
 8002132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002136:	461e      	mov	r6, r3
 8002138:	bfbb      	ittet	lt
 800213a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800213e:	461e      	movlt	r6, r3
 8002140:	2300      	movge	r3, #0
 8002142:	232d      	movlt	r3, #45	; 0x2d
 8002144:	b088      	sub	sp, #32
 8002146:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002148:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800214c:	f027 0720 	bic.w	r7, r7, #32
 8002150:	2f46      	cmp	r7, #70	; 0x46
 8002152:	4614      	mov	r4, r2
 8002154:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002156:	700b      	strb	r3, [r1, #0]
 8002158:	d004      	beq.n	8002164 <__cvt+0x34>
 800215a:	2f45      	cmp	r7, #69	; 0x45
 800215c:	d100      	bne.n	8002160 <__cvt+0x30>
 800215e:	3501      	adds	r5, #1
 8002160:	2302      	movs	r3, #2
 8002162:	e000      	b.n	8002166 <__cvt+0x36>
 8002164:	2303      	movs	r3, #3
 8002166:	aa07      	add	r2, sp, #28
 8002168:	9204      	str	r2, [sp, #16]
 800216a:	aa06      	add	r2, sp, #24
 800216c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002170:	e9cd 3500 	strd	r3, r5, [sp]
 8002174:	4622      	mov	r2, r4
 8002176:	4633      	mov	r3, r6
 8002178:	f000 fcda 	bl	8002b30 <_dtoa_r>
 800217c:	2f47      	cmp	r7, #71	; 0x47
 800217e:	4680      	mov	r8, r0
 8002180:	d102      	bne.n	8002188 <__cvt+0x58>
 8002182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002184:	07db      	lsls	r3, r3, #31
 8002186:	d526      	bpl.n	80021d6 <__cvt+0xa6>
 8002188:	2f46      	cmp	r7, #70	; 0x46
 800218a:	eb08 0905 	add.w	r9, r8, r5
 800218e:	d111      	bne.n	80021b4 <__cvt+0x84>
 8002190:	f898 3000 	ldrb.w	r3, [r8]
 8002194:	2b30      	cmp	r3, #48	; 0x30
 8002196:	d10a      	bne.n	80021ae <__cvt+0x7e>
 8002198:	2200      	movs	r2, #0
 800219a:	2300      	movs	r3, #0
 800219c:	4620      	mov	r0, r4
 800219e:	4631      	mov	r1, r6
 80021a0:	f7fe fc12 	bl	80009c8 <__aeabi_dcmpeq>
 80021a4:	b918      	cbnz	r0, 80021ae <__cvt+0x7e>
 80021a6:	f1c5 0501 	rsb	r5, r5, #1
 80021aa:	f8ca 5000 	str.w	r5, [sl]
 80021ae:	f8da 3000 	ldr.w	r3, [sl]
 80021b2:	4499      	add	r9, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	2300      	movs	r3, #0
 80021b8:	4620      	mov	r0, r4
 80021ba:	4631      	mov	r1, r6
 80021bc:	f7fe fc04 	bl	80009c8 <__aeabi_dcmpeq>
 80021c0:	b938      	cbnz	r0, 80021d2 <__cvt+0xa2>
 80021c2:	2230      	movs	r2, #48	; 0x30
 80021c4:	9b07      	ldr	r3, [sp, #28]
 80021c6:	454b      	cmp	r3, r9
 80021c8:	d205      	bcs.n	80021d6 <__cvt+0xa6>
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	9107      	str	r1, [sp, #28]
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e7f8      	b.n	80021c4 <__cvt+0x94>
 80021d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80021d6:	4640      	mov	r0, r8
 80021d8:	9b07      	ldr	r3, [sp, #28]
 80021da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80021dc:	eba3 0308 	sub.w	r3, r3, r8
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	b008      	add	sp, #32
 80021e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080021e8 <__exponent>:
 80021e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ea:	2900      	cmp	r1, #0
 80021ec:	bfb4      	ite	lt
 80021ee:	232d      	movlt	r3, #45	; 0x2d
 80021f0:	232b      	movge	r3, #43	; 0x2b
 80021f2:	4604      	mov	r4, r0
 80021f4:	bfb8      	it	lt
 80021f6:	4249      	neglt	r1, r1
 80021f8:	2909      	cmp	r1, #9
 80021fa:	f804 2b02 	strb.w	r2, [r4], #2
 80021fe:	7043      	strb	r3, [r0, #1]
 8002200:	dd21      	ble.n	8002246 <__exponent+0x5e>
 8002202:	f10d 0307 	add.w	r3, sp, #7
 8002206:	461f      	mov	r7, r3
 8002208:	260a      	movs	r6, #10
 800220a:	fb91 f5f6 	sdiv	r5, r1, r6
 800220e:	fb06 1115 	mls	r1, r6, r5, r1
 8002212:	2d09      	cmp	r5, #9
 8002214:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002218:	f803 1c01 	strb.w	r1, [r3, #-1]
 800221c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002220:	4629      	mov	r1, r5
 8002222:	dc09      	bgt.n	8002238 <__exponent+0x50>
 8002224:	3130      	adds	r1, #48	; 0x30
 8002226:	3b02      	subs	r3, #2
 8002228:	f802 1c01 	strb.w	r1, [r2, #-1]
 800222c:	42bb      	cmp	r3, r7
 800222e:	4622      	mov	r2, r4
 8002230:	d304      	bcc.n	800223c <__exponent+0x54>
 8002232:	1a10      	subs	r0, r2, r0
 8002234:	b003      	add	sp, #12
 8002236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002238:	4613      	mov	r3, r2
 800223a:	e7e6      	b.n	800220a <__exponent+0x22>
 800223c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002240:	f804 2b01 	strb.w	r2, [r4], #1
 8002244:	e7f2      	b.n	800222c <__exponent+0x44>
 8002246:	2330      	movs	r3, #48	; 0x30
 8002248:	4419      	add	r1, r3
 800224a:	7083      	strb	r3, [r0, #2]
 800224c:	1d02      	adds	r2, r0, #4
 800224e:	70c1      	strb	r1, [r0, #3]
 8002250:	e7ef      	b.n	8002232 <__exponent+0x4a>
	...

08002254 <_printf_float>:
 8002254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002258:	b091      	sub	sp, #68	; 0x44
 800225a:	460c      	mov	r4, r1
 800225c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800225e:	4693      	mov	fp, r2
 8002260:	461e      	mov	r6, r3
 8002262:	4605      	mov	r5, r0
 8002264:	f001 fa18 	bl	8003698 <_localeconv_r>
 8002268:	6803      	ldr	r3, [r0, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	9309      	str	r3, [sp, #36]	; 0x24
 800226e:	f7fd ff7f 	bl	8000170 <strlen>
 8002272:	2300      	movs	r3, #0
 8002274:	930e      	str	r3, [sp, #56]	; 0x38
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	900a      	str	r0, [sp, #40]	; 0x28
 800227a:	3307      	adds	r3, #7
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	f103 0208 	add.w	r2, r3, #8
 8002284:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002288:	f8d4 a000 	ldr.w	sl, [r4]
 800228c:	603a      	str	r2, [r7, #0]
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002296:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800229a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800229e:	930b      	str	r3, [sp, #44]	; 0x2c
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <_printf_float+0x2ec>)
 80022a6:	4638      	mov	r0, r7
 80022a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022aa:	f7fe fbbf 	bl	8000a2c <__aeabi_dcmpun>
 80022ae:	bb68      	cbnz	r0, 800230c <_printf_float+0xb8>
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	4ba2      	ldr	r3, [pc, #648]	; (8002540 <_printf_float+0x2ec>)
 80022b6:	4638      	mov	r0, r7
 80022b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022ba:	f7fe fb99 	bl	80009f0 <__aeabi_dcmple>
 80022be:	bb28      	cbnz	r0, 800230c <_printf_float+0xb8>
 80022c0:	2200      	movs	r2, #0
 80022c2:	2300      	movs	r3, #0
 80022c4:	4638      	mov	r0, r7
 80022c6:	4649      	mov	r1, r9
 80022c8:	f7fe fb88 	bl	80009dc <__aeabi_dcmplt>
 80022cc:	b110      	cbz	r0, 80022d4 <_printf_float+0x80>
 80022ce:	232d      	movs	r3, #45	; 0x2d
 80022d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d4:	4f9b      	ldr	r7, [pc, #620]	; (8002544 <_printf_float+0x2f0>)
 80022d6:	4b9c      	ldr	r3, [pc, #624]	; (8002548 <_printf_float+0x2f4>)
 80022d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022dc:	bf98      	it	ls
 80022de:	461f      	movls	r7, r3
 80022e0:	2303      	movs	r3, #3
 80022e2:	f04f 0900 	mov.w	r9, #0
 80022e6:	6123      	str	r3, [r4, #16]
 80022e8:	f02a 0304 	bic.w	r3, sl, #4
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	9600      	str	r6, [sp, #0]
 80022f0:	465b      	mov	r3, fp
 80022f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80022f4:	4621      	mov	r1, r4
 80022f6:	4628      	mov	r0, r5
 80022f8:	f000 f9e2 	bl	80026c0 <_printf_common>
 80022fc:	3001      	adds	r0, #1
 80022fe:	f040 8090 	bne.w	8002422 <_printf_float+0x1ce>
 8002302:	f04f 30ff 	mov.w	r0, #4294967295
 8002306:	b011      	add	sp, #68	; 0x44
 8002308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800230c:	463a      	mov	r2, r7
 800230e:	464b      	mov	r3, r9
 8002310:	4638      	mov	r0, r7
 8002312:	4649      	mov	r1, r9
 8002314:	f7fe fb8a 	bl	8000a2c <__aeabi_dcmpun>
 8002318:	b110      	cbz	r0, 8002320 <_printf_float+0xcc>
 800231a:	4f8c      	ldr	r7, [pc, #560]	; (800254c <_printf_float+0x2f8>)
 800231c:	4b8c      	ldr	r3, [pc, #560]	; (8002550 <_printf_float+0x2fc>)
 800231e:	e7db      	b.n	80022d8 <_printf_float+0x84>
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002326:	1c59      	adds	r1, r3, #1
 8002328:	a80d      	add	r0, sp, #52	; 0x34
 800232a:	a90e      	add	r1, sp, #56	; 0x38
 800232c:	d140      	bne.n	80023b0 <_printf_float+0x15c>
 800232e:	2306      	movs	r3, #6
 8002330:	6063      	str	r3, [r4, #4]
 8002332:	f04f 0c00 	mov.w	ip, #0
 8002336:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800233a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	6022      	str	r2, [r4, #0]
 8002342:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	463a      	mov	r2, r7
 800234a:	464b      	mov	r3, r9
 800234c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002350:	4628      	mov	r0, r5
 8002352:	f7ff feed 	bl	8002130 <__cvt>
 8002356:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800235a:	2b47      	cmp	r3, #71	; 0x47
 800235c:	4607      	mov	r7, r0
 800235e:	d109      	bne.n	8002374 <_printf_float+0x120>
 8002360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002362:	1cd8      	adds	r0, r3, #3
 8002364:	db02      	blt.n	800236c <_printf_float+0x118>
 8002366:	6862      	ldr	r2, [r4, #4]
 8002368:	4293      	cmp	r3, r2
 800236a:	dd47      	ble.n	80023fc <_printf_float+0x1a8>
 800236c:	f1a8 0802 	sub.w	r8, r8, #2
 8002370:	fa5f f888 	uxtb.w	r8, r8
 8002374:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002378:	990d      	ldr	r1, [sp, #52]	; 0x34
 800237a:	d824      	bhi.n	80023c6 <_printf_float+0x172>
 800237c:	3901      	subs	r1, #1
 800237e:	4642      	mov	r2, r8
 8002380:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002384:	910d      	str	r1, [sp, #52]	; 0x34
 8002386:	f7ff ff2f 	bl	80021e8 <__exponent>
 800238a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800238c:	4681      	mov	r9, r0
 800238e:	1813      	adds	r3, r2, r0
 8002390:	2a01      	cmp	r2, #1
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	dc02      	bgt.n	800239c <_printf_float+0x148>
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	07d1      	lsls	r1, r2, #31
 800239a:	d501      	bpl.n	80023a0 <_printf_float+0x14c>
 800239c:	3301      	adds	r3, #1
 800239e:	6123      	str	r3, [r4, #16]
 80023a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0a2      	beq.n	80022ee <_printf_float+0x9a>
 80023a8:	232d      	movs	r3, #45	; 0x2d
 80023aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ae:	e79e      	b.n	80022ee <_printf_float+0x9a>
 80023b0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80023b4:	f000 816e 	beq.w	8002694 <_printf_float+0x440>
 80023b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023bc:	d1b9      	bne.n	8002332 <_printf_float+0xde>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1b7      	bne.n	8002332 <_printf_float+0xde>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e7b4      	b.n	8002330 <_printf_float+0xdc>
 80023c6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80023ca:	d119      	bne.n	8002400 <_printf_float+0x1ac>
 80023cc:	2900      	cmp	r1, #0
 80023ce:	6863      	ldr	r3, [r4, #4]
 80023d0:	dd0c      	ble.n	80023ec <_printf_float+0x198>
 80023d2:	6121      	str	r1, [r4, #16]
 80023d4:	b913      	cbnz	r3, 80023dc <_printf_float+0x188>
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	07d2      	lsls	r2, r2, #31
 80023da:	d502      	bpl.n	80023e2 <_printf_float+0x18e>
 80023dc:	3301      	adds	r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	6123      	str	r3, [r4, #16]
 80023e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023e4:	f04f 0900 	mov.w	r9, #0
 80023e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80023ea:	e7d9      	b.n	80023a0 <_printf_float+0x14c>
 80023ec:	b913      	cbnz	r3, 80023f4 <_printf_float+0x1a0>
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	07d0      	lsls	r0, r2, #31
 80023f2:	d501      	bpl.n	80023f8 <_printf_float+0x1a4>
 80023f4:	3302      	adds	r3, #2
 80023f6:	e7f3      	b.n	80023e0 <_printf_float+0x18c>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e7f1      	b.n	80023e0 <_printf_float+0x18c>
 80023fc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002400:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002404:	4293      	cmp	r3, r2
 8002406:	db05      	blt.n	8002414 <_printf_float+0x1c0>
 8002408:	6822      	ldr	r2, [r4, #0]
 800240a:	6123      	str	r3, [r4, #16]
 800240c:	07d1      	lsls	r1, r2, #31
 800240e:	d5e8      	bpl.n	80023e2 <_printf_float+0x18e>
 8002410:	3301      	adds	r3, #1
 8002412:	e7e5      	b.n	80023e0 <_printf_float+0x18c>
 8002414:	2b00      	cmp	r3, #0
 8002416:	bfcc      	ite	gt
 8002418:	2301      	movgt	r3, #1
 800241a:	f1c3 0302 	rsble	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	e7de      	b.n	80023e0 <_printf_float+0x18c>
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	055a      	lsls	r2, r3, #21
 8002426:	d407      	bmi.n	8002438 <_printf_float+0x1e4>
 8002428:	6923      	ldr	r3, [r4, #16]
 800242a:	463a      	mov	r2, r7
 800242c:	4659      	mov	r1, fp
 800242e:	4628      	mov	r0, r5
 8002430:	47b0      	blx	r6
 8002432:	3001      	adds	r0, #1
 8002434:	d129      	bne.n	800248a <_printf_float+0x236>
 8002436:	e764      	b.n	8002302 <_printf_float+0xae>
 8002438:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800243c:	f240 80d7 	bls.w	80025ee <_printf_float+0x39a>
 8002440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002444:	2200      	movs	r2, #0
 8002446:	2300      	movs	r3, #0
 8002448:	f7fe fabe 	bl	80009c8 <__aeabi_dcmpeq>
 800244c:	b388      	cbz	r0, 80024b2 <_printf_float+0x25e>
 800244e:	2301      	movs	r3, #1
 8002450:	4a40      	ldr	r2, [pc, #256]	; (8002554 <_printf_float+0x300>)
 8002452:	4659      	mov	r1, fp
 8002454:	4628      	mov	r0, r5
 8002456:	47b0      	blx	r6
 8002458:	3001      	adds	r0, #1
 800245a:	f43f af52 	beq.w	8002302 <_printf_float+0xae>
 800245e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002462:	429a      	cmp	r2, r3
 8002464:	db02      	blt.n	800246c <_printf_float+0x218>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	07d8      	lsls	r0, r3, #31
 800246a:	d50e      	bpl.n	800248a <_printf_float+0x236>
 800246c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002470:	4659      	mov	r1, fp
 8002472:	4628      	mov	r0, r5
 8002474:	47b0      	blx	r6
 8002476:	3001      	adds	r0, #1
 8002478:	f43f af43 	beq.w	8002302 <_printf_float+0xae>
 800247c:	2700      	movs	r7, #0
 800247e:	f104 081a 	add.w	r8, r4, #26
 8002482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002484:	3b01      	subs	r3, #1
 8002486:	42bb      	cmp	r3, r7
 8002488:	dc09      	bgt.n	800249e <_printf_float+0x24a>
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	079f      	lsls	r7, r3, #30
 800248e:	f100 80fd 	bmi.w	800268c <_printf_float+0x438>
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002496:	4298      	cmp	r0, r3
 8002498:	bfb8      	it	lt
 800249a:	4618      	movlt	r0, r3
 800249c:	e733      	b.n	8002306 <_printf_float+0xb2>
 800249e:	2301      	movs	r3, #1
 80024a0:	4642      	mov	r2, r8
 80024a2:	4659      	mov	r1, fp
 80024a4:	4628      	mov	r0, r5
 80024a6:	47b0      	blx	r6
 80024a8:	3001      	adds	r0, #1
 80024aa:	f43f af2a 	beq.w	8002302 <_printf_float+0xae>
 80024ae:	3701      	adds	r7, #1
 80024b0:	e7e7      	b.n	8002482 <_printf_float+0x22e>
 80024b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	dc2b      	bgt.n	8002510 <_printf_float+0x2bc>
 80024b8:	2301      	movs	r3, #1
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <_printf_float+0x300>)
 80024bc:	4659      	mov	r1, fp
 80024be:	4628      	mov	r0, r5
 80024c0:	47b0      	blx	r6
 80024c2:	3001      	adds	r0, #1
 80024c4:	f43f af1d 	beq.w	8002302 <_printf_float+0xae>
 80024c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024ca:	b923      	cbnz	r3, 80024d6 <_printf_float+0x282>
 80024cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024ce:	b913      	cbnz	r3, 80024d6 <_printf_float+0x282>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	07d9      	lsls	r1, r3, #31
 80024d4:	d5d9      	bpl.n	800248a <_printf_float+0x236>
 80024d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024da:	4659      	mov	r1, fp
 80024dc:	4628      	mov	r0, r5
 80024de:	47b0      	blx	r6
 80024e0:	3001      	adds	r0, #1
 80024e2:	f43f af0e 	beq.w	8002302 <_printf_float+0xae>
 80024e6:	f04f 0800 	mov.w	r8, #0
 80024ea:	f104 091a 	add.w	r9, r4, #26
 80024ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024f0:	425b      	negs	r3, r3
 80024f2:	4543      	cmp	r3, r8
 80024f4:	dc01      	bgt.n	80024fa <_printf_float+0x2a6>
 80024f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024f8:	e797      	b.n	800242a <_printf_float+0x1d6>
 80024fa:	2301      	movs	r3, #1
 80024fc:	464a      	mov	r2, r9
 80024fe:	4659      	mov	r1, fp
 8002500:	4628      	mov	r0, r5
 8002502:	47b0      	blx	r6
 8002504:	3001      	adds	r0, #1
 8002506:	f43f aefc 	beq.w	8002302 <_printf_float+0xae>
 800250a:	f108 0801 	add.w	r8, r8, #1
 800250e:	e7ee      	b.n	80024ee <_printf_float+0x29a>
 8002510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002514:	429a      	cmp	r2, r3
 8002516:	bfa8      	it	ge
 8002518:	461a      	movge	r2, r3
 800251a:	2a00      	cmp	r2, #0
 800251c:	4690      	mov	r8, r2
 800251e:	dd07      	ble.n	8002530 <_printf_float+0x2dc>
 8002520:	4613      	mov	r3, r2
 8002522:	4659      	mov	r1, fp
 8002524:	463a      	mov	r2, r7
 8002526:	4628      	mov	r0, r5
 8002528:	47b0      	blx	r6
 800252a:	3001      	adds	r0, #1
 800252c:	f43f aee9 	beq.w	8002302 <_printf_float+0xae>
 8002530:	f104 031a 	add.w	r3, r4, #26
 8002534:	f04f 0a00 	mov.w	sl, #0
 8002538:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800253c:	930b      	str	r3, [sp, #44]	; 0x2c
 800253e:	e015      	b.n	800256c <_printf_float+0x318>
 8002540:	7fefffff 	.word	0x7fefffff
 8002544:	08004691 	.word	0x08004691
 8002548:	0800468d 	.word	0x0800468d
 800254c:	08004699 	.word	0x08004699
 8002550:	08004695 	.word	0x08004695
 8002554:	0800469d 	.word	0x0800469d
 8002558:	2301      	movs	r3, #1
 800255a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800255c:	4659      	mov	r1, fp
 800255e:	4628      	mov	r0, r5
 8002560:	47b0      	blx	r6
 8002562:	3001      	adds	r0, #1
 8002564:	f43f aecd 	beq.w	8002302 <_printf_float+0xae>
 8002568:	f10a 0a01 	add.w	sl, sl, #1
 800256c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002570:	eba9 0308 	sub.w	r3, r9, r8
 8002574:	4553      	cmp	r3, sl
 8002576:	dcef      	bgt.n	8002558 <_printf_float+0x304>
 8002578:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800257c:	429a      	cmp	r2, r3
 800257e:	444f      	add	r7, r9
 8002580:	db14      	blt.n	80025ac <_printf_float+0x358>
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	07da      	lsls	r2, r3, #31
 8002586:	d411      	bmi.n	80025ac <_printf_float+0x358>
 8002588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800258a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800258c:	eba3 0209 	sub.w	r2, r3, r9
 8002590:	eba3 0901 	sub.w	r9, r3, r1
 8002594:	4591      	cmp	r9, r2
 8002596:	bfa8      	it	ge
 8002598:	4691      	movge	r9, r2
 800259a:	f1b9 0f00 	cmp.w	r9, #0
 800259e:	dc0d      	bgt.n	80025bc <_printf_float+0x368>
 80025a0:	2700      	movs	r7, #0
 80025a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025a6:	f104 081a 	add.w	r8, r4, #26
 80025aa:	e018      	b.n	80025de <_printf_float+0x38a>
 80025ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025b0:	4659      	mov	r1, fp
 80025b2:	4628      	mov	r0, r5
 80025b4:	47b0      	blx	r6
 80025b6:	3001      	adds	r0, #1
 80025b8:	d1e6      	bne.n	8002588 <_printf_float+0x334>
 80025ba:	e6a2      	b.n	8002302 <_printf_float+0xae>
 80025bc:	464b      	mov	r3, r9
 80025be:	463a      	mov	r2, r7
 80025c0:	4659      	mov	r1, fp
 80025c2:	4628      	mov	r0, r5
 80025c4:	47b0      	blx	r6
 80025c6:	3001      	adds	r0, #1
 80025c8:	d1ea      	bne.n	80025a0 <_printf_float+0x34c>
 80025ca:	e69a      	b.n	8002302 <_printf_float+0xae>
 80025cc:	2301      	movs	r3, #1
 80025ce:	4642      	mov	r2, r8
 80025d0:	4659      	mov	r1, fp
 80025d2:	4628      	mov	r0, r5
 80025d4:	47b0      	blx	r6
 80025d6:	3001      	adds	r0, #1
 80025d8:	f43f ae93 	beq.w	8002302 <_printf_float+0xae>
 80025dc:	3701      	adds	r7, #1
 80025de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	eba3 0309 	sub.w	r3, r3, r9
 80025e8:	42bb      	cmp	r3, r7
 80025ea:	dcef      	bgt.n	80025cc <_printf_float+0x378>
 80025ec:	e74d      	b.n	800248a <_printf_float+0x236>
 80025ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	dc01      	bgt.n	80025f8 <_printf_float+0x3a4>
 80025f4:	07db      	lsls	r3, r3, #31
 80025f6:	d538      	bpl.n	800266a <_printf_float+0x416>
 80025f8:	2301      	movs	r3, #1
 80025fa:	463a      	mov	r2, r7
 80025fc:	4659      	mov	r1, fp
 80025fe:	4628      	mov	r0, r5
 8002600:	47b0      	blx	r6
 8002602:	3001      	adds	r0, #1
 8002604:	f43f ae7d 	beq.w	8002302 <_printf_float+0xae>
 8002608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800260c:	4659      	mov	r1, fp
 800260e:	4628      	mov	r0, r5
 8002610:	47b0      	blx	r6
 8002612:	3001      	adds	r0, #1
 8002614:	f107 0701 	add.w	r7, r7, #1
 8002618:	f43f ae73 	beq.w	8002302 <_printf_float+0xae>
 800261c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002622:	2200      	movs	r2, #0
 8002624:	f103 38ff 	add.w	r8, r3, #4294967295
 8002628:	2300      	movs	r3, #0
 800262a:	f7fe f9cd 	bl	80009c8 <__aeabi_dcmpeq>
 800262e:	b9c0      	cbnz	r0, 8002662 <_printf_float+0x40e>
 8002630:	4643      	mov	r3, r8
 8002632:	463a      	mov	r2, r7
 8002634:	4659      	mov	r1, fp
 8002636:	4628      	mov	r0, r5
 8002638:	47b0      	blx	r6
 800263a:	3001      	adds	r0, #1
 800263c:	d10d      	bne.n	800265a <_printf_float+0x406>
 800263e:	e660      	b.n	8002302 <_printf_float+0xae>
 8002640:	2301      	movs	r3, #1
 8002642:	4642      	mov	r2, r8
 8002644:	4659      	mov	r1, fp
 8002646:	4628      	mov	r0, r5
 8002648:	47b0      	blx	r6
 800264a:	3001      	adds	r0, #1
 800264c:	f43f ae59 	beq.w	8002302 <_printf_float+0xae>
 8002650:	3701      	adds	r7, #1
 8002652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002654:	3b01      	subs	r3, #1
 8002656:	42bb      	cmp	r3, r7
 8002658:	dcf2      	bgt.n	8002640 <_printf_float+0x3ec>
 800265a:	464b      	mov	r3, r9
 800265c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002660:	e6e4      	b.n	800242c <_printf_float+0x1d8>
 8002662:	2700      	movs	r7, #0
 8002664:	f104 081a 	add.w	r8, r4, #26
 8002668:	e7f3      	b.n	8002652 <_printf_float+0x3fe>
 800266a:	2301      	movs	r3, #1
 800266c:	e7e1      	b.n	8002632 <_printf_float+0x3de>
 800266e:	2301      	movs	r3, #1
 8002670:	4642      	mov	r2, r8
 8002672:	4659      	mov	r1, fp
 8002674:	4628      	mov	r0, r5
 8002676:	47b0      	blx	r6
 8002678:	3001      	adds	r0, #1
 800267a:	f43f ae42 	beq.w	8002302 <_printf_float+0xae>
 800267e:	3701      	adds	r7, #1
 8002680:	68e3      	ldr	r3, [r4, #12]
 8002682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	42bb      	cmp	r3, r7
 8002688:	dcf1      	bgt.n	800266e <_printf_float+0x41a>
 800268a:	e702      	b.n	8002492 <_printf_float+0x23e>
 800268c:	2700      	movs	r7, #0
 800268e:	f104 0819 	add.w	r8, r4, #25
 8002692:	e7f5      	b.n	8002680 <_printf_float+0x42c>
 8002694:	2b00      	cmp	r3, #0
 8002696:	f43f ae94 	beq.w	80023c2 <_printf_float+0x16e>
 800269a:	f04f 0c00 	mov.w	ip, #0
 800269e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80026a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80026a6:	6022      	str	r2, [r4, #0]
 80026a8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80026ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	463a      	mov	r2, r7
 80026b4:	464b      	mov	r3, r9
 80026b6:	4628      	mov	r0, r5
 80026b8:	f7ff fd3a 	bl	8002130 <__cvt>
 80026bc:	4607      	mov	r7, r0
 80026be:	e64f      	b.n	8002360 <_printf_float+0x10c>

080026c0 <_printf_common>:
 80026c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c4:	4691      	mov	r9, r2
 80026c6:	461f      	mov	r7, r3
 80026c8:	688a      	ldr	r2, [r1, #8]
 80026ca:	690b      	ldr	r3, [r1, #16]
 80026cc:	4606      	mov	r6, r0
 80026ce:	4293      	cmp	r3, r2
 80026d0:	bfb8      	it	lt
 80026d2:	4613      	movlt	r3, r2
 80026d4:	f8c9 3000 	str.w	r3, [r9]
 80026d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026dc:	460c      	mov	r4, r1
 80026de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026e2:	b112      	cbz	r2, 80026ea <_printf_common+0x2a>
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c9 3000 	str.w	r3, [r9]
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	0699      	lsls	r1, r3, #26
 80026ee:	bf42      	ittt	mi
 80026f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026f4:	3302      	addmi	r3, #2
 80026f6:	f8c9 3000 	strmi.w	r3, [r9]
 80026fa:	6825      	ldr	r5, [r4, #0]
 80026fc:	f015 0506 	ands.w	r5, r5, #6
 8002700:	d107      	bne.n	8002712 <_printf_common+0x52>
 8002702:	f104 0a19 	add.w	sl, r4, #25
 8002706:	68e3      	ldr	r3, [r4, #12]
 8002708:	f8d9 2000 	ldr.w	r2, [r9]
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	42ab      	cmp	r3, r5
 8002710:	dc29      	bgt.n	8002766 <_printf_common+0xa6>
 8002712:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	3300      	adds	r3, #0
 800271a:	bf18      	it	ne
 800271c:	2301      	movne	r3, #1
 800271e:	0692      	lsls	r2, r2, #26
 8002720:	d42e      	bmi.n	8002780 <_printf_common+0xc0>
 8002722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002726:	4639      	mov	r1, r7
 8002728:	4630      	mov	r0, r6
 800272a:	47c0      	blx	r8
 800272c:	3001      	adds	r0, #1
 800272e:	d021      	beq.n	8002774 <_printf_common+0xb4>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	68e5      	ldr	r5, [r4, #12]
 8002734:	f003 0306 	and.w	r3, r3, #6
 8002738:	2b04      	cmp	r3, #4
 800273a:	bf18      	it	ne
 800273c:	2500      	movne	r5, #0
 800273e:	f8d9 2000 	ldr.w	r2, [r9]
 8002742:	f04f 0900 	mov.w	r9, #0
 8002746:	bf08      	it	eq
 8002748:	1aad      	subeq	r5, r5, r2
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	6922      	ldr	r2, [r4, #16]
 800274e:	bf08      	it	eq
 8002750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002754:	4293      	cmp	r3, r2
 8002756:	bfc4      	itt	gt
 8002758:	1a9b      	subgt	r3, r3, r2
 800275a:	18ed      	addgt	r5, r5, r3
 800275c:	341a      	adds	r4, #26
 800275e:	454d      	cmp	r5, r9
 8002760:	d11a      	bne.n	8002798 <_printf_common+0xd8>
 8002762:	2000      	movs	r0, #0
 8002764:	e008      	b.n	8002778 <_printf_common+0xb8>
 8002766:	2301      	movs	r3, #1
 8002768:	4652      	mov	r2, sl
 800276a:	4639      	mov	r1, r7
 800276c:	4630      	mov	r0, r6
 800276e:	47c0      	blx	r8
 8002770:	3001      	adds	r0, #1
 8002772:	d103      	bne.n	800277c <_printf_common+0xbc>
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800277c:	3501      	adds	r5, #1
 800277e:	e7c2      	b.n	8002706 <_printf_common+0x46>
 8002780:	2030      	movs	r0, #48	; 0x30
 8002782:	18e1      	adds	r1, r4, r3
 8002784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800278e:	4422      	add	r2, r4
 8002790:	3302      	adds	r3, #2
 8002792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002796:	e7c4      	b.n	8002722 <_printf_common+0x62>
 8002798:	2301      	movs	r3, #1
 800279a:	4622      	mov	r2, r4
 800279c:	4639      	mov	r1, r7
 800279e:	4630      	mov	r0, r6
 80027a0:	47c0      	blx	r8
 80027a2:	3001      	adds	r0, #1
 80027a4:	d0e6      	beq.n	8002774 <_printf_common+0xb4>
 80027a6:	f109 0901 	add.w	r9, r9, #1
 80027aa:	e7d8      	b.n	800275e <_printf_common+0x9e>

080027ac <_printf_i>:
 80027ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80027b4:	460c      	mov	r4, r1
 80027b6:	7e09      	ldrb	r1, [r1, #24]
 80027b8:	b085      	sub	sp, #20
 80027ba:	296e      	cmp	r1, #110	; 0x6e
 80027bc:	4617      	mov	r7, r2
 80027be:	4606      	mov	r6, r0
 80027c0:	4698      	mov	r8, r3
 80027c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027c4:	f000 80b3 	beq.w	800292e <_printf_i+0x182>
 80027c8:	d822      	bhi.n	8002810 <_printf_i+0x64>
 80027ca:	2963      	cmp	r1, #99	; 0x63
 80027cc:	d036      	beq.n	800283c <_printf_i+0x90>
 80027ce:	d80a      	bhi.n	80027e6 <_printf_i+0x3a>
 80027d0:	2900      	cmp	r1, #0
 80027d2:	f000 80b9 	beq.w	8002948 <_printf_i+0x19c>
 80027d6:	2958      	cmp	r1, #88	; 0x58
 80027d8:	f000 8083 	beq.w	80028e2 <_printf_i+0x136>
 80027dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80027e4:	e032      	b.n	800284c <_printf_i+0xa0>
 80027e6:	2964      	cmp	r1, #100	; 0x64
 80027e8:	d001      	beq.n	80027ee <_printf_i+0x42>
 80027ea:	2969      	cmp	r1, #105	; 0x69
 80027ec:	d1f6      	bne.n	80027dc <_printf_i+0x30>
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	6813      	ldr	r3, [r2, #0]
 80027f2:	0605      	lsls	r5, r0, #24
 80027f4:	f103 0104 	add.w	r1, r3, #4
 80027f8:	d52a      	bpl.n	8002850 <_printf_i+0xa4>
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da03      	bge.n	800280a <_printf_i+0x5e>
 8002802:	222d      	movs	r2, #45	; 0x2d
 8002804:	425b      	negs	r3, r3
 8002806:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800280a:	486f      	ldr	r0, [pc, #444]	; (80029c8 <_printf_i+0x21c>)
 800280c:	220a      	movs	r2, #10
 800280e:	e039      	b.n	8002884 <_printf_i+0xd8>
 8002810:	2973      	cmp	r1, #115	; 0x73
 8002812:	f000 809d 	beq.w	8002950 <_printf_i+0x1a4>
 8002816:	d808      	bhi.n	800282a <_printf_i+0x7e>
 8002818:	296f      	cmp	r1, #111	; 0x6f
 800281a:	d020      	beq.n	800285e <_printf_i+0xb2>
 800281c:	2970      	cmp	r1, #112	; 0x70
 800281e:	d1dd      	bne.n	80027dc <_printf_i+0x30>
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f043 0320 	orr.w	r3, r3, #32
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	e003      	b.n	8002832 <_printf_i+0x86>
 800282a:	2975      	cmp	r1, #117	; 0x75
 800282c:	d017      	beq.n	800285e <_printf_i+0xb2>
 800282e:	2978      	cmp	r1, #120	; 0x78
 8002830:	d1d4      	bne.n	80027dc <_printf_i+0x30>
 8002832:	2378      	movs	r3, #120	; 0x78
 8002834:	4865      	ldr	r0, [pc, #404]	; (80029cc <_printf_i+0x220>)
 8002836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800283a:	e055      	b.n	80028e8 <_printf_i+0x13c>
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002842:	1d19      	adds	r1, r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6011      	str	r1, [r2, #0]
 8002848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800284c:	2301      	movs	r3, #1
 800284e:	e08c      	b.n	800296a <_printf_i+0x1be>
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	bf18      	it	ne
 800285a:	b21b      	sxthne	r3, r3
 800285c:	e7cf      	b.n	80027fe <_printf_i+0x52>
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	6825      	ldr	r5, [r4, #0]
 8002862:	1d18      	adds	r0, r3, #4
 8002864:	6010      	str	r0, [r2, #0]
 8002866:	0628      	lsls	r0, r5, #24
 8002868:	d501      	bpl.n	800286e <_printf_i+0xc2>
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	e002      	b.n	8002874 <_printf_i+0xc8>
 800286e:	0668      	lsls	r0, r5, #25
 8002870:	d5fb      	bpl.n	800286a <_printf_i+0xbe>
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	296f      	cmp	r1, #111	; 0x6f
 8002876:	bf14      	ite	ne
 8002878:	220a      	movne	r2, #10
 800287a:	2208      	moveq	r2, #8
 800287c:	4852      	ldr	r0, [pc, #328]	; (80029c8 <_printf_i+0x21c>)
 800287e:	2100      	movs	r1, #0
 8002880:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002884:	6865      	ldr	r5, [r4, #4]
 8002886:	2d00      	cmp	r5, #0
 8002888:	60a5      	str	r5, [r4, #8]
 800288a:	f2c0 8095 	blt.w	80029b8 <_printf_i+0x20c>
 800288e:	6821      	ldr	r1, [r4, #0]
 8002890:	f021 0104 	bic.w	r1, r1, #4
 8002894:	6021      	str	r1, [r4, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d13d      	bne.n	8002916 <_printf_i+0x16a>
 800289a:	2d00      	cmp	r5, #0
 800289c:	f040 808e 	bne.w	80029bc <_printf_i+0x210>
 80028a0:	4665      	mov	r5, ip
 80028a2:	2a08      	cmp	r2, #8
 80028a4:	d10b      	bne.n	80028be <_printf_i+0x112>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	07db      	lsls	r3, r3, #31
 80028aa:	d508      	bpl.n	80028be <_printf_i+0x112>
 80028ac:	6923      	ldr	r3, [r4, #16]
 80028ae:	6862      	ldr	r2, [r4, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	bfde      	ittt	le
 80028b4:	2330      	movle	r3, #48	; 0x30
 80028b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028be:	ebac 0305 	sub.w	r3, ip, r5
 80028c2:	6123      	str	r3, [r4, #16]
 80028c4:	f8cd 8000 	str.w	r8, [sp]
 80028c8:	463b      	mov	r3, r7
 80028ca:	aa03      	add	r2, sp, #12
 80028cc:	4621      	mov	r1, r4
 80028ce:	4630      	mov	r0, r6
 80028d0:	f7ff fef6 	bl	80026c0 <_printf_common>
 80028d4:	3001      	adds	r0, #1
 80028d6:	d14d      	bne.n	8002974 <_printf_i+0x1c8>
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	b005      	add	sp, #20
 80028de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028e2:	4839      	ldr	r0, [pc, #228]	; (80029c8 <_printf_i+0x21c>)
 80028e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	6821      	ldr	r1, [r4, #0]
 80028ec:	1d1d      	adds	r5, r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6015      	str	r5, [r2, #0]
 80028f2:	060a      	lsls	r2, r1, #24
 80028f4:	d50b      	bpl.n	800290e <_printf_i+0x162>
 80028f6:	07ca      	lsls	r2, r1, #31
 80028f8:	bf44      	itt	mi
 80028fa:	f041 0120 	orrmi.w	r1, r1, #32
 80028fe:	6021      	strmi	r1, [r4, #0]
 8002900:	b91b      	cbnz	r3, 800290a <_printf_i+0x15e>
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	f022 0220 	bic.w	r2, r2, #32
 8002908:	6022      	str	r2, [r4, #0]
 800290a:	2210      	movs	r2, #16
 800290c:	e7b7      	b.n	800287e <_printf_i+0xd2>
 800290e:	064d      	lsls	r5, r1, #25
 8002910:	bf48      	it	mi
 8002912:	b29b      	uxthmi	r3, r3
 8002914:	e7ef      	b.n	80028f6 <_printf_i+0x14a>
 8002916:	4665      	mov	r5, ip
 8002918:	fbb3 f1f2 	udiv	r1, r3, r2
 800291c:	fb02 3311 	mls	r3, r2, r1, r3
 8002920:	5cc3      	ldrb	r3, [r0, r3]
 8002922:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002926:	460b      	mov	r3, r1
 8002928:	2900      	cmp	r1, #0
 800292a:	d1f5      	bne.n	8002918 <_printf_i+0x16c>
 800292c:	e7b9      	b.n	80028a2 <_printf_i+0xf6>
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	6825      	ldr	r5, [r4, #0]
 8002932:	1d18      	adds	r0, r3, #4
 8002934:	6961      	ldr	r1, [r4, #20]
 8002936:	6010      	str	r0, [r2, #0]
 8002938:	0628      	lsls	r0, r5, #24
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	d501      	bpl.n	8002942 <_printf_i+0x196>
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	e002      	b.n	8002948 <_printf_i+0x19c>
 8002942:	066a      	lsls	r2, r5, #25
 8002944:	d5fb      	bpl.n	800293e <_printf_i+0x192>
 8002946:	8019      	strh	r1, [r3, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	4665      	mov	r5, ip
 800294c:	6123      	str	r3, [r4, #16]
 800294e:	e7b9      	b.n	80028c4 <_printf_i+0x118>
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	1d19      	adds	r1, r3, #4
 8002954:	6011      	str	r1, [r2, #0]
 8002956:	681d      	ldr	r5, [r3, #0]
 8002958:	6862      	ldr	r2, [r4, #4]
 800295a:	2100      	movs	r1, #0
 800295c:	4628      	mov	r0, r5
 800295e:	f000 feb1 	bl	80036c4 <memchr>
 8002962:	b108      	cbz	r0, 8002968 <_printf_i+0x1bc>
 8002964:	1b40      	subs	r0, r0, r5
 8002966:	6060      	str	r0, [r4, #4]
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	6123      	str	r3, [r4, #16]
 800296c:	2300      	movs	r3, #0
 800296e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002972:	e7a7      	b.n	80028c4 <_printf_i+0x118>
 8002974:	6923      	ldr	r3, [r4, #16]
 8002976:	462a      	mov	r2, r5
 8002978:	4639      	mov	r1, r7
 800297a:	4630      	mov	r0, r6
 800297c:	47c0      	blx	r8
 800297e:	3001      	adds	r0, #1
 8002980:	d0aa      	beq.n	80028d8 <_printf_i+0x12c>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	079b      	lsls	r3, r3, #30
 8002986:	d413      	bmi.n	80029b0 <_printf_i+0x204>
 8002988:	68e0      	ldr	r0, [r4, #12]
 800298a:	9b03      	ldr	r3, [sp, #12]
 800298c:	4298      	cmp	r0, r3
 800298e:	bfb8      	it	lt
 8002990:	4618      	movlt	r0, r3
 8002992:	e7a3      	b.n	80028dc <_printf_i+0x130>
 8002994:	2301      	movs	r3, #1
 8002996:	464a      	mov	r2, r9
 8002998:	4639      	mov	r1, r7
 800299a:	4630      	mov	r0, r6
 800299c:	47c0      	blx	r8
 800299e:	3001      	adds	r0, #1
 80029a0:	d09a      	beq.n	80028d8 <_printf_i+0x12c>
 80029a2:	3501      	adds	r5, #1
 80029a4:	68e3      	ldr	r3, [r4, #12]
 80029a6:	9a03      	ldr	r2, [sp, #12]
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	dcf2      	bgt.n	8002994 <_printf_i+0x1e8>
 80029ae:	e7eb      	b.n	8002988 <_printf_i+0x1dc>
 80029b0:	2500      	movs	r5, #0
 80029b2:	f104 0919 	add.w	r9, r4, #25
 80029b6:	e7f5      	b.n	80029a4 <_printf_i+0x1f8>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ac      	bne.n	8002916 <_printf_i+0x16a>
 80029bc:	7803      	ldrb	r3, [r0, #0]
 80029be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c6:	e76c      	b.n	80028a2 <_printf_i+0xf6>
 80029c8:	0800469f 	.word	0x0800469f
 80029cc:	080046b0 	.word	0x080046b0

080029d0 <siprintf>:
 80029d0:	b40e      	push	{r1, r2, r3}
 80029d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029d6:	b500      	push	{lr}
 80029d8:	b09c      	sub	sp, #112	; 0x70
 80029da:	ab1d      	add	r3, sp, #116	; 0x74
 80029dc:	9002      	str	r0, [sp, #8]
 80029de:	9006      	str	r0, [sp, #24]
 80029e0:	9107      	str	r1, [sp, #28]
 80029e2:	9104      	str	r1, [sp, #16]
 80029e4:	4808      	ldr	r0, [pc, #32]	; (8002a08 <siprintf+0x38>)
 80029e6:	4909      	ldr	r1, [pc, #36]	; (8002a0c <siprintf+0x3c>)
 80029e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029ec:	9105      	str	r1, [sp, #20]
 80029ee:	6800      	ldr	r0, [r0, #0]
 80029f0:	a902      	add	r1, sp, #8
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	f001 fa6a 	bl	8003ecc <_svfiprintf_r>
 80029f8:	2200      	movs	r2, #0
 80029fa:	9b02      	ldr	r3, [sp, #8]
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	b01c      	add	sp, #112	; 0x70
 8002a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a04:	b003      	add	sp, #12
 8002a06:	4770      	bx	lr
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	ffff0208 	.word	0xffff0208

08002a10 <quorem>:
 8002a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	6903      	ldr	r3, [r0, #16]
 8002a16:	690c      	ldr	r4, [r1, #16]
 8002a18:	4680      	mov	r8, r0
 8002a1a:	42a3      	cmp	r3, r4
 8002a1c:	f2c0 8084 	blt.w	8002b28 <quorem+0x118>
 8002a20:	3c01      	subs	r4, #1
 8002a22:	f101 0714 	add.w	r7, r1, #20
 8002a26:	f100 0614 	add.w	r6, r0, #20
 8002a2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002a2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a32:	3501      	adds	r5, #1
 8002a34:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002a3c:	eb06 030c 	add.w	r3, r6, ip
 8002a40:	eb07 090c 	add.w	r9, r7, ip
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	b39d      	cbz	r5, 8002ab0 <quorem+0xa0>
 8002a48:	f04f 0a00 	mov.w	sl, #0
 8002a4c:	4638      	mov	r0, r7
 8002a4e:	46b6      	mov	lr, r6
 8002a50:	46d3      	mov	fp, sl
 8002a52:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a56:	b293      	uxth	r3, r2
 8002a58:	fb05 a303 	mla	r3, r5, r3, sl
 8002a5c:	0c12      	lsrs	r2, r2, #16
 8002a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a62:	fb05 a202 	mla	r2, r5, r2, sl
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	ebab 0303 	sub.w	r3, fp, r3
 8002a6c:	f8de b000 	ldr.w	fp, [lr]
 8002a70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002a74:	fa1f fb8b 	uxth.w	fp, fp
 8002a78:	445b      	add	r3, fp
 8002a7a:	fa1f fb82 	uxth.w	fp, r2
 8002a7e:	f8de 2000 	ldr.w	r2, [lr]
 8002a82:	4581      	cmp	r9, r0
 8002a84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a92:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002a96:	f84e 3b04 	str.w	r3, [lr], #4
 8002a9a:	d2da      	bcs.n	8002a52 <quorem+0x42>
 8002a9c:	f856 300c 	ldr.w	r3, [r6, ip]
 8002aa0:	b933      	cbnz	r3, 8002ab0 <quorem+0xa0>
 8002aa2:	9b01      	ldr	r3, [sp, #4]
 8002aa4:	3b04      	subs	r3, #4
 8002aa6:	429e      	cmp	r6, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	d331      	bcc.n	8002b10 <quorem+0x100>
 8002aac:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	f001 f835 	bl	8003b20 <__mcmp>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	db26      	blt.n	8002b08 <quorem+0xf8>
 8002aba:	4630      	mov	r0, r6
 8002abc:	f04f 0c00 	mov.w	ip, #0
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	f857 1b04 	ldr.w	r1, [r7], #4
 8002ac6:	f8d0 e000 	ldr.w	lr, [r0]
 8002aca:	b28b      	uxth	r3, r1
 8002acc:	ebac 0303 	sub.w	r3, ip, r3
 8002ad0:	fa1f f28e 	uxth.w	r2, lr
 8002ad4:	4413      	add	r3, r2
 8002ad6:	0c0a      	lsrs	r2, r1, #16
 8002ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ae6:	45b9      	cmp	r9, r7
 8002ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002aec:	f840 3b04 	str.w	r3, [r0], #4
 8002af0:	d2e7      	bcs.n	8002ac2 <quorem+0xb2>
 8002af2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002af6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002afa:	b92a      	cbnz	r2, 8002b08 <quorem+0xf8>
 8002afc:	3b04      	subs	r3, #4
 8002afe:	429e      	cmp	r6, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	d30b      	bcc.n	8002b1c <quorem+0x10c>
 8002b04:	f8c8 4010 	str.w	r4, [r8, #16]
 8002b08:	4628      	mov	r0, r5
 8002b0a:	b003      	add	sp, #12
 8002b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	3b04      	subs	r3, #4
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	d1c9      	bne.n	8002aac <quorem+0x9c>
 8002b18:	3c01      	subs	r4, #1
 8002b1a:	e7c4      	b.n	8002aa6 <quorem+0x96>
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	d1ef      	bne.n	8002b04 <quorem+0xf4>
 8002b24:	3c01      	subs	r4, #1
 8002b26:	e7ea      	b.n	8002afe <quorem+0xee>
 8002b28:	2000      	movs	r0, #0
 8002b2a:	e7ee      	b.n	8002b0a <quorem+0xfa>
 8002b2c:	0000      	movs	r0, r0
	...

08002b30 <_dtoa_r>:
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b34:	4616      	mov	r6, r2
 8002b36:	461f      	mov	r7, r3
 8002b38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002b3a:	b095      	sub	sp, #84	; 0x54
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002b42:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002b46:	b93d      	cbnz	r5, 8002b58 <_dtoa_r+0x28>
 8002b48:	2010      	movs	r0, #16
 8002b4a:	f000 fdb3 	bl	80036b4 <malloc>
 8002b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8002b50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002b54:	6005      	str	r5, [r0, #0]
 8002b56:	60c5      	str	r5, [r0, #12]
 8002b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	b151      	cbz	r1, 8002b74 <_dtoa_r+0x44>
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	2301      	movs	r3, #1
 8002b62:	4093      	lsls	r3, r2
 8002b64:	604a      	str	r2, [r1, #4]
 8002b66:	608b      	str	r3, [r1, #8]
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f000 fdf8 	bl	800375e <_Bfree>
 8002b6e:	2200      	movs	r2, #0
 8002b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	1e3b      	subs	r3, r7, #0
 8002b76:	bfaf      	iteee	ge
 8002b78:	2300      	movge	r3, #0
 8002b7a:	2201      	movlt	r2, #1
 8002b7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b80:	9303      	strlt	r3, [sp, #12]
 8002b82:	bfac      	ite	ge
 8002b84:	f8c8 3000 	strge.w	r3, [r8]
 8002b88:	f8c8 2000 	strlt.w	r2, [r8]
 8002b8c:	4bae      	ldr	r3, [pc, #696]	; (8002e48 <_dtoa_r+0x318>)
 8002b8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002b92:	ea33 0308 	bics.w	r3, r3, r8
 8002b96:	d11b      	bne.n	8002bd0 <_dtoa_r+0xa0>
 8002b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	9b02      	ldr	r3, [sp, #8]
 8002ba2:	b923      	cbnz	r3, 8002bae <_dtoa_r+0x7e>
 8002ba4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	f000 8545 	beq.w	8003638 <_dtoa_r+0xb08>
 8002bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bb0:	b953      	cbnz	r3, 8002bc8 <_dtoa_r+0x98>
 8002bb2:	4ba6      	ldr	r3, [pc, #664]	; (8002e4c <_dtoa_r+0x31c>)
 8002bb4:	e021      	b.n	8002bfa <_dtoa_r+0xca>
 8002bb6:	4ba6      	ldr	r3, [pc, #664]	; (8002e50 <_dtoa_r+0x320>)
 8002bb8:	9306      	str	r3, [sp, #24]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	9806      	ldr	r0, [sp, #24]
 8002bc2:	b015      	add	sp, #84	; 0x54
 8002bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc8:	4ba0      	ldr	r3, [pc, #640]	; (8002e4c <_dtoa_r+0x31c>)
 8002bca:	9306      	str	r3, [sp, #24]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	e7f5      	b.n	8002bbc <_dtoa_r+0x8c>
 8002bd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4630      	mov	r0, r6
 8002bda:	4639      	mov	r1, r7
 8002bdc:	f7fd fef4 	bl	80009c8 <__aeabi_dcmpeq>
 8002be0:	4682      	mov	sl, r0
 8002be2:	b160      	cbz	r0, 8002bfe <_dtoa_r+0xce>
 8002be4:	2301      	movs	r3, #1
 8002be6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8520 	beq.w	8003632 <_dtoa_r+0xb02>
 8002bf2:	4b98      	ldr	r3, [pc, #608]	; (8002e54 <_dtoa_r+0x324>)
 8002bf4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	9306      	str	r3, [sp, #24]
 8002bfc:	e7e0      	b.n	8002bc0 <_dtoa_r+0x90>
 8002bfe:	ab12      	add	r3, sp, #72	; 0x48
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	ab13      	add	r3, sp, #76	; 0x4c
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	4632      	mov	r2, r6
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f001 f800 	bl	8003c10 <__d2b>
 8002c10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002c14:	4683      	mov	fp, r0
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	d07d      	beq.n	8002d16 <_dtoa_r+0x1e6>
 8002c1a:	46b0      	mov	r8, r6
 8002c1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002c20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002c24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002c28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002c30:	2200      	movs	r2, #0
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <_dtoa_r+0x328>)
 8002c34:	4640      	mov	r0, r8
 8002c36:	4649      	mov	r1, r9
 8002c38:	f7fd faa6 	bl	8000188 <__aeabi_dsub>
 8002c3c:	a37c      	add	r3, pc, #496	; (adr r3, 8002e30 <_dtoa_r+0x300>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fc59 	bl	80004f8 <__aeabi_dmul>
 8002c46:	a37c      	add	r3, pc, #496	; (adr r3, 8002e38 <_dtoa_r+0x308>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fa9e 	bl	800018c <__adddf3>
 8002c50:	4606      	mov	r6, r0
 8002c52:	4628      	mov	r0, r5
 8002c54:	460f      	mov	r7, r1
 8002c56:	f7fd fbe5 	bl	8000424 <__aeabi_i2d>
 8002c5a:	a379      	add	r3, pc, #484	; (adr r3, 8002e40 <_dtoa_r+0x310>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd fc4a 	bl	80004f8 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4630      	mov	r0, r6
 8002c6a:	4639      	mov	r1, r7
 8002c6c:	f7fd fa8e 	bl	800018c <__adddf3>
 8002c70:	4606      	mov	r6, r0
 8002c72:	460f      	mov	r7, r1
 8002c74:	f7fd fef0 	bl	8000a58 <__aeabi_d2iz>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4682      	mov	sl, r0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4630      	mov	r0, r6
 8002c80:	4639      	mov	r1, r7
 8002c82:	f7fd feab 	bl	80009dc <__aeabi_dcmplt>
 8002c86:	b148      	cbz	r0, 8002c9c <_dtoa_r+0x16c>
 8002c88:	4650      	mov	r0, sl
 8002c8a:	f7fd fbcb 	bl	8000424 <__aeabi_i2d>
 8002c8e:	4632      	mov	r2, r6
 8002c90:	463b      	mov	r3, r7
 8002c92:	f7fd fe99 	bl	80009c8 <__aeabi_dcmpeq>
 8002c96:	b908      	cbnz	r0, 8002c9c <_dtoa_r+0x16c>
 8002c98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c9c:	f1ba 0f16 	cmp.w	sl, #22
 8002ca0:	d85a      	bhi.n	8002d58 <_dtoa_r+0x228>
 8002ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ca6:	496d      	ldr	r1, [pc, #436]	; (8002e5c <_dtoa_r+0x32c>)
 8002ca8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cb0:	f7fd feb2 	bl	8000a18 <__aeabi_dcmpgt>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d051      	beq.n	8002d5c <_dtoa_r+0x22c>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002cbe:	930d      	str	r3, [sp, #52]	; 0x34
 8002cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002cc2:	1b5d      	subs	r5, r3, r5
 8002cc4:	1e6b      	subs	r3, r5, #1
 8002cc6:	9307      	str	r3, [sp, #28]
 8002cc8:	bf43      	ittte	mi
 8002cca:	2300      	movmi	r3, #0
 8002ccc:	f1c5 0901 	rsbmi	r9, r5, #1
 8002cd0:	9307      	strmi	r3, [sp, #28]
 8002cd2:	f04f 0900 	movpl.w	r9, #0
 8002cd6:	f1ba 0f00 	cmp.w	sl, #0
 8002cda:	db41      	blt.n	8002d60 <_dtoa_r+0x230>
 8002cdc:	9b07      	ldr	r3, [sp, #28]
 8002cde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002ce2:	4453      	add	r3, sl
 8002ce4:	9307      	str	r3, [sp, #28]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9308      	str	r3, [sp, #32]
 8002cea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	f200 808f 	bhi.w	8002e10 <_dtoa_r+0x2e0>
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	bfc4      	itt	gt
 8002cf6:	3b04      	subgt	r3, #4
 8002cf8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002cfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002cfc:	bfc8      	it	gt
 8002cfe:	2500      	movgt	r5, #0
 8002d00:	f1a3 0302 	sub.w	r3, r3, #2
 8002d04:	bfd8      	it	le
 8002d06:	2501      	movle	r5, #1
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	f200 808d 	bhi.w	8002e28 <_dtoa_r+0x2f8>
 8002d0e:	e8df f003 	tbb	[pc, r3]
 8002d12:	7d7b      	.short	0x7d7b
 8002d14:	6f2f      	.short	0x6f2f
 8002d16:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002d1a:	441d      	add	r5, r3
 8002d1c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002d20:	2820      	cmp	r0, #32
 8002d22:	dd13      	ble.n	8002d4c <_dtoa_r+0x21c>
 8002d24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002d28:	9b02      	ldr	r3, [sp, #8]
 8002d2a:	fa08 f800 	lsl.w	r8, r8, r0
 8002d2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002d32:	fa23 f000 	lsr.w	r0, r3, r0
 8002d36:	ea48 0000 	orr.w	r0, r8, r0
 8002d3a:	f7fd fb63 	bl	8000404 <__aeabi_ui2d>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4680      	mov	r8, r0
 8002d42:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002d46:	3d01      	subs	r5, #1
 8002d48:	9310      	str	r3, [sp, #64]	; 0x40
 8002d4a:	e771      	b.n	8002c30 <_dtoa_r+0x100>
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	f1c0 0020 	rsb	r0, r0, #32
 8002d52:	fa03 f000 	lsl.w	r0, r3, r0
 8002d56:	e7f0      	b.n	8002d3a <_dtoa_r+0x20a>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e7b0      	b.n	8002cbe <_dtoa_r+0x18e>
 8002d5c:	900d      	str	r0, [sp, #52]	; 0x34
 8002d5e:	e7af      	b.n	8002cc0 <_dtoa_r+0x190>
 8002d60:	f1ca 0300 	rsb	r3, sl, #0
 8002d64:	9308      	str	r3, [sp, #32]
 8002d66:	2300      	movs	r3, #0
 8002d68:	eba9 090a 	sub.w	r9, r9, sl
 8002d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8002d6e:	e7bc      	b.n	8002cea <_dtoa_r+0x1ba>
 8002d70:	2301      	movs	r3, #1
 8002d72:	9309      	str	r3, [sp, #36]	; 0x24
 8002d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd74      	ble.n	8002e64 <_dtoa_r+0x334>
 8002d7a:	4698      	mov	r8, r3
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002d82:	6072      	str	r2, [r6, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	f102 0014 	add.w	r0, r2, #20
 8002d8a:	4298      	cmp	r0, r3
 8002d8c:	6871      	ldr	r1, [r6, #4]
 8002d8e:	d96e      	bls.n	8002e6e <_dtoa_r+0x33e>
 8002d90:	4620      	mov	r0, r4
 8002d92:	f000 fcb0 	bl	80036f6 <_Balloc>
 8002d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d98:	6030      	str	r0, [r6, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b8 0f0e 	cmp.w	r8, #14
 8002da0:	9306      	str	r3, [sp, #24]
 8002da2:	f200 80ed 	bhi.w	8002f80 <_dtoa_r+0x450>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	f000 80ea 	beq.w	8002f80 <_dtoa_r+0x450>
 8002dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002db0:	f1ba 0f00 	cmp.w	sl, #0
 8002db4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002db8:	dd77      	ble.n	8002eaa <_dtoa_r+0x37a>
 8002dba:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <_dtoa_r+0x32c>)
 8002dbc:	f00a 030f 	and.w	r3, sl, #15
 8002dc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002dc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002dc8:	06f0      	lsls	r0, r6, #27
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002dd2:	d568      	bpl.n	8002ea6 <_dtoa_r+0x376>
 8002dd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <_dtoa_r+0x330>)
 8002dda:	2503      	movs	r5, #3
 8002ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002de0:	f7fd fcb4 	bl	800074c <__aeabi_ddiv>
 8002de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002de8:	f006 060f 	and.w	r6, r6, #15
 8002dec:	4f1c      	ldr	r7, [pc, #112]	; (8002e60 <_dtoa_r+0x330>)
 8002dee:	e04f      	b.n	8002e90 <_dtoa_r+0x360>
 8002df0:	2301      	movs	r3, #1
 8002df2:	9309      	str	r3, [sp, #36]	; 0x24
 8002df4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002df6:	4453      	add	r3, sl
 8002df8:	f103 0801 	add.w	r8, r3, #1
 8002dfc:	9304      	str	r3, [sp, #16]
 8002dfe:	4643      	mov	r3, r8
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bfb8      	it	lt
 8002e04:	2301      	movlt	r3, #1
 8002e06:	e7ba      	b.n	8002d7e <_dtoa_r+0x24e>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e7b2      	b.n	8002d72 <_dtoa_r+0x242>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e7f0      	b.n	8002df2 <_dtoa_r+0x2c2>
 8002e10:	2501      	movs	r5, #1
 8002e12:	2300      	movs	r3, #0
 8002e14:	9509      	str	r5, [sp, #36]	; 0x24
 8002e16:	931e      	str	r3, [sp, #120]	; 0x78
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	4698      	mov	r8, r3
 8002e22:	2312      	movs	r3, #18
 8002e24:	921f      	str	r2, [sp, #124]	; 0x7c
 8002e26:	e7aa      	b.n	8002d7e <_dtoa_r+0x24e>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e2c:	e7f4      	b.n	8002e18 <_dtoa_r+0x2e8>
 8002e2e:	bf00      	nop
 8002e30:	636f4361 	.word	0x636f4361
 8002e34:	3fd287a7 	.word	0x3fd287a7
 8002e38:	8b60c8b3 	.word	0x8b60c8b3
 8002e3c:	3fc68a28 	.word	0x3fc68a28
 8002e40:	509f79fb 	.word	0x509f79fb
 8002e44:	3fd34413 	.word	0x3fd34413
 8002e48:	7ff00000 	.word	0x7ff00000
 8002e4c:	080046ca 	.word	0x080046ca
 8002e50:	080046c1 	.word	0x080046c1
 8002e54:	0800469e 	.word	0x0800469e
 8002e58:	3ff80000 	.word	0x3ff80000
 8002e5c:	080046f8 	.word	0x080046f8
 8002e60:	080046d0 	.word	0x080046d0
 8002e64:	2301      	movs	r3, #1
 8002e66:	9304      	str	r3, [sp, #16]
 8002e68:	4698      	mov	r8, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	e7da      	b.n	8002e24 <_dtoa_r+0x2f4>
 8002e6e:	3101      	adds	r1, #1
 8002e70:	6071      	str	r1, [r6, #4]
 8002e72:	0052      	lsls	r2, r2, #1
 8002e74:	e787      	b.n	8002d86 <_dtoa_r+0x256>
 8002e76:	07f1      	lsls	r1, r6, #31
 8002e78:	d508      	bpl.n	8002e8c <_dtoa_r+0x35c>
 8002e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e82:	f7fd fb39 	bl	80004f8 <__aeabi_dmul>
 8002e86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e8a:	3501      	adds	r5, #1
 8002e8c:	1076      	asrs	r6, r6, #1
 8002e8e:	3708      	adds	r7, #8
 8002e90:	2e00      	cmp	r6, #0
 8002e92:	d1f0      	bne.n	8002e76 <_dtoa_r+0x346>
 8002e94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e9c:	f7fd fc56 	bl	800074c <__aeabi_ddiv>
 8002ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ea4:	e01b      	b.n	8002ede <_dtoa_r+0x3ae>
 8002ea6:	2502      	movs	r5, #2
 8002ea8:	e7a0      	b.n	8002dec <_dtoa_r+0x2bc>
 8002eaa:	f000 80a4 	beq.w	8002ff6 <_dtoa_r+0x4c6>
 8002eae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002eb2:	f1ca 0600 	rsb	r6, sl, #0
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	; (8003138 <_dtoa_r+0x608>)
 8002eb8:	f006 020f 	and.w	r2, r6, #15
 8002ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fb18 	bl	80004f8 <__aeabi_dmul>
 8002ec8:	2502      	movs	r5, #2
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ed0:	4f9a      	ldr	r7, [pc, #616]	; (800313c <_dtoa_r+0x60c>)
 8002ed2:	1136      	asrs	r6, r6, #4
 8002ed4:	2e00      	cmp	r6, #0
 8002ed6:	f040 8083 	bne.w	8002fe0 <_dtoa_r+0x4b0>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e0      	bne.n	8002ea0 <_dtoa_r+0x370>
 8002ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 808a 	beq.w	8002ffa <_dtoa_r+0x4ca>
 8002ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002eea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <_dtoa_r+0x610>)
 8002ef6:	f7fd fd71 	bl	80009dc <__aeabi_dcmplt>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d07d      	beq.n	8002ffa <_dtoa_r+0x4ca>
 8002efe:	f1b8 0f00 	cmp.w	r8, #0
 8002f02:	d07a      	beq.n	8002ffa <_dtoa_r+0x4ca>
 8002f04:	9b04      	ldr	r3, [sp, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	dd36      	ble.n	8002f78 <_dtoa_r+0x448>
 8002f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f0e:	2200      	movs	r2, #0
 8002f10:	4b8c      	ldr	r3, [pc, #560]	; (8003144 <_dtoa_r+0x614>)
 8002f12:	f7fd faf1 	bl	80004f8 <__aeabi_dmul>
 8002f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f1a:	9e04      	ldr	r6, [sp, #16]
 8002f1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002f20:	3501      	adds	r5, #1
 8002f22:	4628      	mov	r0, r5
 8002f24:	f7fd fa7e 	bl	8000424 <__aeabi_i2d>
 8002f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f2c:	f7fd fae4 	bl	80004f8 <__aeabi_dmul>
 8002f30:	2200      	movs	r2, #0
 8002f32:	4b85      	ldr	r3, [pc, #532]	; (8003148 <_dtoa_r+0x618>)
 8002f34:	f7fd f92a 	bl	800018c <__adddf3>
 8002f38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002f3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f40:	950b      	str	r5, [sp, #44]	; 0x2c
 8002f42:	2e00      	cmp	r6, #0
 8002f44:	d15c      	bne.n	8003000 <_dtoa_r+0x4d0>
 8002f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	4b7f      	ldr	r3, [pc, #508]	; (800314c <_dtoa_r+0x61c>)
 8002f4e:	f7fd f91b 	bl	8000188 <__aeabi_dsub>
 8002f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f54:	462b      	mov	r3, r5
 8002f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f5a:	f7fd fd5d 	bl	8000a18 <__aeabi_dcmpgt>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	f040 8281 	bne.w	8003466 <_dtoa_r+0x936>
 8002f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002f6e:	f7fd fd35 	bl	80009dc <__aeabi_dcmplt>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f040 8275 	bne.w	8003462 <_dtoa_r+0x932>
 8002f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f2c0 814b 	blt.w	800321e <_dtoa_r+0x6ee>
 8002f88:	f1ba 0f0e 	cmp.w	sl, #14
 8002f8c:	f300 8147 	bgt.w	800321e <_dtoa_r+0x6ee>
 8002f90:	4b69      	ldr	r3, [pc, #420]	; (8003138 <_dtoa_r+0x608>)
 8002f92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f280 80d7 	bge.w	8003154 <_dtoa_r+0x624>
 8002fa6:	f1b8 0f00 	cmp.w	r8, #0
 8002faa:	f300 80d3 	bgt.w	8003154 <_dtoa_r+0x624>
 8002fae:	f040 8257 	bne.w	8003460 <_dtoa_r+0x930>
 8002fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <_dtoa_r+0x61c>)
 8002fba:	f7fd fa9d 	bl	80004f8 <__aeabi_dmul>
 8002fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fc2:	f7fd fd1f 	bl	8000a04 <__aeabi_dcmpge>
 8002fc6:	4646      	mov	r6, r8
 8002fc8:	4647      	mov	r7, r8
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	f040 822d 	bne.w	800342a <_dtoa_r+0x8fa>
 8002fd0:	9b06      	ldr	r3, [sp, #24]
 8002fd2:	9a06      	ldr	r2, [sp, #24]
 8002fd4:	1c5d      	adds	r5, r3, #1
 8002fd6:	2331      	movs	r3, #49	; 0x31
 8002fd8:	f10a 0a01 	add.w	sl, sl, #1
 8002fdc:	7013      	strb	r3, [r2, #0]
 8002fde:	e228      	b.n	8003432 <_dtoa_r+0x902>
 8002fe0:	07f2      	lsls	r2, r6, #31
 8002fe2:	d505      	bpl.n	8002ff0 <_dtoa_r+0x4c0>
 8002fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe8:	f7fd fa86 	bl	80004f8 <__aeabi_dmul>
 8002fec:	2301      	movs	r3, #1
 8002fee:	3501      	adds	r5, #1
 8002ff0:	1076      	asrs	r6, r6, #1
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	e76e      	b.n	8002ed4 <_dtoa_r+0x3a4>
 8002ff6:	2502      	movs	r5, #2
 8002ff8:	e771      	b.n	8002ede <_dtoa_r+0x3ae>
 8002ffa:	4657      	mov	r7, sl
 8002ffc:	4646      	mov	r6, r8
 8002ffe:	e790      	b.n	8002f22 <_dtoa_r+0x3f2>
 8003000:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <_dtoa_r+0x608>)
 8003002:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003006:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800300c:	2b00      	cmp	r3, #0
 800300e:	d048      	beq.n	80030a2 <_dtoa_r+0x572>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	2000      	movs	r0, #0
 8003016:	494e      	ldr	r1, [pc, #312]	; (8003150 <_dtoa_r+0x620>)
 8003018:	f7fd fb98 	bl	800074c <__aeabi_ddiv>
 800301c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003020:	f7fd f8b2 	bl	8000188 <__aeabi_dsub>
 8003024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003028:	9d06      	ldr	r5, [sp, #24]
 800302a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800302e:	f7fd fd13 	bl	8000a58 <__aeabi_d2iz>
 8003032:	9011      	str	r0, [sp, #68]	; 0x44
 8003034:	f7fd f9f6 	bl	8000424 <__aeabi_i2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003040:	f7fd f8a2 	bl	8000188 <__aeabi_dsub>
 8003044:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800304a:	3330      	adds	r3, #48	; 0x30
 800304c:	f805 3b01 	strb.w	r3, [r5], #1
 8003050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003054:	f7fd fcc2 	bl	80009dc <__aeabi_dcmplt>
 8003058:	2800      	cmp	r0, #0
 800305a:	d163      	bne.n	8003124 <_dtoa_r+0x5f4>
 800305c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003060:	2000      	movs	r0, #0
 8003062:	4937      	ldr	r1, [pc, #220]	; (8003140 <_dtoa_r+0x610>)
 8003064:	f7fd f890 	bl	8000188 <__aeabi_dsub>
 8003068:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800306c:	f7fd fcb6 	bl	80009dc <__aeabi_dcmplt>
 8003070:	2800      	cmp	r0, #0
 8003072:	f040 80b5 	bne.w	80031e0 <_dtoa_r+0x6b0>
 8003076:	9b06      	ldr	r3, [sp, #24]
 8003078:	1aeb      	subs	r3, r5, r3
 800307a:	429e      	cmp	r6, r3
 800307c:	f77f af7c 	ble.w	8002f78 <_dtoa_r+0x448>
 8003080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <_dtoa_r+0x614>)
 8003088:	f7fd fa36 	bl	80004f8 <__aeabi_dmul>
 800308c:	2200      	movs	r2, #0
 800308e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <_dtoa_r+0x614>)
 8003098:	f7fd fa2e 	bl	80004f8 <__aeabi_dmul>
 800309c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030a0:	e7c3      	b.n	800302a <_dtoa_r+0x4fa>
 80030a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80030a6:	f7fd fa27 	bl	80004f8 <__aeabi_dmul>
 80030aa:	9b06      	ldr	r3, [sp, #24]
 80030ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80030b0:	199d      	adds	r5, r3, r6
 80030b2:	461e      	mov	r6, r3
 80030b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b8:	f7fd fcce 	bl	8000a58 <__aeabi_d2iz>
 80030bc:	9011      	str	r0, [sp, #68]	; 0x44
 80030be:	f7fd f9b1 	bl	8000424 <__aeabi_i2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030ca:	f7fd f85d 	bl	8000188 <__aeabi_dsub>
 80030ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030d4:	3330      	adds	r3, #48	; 0x30
 80030d6:	f806 3b01 	strb.w	r3, [r6], #1
 80030da:	42ae      	cmp	r6, r5
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	d124      	bne.n	800312c <_dtoa_r+0x5fc>
 80030e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <_dtoa_r+0x620>)
 80030e8:	f7fd f850 	bl	800018c <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030f4:	f7fd fc90 	bl	8000a18 <__aeabi_dcmpgt>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d171      	bne.n	80031e0 <_dtoa_r+0x6b0>
 80030fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003100:	2000      	movs	r0, #0
 8003102:	4913      	ldr	r1, [pc, #76]	; (8003150 <_dtoa_r+0x620>)
 8003104:	f7fd f840 	bl	8000188 <__aeabi_dsub>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003110:	f7fd fc64 	bl	80009dc <__aeabi_dcmplt>
 8003114:	2800      	cmp	r0, #0
 8003116:	f43f af2f 	beq.w	8002f78 <_dtoa_r+0x448>
 800311a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800311e:	1e6a      	subs	r2, r5, #1
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d001      	beq.n	8003128 <_dtoa_r+0x5f8>
 8003124:	46ba      	mov	sl, r7
 8003126:	e04a      	b.n	80031be <_dtoa_r+0x68e>
 8003128:	4615      	mov	r5, r2
 800312a:	e7f6      	b.n	800311a <_dtoa_r+0x5ea>
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <_dtoa_r+0x614>)
 800312e:	f7fd f9e3 	bl	80004f8 <__aeabi_dmul>
 8003132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003136:	e7bd      	b.n	80030b4 <_dtoa_r+0x584>
 8003138:	080046f8 	.word	0x080046f8
 800313c:	080046d0 	.word	0x080046d0
 8003140:	3ff00000 	.word	0x3ff00000
 8003144:	40240000 	.word	0x40240000
 8003148:	401c0000 	.word	0x401c0000
 800314c:	40140000 	.word	0x40140000
 8003150:	3fe00000 	.word	0x3fe00000
 8003154:	9d06      	ldr	r5, [sp, #24]
 8003156:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800315a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800315e:	4630      	mov	r0, r6
 8003160:	4639      	mov	r1, r7
 8003162:	f7fd faf3 	bl	800074c <__aeabi_ddiv>
 8003166:	f7fd fc77 	bl	8000a58 <__aeabi_d2iz>
 800316a:	4681      	mov	r9, r0
 800316c:	f7fd f95a 	bl	8000424 <__aeabi_i2d>
 8003170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003174:	f7fd f9c0 	bl	80004f8 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4630      	mov	r0, r6
 800317e:	4639      	mov	r1, r7
 8003180:	f7fd f802 	bl	8000188 <__aeabi_dsub>
 8003184:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003188:	f805 6b01 	strb.w	r6, [r5], #1
 800318c:	9e06      	ldr	r6, [sp, #24]
 800318e:	4602      	mov	r2, r0
 8003190:	1bae      	subs	r6, r5, r6
 8003192:	45b0      	cmp	r8, r6
 8003194:	460b      	mov	r3, r1
 8003196:	d135      	bne.n	8003204 <_dtoa_r+0x6d4>
 8003198:	f7fc fff8 	bl	800018c <__adddf3>
 800319c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031a0:	4606      	mov	r6, r0
 80031a2:	460f      	mov	r7, r1
 80031a4:	f7fd fc38 	bl	8000a18 <__aeabi_dcmpgt>
 80031a8:	b9c8      	cbnz	r0, 80031de <_dtoa_r+0x6ae>
 80031aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031ae:	4630      	mov	r0, r6
 80031b0:	4639      	mov	r1, r7
 80031b2:	f7fd fc09 	bl	80009c8 <__aeabi_dcmpeq>
 80031b6:	b110      	cbz	r0, 80031be <_dtoa_r+0x68e>
 80031b8:	f019 0f01 	tst.w	r9, #1
 80031bc:	d10f      	bne.n	80031de <_dtoa_r+0x6ae>
 80031be:	4659      	mov	r1, fp
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 facc 	bl	800375e <_Bfree>
 80031c6:	2300      	movs	r3, #0
 80031c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031ca:	702b      	strb	r3, [r5, #0]
 80031cc:	f10a 0301 	add.w	r3, sl, #1
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f43f acf3 	beq.w	8002bc0 <_dtoa_r+0x90>
 80031da:	601d      	str	r5, [r3, #0]
 80031dc:	e4f0      	b.n	8002bc0 <_dtoa_r+0x90>
 80031de:	4657      	mov	r7, sl
 80031e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80031e4:	1e6b      	subs	r3, r5, #1
 80031e6:	2a39      	cmp	r2, #57	; 0x39
 80031e8:	d106      	bne.n	80031f8 <_dtoa_r+0x6c8>
 80031ea:	9a06      	ldr	r2, [sp, #24]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d107      	bne.n	8003200 <_dtoa_r+0x6d0>
 80031f0:	2330      	movs	r3, #48	; 0x30
 80031f2:	7013      	strb	r3, [r2, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	3701      	adds	r7, #1
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	3201      	adds	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e791      	b.n	8003124 <_dtoa_r+0x5f4>
 8003200:	461d      	mov	r5, r3
 8003202:	e7ed      	b.n	80031e0 <_dtoa_r+0x6b0>
 8003204:	2200      	movs	r2, #0
 8003206:	4b99      	ldr	r3, [pc, #612]	; (800346c <_dtoa_r+0x93c>)
 8003208:	f7fd f976 	bl	80004f8 <__aeabi_dmul>
 800320c:	2200      	movs	r2, #0
 800320e:	2300      	movs	r3, #0
 8003210:	4606      	mov	r6, r0
 8003212:	460f      	mov	r7, r1
 8003214:	f7fd fbd8 	bl	80009c8 <__aeabi_dcmpeq>
 8003218:	2800      	cmp	r0, #0
 800321a:	d09e      	beq.n	800315a <_dtoa_r+0x62a>
 800321c:	e7cf      	b.n	80031be <_dtoa_r+0x68e>
 800321e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003220:	2a00      	cmp	r2, #0
 8003222:	f000 8088 	beq.w	8003336 <_dtoa_r+0x806>
 8003226:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003228:	2a01      	cmp	r2, #1
 800322a:	dc6d      	bgt.n	8003308 <_dtoa_r+0x7d8>
 800322c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800322e:	2a00      	cmp	r2, #0
 8003230:	d066      	beq.n	8003300 <_dtoa_r+0x7d0>
 8003232:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003236:	464d      	mov	r5, r9
 8003238:	9e08      	ldr	r6, [sp, #32]
 800323a:	9a07      	ldr	r2, [sp, #28]
 800323c:	2101      	movs	r1, #1
 800323e:	441a      	add	r2, r3
 8003240:	4620      	mov	r0, r4
 8003242:	4499      	add	r9, r3
 8003244:	9207      	str	r2, [sp, #28]
 8003246:	f000 fb2a 	bl	800389e <__i2b>
 800324a:	4607      	mov	r7, r0
 800324c:	2d00      	cmp	r5, #0
 800324e:	dd0b      	ble.n	8003268 <_dtoa_r+0x738>
 8003250:	9b07      	ldr	r3, [sp, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	dd08      	ble.n	8003268 <_dtoa_r+0x738>
 8003256:	42ab      	cmp	r3, r5
 8003258:	bfa8      	it	ge
 800325a:	462b      	movge	r3, r5
 800325c:	9a07      	ldr	r2, [sp, #28]
 800325e:	eba9 0903 	sub.w	r9, r9, r3
 8003262:	1aed      	subs	r5, r5, r3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	9307      	str	r3, [sp, #28]
 8003268:	9b08      	ldr	r3, [sp, #32]
 800326a:	b1eb      	cbz	r3, 80032a8 <_dtoa_r+0x778>
 800326c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	d065      	beq.n	800333e <_dtoa_r+0x80e>
 8003272:	b18e      	cbz	r6, 8003298 <_dtoa_r+0x768>
 8003274:	4639      	mov	r1, r7
 8003276:	4632      	mov	r2, r6
 8003278:	4620      	mov	r0, r4
 800327a:	f000 fbaf 	bl	80039dc <__pow5mult>
 800327e:	465a      	mov	r2, fp
 8003280:	4601      	mov	r1, r0
 8003282:	4607      	mov	r7, r0
 8003284:	4620      	mov	r0, r4
 8003286:	f000 fb13 	bl	80038b0 <__multiply>
 800328a:	4659      	mov	r1, fp
 800328c:	900a      	str	r0, [sp, #40]	; 0x28
 800328e:	4620      	mov	r0, r4
 8003290:	f000 fa65 	bl	800375e <_Bfree>
 8003294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003296:	469b      	mov	fp, r3
 8003298:	9b08      	ldr	r3, [sp, #32]
 800329a:	1b9a      	subs	r2, r3, r6
 800329c:	d004      	beq.n	80032a8 <_dtoa_r+0x778>
 800329e:	4659      	mov	r1, fp
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fb9b 	bl	80039dc <__pow5mult>
 80032a6:	4683      	mov	fp, r0
 80032a8:	2101      	movs	r1, #1
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 faf7 	bl	800389e <__i2b>
 80032b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032b2:	4606      	mov	r6, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 81c6 	beq.w	8003646 <_dtoa_r+0xb16>
 80032ba:	461a      	mov	r2, r3
 80032bc:	4601      	mov	r1, r0
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 fb8c 	bl	80039dc <__pow5mult>
 80032c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032c6:	4606      	mov	r6, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	dc3e      	bgt.n	800334a <_dtoa_r+0x81a>
 80032cc:	9b02      	ldr	r3, [sp, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d137      	bne.n	8003342 <_dtoa_r+0x812>
 80032d2:	9b03      	ldr	r3, [sp, #12]
 80032d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d134      	bne.n	8003346 <_dtoa_r+0x816>
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	0d1b      	lsrs	r3, r3, #20
 80032e4:	051b      	lsls	r3, r3, #20
 80032e6:	b12b      	cbz	r3, 80032f4 <_dtoa_r+0x7c4>
 80032e8:	9b07      	ldr	r3, [sp, #28]
 80032ea:	f109 0901 	add.w	r9, r9, #1
 80032ee:	3301      	adds	r3, #1
 80032f0:	9307      	str	r3, [sp, #28]
 80032f2:	2301      	movs	r3, #1
 80032f4:	9308      	str	r3, [sp, #32]
 80032f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d128      	bne.n	800334e <_dtoa_r+0x81e>
 80032fc:	2001      	movs	r0, #1
 80032fe:	e02e      	b.n	800335e <_dtoa_r+0x82e>
 8003300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003302:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003306:	e796      	b.n	8003236 <_dtoa_r+0x706>
 8003308:	9b08      	ldr	r3, [sp, #32]
 800330a:	f108 36ff 	add.w	r6, r8, #4294967295
 800330e:	42b3      	cmp	r3, r6
 8003310:	bfb7      	itett	lt
 8003312:	9b08      	ldrlt	r3, [sp, #32]
 8003314:	1b9e      	subge	r6, r3, r6
 8003316:	1af2      	sublt	r2, r6, r3
 8003318:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800331a:	bfbf      	itttt	lt
 800331c:	9608      	strlt	r6, [sp, #32]
 800331e:	189b      	addlt	r3, r3, r2
 8003320:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003322:	2600      	movlt	r6, #0
 8003324:	f1b8 0f00 	cmp.w	r8, #0
 8003328:	bfb9      	ittee	lt
 800332a:	eba9 0508 	sublt.w	r5, r9, r8
 800332e:	2300      	movlt	r3, #0
 8003330:	464d      	movge	r5, r9
 8003332:	4643      	movge	r3, r8
 8003334:	e781      	b.n	800323a <_dtoa_r+0x70a>
 8003336:	9e08      	ldr	r6, [sp, #32]
 8003338:	464d      	mov	r5, r9
 800333a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800333c:	e786      	b.n	800324c <_dtoa_r+0x71c>
 800333e:	9a08      	ldr	r2, [sp, #32]
 8003340:	e7ad      	b.n	800329e <_dtoa_r+0x76e>
 8003342:	2300      	movs	r3, #0
 8003344:	e7d6      	b.n	80032f4 <_dtoa_r+0x7c4>
 8003346:	9b02      	ldr	r3, [sp, #8]
 8003348:	e7d4      	b.n	80032f4 <_dtoa_r+0x7c4>
 800334a:	2300      	movs	r3, #0
 800334c:	9308      	str	r3, [sp, #32]
 800334e:	6933      	ldr	r3, [r6, #16]
 8003350:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003354:	6918      	ldr	r0, [r3, #16]
 8003356:	f000 fa54 	bl	8003802 <__hi0bits>
 800335a:	f1c0 0020 	rsb	r0, r0, #32
 800335e:	9b07      	ldr	r3, [sp, #28]
 8003360:	4418      	add	r0, r3
 8003362:	f010 001f 	ands.w	r0, r0, #31
 8003366:	d047      	beq.n	80033f8 <_dtoa_r+0x8c8>
 8003368:	f1c0 0320 	rsb	r3, r0, #32
 800336c:	2b04      	cmp	r3, #4
 800336e:	dd3b      	ble.n	80033e8 <_dtoa_r+0x8b8>
 8003370:	9b07      	ldr	r3, [sp, #28]
 8003372:	f1c0 001c 	rsb	r0, r0, #28
 8003376:	4481      	add	r9, r0
 8003378:	4405      	add	r5, r0
 800337a:	4403      	add	r3, r0
 800337c:	9307      	str	r3, [sp, #28]
 800337e:	f1b9 0f00 	cmp.w	r9, #0
 8003382:	dd05      	ble.n	8003390 <_dtoa_r+0x860>
 8003384:	4659      	mov	r1, fp
 8003386:	464a      	mov	r2, r9
 8003388:	4620      	mov	r0, r4
 800338a:	f000 fb75 	bl	8003a78 <__lshift>
 800338e:	4683      	mov	fp, r0
 8003390:	9b07      	ldr	r3, [sp, #28]
 8003392:	2b00      	cmp	r3, #0
 8003394:	dd05      	ble.n	80033a2 <_dtoa_r+0x872>
 8003396:	4631      	mov	r1, r6
 8003398:	461a      	mov	r2, r3
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fb6c 	bl	8003a78 <__lshift>
 80033a0:	4606      	mov	r6, r0
 80033a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a4:	b353      	cbz	r3, 80033fc <_dtoa_r+0x8cc>
 80033a6:	4631      	mov	r1, r6
 80033a8:	4658      	mov	r0, fp
 80033aa:	f000 fbb9 	bl	8003b20 <__mcmp>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	da24      	bge.n	80033fc <_dtoa_r+0x8cc>
 80033b2:	2300      	movs	r3, #0
 80033b4:	4659      	mov	r1, fp
 80033b6:	220a      	movs	r2, #10
 80033b8:	4620      	mov	r0, r4
 80033ba:	f000 f9e7 	bl	800378c <__multadd>
 80033be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033c4:	4683      	mov	fp, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8144 	beq.w	8003654 <_dtoa_r+0xb24>
 80033cc:	2300      	movs	r3, #0
 80033ce:	4639      	mov	r1, r7
 80033d0:	220a      	movs	r2, #10
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 f9da 	bl	800378c <__multadd>
 80033d8:	9b04      	ldr	r3, [sp, #16]
 80033da:	4607      	mov	r7, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dc4d      	bgt.n	800347c <_dtoa_r+0x94c>
 80033e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	dd4a      	ble.n	800347c <_dtoa_r+0x94c>
 80033e6:	e011      	b.n	800340c <_dtoa_r+0x8dc>
 80033e8:	d0c9      	beq.n	800337e <_dtoa_r+0x84e>
 80033ea:	9a07      	ldr	r2, [sp, #28]
 80033ec:	331c      	adds	r3, #28
 80033ee:	441a      	add	r2, r3
 80033f0:	4499      	add	r9, r3
 80033f2:	441d      	add	r5, r3
 80033f4:	4613      	mov	r3, r2
 80033f6:	e7c1      	b.n	800337c <_dtoa_r+0x84c>
 80033f8:	4603      	mov	r3, r0
 80033fa:	e7f6      	b.n	80033ea <_dtoa_r+0x8ba>
 80033fc:	f1b8 0f00 	cmp.w	r8, #0
 8003400:	dc36      	bgt.n	8003470 <_dtoa_r+0x940>
 8003402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003404:	2b02      	cmp	r3, #2
 8003406:	dd33      	ble.n	8003470 <_dtoa_r+0x940>
 8003408:	f8cd 8010 	str.w	r8, [sp, #16]
 800340c:	9b04      	ldr	r3, [sp, #16]
 800340e:	b963      	cbnz	r3, 800342a <_dtoa_r+0x8fa>
 8003410:	4631      	mov	r1, r6
 8003412:	2205      	movs	r2, #5
 8003414:	4620      	mov	r0, r4
 8003416:	f000 f9b9 	bl	800378c <__multadd>
 800341a:	4601      	mov	r1, r0
 800341c:	4606      	mov	r6, r0
 800341e:	4658      	mov	r0, fp
 8003420:	f000 fb7e 	bl	8003b20 <__mcmp>
 8003424:	2800      	cmp	r0, #0
 8003426:	f73f add3 	bgt.w	8002fd0 <_dtoa_r+0x4a0>
 800342a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800342c:	9d06      	ldr	r5, [sp, #24]
 800342e:	ea6f 0a03 	mvn.w	sl, r3
 8003432:	f04f 0900 	mov.w	r9, #0
 8003436:	4631      	mov	r1, r6
 8003438:	4620      	mov	r0, r4
 800343a:	f000 f990 	bl	800375e <_Bfree>
 800343e:	2f00      	cmp	r7, #0
 8003440:	f43f aebd 	beq.w	80031be <_dtoa_r+0x68e>
 8003444:	f1b9 0f00 	cmp.w	r9, #0
 8003448:	d005      	beq.n	8003456 <_dtoa_r+0x926>
 800344a:	45b9      	cmp	r9, r7
 800344c:	d003      	beq.n	8003456 <_dtoa_r+0x926>
 800344e:	4649      	mov	r1, r9
 8003450:	4620      	mov	r0, r4
 8003452:	f000 f984 	bl	800375e <_Bfree>
 8003456:	4639      	mov	r1, r7
 8003458:	4620      	mov	r0, r4
 800345a:	f000 f980 	bl	800375e <_Bfree>
 800345e:	e6ae      	b.n	80031be <_dtoa_r+0x68e>
 8003460:	2600      	movs	r6, #0
 8003462:	4637      	mov	r7, r6
 8003464:	e7e1      	b.n	800342a <_dtoa_r+0x8fa>
 8003466:	46ba      	mov	sl, r7
 8003468:	4637      	mov	r7, r6
 800346a:	e5b1      	b.n	8002fd0 <_dtoa_r+0x4a0>
 800346c:	40240000 	.word	0x40240000
 8003470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003472:	f8cd 8010 	str.w	r8, [sp, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80f3 	beq.w	8003662 <_dtoa_r+0xb32>
 800347c:	2d00      	cmp	r5, #0
 800347e:	dd05      	ble.n	800348c <_dtoa_r+0x95c>
 8003480:	4639      	mov	r1, r7
 8003482:	462a      	mov	r2, r5
 8003484:	4620      	mov	r0, r4
 8003486:	f000 faf7 	bl	8003a78 <__lshift>
 800348a:	4607      	mov	r7, r0
 800348c:	9b08      	ldr	r3, [sp, #32]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d04c      	beq.n	800352c <_dtoa_r+0x9fc>
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4620      	mov	r0, r4
 8003496:	f000 f92e 	bl	80036f6 <_Balloc>
 800349a:	4605      	mov	r5, r0
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	f107 010c 	add.w	r1, r7, #12
 80034a2:	3202      	adds	r2, #2
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	300c      	adds	r0, #12
 80034a8:	f000 f91a 	bl	80036e0 <memcpy>
 80034ac:	2201      	movs	r2, #1
 80034ae:	4629      	mov	r1, r5
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 fae1 	bl	8003a78 <__lshift>
 80034b6:	46b9      	mov	r9, r7
 80034b8:	4607      	mov	r7, r0
 80034ba:	9b06      	ldr	r3, [sp, #24]
 80034bc:	9307      	str	r3, [sp, #28]
 80034be:	9b02      	ldr	r3, [sp, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	9308      	str	r3, [sp, #32]
 80034c6:	4631      	mov	r1, r6
 80034c8:	4658      	mov	r0, fp
 80034ca:	f7ff faa1 	bl	8002a10 <quorem>
 80034ce:	4649      	mov	r1, r9
 80034d0:	4605      	mov	r5, r0
 80034d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80034d6:	4658      	mov	r0, fp
 80034d8:	f000 fb22 	bl	8003b20 <__mcmp>
 80034dc:	463a      	mov	r2, r7
 80034de:	9002      	str	r0, [sp, #8]
 80034e0:	4631      	mov	r1, r6
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fb36 	bl	8003b54 <__mdiff>
 80034e8:	68c3      	ldr	r3, [r0, #12]
 80034ea:	4602      	mov	r2, r0
 80034ec:	bb03      	cbnz	r3, 8003530 <_dtoa_r+0xa00>
 80034ee:	4601      	mov	r1, r0
 80034f0:	9009      	str	r0, [sp, #36]	; 0x24
 80034f2:	4658      	mov	r0, fp
 80034f4:	f000 fb14 	bl	8003b20 <__mcmp>
 80034f8:	4603      	mov	r3, r0
 80034fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034fc:	4611      	mov	r1, r2
 80034fe:	4620      	mov	r0, r4
 8003500:	9309      	str	r3, [sp, #36]	; 0x24
 8003502:	f000 f92c 	bl	800375e <_Bfree>
 8003506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003508:	b9a3      	cbnz	r3, 8003534 <_dtoa_r+0xa04>
 800350a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800350c:	b992      	cbnz	r2, 8003534 <_dtoa_r+0xa04>
 800350e:	9a08      	ldr	r2, [sp, #32]
 8003510:	b982      	cbnz	r2, 8003534 <_dtoa_r+0xa04>
 8003512:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003516:	d029      	beq.n	800356c <_dtoa_r+0xa3c>
 8003518:	9b02      	ldr	r3, [sp, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dd01      	ble.n	8003522 <_dtoa_r+0x9f2>
 800351e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003522:	9b07      	ldr	r3, [sp, #28]
 8003524:	1c5d      	adds	r5, r3, #1
 8003526:	f883 8000 	strb.w	r8, [r3]
 800352a:	e784      	b.n	8003436 <_dtoa_r+0x906>
 800352c:	4638      	mov	r0, r7
 800352e:	e7c2      	b.n	80034b6 <_dtoa_r+0x986>
 8003530:	2301      	movs	r3, #1
 8003532:	e7e3      	b.n	80034fc <_dtoa_r+0x9cc>
 8003534:	9a02      	ldr	r2, [sp, #8]
 8003536:	2a00      	cmp	r2, #0
 8003538:	db04      	blt.n	8003544 <_dtoa_r+0xa14>
 800353a:	d123      	bne.n	8003584 <_dtoa_r+0xa54>
 800353c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800353e:	bb0a      	cbnz	r2, 8003584 <_dtoa_r+0xa54>
 8003540:	9a08      	ldr	r2, [sp, #32]
 8003542:	b9fa      	cbnz	r2, 8003584 <_dtoa_r+0xa54>
 8003544:	2b00      	cmp	r3, #0
 8003546:	ddec      	ble.n	8003522 <_dtoa_r+0x9f2>
 8003548:	4659      	mov	r1, fp
 800354a:	2201      	movs	r2, #1
 800354c:	4620      	mov	r0, r4
 800354e:	f000 fa93 	bl	8003a78 <__lshift>
 8003552:	4631      	mov	r1, r6
 8003554:	4683      	mov	fp, r0
 8003556:	f000 fae3 	bl	8003b20 <__mcmp>
 800355a:	2800      	cmp	r0, #0
 800355c:	dc03      	bgt.n	8003566 <_dtoa_r+0xa36>
 800355e:	d1e0      	bne.n	8003522 <_dtoa_r+0x9f2>
 8003560:	f018 0f01 	tst.w	r8, #1
 8003564:	d0dd      	beq.n	8003522 <_dtoa_r+0x9f2>
 8003566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800356a:	d1d8      	bne.n	800351e <_dtoa_r+0x9ee>
 800356c:	9b07      	ldr	r3, [sp, #28]
 800356e:	9a07      	ldr	r2, [sp, #28]
 8003570:	1c5d      	adds	r5, r3, #1
 8003572:	2339      	movs	r3, #57	; 0x39
 8003574:	7013      	strb	r3, [r2, #0]
 8003576:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800357a:	1e6a      	subs	r2, r5, #1
 800357c:	2b39      	cmp	r3, #57	; 0x39
 800357e:	d04d      	beq.n	800361c <_dtoa_r+0xaec>
 8003580:	3301      	adds	r3, #1
 8003582:	e052      	b.n	800362a <_dtoa_r+0xafa>
 8003584:	9a07      	ldr	r2, [sp, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f102 0501 	add.w	r5, r2, #1
 800358c:	dd06      	ble.n	800359c <_dtoa_r+0xa6c>
 800358e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003592:	d0eb      	beq.n	800356c <_dtoa_r+0xa3c>
 8003594:	f108 0801 	add.w	r8, r8, #1
 8003598:	9b07      	ldr	r3, [sp, #28]
 800359a:	e7c4      	b.n	8003526 <_dtoa_r+0x9f6>
 800359c:	9b06      	ldr	r3, [sp, #24]
 800359e:	9a04      	ldr	r2, [sp, #16]
 80035a0:	1aeb      	subs	r3, r5, r3
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80035a8:	d021      	beq.n	80035ee <_dtoa_r+0xabe>
 80035aa:	4659      	mov	r1, fp
 80035ac:	2300      	movs	r3, #0
 80035ae:	220a      	movs	r2, #10
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 f8eb 	bl	800378c <__multadd>
 80035b6:	45b9      	cmp	r9, r7
 80035b8:	4683      	mov	fp, r0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f04f 020a 	mov.w	r2, #10
 80035c2:	4649      	mov	r1, r9
 80035c4:	4620      	mov	r0, r4
 80035c6:	d105      	bne.n	80035d4 <_dtoa_r+0xaa4>
 80035c8:	f000 f8e0 	bl	800378c <__multadd>
 80035cc:	4681      	mov	r9, r0
 80035ce:	4607      	mov	r7, r0
 80035d0:	9507      	str	r5, [sp, #28]
 80035d2:	e778      	b.n	80034c6 <_dtoa_r+0x996>
 80035d4:	f000 f8da 	bl	800378c <__multadd>
 80035d8:	4639      	mov	r1, r7
 80035da:	4681      	mov	r9, r0
 80035dc:	2300      	movs	r3, #0
 80035de:	220a      	movs	r2, #10
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 f8d3 	bl	800378c <__multadd>
 80035e6:	4607      	mov	r7, r0
 80035e8:	e7f2      	b.n	80035d0 <_dtoa_r+0xaa0>
 80035ea:	f04f 0900 	mov.w	r9, #0
 80035ee:	4659      	mov	r1, fp
 80035f0:	2201      	movs	r2, #1
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 fa40 	bl	8003a78 <__lshift>
 80035f8:	4631      	mov	r1, r6
 80035fa:	4683      	mov	fp, r0
 80035fc:	f000 fa90 	bl	8003b20 <__mcmp>
 8003600:	2800      	cmp	r0, #0
 8003602:	dcb8      	bgt.n	8003576 <_dtoa_r+0xa46>
 8003604:	d102      	bne.n	800360c <_dtoa_r+0xadc>
 8003606:	f018 0f01 	tst.w	r8, #1
 800360a:	d1b4      	bne.n	8003576 <_dtoa_r+0xa46>
 800360c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003610:	1e6a      	subs	r2, r5, #1
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	f47f af0f 	bne.w	8003436 <_dtoa_r+0x906>
 8003618:	4615      	mov	r5, r2
 800361a:	e7f7      	b.n	800360c <_dtoa_r+0xadc>
 800361c:	9b06      	ldr	r3, [sp, #24]
 800361e:	4293      	cmp	r3, r2
 8003620:	d105      	bne.n	800362e <_dtoa_r+0xafe>
 8003622:	2331      	movs	r3, #49	; 0x31
 8003624:	9a06      	ldr	r2, [sp, #24]
 8003626:	f10a 0a01 	add.w	sl, sl, #1
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	e703      	b.n	8003436 <_dtoa_r+0x906>
 800362e:	4615      	mov	r5, r2
 8003630:	e7a1      	b.n	8003576 <_dtoa_r+0xa46>
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <_dtoa_r+0xb60>)
 8003634:	f7ff bae1 	b.w	8002bfa <_dtoa_r+0xca>
 8003638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f aabb 	bne.w	8002bb6 <_dtoa_r+0x86>
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <_dtoa_r+0xb64>)
 8003642:	f7ff bada 	b.w	8002bfa <_dtoa_r+0xca>
 8003646:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003648:	2b01      	cmp	r3, #1
 800364a:	f77f ae3f 	ble.w	80032cc <_dtoa_r+0x79c>
 800364e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003650:	9308      	str	r3, [sp, #32]
 8003652:	e653      	b.n	80032fc <_dtoa_r+0x7cc>
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	dc03      	bgt.n	8003662 <_dtoa_r+0xb32>
 800365a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800365c:	2b02      	cmp	r3, #2
 800365e:	f73f aed5 	bgt.w	800340c <_dtoa_r+0x8dc>
 8003662:	9d06      	ldr	r5, [sp, #24]
 8003664:	4631      	mov	r1, r6
 8003666:	4658      	mov	r0, fp
 8003668:	f7ff f9d2 	bl	8002a10 <quorem>
 800366c:	9b06      	ldr	r3, [sp, #24]
 800366e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003672:	f805 8b01 	strb.w	r8, [r5], #1
 8003676:	9a04      	ldr	r2, [sp, #16]
 8003678:	1aeb      	subs	r3, r5, r3
 800367a:	429a      	cmp	r2, r3
 800367c:	ddb5      	ble.n	80035ea <_dtoa_r+0xaba>
 800367e:	4659      	mov	r1, fp
 8003680:	2300      	movs	r3, #0
 8003682:	220a      	movs	r2, #10
 8003684:	4620      	mov	r0, r4
 8003686:	f000 f881 	bl	800378c <__multadd>
 800368a:	4683      	mov	fp, r0
 800368c:	e7ea      	b.n	8003664 <_dtoa_r+0xb34>
 800368e:	bf00      	nop
 8003690:	0800469d 	.word	0x0800469d
 8003694:	080046c1 	.word	0x080046c1

08003698 <_localeconv_r>:
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <_localeconv_r+0x14>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a18      	ldr	r0, [r3, #32]
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <_localeconv_r+0x18>)
 80036a0:	2800      	cmp	r0, #0
 80036a2:	bf08      	it	eq
 80036a4:	4618      	moveq	r0, r3
 80036a6:	30f0      	adds	r0, #240	; 0xf0
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000004 	.word	0x20000004
 80036b0:	20000068 	.word	0x20000068

080036b4 <malloc>:
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <malloc+0xc>)
 80036b6:	4601      	mov	r1, r0
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f000 bb53 	b.w	8003d64 <_malloc_r>
 80036be:	bf00      	nop
 80036c0:	20000004 	.word	0x20000004

080036c4 <memchr>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	b2c9      	uxtb	r1, r1
 80036c8:	4402      	add	r2, r0
 80036ca:	4290      	cmp	r0, r2
 80036cc:	4603      	mov	r3, r0
 80036ce:	d101      	bne.n	80036d4 <memchr+0x10>
 80036d0:	2300      	movs	r3, #0
 80036d2:	e003      	b.n	80036dc <memchr+0x18>
 80036d4:	781c      	ldrb	r4, [r3, #0]
 80036d6:	3001      	adds	r0, #1
 80036d8:	428c      	cmp	r4, r1
 80036da:	d1f6      	bne.n	80036ca <memchr+0x6>
 80036dc:	4618      	mov	r0, r3
 80036de:	bd10      	pop	{r4, pc}

080036e0 <memcpy>:
 80036e0:	b510      	push	{r4, lr}
 80036e2:	1e43      	subs	r3, r0, #1
 80036e4:	440a      	add	r2, r1
 80036e6:	4291      	cmp	r1, r2
 80036e8:	d100      	bne.n	80036ec <memcpy+0xc>
 80036ea:	bd10      	pop	{r4, pc}
 80036ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036f4:	e7f7      	b.n	80036e6 <memcpy+0x6>

080036f6 <_Balloc>:
 80036f6:	b570      	push	{r4, r5, r6, lr}
 80036f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036fa:	4604      	mov	r4, r0
 80036fc:	460e      	mov	r6, r1
 80036fe:	b93d      	cbnz	r5, 8003710 <_Balloc+0x1a>
 8003700:	2010      	movs	r0, #16
 8003702:	f7ff ffd7 	bl	80036b4 <malloc>
 8003706:	6260      	str	r0, [r4, #36]	; 0x24
 8003708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800370c:	6005      	str	r5, [r0, #0]
 800370e:	60c5      	str	r5, [r0, #12]
 8003710:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003712:	68eb      	ldr	r3, [r5, #12]
 8003714:	b183      	cbz	r3, 8003738 <_Balloc+0x42>
 8003716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800371e:	b9b8      	cbnz	r0, 8003750 <_Balloc+0x5a>
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f506 	lsl.w	r5, r1, r6
 8003726:	1d6a      	adds	r2, r5, #5
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4620      	mov	r0, r4
 800372c:	f000 fabf 	bl	8003cae <_calloc_r>
 8003730:	b160      	cbz	r0, 800374c <_Balloc+0x56>
 8003732:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003736:	e00e      	b.n	8003756 <_Balloc+0x60>
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	2104      	movs	r1, #4
 800373c:	4620      	mov	r0, r4
 800373e:	f000 fab6 	bl	8003cae <_calloc_r>
 8003742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003744:	60e8      	str	r0, [r5, #12]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e4      	bne.n	8003716 <_Balloc+0x20>
 800374c:	2000      	movs	r0, #0
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	6802      	ldr	r2, [r0, #0]
 8003752:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003756:	2300      	movs	r3, #0
 8003758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800375c:	e7f7      	b.n	800374e <_Balloc+0x58>

0800375e <_Bfree>:
 800375e:	b570      	push	{r4, r5, r6, lr}
 8003760:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003762:	4606      	mov	r6, r0
 8003764:	460d      	mov	r5, r1
 8003766:	b93c      	cbnz	r4, 8003778 <_Bfree+0x1a>
 8003768:	2010      	movs	r0, #16
 800376a:	f7ff ffa3 	bl	80036b4 <malloc>
 800376e:	6270      	str	r0, [r6, #36]	; 0x24
 8003770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003774:	6004      	str	r4, [r0, #0]
 8003776:	60c4      	str	r4, [r0, #12]
 8003778:	b13d      	cbz	r5, 800378a <_Bfree+0x2c>
 800377a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800377c:	686a      	ldr	r2, [r5, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003784:	6029      	str	r1, [r5, #0]
 8003786:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800378a:	bd70      	pop	{r4, r5, r6, pc}

0800378c <__multadd>:
 800378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003790:	461f      	mov	r7, r3
 8003792:	4606      	mov	r6, r0
 8003794:	460c      	mov	r4, r1
 8003796:	2300      	movs	r3, #0
 8003798:	690d      	ldr	r5, [r1, #16]
 800379a:	f101 0c14 	add.w	ip, r1, #20
 800379e:	f8dc 0000 	ldr.w	r0, [ip]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b281      	uxth	r1, r0
 80037a6:	fb02 7101 	mla	r1, r2, r1, r7
 80037aa:	0c00      	lsrs	r0, r0, #16
 80037ac:	0c0f      	lsrs	r7, r1, #16
 80037ae:	fb02 7000 	mla	r0, r2, r0, r7
 80037b2:	b289      	uxth	r1, r1
 80037b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80037b8:	429d      	cmp	r5, r3
 80037ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80037be:	f84c 1b04 	str.w	r1, [ip], #4
 80037c2:	dcec      	bgt.n	800379e <__multadd+0x12>
 80037c4:	b1d7      	cbz	r7, 80037fc <__multadd+0x70>
 80037c6:	68a3      	ldr	r3, [r4, #8]
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc12      	bgt.n	80037f2 <__multadd+0x66>
 80037cc:	6861      	ldr	r1, [r4, #4]
 80037ce:	4630      	mov	r0, r6
 80037d0:	3101      	adds	r1, #1
 80037d2:	f7ff ff90 	bl	80036f6 <_Balloc>
 80037d6:	4680      	mov	r8, r0
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	f104 010c 	add.w	r1, r4, #12
 80037de:	3202      	adds	r2, #2
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	300c      	adds	r0, #12
 80037e4:	f7ff ff7c 	bl	80036e0 <memcpy>
 80037e8:	4621      	mov	r1, r4
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7ff ffb7 	bl	800375e <_Bfree>
 80037f0:	4644      	mov	r4, r8
 80037f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037f6:	3501      	adds	r5, #1
 80037f8:	615f      	str	r7, [r3, #20]
 80037fa:	6125      	str	r5, [r4, #16]
 80037fc:	4620      	mov	r0, r4
 80037fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003802 <__hi0bits>:
 8003802:	0c02      	lsrs	r2, r0, #16
 8003804:	0412      	lsls	r2, r2, #16
 8003806:	4603      	mov	r3, r0
 8003808:	b9b2      	cbnz	r2, 8003838 <__hi0bits+0x36>
 800380a:	0403      	lsls	r3, r0, #16
 800380c:	2010      	movs	r0, #16
 800380e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003812:	bf04      	itt	eq
 8003814:	021b      	lsleq	r3, r3, #8
 8003816:	3008      	addeq	r0, #8
 8003818:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800381c:	bf04      	itt	eq
 800381e:	011b      	lsleq	r3, r3, #4
 8003820:	3004      	addeq	r0, #4
 8003822:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003826:	bf04      	itt	eq
 8003828:	009b      	lsleq	r3, r3, #2
 800382a:	3002      	addeq	r0, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	db06      	blt.n	800383e <__hi0bits+0x3c>
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	d503      	bpl.n	800383c <__hi0bits+0x3a>
 8003834:	3001      	adds	r0, #1
 8003836:	4770      	bx	lr
 8003838:	2000      	movs	r0, #0
 800383a:	e7e8      	b.n	800380e <__hi0bits+0xc>
 800383c:	2020      	movs	r0, #32
 800383e:	4770      	bx	lr

08003840 <__lo0bits>:
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	4601      	mov	r1, r0
 8003844:	f013 0207 	ands.w	r2, r3, #7
 8003848:	d00b      	beq.n	8003862 <__lo0bits+0x22>
 800384a:	07da      	lsls	r2, r3, #31
 800384c:	d423      	bmi.n	8003896 <__lo0bits+0x56>
 800384e:	0798      	lsls	r0, r3, #30
 8003850:	bf49      	itett	mi
 8003852:	085b      	lsrmi	r3, r3, #1
 8003854:	089b      	lsrpl	r3, r3, #2
 8003856:	2001      	movmi	r0, #1
 8003858:	600b      	strmi	r3, [r1, #0]
 800385a:	bf5c      	itt	pl
 800385c:	600b      	strpl	r3, [r1, #0]
 800385e:	2002      	movpl	r0, #2
 8003860:	4770      	bx	lr
 8003862:	b298      	uxth	r0, r3
 8003864:	b9a8      	cbnz	r0, 8003892 <__lo0bits+0x52>
 8003866:	2010      	movs	r0, #16
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800386e:	bf04      	itt	eq
 8003870:	0a1b      	lsreq	r3, r3, #8
 8003872:	3008      	addeq	r0, #8
 8003874:	071a      	lsls	r2, r3, #28
 8003876:	bf04      	itt	eq
 8003878:	091b      	lsreq	r3, r3, #4
 800387a:	3004      	addeq	r0, #4
 800387c:	079a      	lsls	r2, r3, #30
 800387e:	bf04      	itt	eq
 8003880:	089b      	lsreq	r3, r3, #2
 8003882:	3002      	addeq	r0, #2
 8003884:	07da      	lsls	r2, r3, #31
 8003886:	d402      	bmi.n	800388e <__lo0bits+0x4e>
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	d006      	beq.n	800389a <__lo0bits+0x5a>
 800388c:	3001      	adds	r0, #1
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	4770      	bx	lr
 8003892:	4610      	mov	r0, r2
 8003894:	e7e9      	b.n	800386a <__lo0bits+0x2a>
 8003896:	2000      	movs	r0, #0
 8003898:	4770      	bx	lr
 800389a:	2020      	movs	r0, #32
 800389c:	4770      	bx	lr

0800389e <__i2b>:
 800389e:	b510      	push	{r4, lr}
 80038a0:	460c      	mov	r4, r1
 80038a2:	2101      	movs	r1, #1
 80038a4:	f7ff ff27 	bl	80036f6 <_Balloc>
 80038a8:	2201      	movs	r2, #1
 80038aa:	6144      	str	r4, [r0, #20]
 80038ac:	6102      	str	r2, [r0, #16]
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <__multiply>:
 80038b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	4614      	mov	r4, r2
 80038b6:	690a      	ldr	r2, [r1, #16]
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	4688      	mov	r8, r1
 80038bc:	429a      	cmp	r2, r3
 80038be:	bfbe      	ittt	lt
 80038c0:	460b      	movlt	r3, r1
 80038c2:	46a0      	movlt	r8, r4
 80038c4:	461c      	movlt	r4, r3
 80038c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80038ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80038ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80038d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80038d6:	eb07 0609 	add.w	r6, r7, r9
 80038da:	42b3      	cmp	r3, r6
 80038dc:	bfb8      	it	lt
 80038de:	3101      	addlt	r1, #1
 80038e0:	f7ff ff09 	bl	80036f6 <_Balloc>
 80038e4:	f100 0514 	add.w	r5, r0, #20
 80038e8:	462b      	mov	r3, r5
 80038ea:	2200      	movs	r2, #0
 80038ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80038f0:	4573      	cmp	r3, lr
 80038f2:	d316      	bcc.n	8003922 <__multiply+0x72>
 80038f4:	f104 0214 	add.w	r2, r4, #20
 80038f8:	f108 0114 	add.w	r1, r8, #20
 80038fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003900:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	9b00      	ldr	r3, [sp, #0]
 8003908:	9201      	str	r2, [sp, #4]
 800390a:	4293      	cmp	r3, r2
 800390c:	d80c      	bhi.n	8003928 <__multiply+0x78>
 800390e:	2e00      	cmp	r6, #0
 8003910:	dd03      	ble.n	800391a <__multiply+0x6a>
 8003912:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003916:	2b00      	cmp	r3, #0
 8003918:	d05d      	beq.n	80039d6 <__multiply+0x126>
 800391a:	6106      	str	r6, [r0, #16]
 800391c:	b003      	add	sp, #12
 800391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003922:	f843 2b04 	str.w	r2, [r3], #4
 8003926:	e7e3      	b.n	80038f0 <__multiply+0x40>
 8003928:	f8b2 b000 	ldrh.w	fp, [r2]
 800392c:	f1bb 0f00 	cmp.w	fp, #0
 8003930:	d023      	beq.n	800397a <__multiply+0xca>
 8003932:	4689      	mov	r9, r1
 8003934:	46ac      	mov	ip, r5
 8003936:	f04f 0800 	mov.w	r8, #0
 800393a:	f859 4b04 	ldr.w	r4, [r9], #4
 800393e:	f8dc a000 	ldr.w	sl, [ip]
 8003942:	b2a3      	uxth	r3, r4
 8003944:	fa1f fa8a 	uxth.w	sl, sl
 8003948:	fb0b a303 	mla	r3, fp, r3, sl
 800394c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003950:	f8dc 4000 	ldr.w	r4, [ip]
 8003954:	4443      	add	r3, r8
 8003956:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800395a:	fb0b 840a 	mla	r4, fp, sl, r8
 800395e:	46e2      	mov	sl, ip
 8003960:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003964:	b29b      	uxth	r3, r3
 8003966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800396a:	454f      	cmp	r7, r9
 800396c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003970:	f84a 3b04 	str.w	r3, [sl], #4
 8003974:	d82b      	bhi.n	80039ce <__multiply+0x11e>
 8003976:	f8cc 8004 	str.w	r8, [ip, #4]
 800397a:	9b01      	ldr	r3, [sp, #4]
 800397c:	3204      	adds	r2, #4
 800397e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003982:	f1ba 0f00 	cmp.w	sl, #0
 8003986:	d020      	beq.n	80039ca <__multiply+0x11a>
 8003988:	4689      	mov	r9, r1
 800398a:	46a8      	mov	r8, r5
 800398c:	f04f 0b00 	mov.w	fp, #0
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	f8b9 c000 	ldrh.w	ip, [r9]
 8003996:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800399a:	b29b      	uxth	r3, r3
 800399c:	fb0a 440c 	mla	r4, sl, ip, r4
 80039a0:	46c4      	mov	ip, r8
 80039a2:	445c      	add	r4, fp
 80039a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80039a8:	f84c 3b04 	str.w	r3, [ip], #4
 80039ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80039b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80039b4:	0c1b      	lsrs	r3, r3, #16
 80039b6:	fb0a b303 	mla	r3, sl, r3, fp
 80039ba:	454f      	cmp	r7, r9
 80039bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80039c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80039c4:	d805      	bhi.n	80039d2 <__multiply+0x122>
 80039c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80039ca:	3504      	adds	r5, #4
 80039cc:	e79b      	b.n	8003906 <__multiply+0x56>
 80039ce:	46d4      	mov	ip, sl
 80039d0:	e7b3      	b.n	800393a <__multiply+0x8a>
 80039d2:	46e0      	mov	r8, ip
 80039d4:	e7dd      	b.n	8003992 <__multiply+0xe2>
 80039d6:	3e01      	subs	r6, #1
 80039d8:	e799      	b.n	800390e <__multiply+0x5e>
	...

080039dc <__pow5mult>:
 80039dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e0:	4615      	mov	r5, r2
 80039e2:	f012 0203 	ands.w	r2, r2, #3
 80039e6:	4606      	mov	r6, r0
 80039e8:	460f      	mov	r7, r1
 80039ea:	d007      	beq.n	80039fc <__pow5mult+0x20>
 80039ec:	4c21      	ldr	r4, [pc, #132]	; (8003a74 <__pow5mult+0x98>)
 80039ee:	3a01      	subs	r2, #1
 80039f0:	2300      	movs	r3, #0
 80039f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80039f6:	f7ff fec9 	bl	800378c <__multadd>
 80039fa:	4607      	mov	r7, r0
 80039fc:	10ad      	asrs	r5, r5, #2
 80039fe:	d035      	beq.n	8003a6c <__pow5mult+0x90>
 8003a00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a02:	b93c      	cbnz	r4, 8003a14 <__pow5mult+0x38>
 8003a04:	2010      	movs	r0, #16
 8003a06:	f7ff fe55 	bl	80036b4 <malloc>
 8003a0a:	6270      	str	r0, [r6, #36]	; 0x24
 8003a0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a10:	6004      	str	r4, [r0, #0]
 8003a12:	60c4      	str	r4, [r0, #12]
 8003a14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a1c:	b94c      	cbnz	r4, 8003a32 <__pow5mult+0x56>
 8003a1e:	f240 2171 	movw	r1, #625	; 0x271
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff ff3b 	bl	800389e <__i2b>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a30:	6003      	str	r3, [r0, #0]
 8003a32:	f04f 0800 	mov.w	r8, #0
 8003a36:	07eb      	lsls	r3, r5, #31
 8003a38:	d50a      	bpl.n	8003a50 <__pow5mult+0x74>
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7ff ff36 	bl	80038b0 <__multiply>
 8003a44:	4681      	mov	r9, r0
 8003a46:	4639      	mov	r1, r7
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f7ff fe88 	bl	800375e <_Bfree>
 8003a4e:	464f      	mov	r7, r9
 8003a50:	106d      	asrs	r5, r5, #1
 8003a52:	d00b      	beq.n	8003a6c <__pow5mult+0x90>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	b938      	cbnz	r0, 8003a68 <__pow5mult+0x8c>
 8003a58:	4622      	mov	r2, r4
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7ff ff27 	bl	80038b0 <__multiply>
 8003a62:	6020      	str	r0, [r4, #0]
 8003a64:	f8c0 8000 	str.w	r8, [r0]
 8003a68:	4604      	mov	r4, r0
 8003a6a:	e7e4      	b.n	8003a36 <__pow5mult+0x5a>
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a72:	bf00      	nop
 8003a74:	080047c0 	.word	0x080047c0

08003a78 <__lshift>:
 8003a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	4607      	mov	r7, r0
 8003a80:	4616      	mov	r6, r2
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003a88:	eb0a 0903 	add.w	r9, sl, r3
 8003a8c:	6849      	ldr	r1, [r1, #4]
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	f109 0501 	add.w	r5, r9, #1
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	db32      	blt.n	8003afe <__lshift+0x86>
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f7ff fe2c 	bl	80036f6 <_Balloc>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f100 0114 	add.w	r1, r0, #20
 8003aa8:	4553      	cmp	r3, sl
 8003aaa:	db2b      	blt.n	8003b04 <__lshift+0x8c>
 8003aac:	6920      	ldr	r0, [r4, #16]
 8003aae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ab2:	f104 0314 	add.w	r3, r4, #20
 8003ab6:	f016 021f 	ands.w	r2, r6, #31
 8003aba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003abe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003ac2:	d025      	beq.n	8003b10 <__lshift+0x98>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f1c2 0e20 	rsb	lr, r2, #32
 8003aca:	468a      	mov	sl, r1
 8003acc:	681e      	ldr	r6, [r3, #0]
 8003ace:	4096      	lsls	r6, r2
 8003ad0:	4330      	orrs	r0, r6
 8003ad2:	f84a 0b04 	str.w	r0, [sl], #4
 8003ad6:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ada:	459c      	cmp	ip, r3
 8003adc:	fa20 f00e 	lsr.w	r0, r0, lr
 8003ae0:	d814      	bhi.n	8003b0c <__lshift+0x94>
 8003ae2:	6048      	str	r0, [r1, #4]
 8003ae4:	b108      	cbz	r0, 8003aea <__lshift+0x72>
 8003ae6:	f109 0502 	add.w	r5, r9, #2
 8003aea:	3d01      	subs	r5, #1
 8003aec:	4638      	mov	r0, r7
 8003aee:	f8c8 5010 	str.w	r5, [r8, #16]
 8003af2:	4621      	mov	r1, r4
 8003af4:	f7ff fe33 	bl	800375e <_Bfree>
 8003af8:	4640      	mov	r0, r8
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afe:	3101      	adds	r1, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	e7c7      	b.n	8003a94 <__lshift+0x1c>
 8003b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	e7cd      	b.n	8003aa8 <__lshift+0x30>
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	e7dc      	b.n	8003aca <__lshift+0x52>
 8003b10:	3904      	subs	r1, #4
 8003b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b16:	459c      	cmp	ip, r3
 8003b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b1c:	d8f9      	bhi.n	8003b12 <__lshift+0x9a>
 8003b1e:	e7e4      	b.n	8003aea <__lshift+0x72>

08003b20 <__mcmp>:
 8003b20:	6903      	ldr	r3, [r0, #16]
 8003b22:	690a      	ldr	r2, [r1, #16]
 8003b24:	b530      	push	{r4, r5, lr}
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	d10c      	bne.n	8003b44 <__mcmp+0x24>
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	3014      	adds	r0, #20
 8003b2e:	3114      	adds	r1, #20
 8003b30:	1884      	adds	r4, r0, r2
 8003b32:	4411      	add	r1, r2
 8003b34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b3c:	4295      	cmp	r5, r2
 8003b3e:	d003      	beq.n	8003b48 <__mcmp+0x28>
 8003b40:	d305      	bcc.n	8003b4e <__mcmp+0x2e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd30      	pop	{r4, r5, pc}
 8003b48:	42a0      	cmp	r0, r4
 8003b4a:	d3f3      	bcc.n	8003b34 <__mcmp+0x14>
 8003b4c:	e7fa      	b.n	8003b44 <__mcmp+0x24>
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	e7f7      	b.n	8003b44 <__mcmp+0x24>

08003b54 <__mdiff>:
 8003b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b58:	460d      	mov	r5, r1
 8003b5a:	4607      	mov	r7, r0
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4628      	mov	r0, r5
 8003b60:	4614      	mov	r4, r2
 8003b62:	f7ff ffdd 	bl	8003b20 <__mcmp>
 8003b66:	1e06      	subs	r6, r0, #0
 8003b68:	d108      	bne.n	8003b7c <__mdiff+0x28>
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f7ff fdc2 	bl	80036f6 <_Balloc>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7c:	bfa4      	itt	ge
 8003b7e:	4623      	movge	r3, r4
 8003b80:	462c      	movge	r4, r5
 8003b82:	4638      	mov	r0, r7
 8003b84:	6861      	ldr	r1, [r4, #4]
 8003b86:	bfa6      	itte	ge
 8003b88:	461d      	movge	r5, r3
 8003b8a:	2600      	movge	r6, #0
 8003b8c:	2601      	movlt	r6, #1
 8003b8e:	f7ff fdb2 	bl	80036f6 <_Balloc>
 8003b92:	f04f 0e00 	mov.w	lr, #0
 8003b96:	60c6      	str	r6, [r0, #12]
 8003b98:	692b      	ldr	r3, [r5, #16]
 8003b9a:	6926      	ldr	r6, [r4, #16]
 8003b9c:	f104 0214 	add.w	r2, r4, #20
 8003ba0:	f105 0914 	add.w	r9, r5, #20
 8003ba4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003ba8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003bac:	f100 0114 	add.w	r1, r0, #20
 8003bb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8003bb4:	f859 5b04 	ldr.w	r5, [r9], #4
 8003bb8:	fa1f f38a 	uxth.w	r3, sl
 8003bbc:	4473      	add	r3, lr
 8003bbe:	b2ac      	uxth	r4, r5
 8003bc0:	1b1b      	subs	r3, r3, r4
 8003bc2:	0c2c      	lsrs	r4, r5, #16
 8003bc4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003bc8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003bd2:	45c8      	cmp	r8, r9
 8003bd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003bd8:	4694      	mov	ip, r2
 8003bda:	f841 4b04 	str.w	r4, [r1], #4
 8003bde:	d8e7      	bhi.n	8003bb0 <__mdiff+0x5c>
 8003be0:	45bc      	cmp	ip, r7
 8003be2:	d304      	bcc.n	8003bee <__mdiff+0x9a>
 8003be4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003be8:	b183      	cbz	r3, 8003c0c <__mdiff+0xb8>
 8003bea:	6106      	str	r6, [r0, #16]
 8003bec:	e7c4      	b.n	8003b78 <__mdiff+0x24>
 8003bee:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003bf2:	b2a2      	uxth	r2, r4
 8003bf4:	4472      	add	r2, lr
 8003bf6:	1413      	asrs	r3, r2, #16
 8003bf8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003c06:	f841 2b04 	str.w	r2, [r1], #4
 8003c0a:	e7e9      	b.n	8003be0 <__mdiff+0x8c>
 8003c0c:	3e01      	subs	r6, #1
 8003c0e:	e7e9      	b.n	8003be4 <__mdiff+0x90>

08003c10 <__d2b>:
 8003c10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c14:	461c      	mov	r4, r3
 8003c16:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	f7ff fd6a 	bl	80036f6 <_Balloc>
 8003c22:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003c26:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003c2a:	4607      	mov	r7, r0
 8003c2c:	bb34      	cbnz	r4, 8003c7c <__d2b+0x6c>
 8003c2e:	9201      	str	r2, [sp, #4]
 8003c30:	f1b8 0200 	subs.w	r2, r8, #0
 8003c34:	d027      	beq.n	8003c86 <__d2b+0x76>
 8003c36:	a802      	add	r0, sp, #8
 8003c38:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003c3c:	f7ff fe00 	bl	8003840 <__lo0bits>
 8003c40:	9900      	ldr	r1, [sp, #0]
 8003c42:	b1f0      	cbz	r0, 8003c82 <__d2b+0x72>
 8003c44:	9a01      	ldr	r2, [sp, #4]
 8003c46:	f1c0 0320 	rsb	r3, r0, #32
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	40c2      	lsrs	r2, r0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	9b01      	ldr	r3, [sp, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2102      	movne	r1, #2
 8003c5e:	2101      	moveq	r1, #1
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	6139      	str	r1, [r7, #16]
 8003c64:	b1c4      	cbz	r4, 8003c98 <__d2b+0x88>
 8003c66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003c6a:	4404      	add	r4, r0
 8003c6c:	6034      	str	r4, [r6, #0]
 8003c6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003c72:	6028      	str	r0, [r5, #0]
 8003c74:	4638      	mov	r0, r7
 8003c76:	b002      	add	sp, #8
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c80:	e7d5      	b.n	8003c2e <__d2b+0x1e>
 8003c82:	6179      	str	r1, [r7, #20]
 8003c84:	e7e7      	b.n	8003c56 <__d2b+0x46>
 8003c86:	a801      	add	r0, sp, #4
 8003c88:	f7ff fdda 	bl	8003840 <__lo0bits>
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	9b01      	ldr	r3, [sp, #4]
 8003c90:	6139      	str	r1, [r7, #16]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	3020      	adds	r0, #32
 8003c96:	e7e5      	b.n	8003c64 <__d2b+0x54>
 8003c98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003c9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003ca0:	6030      	str	r0, [r6, #0]
 8003ca2:	6918      	ldr	r0, [r3, #16]
 8003ca4:	f7ff fdad 	bl	8003802 <__hi0bits>
 8003ca8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003cac:	e7e1      	b.n	8003c72 <__d2b+0x62>

08003cae <_calloc_r>:
 8003cae:	b538      	push	{r3, r4, r5, lr}
 8003cb0:	fb02 f401 	mul.w	r4, r2, r1
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f000 f855 	bl	8003d64 <_malloc_r>
 8003cba:	4605      	mov	r5, r0
 8003cbc:	b118      	cbz	r0, 8003cc6 <_calloc_r+0x18>
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	f7fe fa2d 	bl	8002120 <memset>
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ccc <_free_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4605      	mov	r5, r0
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d043      	beq.n	8003d5c <_free_r+0x90>
 8003cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd8:	1f0c      	subs	r4, r1, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bfb8      	it	lt
 8003cde:	18e4      	addlt	r4, r4, r3
 8003ce0:	f000 fa27 	bl	8004132 <__malloc_lock>
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <_free_r+0x94>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	4610      	mov	r0, r2
 8003cea:	b933      	cbnz	r3, 8003cfa <_free_r+0x2e>
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	6014      	str	r4, [r2, #0]
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cf6:	f000 ba1d 	b.w	8004134 <__malloc_unlock>
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	d90b      	bls.n	8003d16 <_free_r+0x4a>
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	1862      	adds	r2, r4, r1
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bf01      	itttt	eq
 8003d06:	681a      	ldreq	r2, [r3, #0]
 8003d08:	685b      	ldreq	r3, [r3, #4]
 8003d0a:	1852      	addeq	r2, r2, r1
 8003d0c:	6022      	streq	r2, [r4, #0]
 8003d0e:	6063      	str	r3, [r4, #4]
 8003d10:	6004      	str	r4, [r0, #0]
 8003d12:	e7ed      	b.n	8003cf0 <_free_r+0x24>
 8003d14:	4613      	mov	r3, r2
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	b10a      	cbz	r2, 8003d1e <_free_r+0x52>
 8003d1a:	42a2      	cmp	r2, r4
 8003d1c:	d9fa      	bls.n	8003d14 <_free_r+0x48>
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	1858      	adds	r0, r3, r1
 8003d22:	42a0      	cmp	r0, r4
 8003d24:	d10b      	bne.n	8003d3e <_free_r+0x72>
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	4401      	add	r1, r0
 8003d2a:	1858      	adds	r0, r3, r1
 8003d2c:	4282      	cmp	r2, r0
 8003d2e:	6019      	str	r1, [r3, #0]
 8003d30:	d1de      	bne.n	8003cf0 <_free_r+0x24>
 8003d32:	6810      	ldr	r0, [r2, #0]
 8003d34:	6852      	ldr	r2, [r2, #4]
 8003d36:	4401      	add	r1, r0
 8003d38:	6019      	str	r1, [r3, #0]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	e7d8      	b.n	8003cf0 <_free_r+0x24>
 8003d3e:	d902      	bls.n	8003d46 <_free_r+0x7a>
 8003d40:	230c      	movs	r3, #12
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	e7d4      	b.n	8003cf0 <_free_r+0x24>
 8003d46:	6820      	ldr	r0, [r4, #0]
 8003d48:	1821      	adds	r1, r4, r0
 8003d4a:	428a      	cmp	r2, r1
 8003d4c:	bf01      	itttt	eq
 8003d4e:	6811      	ldreq	r1, [r2, #0]
 8003d50:	6852      	ldreq	r2, [r2, #4]
 8003d52:	1809      	addeq	r1, r1, r0
 8003d54:	6021      	streq	r1, [r4, #0]
 8003d56:	6062      	str	r2, [r4, #4]
 8003d58:	605c      	str	r4, [r3, #4]
 8003d5a:	e7c9      	b.n	8003cf0 <_free_r+0x24>
 8003d5c:	bd38      	pop	{r3, r4, r5, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000200 	.word	0x20000200

08003d64 <_malloc_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	1ccd      	adds	r5, r1, #3
 8003d68:	f025 0503 	bic.w	r5, r5, #3
 8003d6c:	3508      	adds	r5, #8
 8003d6e:	2d0c      	cmp	r5, #12
 8003d70:	bf38      	it	cc
 8003d72:	250c      	movcc	r5, #12
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	4606      	mov	r6, r0
 8003d78:	db01      	blt.n	8003d7e <_malloc_r+0x1a>
 8003d7a:	42a9      	cmp	r1, r5
 8003d7c:	d903      	bls.n	8003d86 <_malloc_r+0x22>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	6033      	str	r3, [r6, #0]
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
 8003d86:	f000 f9d4 	bl	8004132 <__malloc_lock>
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <_malloc_r+0xac>)
 8003d8c:	6814      	ldr	r4, [r2, #0]
 8003d8e:	4621      	mov	r1, r4
 8003d90:	b991      	cbnz	r1, 8003db8 <_malloc_r+0x54>
 8003d92:	4c20      	ldr	r4, [pc, #128]	; (8003e14 <_malloc_r+0xb0>)
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	b91b      	cbnz	r3, 8003da0 <_malloc_r+0x3c>
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f000 f98f 	bl	80040bc <_sbrk_r>
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	4629      	mov	r1, r5
 8003da2:	4630      	mov	r0, r6
 8003da4:	f000 f98a 	bl	80040bc <_sbrk_r>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d124      	bne.n	8003df6 <_malloc_r+0x92>
 8003dac:	230c      	movs	r3, #12
 8003dae:	4630      	mov	r0, r6
 8003db0:	6033      	str	r3, [r6, #0]
 8003db2:	f000 f9bf 	bl	8004134 <__malloc_unlock>
 8003db6:	e7e4      	b.n	8003d82 <_malloc_r+0x1e>
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	1b5b      	subs	r3, r3, r5
 8003dbc:	d418      	bmi.n	8003df0 <_malloc_r+0x8c>
 8003dbe:	2b0b      	cmp	r3, #11
 8003dc0:	d90f      	bls.n	8003de2 <_malloc_r+0x7e>
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	18cc      	adds	r4, r1, r3
 8003dc6:	50cd      	str	r5, [r1, r3]
 8003dc8:	4630      	mov	r0, r6
 8003dca:	f000 f9b3 	bl	8004134 <__malloc_unlock>
 8003dce:	f104 000b 	add.w	r0, r4, #11
 8003dd2:	1d23      	adds	r3, r4, #4
 8003dd4:	f020 0007 	bic.w	r0, r0, #7
 8003dd8:	1ac3      	subs	r3, r0, r3
 8003dda:	d0d3      	beq.n	8003d84 <_malloc_r+0x20>
 8003ddc:	425a      	negs	r2, r3
 8003dde:	50e2      	str	r2, [r4, r3]
 8003de0:	e7d0      	b.n	8003d84 <_malloc_r+0x20>
 8003de2:	684b      	ldr	r3, [r1, #4]
 8003de4:	428c      	cmp	r4, r1
 8003de6:	bf16      	itet	ne
 8003de8:	6063      	strne	r3, [r4, #4]
 8003dea:	6013      	streq	r3, [r2, #0]
 8003dec:	460c      	movne	r4, r1
 8003dee:	e7eb      	b.n	8003dc8 <_malloc_r+0x64>
 8003df0:	460c      	mov	r4, r1
 8003df2:	6849      	ldr	r1, [r1, #4]
 8003df4:	e7cc      	b.n	8003d90 <_malloc_r+0x2c>
 8003df6:	1cc4      	adds	r4, r0, #3
 8003df8:	f024 0403 	bic.w	r4, r4, #3
 8003dfc:	42a0      	cmp	r0, r4
 8003dfe:	d005      	beq.n	8003e0c <_malloc_r+0xa8>
 8003e00:	1a21      	subs	r1, r4, r0
 8003e02:	4630      	mov	r0, r6
 8003e04:	f000 f95a 	bl	80040bc <_sbrk_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d0cf      	beq.n	8003dac <_malloc_r+0x48>
 8003e0c:	6025      	str	r5, [r4, #0]
 8003e0e:	e7db      	b.n	8003dc8 <_malloc_r+0x64>
 8003e10:	20000200 	.word	0x20000200
 8003e14:	20000204 	.word	0x20000204

08003e18 <__ssputs_r>:
 8003e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	688e      	ldr	r6, [r1, #8]
 8003e1e:	4682      	mov	sl, r0
 8003e20:	429e      	cmp	r6, r3
 8003e22:	460c      	mov	r4, r1
 8003e24:	4690      	mov	r8, r2
 8003e26:	4699      	mov	r9, r3
 8003e28:	d837      	bhi.n	8003e9a <__ssputs_r+0x82>
 8003e2a:	898a      	ldrh	r2, [r1, #12]
 8003e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e30:	d031      	beq.n	8003e96 <__ssputs_r+0x7e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	6825      	ldr	r5, [r4, #0]
 8003e36:	6909      	ldr	r1, [r1, #16]
 8003e38:	1a6f      	subs	r7, r5, r1
 8003e3a:	6965      	ldr	r5, [r4, #20]
 8003e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e44:	f109 0301 	add.w	r3, r9, #1
 8003e48:	443b      	add	r3, r7
 8003e4a:	429d      	cmp	r5, r3
 8003e4c:	bf38      	it	cc
 8003e4e:	461d      	movcc	r5, r3
 8003e50:	0553      	lsls	r3, r2, #21
 8003e52:	d530      	bpl.n	8003eb6 <__ssputs_r+0x9e>
 8003e54:	4629      	mov	r1, r5
 8003e56:	f7ff ff85 	bl	8003d64 <_malloc_r>
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	b950      	cbnz	r0, 8003e74 <__ssputs_r+0x5c>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	f8ca 3000 	str.w	r3, [sl]
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e74:	463a      	mov	r2, r7
 8003e76:	6921      	ldr	r1, [r4, #16]
 8003e78:	f7ff fc32 	bl	80036e0 <memcpy>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	6126      	str	r6, [r4, #16]
 8003e8a:	443e      	add	r6, r7
 8003e8c:	6026      	str	r6, [r4, #0]
 8003e8e:	464e      	mov	r6, r9
 8003e90:	6165      	str	r5, [r4, #20]
 8003e92:	1bed      	subs	r5, r5, r7
 8003e94:	60a5      	str	r5, [r4, #8]
 8003e96:	454e      	cmp	r6, r9
 8003e98:	d900      	bls.n	8003e9c <__ssputs_r+0x84>
 8003e9a:	464e      	mov	r6, r9
 8003e9c:	4632      	mov	r2, r6
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f000 f92d 	bl	8004100 <memmove>
 8003ea6:	68a3      	ldr	r3, [r4, #8]
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	1b9b      	subs	r3, r3, r6
 8003eac:	60a3      	str	r3, [r4, #8]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	441e      	add	r6, r3
 8003eb2:	6026      	str	r6, [r4, #0]
 8003eb4:	e7dc      	b.n	8003e70 <__ssputs_r+0x58>
 8003eb6:	462a      	mov	r2, r5
 8003eb8:	f000 f93d 	bl	8004136 <_realloc_r>
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1e2      	bne.n	8003e88 <__ssputs_r+0x70>
 8003ec2:	6921      	ldr	r1, [r4, #16]
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	f7ff ff01 	bl	8003ccc <_free_r>
 8003eca:	e7c8      	b.n	8003e5e <__ssputs_r+0x46>

08003ecc <_svfiprintf_r>:
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	461d      	mov	r5, r3
 8003ed2:	898b      	ldrh	r3, [r1, #12]
 8003ed4:	b09d      	sub	sp, #116	; 0x74
 8003ed6:	061f      	lsls	r7, r3, #24
 8003ed8:	4680      	mov	r8, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4616      	mov	r6, r2
 8003ede:	d50f      	bpl.n	8003f00 <_svfiprintf_r+0x34>
 8003ee0:	690b      	ldr	r3, [r1, #16]
 8003ee2:	b96b      	cbnz	r3, 8003f00 <_svfiprintf_r+0x34>
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	f7ff ff3d 	bl	8003d64 <_malloc_r>
 8003eea:	6020      	str	r0, [r4, #0]
 8003eec:	6120      	str	r0, [r4, #16]
 8003eee:	b928      	cbnz	r0, 8003efc <_svfiprintf_r+0x30>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	f8c8 3000 	str.w	r3, [r8]
 8003ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8003efa:	e0c8      	b.n	800408e <_svfiprintf_r+0x1c2>
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	6163      	str	r3, [r4, #20]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	2320      	movs	r3, #32
 8003f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0a:	2330      	movs	r3, #48	; 0x30
 8003f0c:	f04f 0b01 	mov.w	fp, #1
 8003f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f14:	9503      	str	r5, [sp, #12]
 8003f16:	4637      	mov	r7, r6
 8003f18:	463d      	mov	r5, r7
 8003f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f1e:	b10b      	cbz	r3, 8003f24 <_svfiprintf_r+0x58>
 8003f20:	2b25      	cmp	r3, #37	; 0x25
 8003f22:	d13e      	bne.n	8003fa2 <_svfiprintf_r+0xd6>
 8003f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f28:	d00b      	beq.n	8003f42 <_svfiprintf_r+0x76>
 8003f2a:	4653      	mov	r3, sl
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4640      	mov	r0, r8
 8003f32:	f7ff ff71 	bl	8003e18 <__ssputs_r>
 8003f36:	3001      	adds	r0, #1
 8003f38:	f000 80a4 	beq.w	8004084 <_svfiprintf_r+0x1b8>
 8003f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3e:	4453      	add	r3, sl
 8003f40:	9309      	str	r3, [sp, #36]	; 0x24
 8003f42:	783b      	ldrb	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 809d 	beq.w	8004084 <_svfiprintf_r+0x1b8>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	9307      	str	r3, [sp, #28]
 8003f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f5e:	462f      	mov	r7, r5
 8003f60:	2205      	movs	r2, #5
 8003f62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f66:	4850      	ldr	r0, [pc, #320]	; (80040a8 <_svfiprintf_r+0x1dc>)
 8003f68:	f7ff fbac 	bl	80036c4 <memchr>
 8003f6c:	9b04      	ldr	r3, [sp, #16]
 8003f6e:	b9d0      	cbnz	r0, 8003fa6 <_svfiprintf_r+0xda>
 8003f70:	06d9      	lsls	r1, r3, #27
 8003f72:	bf44      	itt	mi
 8003f74:	2220      	movmi	r2, #32
 8003f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f7a:	071a      	lsls	r2, r3, #28
 8003f7c:	bf44      	itt	mi
 8003f7e:	222b      	movmi	r2, #43	; 0x2b
 8003f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f84:	782a      	ldrb	r2, [r5, #0]
 8003f86:	2a2a      	cmp	r2, #42	; 0x2a
 8003f88:	d015      	beq.n	8003fb6 <_svfiprintf_r+0xea>
 8003f8a:	462f      	mov	r7, r5
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	250a      	movs	r5, #10
 8003f90:	9a07      	ldr	r2, [sp, #28]
 8003f92:	4639      	mov	r1, r7
 8003f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f98:	3b30      	subs	r3, #48	; 0x30
 8003f9a:	2b09      	cmp	r3, #9
 8003f9c:	d94d      	bls.n	800403a <_svfiprintf_r+0x16e>
 8003f9e:	b1b8      	cbz	r0, 8003fd0 <_svfiprintf_r+0x104>
 8003fa0:	e00f      	b.n	8003fc2 <_svfiprintf_r+0xf6>
 8003fa2:	462f      	mov	r7, r5
 8003fa4:	e7b8      	b.n	8003f18 <_svfiprintf_r+0x4c>
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <_svfiprintf_r+0x1dc>)
 8003fa8:	463d      	mov	r5, r7
 8003faa:	1a80      	subs	r0, r0, r2
 8003fac:	fa0b f000 	lsl.w	r0, fp, r0
 8003fb0:	4318      	orrs	r0, r3
 8003fb2:	9004      	str	r0, [sp, #16]
 8003fb4:	e7d3      	b.n	8003f5e <_svfiprintf_r+0x92>
 8003fb6:	9a03      	ldr	r2, [sp, #12]
 8003fb8:	1d11      	adds	r1, r2, #4
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	9103      	str	r1, [sp, #12]
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	db01      	blt.n	8003fc6 <_svfiprintf_r+0xfa>
 8003fc2:	9207      	str	r2, [sp, #28]
 8003fc4:	e004      	b.n	8003fd0 <_svfiprintf_r+0x104>
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	f043 0302 	orr.w	r3, r3, #2
 8003fcc:	9207      	str	r2, [sp, #28]
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	783b      	ldrb	r3, [r7, #0]
 8003fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fd4:	d10c      	bne.n	8003ff0 <_svfiprintf_r+0x124>
 8003fd6:	787b      	ldrb	r3, [r7, #1]
 8003fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8003fda:	d133      	bne.n	8004044 <_svfiprintf_r+0x178>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	3702      	adds	r7, #2
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	9203      	str	r2, [sp, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bfb8      	it	lt
 8003fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fee:	9305      	str	r3, [sp, #20]
 8003ff0:	4d2e      	ldr	r5, [pc, #184]	; (80040ac <_svfiprintf_r+0x1e0>)
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	7839      	ldrb	r1, [r7, #0]
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f7ff fb64 	bl	80036c4 <memchr>
 8003ffc:	b138      	cbz	r0, 800400e <_svfiprintf_r+0x142>
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	1b40      	subs	r0, r0, r5
 8004002:	fa03 f000 	lsl.w	r0, r3, r0
 8004006:	9b04      	ldr	r3, [sp, #16]
 8004008:	3701      	adds	r7, #1
 800400a:	4303      	orrs	r3, r0
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	7839      	ldrb	r1, [r7, #0]
 8004010:	2206      	movs	r2, #6
 8004012:	4827      	ldr	r0, [pc, #156]	; (80040b0 <_svfiprintf_r+0x1e4>)
 8004014:	1c7e      	adds	r6, r7, #1
 8004016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800401a:	f7ff fb53 	bl	80036c4 <memchr>
 800401e:	2800      	cmp	r0, #0
 8004020:	d038      	beq.n	8004094 <_svfiprintf_r+0x1c8>
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <_svfiprintf_r+0x1e8>)
 8004024:	bb13      	cbnz	r3, 800406c <_svfiprintf_r+0x1a0>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	3307      	adds	r3, #7
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	3308      	adds	r3, #8
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	444b      	add	r3, r9
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	e76d      	b.n	8003f16 <_svfiprintf_r+0x4a>
 800403a:	fb05 3202 	mla	r2, r5, r2, r3
 800403e:	2001      	movs	r0, #1
 8004040:	460f      	mov	r7, r1
 8004042:	e7a6      	b.n	8003f92 <_svfiprintf_r+0xc6>
 8004044:	2300      	movs	r3, #0
 8004046:	250a      	movs	r5, #10
 8004048:	4619      	mov	r1, r3
 800404a:	3701      	adds	r7, #1
 800404c:	9305      	str	r3, [sp, #20]
 800404e:	4638      	mov	r0, r7
 8004050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004054:	3a30      	subs	r2, #48	; 0x30
 8004056:	2a09      	cmp	r2, #9
 8004058:	d903      	bls.n	8004062 <_svfiprintf_r+0x196>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0c8      	beq.n	8003ff0 <_svfiprintf_r+0x124>
 800405e:	9105      	str	r1, [sp, #20]
 8004060:	e7c6      	b.n	8003ff0 <_svfiprintf_r+0x124>
 8004062:	fb05 2101 	mla	r1, r5, r1, r2
 8004066:	2301      	movs	r3, #1
 8004068:	4607      	mov	r7, r0
 800406a:	e7f0      	b.n	800404e <_svfiprintf_r+0x182>
 800406c:	ab03      	add	r3, sp, #12
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4622      	mov	r2, r4
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <_svfiprintf_r+0x1ec>)
 8004074:	a904      	add	r1, sp, #16
 8004076:	4640      	mov	r0, r8
 8004078:	f7fe f8ec 	bl	8002254 <_printf_float>
 800407c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004080:	4681      	mov	r9, r0
 8004082:	d1d6      	bne.n	8004032 <_svfiprintf_r+0x166>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	065b      	lsls	r3, r3, #25
 8004088:	f53f af35 	bmi.w	8003ef6 <_svfiprintf_r+0x2a>
 800408c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800408e:	b01d      	add	sp, #116	; 0x74
 8004090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004094:	ab03      	add	r3, sp, #12
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	4622      	mov	r2, r4
 800409a:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <_svfiprintf_r+0x1ec>)
 800409c:	a904      	add	r1, sp, #16
 800409e:	4640      	mov	r0, r8
 80040a0:	f7fe fb84 	bl	80027ac <_printf_i>
 80040a4:	e7ea      	b.n	800407c <_svfiprintf_r+0x1b0>
 80040a6:	bf00      	nop
 80040a8:	080047cc 	.word	0x080047cc
 80040ac:	080047d2 	.word	0x080047d2
 80040b0:	080047d6 	.word	0x080047d6
 80040b4:	08002255 	.word	0x08002255
 80040b8:	08003e19 	.word	0x08003e19

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	2300      	movs	r3, #0
 80040c0:	4c05      	ldr	r4, [pc, #20]	; (80040d8 <_sbrk_r+0x1c>)
 80040c2:	4605      	mov	r5, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	f7fd ffa0 	bl	800200c <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000260 	.word	0x20000260

080040dc <__ascii_mbtowc>:
 80040dc:	b082      	sub	sp, #8
 80040de:	b901      	cbnz	r1, 80040e2 <__ascii_mbtowc+0x6>
 80040e0:	a901      	add	r1, sp, #4
 80040e2:	b142      	cbz	r2, 80040f6 <__ascii_mbtowc+0x1a>
 80040e4:	b14b      	cbz	r3, 80040fa <__ascii_mbtowc+0x1e>
 80040e6:	7813      	ldrb	r3, [r2, #0]
 80040e8:	600b      	str	r3, [r1, #0]
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	1c10      	adds	r0, r2, #0
 80040ee:	bf18      	it	ne
 80040f0:	2001      	movne	r0, #1
 80040f2:	b002      	add	sp, #8
 80040f4:	4770      	bx	lr
 80040f6:	4610      	mov	r0, r2
 80040f8:	e7fb      	b.n	80040f2 <__ascii_mbtowc+0x16>
 80040fa:	f06f 0001 	mvn.w	r0, #1
 80040fe:	e7f8      	b.n	80040f2 <__ascii_mbtowc+0x16>

08004100 <memmove>:
 8004100:	4288      	cmp	r0, r1
 8004102:	b510      	push	{r4, lr}
 8004104:	eb01 0302 	add.w	r3, r1, r2
 8004108:	d807      	bhi.n	800411a <memmove+0x1a>
 800410a:	1e42      	subs	r2, r0, #1
 800410c:	4299      	cmp	r1, r3
 800410e:	d00a      	beq.n	8004126 <memmove+0x26>
 8004110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004114:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004118:	e7f8      	b.n	800410c <memmove+0xc>
 800411a:	4283      	cmp	r3, r0
 800411c:	d9f5      	bls.n	800410a <memmove+0xa>
 800411e:	1881      	adds	r1, r0, r2
 8004120:	1ad2      	subs	r2, r2, r3
 8004122:	42d3      	cmn	r3, r2
 8004124:	d100      	bne.n	8004128 <memmove+0x28>
 8004126:	bd10      	pop	{r4, pc}
 8004128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800412c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004130:	e7f7      	b.n	8004122 <memmove+0x22>

08004132 <__malloc_lock>:
 8004132:	4770      	bx	lr

08004134 <__malloc_unlock>:
 8004134:	4770      	bx	lr

08004136 <_realloc_r>:
 8004136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004138:	4607      	mov	r7, r0
 800413a:	4614      	mov	r4, r2
 800413c:	460e      	mov	r6, r1
 800413e:	b921      	cbnz	r1, 800414a <_realloc_r+0x14>
 8004140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004144:	4611      	mov	r1, r2
 8004146:	f7ff be0d 	b.w	8003d64 <_malloc_r>
 800414a:	b922      	cbnz	r2, 8004156 <_realloc_r+0x20>
 800414c:	f7ff fdbe 	bl	8003ccc <_free_r>
 8004150:	4625      	mov	r5, r4
 8004152:	4628      	mov	r0, r5
 8004154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004156:	f000 f821 	bl	800419c <_malloc_usable_size_r>
 800415a:	42a0      	cmp	r0, r4
 800415c:	d20f      	bcs.n	800417e <_realloc_r+0x48>
 800415e:	4621      	mov	r1, r4
 8004160:	4638      	mov	r0, r7
 8004162:	f7ff fdff 	bl	8003d64 <_malloc_r>
 8004166:	4605      	mov	r5, r0
 8004168:	2800      	cmp	r0, #0
 800416a:	d0f2      	beq.n	8004152 <_realloc_r+0x1c>
 800416c:	4631      	mov	r1, r6
 800416e:	4622      	mov	r2, r4
 8004170:	f7ff fab6 	bl	80036e0 <memcpy>
 8004174:	4631      	mov	r1, r6
 8004176:	4638      	mov	r0, r7
 8004178:	f7ff fda8 	bl	8003ccc <_free_r>
 800417c:	e7e9      	b.n	8004152 <_realloc_r+0x1c>
 800417e:	4635      	mov	r5, r6
 8004180:	e7e7      	b.n	8004152 <_realloc_r+0x1c>

08004182 <__ascii_wctomb>:
 8004182:	b149      	cbz	r1, 8004198 <__ascii_wctomb+0x16>
 8004184:	2aff      	cmp	r2, #255	; 0xff
 8004186:	bf8b      	itete	hi
 8004188:	238a      	movhi	r3, #138	; 0x8a
 800418a:	700a      	strbls	r2, [r1, #0]
 800418c:	6003      	strhi	r3, [r0, #0]
 800418e:	2001      	movls	r0, #1
 8004190:	bf88      	it	hi
 8004192:	f04f 30ff 	movhi.w	r0, #4294967295
 8004196:	4770      	bx	lr
 8004198:	4608      	mov	r0, r1
 800419a:	4770      	bx	lr

0800419c <_malloc_usable_size_r>:
 800419c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a0:	1f18      	subs	r0, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfbc      	itt	lt
 80041a6:	580b      	ldrlt	r3, [r1, r0]
 80041a8:	18c0      	addlt	r0, r0, r3
 80041aa:	4770      	bx	lr

080041ac <log>:
 80041ac:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80041b0:	b08a      	sub	sp, #40	; 0x28
 80041b2:	4604      	mov	r4, r0
 80041b4:	460d      	mov	r5, r1
 80041b6:	f000 f873 	bl	80042a0 <__ieee754_log>
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <log+0xe0>)
 80041bc:	4680      	mov	r8, r0
 80041be:	f993 6000 	ldrsb.w	r6, [r3]
 80041c2:	4689      	mov	r9, r1
 80041c4:	1c73      	adds	r3, r6, #1
 80041c6:	d05b      	beq.n	8004280 <log+0xd4>
 80041c8:	4622      	mov	r2, r4
 80041ca:	462b      	mov	r3, r5
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	f7fc fc2c 	bl	8000a2c <__aeabi_dcmpun>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d153      	bne.n	8004280 <log+0xd4>
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	4620      	mov	r0, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	f7fc fc1a 	bl	8000a18 <__aeabi_dcmpgt>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d14b      	bne.n	8004280 <log+0xd4>
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <log+0xe4>)
 80041ea:	9008      	str	r0, [sp, #32]
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041f2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80041f6:	b9a6      	cbnz	r6, 8004222 <log+0x76>
 80041f8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <log+0xe8>)
 80041fe:	4620      	mov	r0, r4
 8004200:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004204:	4629      	mov	r1, r5
 8004206:	2200      	movs	r2, #0
 8004208:	2300      	movs	r3, #0
 800420a:	f7fc fbdd 	bl	80009c8 <__aeabi_dcmpeq>
 800420e:	bb40      	cbnz	r0, 8004262 <log+0xb6>
 8004210:	2301      	movs	r3, #1
 8004212:	2e02      	cmp	r6, #2
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	d119      	bne.n	800424c <log+0xa0>
 8004218:	f7fd ff58 	bl	80020cc <__errno>
 800421c:	2321      	movs	r3, #33	; 0x21
 800421e:	6003      	str	r3, [r0, #0]
 8004220:	e019      	b.n	8004256 <log+0xaa>
 8004222:	2200      	movs	r2, #0
 8004224:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <log+0xec>)
 8004226:	4620      	mov	r0, r4
 8004228:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800422c:	4629      	mov	r1, r5
 800422e:	2200      	movs	r2, #0
 8004230:	2300      	movs	r3, #0
 8004232:	f7fc fbc9 	bl	80009c8 <__aeabi_dcmpeq>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0ea      	beq.n	8004210 <log+0x64>
 800423a:	2302      	movs	r3, #2
 800423c:	429e      	cmp	r6, r3
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	d111      	bne.n	8004266 <log+0xba>
 8004242:	f7fd ff43 	bl	80020cc <__errno>
 8004246:	2322      	movs	r3, #34	; 0x22
 8004248:	6003      	str	r3, [r0, #0]
 800424a:	e011      	b.n	8004270 <log+0xc4>
 800424c:	4668      	mov	r0, sp
 800424e:	f000 f9d9 	bl	8004604 <matherr>
 8004252:	2800      	cmp	r0, #0
 8004254:	d0e0      	beq.n	8004218 <log+0x6c>
 8004256:	4811      	ldr	r0, [pc, #68]	; (800429c <log+0xf0>)
 8004258:	f000 f9d6 	bl	8004608 <nan>
 800425c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004260:	e006      	b.n	8004270 <log+0xc4>
 8004262:	2302      	movs	r3, #2
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4668      	mov	r0, sp
 8004268:	f000 f9cc 	bl	8004604 <matherr>
 800426c:	2800      	cmp	r0, #0
 800426e:	d0e8      	beq.n	8004242 <log+0x96>
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	b11b      	cbz	r3, 800427c <log+0xd0>
 8004274:	f7fd ff2a 	bl	80020cc <__errno>
 8004278:	9b08      	ldr	r3, [sp, #32]
 800427a:	6003      	str	r3, [r0, #0]
 800427c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004280:	4640      	mov	r0, r8
 8004282:	4649      	mov	r1, r9
 8004284:	b00a      	add	sp, #40	; 0x28
 8004286:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800428a:	bf00      	nop
 800428c:	200001d4 	.word	0x200001d4
 8004290:	080048e8 	.word	0x080048e8
 8004294:	c7efffff 	.word	0xc7efffff
 8004298:	fff00000 	.word	0xfff00000
 800429c:	080047d1 	.word	0x080047d1

080042a0 <__ieee754_log>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80042a8:	b087      	sub	sp, #28
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	460d      	mov	r5, r1
 80042b0:	da24      	bge.n	80042fc <__ieee754_log+0x5c>
 80042b2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80042b6:	4304      	orrs	r4, r0
 80042b8:	d108      	bne.n	80042cc <__ieee754_log+0x2c>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	2000      	movs	r0, #0
 80042c0:	49cb      	ldr	r1, [pc, #812]	; (80045f0 <__ieee754_log+0x350>)
 80042c2:	f7fc fa43 	bl	800074c <__aeabi_ddiv>
 80042c6:	b007      	add	sp, #28
 80042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042cc:	2900      	cmp	r1, #0
 80042ce:	da04      	bge.n	80042da <__ieee754_log+0x3a>
 80042d0:	f7fb ff5a 	bl	8000188 <__aeabi_dsub>
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	e7f3      	b.n	80042c2 <__ieee754_log+0x22>
 80042da:	2200      	movs	r2, #0
 80042dc:	4bc5      	ldr	r3, [pc, #788]	; (80045f4 <__ieee754_log+0x354>)
 80042de:	f7fc f90b 	bl	80004f8 <__aeabi_dmul>
 80042e2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	460d      	mov	r5, r1
 80042ec:	49c2      	ldr	r1, [pc, #776]	; (80045f8 <__ieee754_log+0x358>)
 80042ee:	428d      	cmp	r5, r1
 80042f0:	dd06      	ble.n	8004300 <__ieee754_log+0x60>
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fb ff49 	bl	800018c <__adddf3>
 80042fa:	e7e4      	b.n	80042c6 <__ieee754_log+0x26>
 80042fc:	2600      	movs	r6, #0
 80042fe:	e7f5      	b.n	80042ec <__ieee754_log+0x4c>
 8004300:	152c      	asrs	r4, r5, #20
 8004302:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004306:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800430a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800430e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8004312:	4426      	add	r6, r4
 8004314:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8004318:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800431c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8004320:	ea41 0305 	orr.w	r3, r1, r5
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	2200      	movs	r2, #0
 800432a:	4bb4      	ldr	r3, [pc, #720]	; (80045fc <__ieee754_log+0x35c>)
 800432c:	f7fb ff2c 	bl	8000188 <__aeabi_dsub>
 8004330:	1cab      	adds	r3, r5, #2
 8004332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004336:	2b02      	cmp	r3, #2
 8004338:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800433c:	4682      	mov	sl, r0
 800433e:	468b      	mov	fp, r1
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	dc53      	bgt.n	80043ee <__ieee754_log+0x14e>
 8004346:	2300      	movs	r3, #0
 8004348:	f7fc fb3e 	bl	80009c8 <__aeabi_dcmpeq>
 800434c:	b1d0      	cbz	r0, 8004384 <__ieee754_log+0xe4>
 800434e:	2c00      	cmp	r4, #0
 8004350:	f000 8120 	beq.w	8004594 <__ieee754_log+0x2f4>
 8004354:	4620      	mov	r0, r4
 8004356:	f7fc f865 	bl	8000424 <__aeabi_i2d>
 800435a:	a391      	add	r3, pc, #580	; (adr r3, 80045a0 <__ieee754_log+0x300>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	4606      	mov	r6, r0
 8004362:	460f      	mov	r7, r1
 8004364:	f7fc f8c8 	bl	80004f8 <__aeabi_dmul>
 8004368:	a38f      	add	r3, pc, #572	; (adr r3, 80045a8 <__ieee754_log+0x308>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	4630      	mov	r0, r6
 8004374:	4639      	mov	r1, r7
 8004376:	f7fc f8bf 	bl	80004f8 <__aeabi_dmul>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	e7b8      	b.n	80042f6 <__ieee754_log+0x56>
 8004384:	a38a      	add	r3, pc, #552	; (adr r3, 80045b0 <__ieee754_log+0x310>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	4650      	mov	r0, sl
 800438c:	4659      	mov	r1, fp
 800438e:	f7fc f8b3 	bl	80004f8 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	2000      	movs	r0, #0
 8004398:	4999      	ldr	r1, [pc, #612]	; (8004600 <__ieee754_log+0x360>)
 800439a:	f7fb fef5 	bl	8000188 <__aeabi_dsub>
 800439e:	4652      	mov	r2, sl
 80043a0:	4606      	mov	r6, r0
 80043a2:	460f      	mov	r7, r1
 80043a4:	465b      	mov	r3, fp
 80043a6:	4650      	mov	r0, sl
 80043a8:	4659      	mov	r1, fp
 80043aa:	f7fc f8a5 	bl	80004f8 <__aeabi_dmul>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4630      	mov	r0, r6
 80043b4:	4639      	mov	r1, r7
 80043b6:	f7fc f89f 	bl	80004f8 <__aeabi_dmul>
 80043ba:	4606      	mov	r6, r0
 80043bc:	460f      	mov	r7, r1
 80043be:	b914      	cbnz	r4, 80043c6 <__ieee754_log+0x126>
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	e0a0      	b.n	8004508 <__ieee754_log+0x268>
 80043c6:	4620      	mov	r0, r4
 80043c8:	f7fc f82c 	bl	8000424 <__aeabi_i2d>
 80043cc:	a374      	add	r3, pc, #464	; (adr r3, 80045a0 <__ieee754_log+0x300>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	4680      	mov	r8, r0
 80043d4:	4689      	mov	r9, r1
 80043d6:	f7fc f88f 	bl	80004f8 <__aeabi_dmul>
 80043da:	a373      	add	r3, pc, #460	; (adr r3, 80045a8 <__ieee754_log+0x308>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
 80043e4:	4640      	mov	r0, r8
 80043e6:	4649      	mov	r1, r9
 80043e8:	f7fc f886 	bl	80004f8 <__aeabi_dmul>
 80043ec:	e0a5      	b.n	800453a <__ieee754_log+0x29a>
 80043ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043f2:	f7fb fecb 	bl	800018c <__adddf3>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4650      	mov	r0, sl
 80043fc:	4659      	mov	r1, fp
 80043fe:	f7fc f9a5 	bl	800074c <__aeabi_ddiv>
 8004402:	e9cd 0100 	strd	r0, r1, [sp]
 8004406:	4620      	mov	r0, r4
 8004408:	f7fc f80c 	bl	8000424 <__aeabi_i2d>
 800440c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	f7fc f86e 	bl	80004f8 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004424:	f7fc f868 	bl	80004f8 <__aeabi_dmul>
 8004428:	a363      	add	r3, pc, #396	; (adr r3, 80045b8 <__ieee754_log+0x318>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	4680      	mov	r8, r0
 8004430:	4689      	mov	r9, r1
 8004432:	f7fc f861 	bl	80004f8 <__aeabi_dmul>
 8004436:	a362      	add	r3, pc, #392	; (adr r3, 80045c0 <__ieee754_log+0x320>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb fea6 	bl	800018c <__adddf3>
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	f7fc f858 	bl	80004f8 <__aeabi_dmul>
 8004448:	a35f      	add	r3, pc, #380	; (adr r3, 80045c8 <__ieee754_log+0x328>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fb fe9d 	bl	800018c <__adddf3>
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	f7fc f84f 	bl	80004f8 <__aeabi_dmul>
 800445a:	a35d      	add	r3, pc, #372	; (adr r3, 80045d0 <__ieee754_log+0x330>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fb fe94 	bl	800018c <__adddf3>
 8004464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004468:	f7fc f846 	bl	80004f8 <__aeabi_dmul>
 800446c:	a35a      	add	r3, pc, #360	; (adr r3, 80045d8 <__ieee754_log+0x338>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004476:	4640      	mov	r0, r8
 8004478:	4649      	mov	r1, r9
 800447a:	f7fc f83d 	bl	80004f8 <__aeabi_dmul>
 800447e:	a358      	add	r3, pc, #352	; (adr r3, 80045e0 <__ieee754_log+0x340>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f7fb fe82 	bl	800018c <__adddf3>
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	f7fc f834 	bl	80004f8 <__aeabi_dmul>
 8004490:	a355      	add	r3, pc, #340	; (adr r3, 80045e8 <__ieee754_log+0x348>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fb fe79 	bl	800018c <__adddf3>
 800449a:	4642      	mov	r2, r8
 800449c:	464b      	mov	r3, r9
 800449e:	f7fc f82b 	bl	80004f8 <__aeabi_dmul>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044aa:	f7fb fe6f 	bl	800018c <__adddf3>
 80044ae:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80044b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80044b6:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80044ba:	3551      	adds	r5, #81	; 0x51
 80044bc:	4335      	orrs	r5, r6
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4680      	mov	r8, r0
 80044c2:	4689      	mov	r9, r1
 80044c4:	dd48      	ble.n	8004558 <__ieee754_log+0x2b8>
 80044c6:	2200      	movs	r2, #0
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <__ieee754_log+0x360>)
 80044ca:	4650      	mov	r0, sl
 80044cc:	4659      	mov	r1, fp
 80044ce:	f7fc f813 	bl	80004f8 <__aeabi_dmul>
 80044d2:	4652      	mov	r2, sl
 80044d4:	465b      	mov	r3, fp
 80044d6:	f7fc f80f 	bl	80004f8 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fb fe51 	bl	800018c <__adddf3>
 80044ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ee:	f7fc f803 	bl	80004f8 <__aeabi_dmul>
 80044f2:	4680      	mov	r8, r0
 80044f4:	4689      	mov	r9, r1
 80044f6:	b964      	cbnz	r4, 8004512 <__ieee754_log+0x272>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4630      	mov	r0, r6
 80044fe:	4639      	mov	r1, r7
 8004500:	f7fb fe42 	bl	8000188 <__aeabi_dsub>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	f7fb fe3c 	bl	8000188 <__aeabi_dsub>
 8004510:	e6d9      	b.n	80042c6 <__ieee754_log+0x26>
 8004512:	a323      	add	r3, pc, #140	; (adr r3, 80045a0 <__ieee754_log+0x300>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451c:	f7fb ffec 	bl	80004f8 <__aeabi_dmul>
 8004520:	a321      	add	r3, pc, #132	; (adr r3, 80045a8 <__ieee754_log+0x308>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	4604      	mov	r4, r0
 8004528:	460d      	mov	r5, r1
 800452a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452e:	f7fb ffe3 	bl	80004f8 <__aeabi_dmul>
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	f7fb fe29 	bl	800018c <__adddf3>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	f7fb fe21 	bl	8000188 <__aeabi_dsub>
 8004546:	4652      	mov	r2, sl
 8004548:	465b      	mov	r3, fp
 800454a:	f7fb fe1d 	bl	8000188 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4620      	mov	r0, r4
 8004554:	4629      	mov	r1, r5
 8004556:	e7d9      	b.n	800450c <__ieee754_log+0x26c>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4650      	mov	r0, sl
 800455e:	4659      	mov	r1, fp
 8004560:	f7fb fe12 	bl	8000188 <__aeabi_dsub>
 8004564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004568:	f7fb ffc6 	bl	80004f8 <__aeabi_dmul>
 800456c:	4606      	mov	r6, r0
 800456e:	460f      	mov	r7, r1
 8004570:	2c00      	cmp	r4, #0
 8004572:	f43f af25 	beq.w	80043c0 <__ieee754_log+0x120>
 8004576:	a30a      	add	r3, pc, #40	; (adr r3, 80045a0 <__ieee754_log+0x300>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004580:	f7fb ffba 	bl	80004f8 <__aeabi_dmul>
 8004584:	a308      	add	r3, pc, #32	; (adr r3, 80045a8 <__ieee754_log+0x308>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	4604      	mov	r4, r0
 800458c:	460d      	mov	r5, r1
 800458e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004592:	e729      	b.n	80043e8 <__ieee754_log+0x148>
 8004594:	2000      	movs	r0, #0
 8004596:	2100      	movs	r1, #0
 8004598:	e695      	b.n	80042c6 <__ieee754_log+0x26>
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w
 80045a0:	fee00000 	.word	0xfee00000
 80045a4:	3fe62e42 	.word	0x3fe62e42
 80045a8:	35793c76 	.word	0x35793c76
 80045ac:	3dea39ef 	.word	0x3dea39ef
 80045b0:	55555555 	.word	0x55555555
 80045b4:	3fd55555 	.word	0x3fd55555
 80045b8:	df3e5244 	.word	0xdf3e5244
 80045bc:	3fc2f112 	.word	0x3fc2f112
 80045c0:	96cb03de 	.word	0x96cb03de
 80045c4:	3fc74664 	.word	0x3fc74664
 80045c8:	94229359 	.word	0x94229359
 80045cc:	3fd24924 	.word	0x3fd24924
 80045d0:	55555593 	.word	0x55555593
 80045d4:	3fe55555 	.word	0x3fe55555
 80045d8:	d078c69f 	.word	0xd078c69f
 80045dc:	3fc39a09 	.word	0x3fc39a09
 80045e0:	1d8e78af 	.word	0x1d8e78af
 80045e4:	3fcc71c5 	.word	0x3fcc71c5
 80045e8:	9997fa04 	.word	0x9997fa04
 80045ec:	3fd99999 	.word	0x3fd99999
 80045f0:	c3500000 	.word	0xc3500000
 80045f4:	43500000 	.word	0x43500000
 80045f8:	7fefffff 	.word	0x7fefffff
 80045fc:	3ff00000 	.word	0x3ff00000
 8004600:	3fe00000 	.word	0x3fe00000

08004604 <matherr>:
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr

08004608 <nan>:
 8004608:	2000      	movs	r0, #0
 800460a:	4901      	ldr	r1, [pc, #4]	; (8004610 <nan+0x8>)
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	7ff80000 	.word	0x7ff80000

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
