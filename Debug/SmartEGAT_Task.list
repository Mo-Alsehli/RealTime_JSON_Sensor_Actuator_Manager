
SmartEGAT_Task.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a74  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08003ba8  08003ba8  00013ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e40  08003e40  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08003e40  08003e40  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e40  08003e40  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08003e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  200001d4  0800401c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800401c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006060  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106b  00000000  00000000  0002625d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000298  00000000  00000000  000272c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000210  00000000  00000000  00027560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001b13  00000000  00000000  00027770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000331c  00000000  00000000  00029283  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c14d  00000000  00000000  0002c59f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000386ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012c0  00000000  00000000  00038768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08003b8c 	.word	0x08003b8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	08003b8c 	.word	0x08003b8c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_Config_t* ADCCfg) {
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    // Enable clocks for ADC and GPIO
    RCC_GPIOA_CLk_EN();
 8000df0:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <ADC_Init+0xfc>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <ADC_Init+0xfc>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
    RCC_ADC1_CLK_EN();
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <ADC_Init+0xfc>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <ADC_Init+0xfc>)
 8000e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e06:	6193      	str	r3, [r2, #24]

    // Configure GPIO Pins PA0 and PA1 for analog input (reset to analog mode)
    GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000e08:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <ADC_Init+0x100>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <ADC_Init+0x100>)
 8000e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e12:	6013      	str	r3, [r2, #0]

    // Enable ADC by setting ADON bit
    ADC1->CR2 |= (1 << 0);
 8000e14:	4b35      	ldr	r3, [pc, #212]	; (8000eec <ADC_Init+0x104>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a34      	ldr	r2, [pc, #208]	; (8000eec <ADC_Init+0x104>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6093      	str	r3, [r2, #8]

    // Configure ADC channels (set the sequence in SQR3)
    ADC1->SQR3 = ADCCfg->channels;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	785a      	ldrb	r2, [r3, #1]
 8000e24:	4b31      	ldr	r3, [pc, #196]	; (8000eec <ADC_Init+0x104>)
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34

    // Set continuous or single conversion mode
    if (ADCCfg->convMode == ADC_Conv_CONT_MODE) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <ADC_Init+0x56>
        ADC1->CR2 |= (1 << 1); // Enable continuous mode
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <ADC_Init+0x104>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <ADC_Init+0x104>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6093      	str	r3, [r2, #8]
 8000e3c:	e009      	b.n	8000e52 <ADC_Init+0x6a>
    } else if (ADCCfg->convMode == ADC_Conv_Single_MODE) {
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	78db      	ldrb	r3, [r3, #3]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <ADC_Init+0x6a>
        ADC1->CR2 &= ~(1 << 1); // Disable continuous mode (single conversion)
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <ADC_Init+0x104>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <ADC_Init+0x104>)
 8000e4c:	f023 0302 	bic.w	r3, r3, #2
 8000e50:	6093      	str	r3, [r2, #8]
    }

    // Configure data alignment (right or left)
    if (ADCCfg->dataAlginement == ADC_DataAlign_Right) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <ADC_Init+0x80>
        ADC1->CR2 &= ~(1 << 11); // Right alignment
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <ADC_Init+0x104>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <ADC_Init+0x104>)
 8000e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e64:	6093      	str	r3, [r2, #8]
 8000e66:	e009      	b.n	8000e7c <ADC_Init+0x94>
    } else if (ADCCfg->dataAlginement == ADC_DataAlign_Left) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <ADC_Init+0x94>
        ADC1->CR2 |= (1 << 11); // Left alignment
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <ADC_Init+0x104>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <ADC_Init+0x104>)
 8000e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7a:	6093      	str	r3, [r2, #8]
    }

    // Enable or disable End of Conversion (EOC) interrupt
    if (ADCCfg->IRQ_Enable == ADC_IRQ_Enable) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10c      	bne.n	8000e9e <ADC_Init+0xb6>
        NVIC_IRQ18_ADC_Enable; // Enable ADC interrupt in NVIC
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <ADC_Init+0x108>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <ADC_Init+0x108>)
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8e:	6013      	str	r3, [r2, #0]
        ADC1->CR1 |= (1 << 5); // Enable EOC interrupt
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <ADC_Init+0x104>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4a15      	ldr	r2, [pc, #84]	; (8000eec <ADC_Init+0x104>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6053      	str	r3, [r2, #4]
 8000e9c:	e009      	b.n	8000eb2 <ADC_Init+0xca>
    } else if (ADCCfg->IRQ_Enable == ADC_IRQ_Disable) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	795b      	ldrb	r3, [r3, #5]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <ADC_Init+0xca>
        ADC1->CR1 &= ~(1 << 5); // Disable EOC interrupt
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <ADC_Init+0x104>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <ADC_Init+0x104>)
 8000eac:	f023 0320 	bic.w	r3, r3, #32
 8000eb0:	6053      	str	r3, [r2, #4]
    }

    // Set ADC callback if interrupt mode is enabled
    G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <ADC_Init+0x10c>)
 8000eb8:	6013      	str	r3, [r2, #0]

    // Wait for ADC stabilization (tSTAB)
    for (int i = 0; i <= 1000; i++);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	e002      	b.n	8000ec6 <ADC_Init+0xde>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ecc:	ddf8      	ble.n	8000ec0 <ADC_Init+0xd8>

    // Set ADON again to start the ADC
    ADC1->CR2 |= (1 << 0);
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <ADC_Init+0x104>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <ADC_Init+0x104>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6093      	str	r3, [r2, #8]
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	20000204 	.word	0x20000204

08000ef8 <ADC_Read>:


uint16_t ADC_Read(uint8_t channel) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
    // Select the ADC channel
    ADC1->SQR3 = channel;
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <ADC_Read+0x54>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	6353      	str	r3, [r2, #52]	; 0x34

    // Start the conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <ADC_Read+0x54>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <ADC_Read+0x54>)
 8000f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f12:	6093      	str	r3, [r2, #8]

    // Wait for the End of Conversion (EOC) flag
    while (!(ADC1->SR & ADC_SR_EOC));
 8000f14:	bf00      	nop
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <ADC_Read+0x54>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <ADC_Read+0x1e>

    // Read the ADC value
    uint16_t adcValue = ADC1->DR;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <ADC_Read+0x54>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	81fb      	strh	r3, [r7, #14]

    // Clear the EOC flag (optional, reading ADC1->DR usually clears it)
    ADC1->SR &= ~ADC_SR_EOC;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <ADC_Read+0x54>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <ADC_Read+0x54>)
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	6013      	str	r3, [r2, #0]
    ADC1->SR &= ~(1 << 4);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <ADC_Read+0x54>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <ADC_Read+0x54>)
 8000f3a:	f023 0310 	bic.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]

    return adcValue;
 8000f40:	89fb      	ldrh	r3, [r7, #14]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40012400 	.word	0x40012400

08000f50 <ADC1_2_IRQHandler>:
	RCC_ADC1_CLK_DIS();
	NVIC_IRQ18_ADC_Disable;
	ADC1->CR2 &= (1 << 0);
}

void ADC1_2_IRQHandler(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <ADC1_2_IRQHandler+0x24>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <ADC1_2_IRQHandler+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <ADC1_2_IRQHandler+0x28>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <ADC1_2_IRQHandler+0x28>)
 8000f68:	f023 0302 	bic.w	r3, r3, #2
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000204 	.word	0x20000204
 8000f78:	40012400 	.word	0x40012400

08000f7c <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <EXTI0_IRQHandler+0x1c>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <EXTI0_IRQHandler+0x1c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <EXTI0_IRQHandler+0x20>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4798      	blx	r3
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40010400 	.word	0x40010400
 8000f9c:	20000208 	.word	0x20000208

08000fa0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <EXTI1_IRQHandler+0x1c>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <EXTI1_IRQHandler+0x1c>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <EXTI1_IRQHandler+0x20>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4798      	blx	r3
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010400 	.word	0x40010400
 8000fc0:	20000208 	.word	0x20000208

08000fc4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <EXTI2_IRQHandler+0x1c>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <EXTI2_IRQHandler+0x1c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <EXTI2_IRQHandler+0x20>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4798      	blx	r3
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010400 	.word	0x40010400
 8000fe4:	20000208 	.word	0x20000208

08000fe8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <EXTI3_IRQHandler+0x1c>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <EXTI3_IRQHandler+0x1c>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <EXTI3_IRQHandler+0x20>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4798      	blx	r3
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40010400 	.word	0x40010400
 8001008:	20000208 	.word	0x20000208

0800100c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <EXTI4_IRQHandler+0x1c>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <EXTI4_IRQHandler+0x1c>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <EXTI4_IRQHandler+0x20>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	4798      	blx	r3
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010400 	.word	0x40010400
 800102c:	20000208 	.word	0x20000208

08001030 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <EXTI9_5_IRQHandler+0xa0>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <EXTI9_5_IRQHandler+0xa4>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	4798      	blx	r3
	}
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40010400 	.word	0x40010400
 80010d4:	20000208 	.word	0x20000208

080010d8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 80010ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 800110c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001110:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 800112a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800116a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <EXTI15_10_IRQHandler+0xdc>)
 80011a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <EXTI15_10_IRQHandler+0xe0>)
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	4798      	blx	r3
	}
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010400 	.word	0x40010400
 80011b8:	20000208 	.word	0x20000208

080011bc <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	2b80      	cmp	r3, #128	; 0x80
 80011ca:	d042      	beq.n	8001252 <getCRLHPinPos+0x96>
 80011cc:	2b80      	cmp	r3, #128	; 0x80
 80011ce:	dc11      	bgt.n	80011f4 <getCRLHPinPos+0x38>
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d036      	beq.n	8001242 <getCRLHPinPos+0x86>
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	dc06      	bgt.n	80011e6 <getCRLHPinPos+0x2a>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d02e      	beq.n	800123a <getCRLHPinPos+0x7e>
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d02e      	beq.n	800123e <getCRLHPinPos+0x82>
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d028      	beq.n	8001236 <getCRLHPinPos+0x7a>
 80011e4:	e047      	b.n	8001276 <getCRLHPinPos+0xba>
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d02f      	beq.n	800124a <getCRLHPinPos+0x8e>
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	d02f      	beq.n	800124e <getCRLHPinPos+0x92>
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d029      	beq.n	8001246 <getCRLHPinPos+0x8a>
 80011f2:	e040      	b.n	8001276 <getCRLHPinPos+0xba>
 80011f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f8:	d033      	beq.n	8001262 <getCRLHPinPos+0xa6>
 80011fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011fe:	dc09      	bgt.n	8001214 <getCRLHPinPos+0x58>
 8001200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001204:	d029      	beq.n	800125a <getCRLHPinPos+0x9e>
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d028      	beq.n	800125e <getCRLHPinPos+0xa2>
 800120c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001210:	d021      	beq.n	8001256 <getCRLHPinPos+0x9a>
 8001212:	e030      	b.n	8001276 <getCRLHPinPos+0xba>
 8001214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001218:	d027      	beq.n	800126a <getCRLHPinPos+0xae>
 800121a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121e:	dc03      	bgt.n	8001228 <getCRLHPinPos+0x6c>
 8001220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001224:	d01f      	beq.n	8001266 <getCRLHPinPos+0xaa>
 8001226:	e026      	b.n	8001276 <getCRLHPinPos+0xba>
 8001228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800122c:	d01f      	beq.n	800126e <getCRLHPinPos+0xb2>
 800122e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001232:	d01e      	beq.n	8001272 <getCRLHPinPos+0xb6>
 8001234:	e01f      	b.n	8001276 <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8001236:	2300      	movs	r3, #0
 8001238:	e01e      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 800123a:	2304      	movs	r3, #4
 800123c:	e01c      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 800123e:	2308      	movs	r3, #8
 8001240:	e01a      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8001242:	230c      	movs	r3, #12
 8001244:	e018      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8001246:	2310      	movs	r3, #16
 8001248:	e016      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 800124a:	2314      	movs	r3, #20
 800124c:	e014      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 800124e:	2318      	movs	r3, #24
 8001250:	e012      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8001252:	231c      	movs	r3, #28
 8001254:	e010      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 8001256:	2300      	movs	r3, #0
 8001258:	e00e      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 800125a:	2304      	movs	r3, #4
 800125c:	e00c      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 800125e:	2308      	movs	r3, #8
 8001260:	e00a      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8001262:	230c      	movs	r3, #12
 8001264:	e008      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 8001266:	2310      	movs	r3, #16
 8001268:	e006      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 800126a:	2314      	movs	r3, #20
 800126c:	e004      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 800126e:	2318      	movs	r3, #24
 8001270:	e002      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 8001272:	231c      	movs	r3, #28
 8001274:	e000      	b.n	8001278 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8001282:	b590      	push	{r4, r7, lr}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	2b80      	cmp	r3, #128	; 0x80
 800129a:	d902      	bls.n	80012a2 <MCAL_GPIO_Init+0x20>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3304      	adds	r3, #4
 80012a0:	e000      	b.n	80012a4 <MCAL_GPIO_Init+0x22>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff86 	bl	80011bc <getCRLHPinPos>
 80012b0:	4602      	mov	r2, r0
 80012b2:	230f      	movs	r3, #15
 80012b4:	4093      	lsls	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	401a      	ands	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	789b      	ldrb	r3, [r3, #2]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00b      	beq.n	80012e2 <MCAL_GPIO_Init+0x60>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	789b      	ldrb	r3, [r3, #2]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d007      	beq.n	80012e2 <MCAL_GPIO_Init+0x60>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d003      	beq.n	80012e2 <MCAL_GPIO_Init+0x60>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	789b      	ldrb	r3, [r3, #2]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	d10e      	bne.n	8001300 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	3b04      	subs	r3, #4
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	78db      	ldrb	r3, [r3, #3]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e039      	b.n	8001374 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d003      	beq.n	8001310 <MCAL_GPIO_Init+0x8e>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10c      	bne.n	800132a <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	b25a      	sxtb	r2, r3
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4313      	orrs	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e024      	b.n	8001374 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	2b08      	cmp	r3, #8
 8001330:	d104      	bne.n	800133c <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e01b      	b.n	8001374 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	789b      	ldrb	r3, [r3, #2]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d107      	bne.n	800135c <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	8812      	ldrh	r2, [r2, #0]
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	e00b      	b.n	8001374 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	2b03      	cmp	r3, #3
 8001362:	d107      	bne.n	8001374 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	8812      	ldrh	r2, [r2, #0]
 800136c:	43d2      	mvns	r2, r2
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8001374:	7bfc      	ldrb	r4, [r7, #15]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff1e 	bl	80011bc <getCRLHPinPos>
 8001380:	4603      	mov	r3, r0
 8001382:	fa04 f203 	lsl.w	r2, r4, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	431a      	orrs	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	601a      	str	r2, [r3, #0]

}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <wait>:
}

// Execution Time (seconds) = (time * 255 * 4) / F_CPU
// when time = 1, It takes 1 Melli-seconds.
void wait(uint32_t time)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e00b      	b.n	80013be <wait+0x26>
	{
		for (j = 0; j < 255; j++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	e002      	b.n	80013b2 <wait+0x1a>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2bfe      	cmp	r3, #254	; 0xfe
 80013b6:	d9f9      	bls.n	80013ac <wait+0x14>
	for (i = 0; i < time; i++)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3ef      	bcc.n	80013a6 <wait+0xe>
		;
	}
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d006      	beq.n	80013f0 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d302      	bcc.n	80013ec <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d004      	beq.n	80013f4 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 80013ea:	e005      	b.n	80013f8 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 80013ee:	e004      	b.n	80013fa <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 80013f2:	e002      	b.n	80013fa <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 80013f6:	e000      	b.n	80013fa <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	007a1200 	.word	0x007a1200
 800140c:	00186a00 	.word	0x00186a00
 8001410:	00f42400 	.word	0x00f42400

08001414 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8001418:	f7ff ffda 	bl	80013d0 <MCAL_RCC_GET_SYS_CLKFreq>
 800141c:	4601      	mov	r1, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <MCAL_RCC_GET_HCLKFreq+0x24>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	08003bd4 	.word	0x08003bd4

0800143c <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8001440:	f7ff ffe8 	bl	8001414 <MCAL_RCC_GET_HCLKFreq>
 8001444:	4601      	mov	r1, r0
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	08003bcc 	.word	0x08003bcc

08001464 <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8001468:	f7ff ffd4 	bl	8001414 <MCAL_RCC_GET_HCLKFreq>
 800146c:	4601      	mov	r1, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0adb      	lsrs	r3, r3, #11
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	08003bcc 	.word	0x08003bcc

0800148c <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(){
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1 << 0); // Update Interrupt Flag
 8001490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6113      	str	r3, [r2, #16]
	delayFlag = 0;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <TIM2_IRQHandler+0x34>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<CEN);
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000000 	.word	0x20000000

080014c4 <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler() {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <TIM1_UP_IRQHandler+0x24>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <TIM1_UP_IRQHandler+0x24>)
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <TIM1_UP_IRQHandler+0x28>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <TIM1_UP_IRQHandler+0x28>)
 80014de:	801a      	strh	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	200001f4 	.word	0x200001f4

080014f0 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <TIM3_IRQHandler+0x24>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <TIM3_IRQHandler+0x24>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <TIM3_IRQHandler+0x28>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <TIM3_IRQHandler+0x28>)
 800150a:	801a      	strh	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	40000400 	.word	0x40000400
 8001518:	200001f2 	.word	0x200001f2

0800151c <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <TIM4_IRQHandler+0x24>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <TIM4_IRQHandler+0x24>)
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <TIM4_IRQHandler+0x28>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <TIM4_IRQHandler+0x28>)
 8001536:	801a      	strh	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40000800 	.word	0x40000800
 8001544:	200001f0 	.word	0x200001f0

08001548 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a5d      	ldr	r2, [pc, #372]	; (80016cc <MCAL_UART_Init+0x184>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d109      	bne.n	800156e <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 800155a:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <MCAL_UART_Init+0x188>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8001560:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <MCAL_UART_Init+0x18c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <MCAL_UART_Init+0x18c>)
 8001566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	e01a      	b.n	80015a4 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <MCAL_UART_Init+0x190>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d109      	bne.n	800158a <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 8001576:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <MCAL_UART_Init+0x188>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 800157c:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <MCAL_UART_Init+0x18c>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <MCAL_UART_Init+0x18c>)
 8001582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001586:	61d3      	str	r3, [r2, #28]
 8001588:	e00c      	b.n	80015a4 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a53      	ldr	r2, [pc, #332]	; (80016dc <MCAL_UART_Init+0x194>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d108      	bne.n	80015a4 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8001592:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <MCAL_UART_Init+0x188>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <MCAL_UART_Init+0x18c>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <MCAL_UART_Init+0x18c>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a2:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	7a12      	ldrb	r2, [r2, #8]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	7a52      	ldrb	r2, [r2, #9]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	7a92      	ldrb	r2, [r2, #10]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	7ad2      	ldrb	r2, [r2, #11]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a34      	ldr	r2, [pc, #208]	; (80016cc <MCAL_UART_Init+0x184>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d105      	bne.n	800160a <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 80015fe:	f7ff ff31 	bl	8001464 <MCAL_RCC_GET_PCLK2Freq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <MCAL_UART_Init+0x198>)
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e004      	b.n	8001614 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 800160a:	f7ff ff17 	bl	800143c <MCAL_RCC_GET_PCLK1Freq>
 800160e:	4602      	mov	r2, r0
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <MCAL_UART_Init+0x198>)
 8001612:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <MCAL_UART_Init+0x198>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	0119      	lsls	r1, r3, #4
 8001624:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <MCAL_UART_Init+0x198>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009a      	lsls	r2, r3, #2
 8001630:	441a      	add	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fbb2 f2f3 	udiv	r2, r2, r3
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MCAL_UART_Init+0x198>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	2064      	movs	r0, #100	; 0x64
 800164c:	fb00 f303 	mul.w	r3, r0, r3
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <MCAL_UART_Init+0x19c>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	430b      	orrs	r3, r1
 8001662:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <MCAL_UART_Init+0x1a0>)
 8001664:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MCAL_UART_Init+0x1a0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	7b1b      	ldrb	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	7b12      	ldrb	r2, [r2, #12]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a11      	ldr	r2, [pc, #68]	; (80016cc <MCAL_UART_Init+0x184>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d106      	bne.n	800169a <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MCAL_UART_Init+0x1a4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a16      	ldr	r2, [pc, #88]	; (80016ec <MCAL_UART_Init+0x1a4>)
 8001692:	f043 0320 	orr.w	r3, r3, #32
 8001696:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 8001698:	e014      	b.n	80016c4 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <MCAL_UART_Init+0x190>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d106      	bne.n	80016b0 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MCAL_UART_Init+0x1a4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <MCAL_UART_Init+0x1a4>)
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	e009      	b.n	80016c4 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <MCAL_UART_Init+0x194>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d105      	bne.n	80016c4 <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MCAL_UART_Init+0x1a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <MCAL_UART_Init+0x1a4>)
 80016be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40013800 	.word	0x40013800
 80016d0:	20000250 	.word	0x20000250
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40004400 	.word	0x40004400
 80016dc:	40014800 	.word	0x40014800
 80016e0:	2000024c 	.word	0x2000024c
 80016e4:	51eb851f 	.word	0x51eb851f
 80016e8:	20000248 	.word	0x20000248
 80016ec:	e000e104 	.word	0xe000e104

080016f0 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint8_t* pTxBuffer, uint8_t len, enum Polling_Mechanism pollingEn){
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	460b      	mov	r3, r1
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	4613      	mov	r3, r2
 8001704:	71bb      	strb	r3, [r7, #6]

	uint8_t *p8DataBits = (uint8_t*)pTxBuffer;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	61fb      	str	r3, [r7, #28]

	// Wait until TXE flag is set in the SR.


	// Check the usart word length item for 9 BIT or 8 BIT in a frame.
	uint8_t payloadLength = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <MCAL_UART_SendData+0xb4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d103      	bne.n	800171a <MCAL_UART_SendData+0x2a>
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	e00a      	b.n	8001730 <MCAL_UART_SendData+0x40>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MCAL_UART_SendData+0xbc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d103      	bne.n	800172a <MCAL_UART_SendData+0x3a>
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	7a1b      	ldrb	r3, [r3, #8]
 8001728:	e002      	b.n	8001730 <MCAL_UART_SendData+0x40>
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	7a1b      	ldrb	r3, [r3, #8]
 8001730:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <MCAL_UART_SendData+0xb4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d103      	bne.n	8001742 <MCAL_UART_SendData+0x52>
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	7a5b      	ldrb	r3, [r3, #9]
 8001740:	e00a      	b.n	8001758 <MCAL_UART_SendData+0x68>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <MCAL_UART_SendData+0xbc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d103      	bne.n	8001752 <MCAL_UART_SendData+0x62>
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	7a5b      	ldrb	r3, [r3, #9]
 8001750:	e002      	b.n	8001758 <MCAL_UART_SendData+0x68>
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MCAL_UART_SendData+0xb8>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	7a5b      	ldrb	r3, [r3, #9]
 8001758:	75bb      	strb	r3, [r7, #22]

	if (payloadLength == UART_PayloadLength_9B) {
		// Handle 9-bit data transmission (if supported)
	} else if (payloadLength == UART_PayloadLength_8B) {
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11c      	bne.n	800179a <MCAL_UART_SendData+0xaa>
		for (int i = 0; i < len; i++) {
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	e015      	b.n	8001792 <MCAL_UART_SendData+0xa2>
			// Calculate parity bit if enabled
			uint8_t data = *p8DataBits;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	757b      	strb	r3, [r7, #21]
			if (parity != UART_Parity_NONE) {
				// Implement parity bit calculation logic here based on parity configuration
			}
			if (pollingEn == enable) {
 800176c:	79bb      	ldrb	r3, [r7, #6]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <MCAL_UART_SendData+0x90>
					while (!(uartx->SR & 1 << 7));
 8001772:	bf00      	nop
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <MCAL_UART_SendData+0x84>
			}
			uartx->DR = data;
 8001780:	7d7a      	ldrb	r2, [r7, #21]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	605a      	str	r2, [r3, #4]
			p8DataBits++;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < len; i++) {
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	3301      	adds	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbe5      	blt.n	8001766 <MCAL_UART_SendData+0x76>
		}
	}

}
 800179a:	bf00      	nop
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40013800 	.word	0x40013800
 80017a8:	20000250 	.word	0x20000250
 80017ac:	40004400 	.word	0x40004400

080017b0 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <MCAL_UART_GPIO_SetPins+0xb8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d118      	bne.n	80017f2 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 80017c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c4:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80017c6:	2306      	movs	r3, #6
 80017c8:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	4825      	ldr	r0, [pc, #148]	; (800186c <MCAL_UART_GPIO_SetPins+0xbc>)
 80017d6:	f7ff fd54 	bl	8001282 <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80017da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017de:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80017e0:	2308      	movs	r3, #8
 80017e2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4820      	ldr	r0, [pc, #128]	; (800186c <MCAL_UART_GPIO_SetPins+0xbc>)
 80017ec:	f7ff fd49 	bl	8001282 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 80017f0:	e036      	b.n	8001860 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <MCAL_UART_GPIO_SetPins+0xc0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d116      	bne.n	8001828 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80017fa:	2304      	movs	r3, #4
 80017fc:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80017fe:	2306      	movs	r3, #6
 8001800:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4619      	mov	r1, r3
 800180c:	4817      	ldr	r0, [pc, #92]	; (800186c <MCAL_UART_GPIO_SetPins+0xbc>)
 800180e:	f7ff fd38 	bl	8001282 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8001812:	2308      	movs	r3, #8
 8001814:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001816:	2308      	movs	r3, #8
 8001818:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <MCAL_UART_GPIO_SetPins+0xbc>)
 8001822:	f7ff fd2e 	bl	8001282 <MCAL_GPIO_Init>
}
 8001826:	e01b      	b.n	8001860 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MCAL_UART_GPIO_SetPins+0xc4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d117      	bne.n	8001860 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001834:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001836:	2306      	movs	r3, #6
 8001838:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800183a:	2301      	movs	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MCAL_UART_GPIO_SetPins+0xc8>)
 8001846:	f7ff fd1c 	bl	8001282 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800184a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800184e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8001850:	2308      	movs	r3, #8
 8001852:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <MCAL_UART_GPIO_SetPins+0xc8>)
 800185c:	f7ff fd11 	bl	8001282 <MCAL_GPIO_Init>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013800 	.word	0x40013800
 800186c:	40010800 	.word	0x40010800
 8001870:	40004400 	.word	0x40004400
 8001874:	40014800 	.word	0x40014800
 8001878:	40010c00 	.word	0x40010c00

0800187c <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	4798      	blx	r3
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000250 	.word	0x20000250

08001890 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <USART2_IRQHandler+0x10>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4798      	blx	r3
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000250 	.word	0x20000250

080018a4 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 80018a8:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <USART3_IRQHandler+0x10>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4798      	blx	r3
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000250 	.word	0x20000250

080018b8 <clockInit>:
	sensorValues[0] = ADC1->DR;
	float voltage = (sensorValues[0] * 5.0) / 4096.0;
	tempreture = (voltage - 5.0) * 100.0;
}

void clockInit(){
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <clockInit+0x24>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <clockInit+0x24>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <clockInit+0x24>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a03      	ldr	r2, [pc, #12]	; (80018dc <clockInit+0x24>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6193      	str	r3, [r2, #24]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000

080018e0 <main>:
// ------------------------------------------------------------------
// Main Function
// ------------------------------------------------------------------


int main(void) {
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b098      	sub	sp, #96	; 0x60
 80018e4:	af00      	add	r7, sp, #0
    // Clock Initialization
    clockInit();
 80018e6:	f7ff ffe7 	bl	80018b8 <clockInit>
    //GPIOAInit();

    //LCDInit();

    // UART Configuration
    UART_Config_t uartCfg = {
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <main+0xf8>)
 80018ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80018f0:	461d      	mov	r5, r3
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	6023      	str	r3, [r4, #0]
        .Mode = UART_Mode_TX_RX,
        .Payload = UART_PayloadLength_8B,
        .StopBits = UART_StopBits_One,
        .P_IRQ_Callback = NULL
    };
    MCAL_UART_Init(UART1, &uartCfg);
 80018fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fe:	4619      	mov	r1, r3
 8001900:	4836      	ldr	r0, [pc, #216]	; (80019dc <main+0xfc>)
 8001902:	f7ff fe21 	bl	8001548 <MCAL_UART_Init>
    MCAL_UART_GPIO_SetPins(UART1);
 8001906:	4835      	ldr	r0, [pc, #212]	; (80019dc <main+0xfc>)
 8001908:	f7ff ff52 	bl	80017b0 <MCAL_UART_GPIO_SetPins>

    // ADC Configuration
    ADC_Config_t ADCCfg = {
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800191e:	2301      	movs	r3, #1
 8001920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001930:	2300      	movs	r3, #0
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
        .conversions = ADC_NumOfConvs_1,
        .dataAlginement = ADC_DataAlign_Right,
        .IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
        .P_IRQ_Callback = NULL
    };
    ADC_Init(&ADCCfg);
 8001934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa55 	bl	8000de8 <ADC_Init>

    char buffer[50];
    uint16_t adcValue = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    float temperature = 0;
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	65bb      	str	r3, [r7, #88]	; 0x58

    while (1) {
        // Read ADC value from channel 0
        adcValue = ADC_Read(0);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fad4 	bl	8000ef8 <ADC_Read>
 8001950:	4603      	mov	r3, r0
 8001952:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        // Convert ADC value to temperature
        float voltage = (adcValue * 3.3) / 4096.0; // Assuming a 12-bit ADC and 3.3V reference
 8001956:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fd62 	bl	8000424 <__aeabi_i2d>
 8001960:	a31b      	add	r3, pc, #108	; (adr r3, 80019d0 <main+0xf0>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fdc7 	bl	80004f8 <__aeabi_dmul>
 800196a:	4603      	mov	r3, r0
 800196c:	460c      	mov	r4, r1
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <main+0x100>)
 8001978:	f7fe fee8 	bl	800074c <__aeabi_ddiv>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	4618      	mov	r0, r3
 8001982:	4621      	mov	r1, r4
 8001984:	f7ff f890 	bl	8000aa8 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
 800198a:	657b      	str	r3, [r7, #84]	; 0x54
        temperature = voltage * 100.0;            // For an LM35 sensor
 800198c:	4915      	ldr	r1, [pc, #84]	; (80019e4 <main+0x104>)
 800198e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001990:	f7ff f8da 	bl	8000b48 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
        //int var = 0;
        // Print the temperature to UART
        sprintf(buffer, "Temp: %.2f C\r\n", temperature);
 8001998:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800199a:	f7fe fd55 	bl	8000448 <__aeabi_f2d>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	4638      	mov	r0, r7
 80019a4:	461a      	mov	r2, r3
 80019a6:	4623      	mov	r3, r4
 80019a8:	490f      	ldr	r1, [pc, #60]	; (80019e8 <main+0x108>)
 80019aa:	f000 fd01 	bl	80023b0 <siprintf>
        MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
 80019ae:	463b      	mov	r3, r7
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fbdd 	bl	8000170 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4639      	mov	r1, r7
 80019bc:	2300      	movs	r3, #0
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <main+0xfc>)
 80019c0:	f7ff fe96 	bl	80016f0 <MCAL_UART_SendData>
        //sendChar('M');
        //sendStr((uint8_t*)buffer);
        // Add a delay
        //delay(1000, U_ms, clk);
        wait(500);
 80019c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c8:	f7ff fce6 	bl	8001398 <wait>
    while (1) {
 80019cc:	e7bd      	b.n	800194a <main+0x6a>
 80019ce:	bf00      	nop
 80019d0:	66666666 	.word	0x66666666
 80019d4:	400a6666 	.word	0x400a6666
 80019d8:	08003bb8 	.word	0x08003bb8
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40b00000 	.word	0x40b00000
 80019e4:	42c80000 	.word	0x42c80000
 80019e8:	08003ba8 	.word	0x08003ba8

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f000 f846 	bl	8001aac <__errno>
 8001a20:	4602      	mov	r2, r0
 8001a22:	230c      	movs	r3, #12
 8001a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20005000 	.word	0x20005000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	200001f8 	.word	0x200001f8
 8001a54:	20000260 	.word	0x20000260

08001a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a5a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	; (8001a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <LoopForever+0xe>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	; (8001aa4 <LoopForever+0x16>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a86:	f000 f817 	bl	8001ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a8a:	f7ff ff29 	bl	80018e0 <main>

08001a8e <LoopForever>:

LoopForever:
    b LoopForever
 8001a8e:	e7fe      	b.n	8001a8e <LoopForever>
  ldr   r0, =_estack
 8001a90:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a9c:	08003e48 	.word	0x08003e48
  ldr r2, =_sbss
 8001aa0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001aa4:	20000260 	.word	0x20000260

08001aa8 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC3_IRQHandler>
	...

08001aac <__errno>:
 8001aac:	4b01      	ldr	r3, [pc, #4]	; (8001ab4 <__errno+0x8>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <__libc_init_array>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	2500      	movs	r5, #0
 8001abc:	4e0c      	ldr	r6, [pc, #48]	; (8001af0 <__libc_init_array+0x38>)
 8001abe:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <__libc_init_array+0x3c>)
 8001ac0:	1ba4      	subs	r4, r4, r6
 8001ac2:	10a4      	asrs	r4, r4, #2
 8001ac4:	42a5      	cmp	r5, r4
 8001ac6:	d109      	bne.n	8001adc <__libc_init_array+0x24>
 8001ac8:	f002 f860 	bl	8003b8c <_init>
 8001acc:	2500      	movs	r5, #0
 8001ace:	4e0a      	ldr	r6, [pc, #40]	; (8001af8 <__libc_init_array+0x40>)
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <__libc_init_array+0x44>)
 8001ad2:	1ba4      	subs	r4, r4, r6
 8001ad4:	10a4      	asrs	r4, r4, #2
 8001ad6:	42a5      	cmp	r5, r4
 8001ad8:	d105      	bne.n	8001ae6 <__libc_init_array+0x2e>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae0:	4798      	blx	r3
 8001ae2:	3501      	adds	r5, #1
 8001ae4:	e7ee      	b.n	8001ac4 <__libc_init_array+0xc>
 8001ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aea:	4798      	blx	r3
 8001aec:	3501      	adds	r5, #1
 8001aee:	e7f2      	b.n	8001ad6 <__libc_init_array+0x1e>
 8001af0:	08003e40 	.word	0x08003e40
 8001af4:	08003e40 	.word	0x08003e40
 8001af8:	08003e40 	.word	0x08003e40
 8001afc:	08003e44 	.word	0x08003e44

08001b00 <memset>:
 8001b00:	4603      	mov	r3, r0
 8001b02:	4402      	add	r2, r0
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d100      	bne.n	8001b0a <memset+0xa>
 8001b08:	4770      	bx	lr
 8001b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0e:	e7f9      	b.n	8001b04 <memset+0x4>

08001b10 <__cvt>:
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b16:	461e      	mov	r6, r3
 8001b18:	bfbb      	ittet	lt
 8001b1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8001b1e:	461e      	movlt	r6, r3
 8001b20:	2300      	movge	r3, #0
 8001b22:	232d      	movlt	r3, #45	; 0x2d
 8001b24:	b088      	sub	sp, #32
 8001b26:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001b28:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8001b2c:	f027 0720 	bic.w	r7, r7, #32
 8001b30:	2f46      	cmp	r7, #70	; 0x46
 8001b32:	4614      	mov	r4, r2
 8001b34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001b36:	700b      	strb	r3, [r1, #0]
 8001b38:	d004      	beq.n	8001b44 <__cvt+0x34>
 8001b3a:	2f45      	cmp	r7, #69	; 0x45
 8001b3c:	d100      	bne.n	8001b40 <__cvt+0x30>
 8001b3e:	3501      	adds	r5, #1
 8001b40:	2302      	movs	r3, #2
 8001b42:	e000      	b.n	8001b46 <__cvt+0x36>
 8001b44:	2303      	movs	r3, #3
 8001b46:	aa07      	add	r2, sp, #28
 8001b48:	9204      	str	r2, [sp, #16]
 8001b4a:	aa06      	add	r2, sp, #24
 8001b4c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8001b50:	e9cd 3500 	strd	r3, r5, [sp]
 8001b54:	4622      	mov	r2, r4
 8001b56:	4633      	mov	r3, r6
 8001b58:	f000 fcda 	bl	8002510 <_dtoa_r>
 8001b5c:	2f47      	cmp	r7, #71	; 0x47
 8001b5e:	4680      	mov	r8, r0
 8001b60:	d102      	bne.n	8001b68 <__cvt+0x58>
 8001b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001b64:	07db      	lsls	r3, r3, #31
 8001b66:	d526      	bpl.n	8001bb6 <__cvt+0xa6>
 8001b68:	2f46      	cmp	r7, #70	; 0x46
 8001b6a:	eb08 0905 	add.w	r9, r8, r5
 8001b6e:	d111      	bne.n	8001b94 <__cvt+0x84>
 8001b70:	f898 3000 	ldrb.w	r3, [r8]
 8001b74:	2b30      	cmp	r3, #48	; 0x30
 8001b76:	d10a      	bne.n	8001b8e <__cvt+0x7e>
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4631      	mov	r1, r6
 8001b80:	f7fe ff22 	bl	80009c8 <__aeabi_dcmpeq>
 8001b84:	b918      	cbnz	r0, 8001b8e <__cvt+0x7e>
 8001b86:	f1c5 0501 	rsb	r5, r5, #1
 8001b8a:	f8ca 5000 	str.w	r5, [sl]
 8001b8e:	f8da 3000 	ldr.w	r3, [sl]
 8001b92:	4499      	add	r9, r3
 8001b94:	2200      	movs	r2, #0
 8001b96:	2300      	movs	r3, #0
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4631      	mov	r1, r6
 8001b9c:	f7fe ff14 	bl	80009c8 <__aeabi_dcmpeq>
 8001ba0:	b938      	cbnz	r0, 8001bb2 <__cvt+0xa2>
 8001ba2:	2230      	movs	r2, #48	; 0x30
 8001ba4:	9b07      	ldr	r3, [sp, #28]
 8001ba6:	454b      	cmp	r3, r9
 8001ba8:	d205      	bcs.n	8001bb6 <__cvt+0xa6>
 8001baa:	1c59      	adds	r1, r3, #1
 8001bac:	9107      	str	r1, [sp, #28]
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e7f8      	b.n	8001ba4 <__cvt+0x94>
 8001bb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	9b07      	ldr	r3, [sp, #28]
 8001bba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001bbc:	eba3 0308 	sub.w	r3, r3, r8
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	b008      	add	sp, #32
 8001bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001bc8 <__exponent>:
 8001bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bca:	2900      	cmp	r1, #0
 8001bcc:	bfb4      	ite	lt
 8001bce:	232d      	movlt	r3, #45	; 0x2d
 8001bd0:	232b      	movge	r3, #43	; 0x2b
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	bfb8      	it	lt
 8001bd6:	4249      	neglt	r1, r1
 8001bd8:	2909      	cmp	r1, #9
 8001bda:	f804 2b02 	strb.w	r2, [r4], #2
 8001bde:	7043      	strb	r3, [r0, #1]
 8001be0:	dd21      	ble.n	8001c26 <__exponent+0x5e>
 8001be2:	f10d 0307 	add.w	r3, sp, #7
 8001be6:	461f      	mov	r7, r3
 8001be8:	260a      	movs	r6, #10
 8001bea:	fb91 f5f6 	sdiv	r5, r1, r6
 8001bee:	fb06 1115 	mls	r1, r6, r5, r1
 8001bf2:	2d09      	cmp	r5, #9
 8001bf4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8001bf8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001bfc:	f103 32ff 	add.w	r2, r3, #4294967295
 8001c00:	4629      	mov	r1, r5
 8001c02:	dc09      	bgt.n	8001c18 <__exponent+0x50>
 8001c04:	3130      	adds	r1, #48	; 0x30
 8001c06:	3b02      	subs	r3, #2
 8001c08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001c0c:	42bb      	cmp	r3, r7
 8001c0e:	4622      	mov	r2, r4
 8001c10:	d304      	bcc.n	8001c1c <__exponent+0x54>
 8001c12:	1a10      	subs	r0, r2, r0
 8001c14:	b003      	add	sp, #12
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	4613      	mov	r3, r2
 8001c1a:	e7e6      	b.n	8001bea <__exponent+0x22>
 8001c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c20:	f804 2b01 	strb.w	r2, [r4], #1
 8001c24:	e7f2      	b.n	8001c0c <__exponent+0x44>
 8001c26:	2330      	movs	r3, #48	; 0x30
 8001c28:	4419      	add	r1, r3
 8001c2a:	7083      	strb	r3, [r0, #2]
 8001c2c:	1d02      	adds	r2, r0, #4
 8001c2e:	70c1      	strb	r1, [r0, #3]
 8001c30:	e7ef      	b.n	8001c12 <__exponent+0x4a>
	...

08001c34 <_printf_float>:
 8001c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	b091      	sub	sp, #68	; 0x44
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001c3e:	4693      	mov	fp, r2
 8001c40:	461e      	mov	r6, r3
 8001c42:	4605      	mov	r5, r0
 8001c44:	f001 fa18 	bl	8003078 <_localeconv_r>
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c4e:	f7fe fa8f 	bl	8000170 <strlen>
 8001c52:	2300      	movs	r3, #0
 8001c54:	930e      	str	r3, [sp, #56]	; 0x38
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	900a      	str	r0, [sp, #40]	; 0x28
 8001c5a:	3307      	adds	r3, #7
 8001c5c:	f023 0307 	bic.w	r3, r3, #7
 8001c60:	f103 0208 	add.w	r2, r3, #8
 8001c64:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001c68:	f8d4 a000 	ldr.w	sl, [r4]
 8001c6c:	603a      	str	r2, [r7, #0]
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001c76:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8001c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	4ba6      	ldr	r3, [pc, #664]	; (8001f20 <_printf_float+0x2ec>)
 8001c86:	4638      	mov	r0, r7
 8001c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c8a:	f7fe fecf 	bl	8000a2c <__aeabi_dcmpun>
 8001c8e:	bb68      	cbnz	r0, 8001cec <_printf_float+0xb8>
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <_printf_float+0x2ec>)
 8001c96:	4638      	mov	r0, r7
 8001c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001c9a:	f7fe fea9 	bl	80009f0 <__aeabi_dcmple>
 8001c9e:	bb28      	cbnz	r0, 8001cec <_printf_float+0xb8>
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	4638      	mov	r0, r7
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	f7fe fe98 	bl	80009dc <__aeabi_dcmplt>
 8001cac:	b110      	cbz	r0, 8001cb4 <_printf_float+0x80>
 8001cae:	232d      	movs	r3, #45	; 0x2d
 8001cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cb4:	4f9b      	ldr	r7, [pc, #620]	; (8001f24 <_printf_float+0x2f0>)
 8001cb6:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <_printf_float+0x2f4>)
 8001cb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001cbc:	bf98      	it	ls
 8001cbe:	461f      	movls	r7, r3
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f04f 0900 	mov.w	r9, #0
 8001cc6:	6123      	str	r3, [r4, #16]
 8001cc8:	f02a 0304 	bic.w	r3, sl, #4
 8001ccc:	6023      	str	r3, [r4, #0]
 8001cce:	9600      	str	r6, [sp, #0]
 8001cd0:	465b      	mov	r3, fp
 8001cd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 f9e2 	bl	80020a0 <_printf_common>
 8001cdc:	3001      	adds	r0, #1
 8001cde:	f040 8090 	bne.w	8001e02 <_printf_float+0x1ce>
 8001ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce6:	b011      	add	sp, #68	; 0x44
 8001ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cec:	463a      	mov	r2, r7
 8001cee:	464b      	mov	r3, r9
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	f7fe fe9a 	bl	8000a2c <__aeabi_dcmpun>
 8001cf8:	b110      	cbz	r0, 8001d00 <_printf_float+0xcc>
 8001cfa:	4f8c      	ldr	r7, [pc, #560]	; (8001f2c <_printf_float+0x2f8>)
 8001cfc:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <_printf_float+0x2fc>)
 8001cfe:	e7db      	b.n	8001cb8 <_printf_float+0x84>
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	a80d      	add	r0, sp, #52	; 0x34
 8001d0a:	a90e      	add	r1, sp, #56	; 0x38
 8001d0c:	d140      	bne.n	8001d90 <_printf_float+0x15c>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	6063      	str	r3, [r4, #4]
 8001d12:	f04f 0c00 	mov.w	ip, #0
 8001d16:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8001d1a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001d1e:	6863      	ldr	r3, [r4, #4]
 8001d20:	6022      	str	r2, [r4, #0]
 8001d22:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	463a      	mov	r2, r7
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff feed 	bl	8001b10 <__cvt>
 8001d36:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001d3a:	2b47      	cmp	r3, #71	; 0x47
 8001d3c:	4607      	mov	r7, r0
 8001d3e:	d109      	bne.n	8001d54 <_printf_float+0x120>
 8001d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d42:	1cd8      	adds	r0, r3, #3
 8001d44:	db02      	blt.n	8001d4c <_printf_float+0x118>
 8001d46:	6862      	ldr	r2, [r4, #4]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	dd47      	ble.n	8001ddc <_printf_float+0x1a8>
 8001d4c:	f1a8 0802 	sub.w	r8, r8, #2
 8001d50:	fa5f f888 	uxtb.w	r8, r8
 8001d54:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001d58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001d5a:	d824      	bhi.n	8001da6 <_printf_float+0x172>
 8001d5c:	3901      	subs	r1, #1
 8001d5e:	4642      	mov	r2, r8
 8001d60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001d64:	910d      	str	r1, [sp, #52]	; 0x34
 8001d66:	f7ff ff2f 	bl	8001bc8 <__exponent>
 8001d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001d6c:	4681      	mov	r9, r0
 8001d6e:	1813      	adds	r3, r2, r0
 8001d70:	2a01      	cmp	r2, #1
 8001d72:	6123      	str	r3, [r4, #16]
 8001d74:	dc02      	bgt.n	8001d7c <_printf_float+0x148>
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	07d1      	lsls	r1, r2, #31
 8001d7a:	d501      	bpl.n	8001d80 <_printf_float+0x14c>
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0a2      	beq.n	8001cce <_printf_float+0x9a>
 8001d88:	232d      	movs	r3, #45	; 0x2d
 8001d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d8e:	e79e      	b.n	8001cce <_printf_float+0x9a>
 8001d90:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8001d94:	f000 816e 	beq.w	8002074 <_printf_float+0x440>
 8001d98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001d9c:	d1b9      	bne.n	8001d12 <_printf_float+0xde>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1b7      	bne.n	8001d12 <_printf_float+0xde>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e7b4      	b.n	8001d10 <_printf_float+0xdc>
 8001da6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8001daa:	d119      	bne.n	8001de0 <_printf_float+0x1ac>
 8001dac:	2900      	cmp	r1, #0
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	dd0c      	ble.n	8001dcc <_printf_float+0x198>
 8001db2:	6121      	str	r1, [r4, #16]
 8001db4:	b913      	cbnz	r3, 8001dbc <_printf_float+0x188>
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	07d2      	lsls	r2, r2, #31
 8001dba:	d502      	bpl.n	8001dc2 <_printf_float+0x18e>
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	440b      	add	r3, r1
 8001dc0:	6123      	str	r3, [r4, #16]
 8001dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001dc4:	f04f 0900 	mov.w	r9, #0
 8001dc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8001dca:	e7d9      	b.n	8001d80 <_printf_float+0x14c>
 8001dcc:	b913      	cbnz	r3, 8001dd4 <_printf_float+0x1a0>
 8001dce:	6822      	ldr	r2, [r4, #0]
 8001dd0:	07d0      	lsls	r0, r2, #31
 8001dd2:	d501      	bpl.n	8001dd8 <_printf_float+0x1a4>
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	e7f3      	b.n	8001dc0 <_printf_float+0x18c>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e7f1      	b.n	8001dc0 <_printf_float+0x18c>
 8001ddc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8001de0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8001de4:	4293      	cmp	r3, r2
 8001de6:	db05      	blt.n	8001df4 <_printf_float+0x1c0>
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6123      	str	r3, [r4, #16]
 8001dec:	07d1      	lsls	r1, r2, #31
 8001dee:	d5e8      	bpl.n	8001dc2 <_printf_float+0x18e>
 8001df0:	3301      	adds	r3, #1
 8001df2:	e7e5      	b.n	8001dc0 <_printf_float+0x18c>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bfcc      	ite	gt
 8001df8:	2301      	movgt	r3, #1
 8001dfa:	f1c3 0302 	rsble	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	e7de      	b.n	8001dc0 <_printf_float+0x18c>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	055a      	lsls	r2, r3, #21
 8001e06:	d407      	bmi.n	8001e18 <_printf_float+0x1e4>
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	463a      	mov	r2, r7
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	4628      	mov	r0, r5
 8001e10:	47b0      	blx	r6
 8001e12:	3001      	adds	r0, #1
 8001e14:	d129      	bne.n	8001e6a <_printf_float+0x236>
 8001e16:	e764      	b.n	8001ce2 <_printf_float+0xae>
 8001e18:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001e1c:	f240 80d7 	bls.w	8001fce <_printf_float+0x39a>
 8001e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001e24:	2200      	movs	r2, #0
 8001e26:	2300      	movs	r3, #0
 8001e28:	f7fe fdce 	bl	80009c8 <__aeabi_dcmpeq>
 8001e2c:	b388      	cbz	r0, 8001e92 <_printf_float+0x25e>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <_printf_float+0x300>)
 8001e32:	4659      	mov	r1, fp
 8001e34:	4628      	mov	r0, r5
 8001e36:	47b0      	blx	r6
 8001e38:	3001      	adds	r0, #1
 8001e3a:	f43f af52 	beq.w	8001ce2 <_printf_float+0xae>
 8001e3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001e42:	429a      	cmp	r2, r3
 8001e44:	db02      	blt.n	8001e4c <_printf_float+0x218>
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	07d8      	lsls	r0, r3, #31
 8001e4a:	d50e      	bpl.n	8001e6a <_printf_float+0x236>
 8001e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001e50:	4659      	mov	r1, fp
 8001e52:	4628      	mov	r0, r5
 8001e54:	47b0      	blx	r6
 8001e56:	3001      	adds	r0, #1
 8001e58:	f43f af43 	beq.w	8001ce2 <_printf_float+0xae>
 8001e5c:	2700      	movs	r7, #0
 8001e5e:	f104 081a 	add.w	r8, r4, #26
 8001e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e64:	3b01      	subs	r3, #1
 8001e66:	42bb      	cmp	r3, r7
 8001e68:	dc09      	bgt.n	8001e7e <_printf_float+0x24a>
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	079f      	lsls	r7, r3, #30
 8001e6e:	f100 80fd 	bmi.w	800206c <_printf_float+0x438>
 8001e72:	68e0      	ldr	r0, [r4, #12]
 8001e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001e76:	4298      	cmp	r0, r3
 8001e78:	bfb8      	it	lt
 8001e7a:	4618      	movlt	r0, r3
 8001e7c:	e733      	b.n	8001ce6 <_printf_float+0xb2>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4642      	mov	r2, r8
 8001e82:	4659      	mov	r1, fp
 8001e84:	4628      	mov	r0, r5
 8001e86:	47b0      	blx	r6
 8001e88:	3001      	adds	r0, #1
 8001e8a:	f43f af2a 	beq.w	8001ce2 <_printf_float+0xae>
 8001e8e:	3701      	adds	r7, #1
 8001e90:	e7e7      	b.n	8001e62 <_printf_float+0x22e>
 8001e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dc2b      	bgt.n	8001ef0 <_printf_float+0x2bc>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <_printf_float+0x300>)
 8001e9c:	4659      	mov	r1, fp
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	47b0      	blx	r6
 8001ea2:	3001      	adds	r0, #1
 8001ea4:	f43f af1d 	beq.w	8001ce2 <_printf_float+0xae>
 8001ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001eaa:	b923      	cbnz	r3, 8001eb6 <_printf_float+0x282>
 8001eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001eae:	b913      	cbnz	r3, 8001eb6 <_printf_float+0x282>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	07d9      	lsls	r1, r3, #31
 8001eb4:	d5d9      	bpl.n	8001e6a <_printf_float+0x236>
 8001eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001eba:	4659      	mov	r1, fp
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	47b0      	blx	r6
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	f43f af0e 	beq.w	8001ce2 <_printf_float+0xae>
 8001ec6:	f04f 0800 	mov.w	r8, #0
 8001eca:	f104 091a 	add.w	r9, r4, #26
 8001ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ed0:	425b      	negs	r3, r3
 8001ed2:	4543      	cmp	r3, r8
 8001ed4:	dc01      	bgt.n	8001eda <_printf_float+0x2a6>
 8001ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ed8:	e797      	b.n	8001e0a <_printf_float+0x1d6>
 8001eda:	2301      	movs	r3, #1
 8001edc:	464a      	mov	r2, r9
 8001ede:	4659      	mov	r1, fp
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	47b0      	blx	r6
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	f43f aefc 	beq.w	8001ce2 <_printf_float+0xae>
 8001eea:	f108 0801 	add.w	r8, r8, #1
 8001eee:	e7ee      	b.n	8001ece <_printf_float+0x29a>
 8001ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	bfa8      	it	ge
 8001ef8:	461a      	movge	r2, r3
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	4690      	mov	r8, r2
 8001efe:	dd07      	ble.n	8001f10 <_printf_float+0x2dc>
 8001f00:	4613      	mov	r3, r2
 8001f02:	4659      	mov	r1, fp
 8001f04:	463a      	mov	r2, r7
 8001f06:	4628      	mov	r0, r5
 8001f08:	47b0      	blx	r6
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	f43f aee9 	beq.w	8001ce2 <_printf_float+0xae>
 8001f10:	f104 031a 	add.w	r3, r4, #26
 8001f14:	f04f 0a00 	mov.w	sl, #0
 8001f18:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8001f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f1e:	e015      	b.n	8001f4c <_printf_float+0x318>
 8001f20:	7fefffff 	.word	0x7fefffff
 8001f24:	08003be9 	.word	0x08003be9
 8001f28:	08003be5 	.word	0x08003be5
 8001f2c:	08003bf1 	.word	0x08003bf1
 8001f30:	08003bed 	.word	0x08003bed
 8001f34:	08003bf5 	.word	0x08003bf5
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	4628      	mov	r0, r5
 8001f40:	47b0      	blx	r6
 8001f42:	3001      	adds	r0, #1
 8001f44:	f43f aecd 	beq.w	8001ce2 <_printf_float+0xae>
 8001f48:	f10a 0a01 	add.w	sl, sl, #1
 8001f4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8001f50:	eba9 0308 	sub.w	r3, r9, r8
 8001f54:	4553      	cmp	r3, sl
 8001f56:	dcef      	bgt.n	8001f38 <_printf_float+0x304>
 8001f58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	444f      	add	r7, r9
 8001f60:	db14      	blt.n	8001f8c <_printf_float+0x358>
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	07da      	lsls	r2, r3, #31
 8001f66:	d411      	bmi.n	8001f8c <_printf_float+0x358>
 8001f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001f6c:	eba3 0209 	sub.w	r2, r3, r9
 8001f70:	eba3 0901 	sub.w	r9, r3, r1
 8001f74:	4591      	cmp	r9, r2
 8001f76:	bfa8      	it	ge
 8001f78:	4691      	movge	r9, r2
 8001f7a:	f1b9 0f00 	cmp.w	r9, #0
 8001f7e:	dc0d      	bgt.n	8001f9c <_printf_float+0x368>
 8001f80:	2700      	movs	r7, #0
 8001f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001f86:	f104 081a 	add.w	r8, r4, #26
 8001f8a:	e018      	b.n	8001fbe <_printf_float+0x38a>
 8001f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001f90:	4659      	mov	r1, fp
 8001f92:	4628      	mov	r0, r5
 8001f94:	47b0      	blx	r6
 8001f96:	3001      	adds	r0, #1
 8001f98:	d1e6      	bne.n	8001f68 <_printf_float+0x334>
 8001f9a:	e6a2      	b.n	8001ce2 <_printf_float+0xae>
 8001f9c:	464b      	mov	r3, r9
 8001f9e:	463a      	mov	r2, r7
 8001fa0:	4659      	mov	r1, fp
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	47b0      	blx	r6
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	d1ea      	bne.n	8001f80 <_printf_float+0x34c>
 8001faa:	e69a      	b.n	8001ce2 <_printf_float+0xae>
 8001fac:	2301      	movs	r3, #1
 8001fae:	4642      	mov	r2, r8
 8001fb0:	4659      	mov	r1, fp
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	47b0      	blx	r6
 8001fb6:	3001      	adds	r0, #1
 8001fb8:	f43f ae93 	beq.w	8001ce2 <_printf_float+0xae>
 8001fbc:	3701      	adds	r7, #1
 8001fbe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	eba3 0309 	sub.w	r3, r3, r9
 8001fc8:	42bb      	cmp	r3, r7
 8001fca:	dcef      	bgt.n	8001fac <_printf_float+0x378>
 8001fcc:	e74d      	b.n	8001e6a <_printf_float+0x236>
 8001fce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001fd0:	2a01      	cmp	r2, #1
 8001fd2:	dc01      	bgt.n	8001fd8 <_printf_float+0x3a4>
 8001fd4:	07db      	lsls	r3, r3, #31
 8001fd6:	d538      	bpl.n	800204a <_printf_float+0x416>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	463a      	mov	r2, r7
 8001fdc:	4659      	mov	r1, fp
 8001fde:	4628      	mov	r0, r5
 8001fe0:	47b0      	blx	r6
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	f43f ae7d 	beq.w	8001ce2 <_printf_float+0xae>
 8001fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001fec:	4659      	mov	r1, fp
 8001fee:	4628      	mov	r0, r5
 8001ff0:	47b0      	blx	r6
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	f107 0701 	add.w	r7, r7, #1
 8001ff8:	f43f ae73 	beq.w	8001ce2 <_printf_float+0xae>
 8001ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002002:	2200      	movs	r2, #0
 8002004:	f103 38ff 	add.w	r8, r3, #4294967295
 8002008:	2300      	movs	r3, #0
 800200a:	f7fe fcdd 	bl	80009c8 <__aeabi_dcmpeq>
 800200e:	b9c0      	cbnz	r0, 8002042 <_printf_float+0x40e>
 8002010:	4643      	mov	r3, r8
 8002012:	463a      	mov	r2, r7
 8002014:	4659      	mov	r1, fp
 8002016:	4628      	mov	r0, r5
 8002018:	47b0      	blx	r6
 800201a:	3001      	adds	r0, #1
 800201c:	d10d      	bne.n	800203a <_printf_float+0x406>
 800201e:	e660      	b.n	8001ce2 <_printf_float+0xae>
 8002020:	2301      	movs	r3, #1
 8002022:	4642      	mov	r2, r8
 8002024:	4659      	mov	r1, fp
 8002026:	4628      	mov	r0, r5
 8002028:	47b0      	blx	r6
 800202a:	3001      	adds	r0, #1
 800202c:	f43f ae59 	beq.w	8001ce2 <_printf_float+0xae>
 8002030:	3701      	adds	r7, #1
 8002032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002034:	3b01      	subs	r3, #1
 8002036:	42bb      	cmp	r3, r7
 8002038:	dcf2      	bgt.n	8002020 <_printf_float+0x3ec>
 800203a:	464b      	mov	r3, r9
 800203c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002040:	e6e4      	b.n	8001e0c <_printf_float+0x1d8>
 8002042:	2700      	movs	r7, #0
 8002044:	f104 081a 	add.w	r8, r4, #26
 8002048:	e7f3      	b.n	8002032 <_printf_float+0x3fe>
 800204a:	2301      	movs	r3, #1
 800204c:	e7e1      	b.n	8002012 <_printf_float+0x3de>
 800204e:	2301      	movs	r3, #1
 8002050:	4642      	mov	r2, r8
 8002052:	4659      	mov	r1, fp
 8002054:	4628      	mov	r0, r5
 8002056:	47b0      	blx	r6
 8002058:	3001      	adds	r0, #1
 800205a:	f43f ae42 	beq.w	8001ce2 <_printf_float+0xae>
 800205e:	3701      	adds	r7, #1
 8002060:	68e3      	ldr	r3, [r4, #12]
 8002062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	42bb      	cmp	r3, r7
 8002068:	dcf1      	bgt.n	800204e <_printf_float+0x41a>
 800206a:	e702      	b.n	8001e72 <_printf_float+0x23e>
 800206c:	2700      	movs	r7, #0
 800206e:	f104 0819 	add.w	r8, r4, #25
 8002072:	e7f5      	b.n	8002060 <_printf_float+0x42c>
 8002074:	2b00      	cmp	r3, #0
 8002076:	f43f ae94 	beq.w	8001da2 <_printf_float+0x16e>
 800207a:	f04f 0c00 	mov.w	ip, #0
 800207e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002082:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002086:	6022      	str	r2, [r4, #0]
 8002088:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800208c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	463a      	mov	r2, r7
 8002094:	464b      	mov	r3, r9
 8002096:	4628      	mov	r0, r5
 8002098:	f7ff fd3a 	bl	8001b10 <__cvt>
 800209c:	4607      	mov	r7, r0
 800209e:	e64f      	b.n	8001d40 <_printf_float+0x10c>

080020a0 <_printf_common>:
 80020a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020a4:	4691      	mov	r9, r2
 80020a6:	461f      	mov	r7, r3
 80020a8:	688a      	ldr	r2, [r1, #8]
 80020aa:	690b      	ldr	r3, [r1, #16]
 80020ac:	4606      	mov	r6, r0
 80020ae:	4293      	cmp	r3, r2
 80020b0:	bfb8      	it	lt
 80020b2:	4613      	movlt	r3, r2
 80020b4:	f8c9 3000 	str.w	r3, [r9]
 80020b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020bc:	460c      	mov	r4, r1
 80020be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020c2:	b112      	cbz	r2, 80020ca <_printf_common+0x2a>
 80020c4:	3301      	adds	r3, #1
 80020c6:	f8c9 3000 	str.w	r3, [r9]
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	0699      	lsls	r1, r3, #26
 80020ce:	bf42      	ittt	mi
 80020d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020d4:	3302      	addmi	r3, #2
 80020d6:	f8c9 3000 	strmi.w	r3, [r9]
 80020da:	6825      	ldr	r5, [r4, #0]
 80020dc:	f015 0506 	ands.w	r5, r5, #6
 80020e0:	d107      	bne.n	80020f2 <_printf_common+0x52>
 80020e2:	f104 0a19 	add.w	sl, r4, #25
 80020e6:	68e3      	ldr	r3, [r4, #12]
 80020e8:	f8d9 2000 	ldr.w	r2, [r9]
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	42ab      	cmp	r3, r5
 80020f0:	dc29      	bgt.n	8002146 <_printf_common+0xa6>
 80020f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	3300      	adds	r3, #0
 80020fa:	bf18      	it	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	0692      	lsls	r2, r2, #26
 8002100:	d42e      	bmi.n	8002160 <_printf_common+0xc0>
 8002102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002106:	4639      	mov	r1, r7
 8002108:	4630      	mov	r0, r6
 800210a:	47c0      	blx	r8
 800210c:	3001      	adds	r0, #1
 800210e:	d021      	beq.n	8002154 <_printf_common+0xb4>
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	68e5      	ldr	r5, [r4, #12]
 8002114:	f003 0306 	and.w	r3, r3, #6
 8002118:	2b04      	cmp	r3, #4
 800211a:	bf18      	it	ne
 800211c:	2500      	movne	r5, #0
 800211e:	f8d9 2000 	ldr.w	r2, [r9]
 8002122:	f04f 0900 	mov.w	r9, #0
 8002126:	bf08      	it	eq
 8002128:	1aad      	subeq	r5, r5, r2
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	6922      	ldr	r2, [r4, #16]
 800212e:	bf08      	it	eq
 8002130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002134:	4293      	cmp	r3, r2
 8002136:	bfc4      	itt	gt
 8002138:	1a9b      	subgt	r3, r3, r2
 800213a:	18ed      	addgt	r5, r5, r3
 800213c:	341a      	adds	r4, #26
 800213e:	454d      	cmp	r5, r9
 8002140:	d11a      	bne.n	8002178 <_printf_common+0xd8>
 8002142:	2000      	movs	r0, #0
 8002144:	e008      	b.n	8002158 <_printf_common+0xb8>
 8002146:	2301      	movs	r3, #1
 8002148:	4652      	mov	r2, sl
 800214a:	4639      	mov	r1, r7
 800214c:	4630      	mov	r0, r6
 800214e:	47c0      	blx	r8
 8002150:	3001      	adds	r0, #1
 8002152:	d103      	bne.n	800215c <_printf_common+0xbc>
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800215c:	3501      	adds	r5, #1
 800215e:	e7c2      	b.n	80020e6 <_printf_common+0x46>
 8002160:	2030      	movs	r0, #48	; 0x30
 8002162:	18e1      	adds	r1, r4, r3
 8002164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800216e:	4422      	add	r2, r4
 8002170:	3302      	adds	r3, #2
 8002172:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002176:	e7c4      	b.n	8002102 <_printf_common+0x62>
 8002178:	2301      	movs	r3, #1
 800217a:	4622      	mov	r2, r4
 800217c:	4639      	mov	r1, r7
 800217e:	4630      	mov	r0, r6
 8002180:	47c0      	blx	r8
 8002182:	3001      	adds	r0, #1
 8002184:	d0e6      	beq.n	8002154 <_printf_common+0xb4>
 8002186:	f109 0901 	add.w	r9, r9, #1
 800218a:	e7d8      	b.n	800213e <_printf_common+0x9e>

0800218c <_printf_i>:
 800218c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002194:	460c      	mov	r4, r1
 8002196:	7e09      	ldrb	r1, [r1, #24]
 8002198:	b085      	sub	sp, #20
 800219a:	296e      	cmp	r1, #110	; 0x6e
 800219c:	4617      	mov	r7, r2
 800219e:	4606      	mov	r6, r0
 80021a0:	4698      	mov	r8, r3
 80021a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021a4:	f000 80b3 	beq.w	800230e <_printf_i+0x182>
 80021a8:	d822      	bhi.n	80021f0 <_printf_i+0x64>
 80021aa:	2963      	cmp	r1, #99	; 0x63
 80021ac:	d036      	beq.n	800221c <_printf_i+0x90>
 80021ae:	d80a      	bhi.n	80021c6 <_printf_i+0x3a>
 80021b0:	2900      	cmp	r1, #0
 80021b2:	f000 80b9 	beq.w	8002328 <_printf_i+0x19c>
 80021b6:	2958      	cmp	r1, #88	; 0x58
 80021b8:	f000 8083 	beq.w	80022c2 <_printf_i+0x136>
 80021bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80021c4:	e032      	b.n	800222c <_printf_i+0xa0>
 80021c6:	2964      	cmp	r1, #100	; 0x64
 80021c8:	d001      	beq.n	80021ce <_printf_i+0x42>
 80021ca:	2969      	cmp	r1, #105	; 0x69
 80021cc:	d1f6      	bne.n	80021bc <_printf_i+0x30>
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	6813      	ldr	r3, [r2, #0]
 80021d2:	0605      	lsls	r5, r0, #24
 80021d4:	f103 0104 	add.w	r1, r3, #4
 80021d8:	d52a      	bpl.n	8002230 <_printf_i+0xa4>
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6011      	str	r1, [r2, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da03      	bge.n	80021ea <_printf_i+0x5e>
 80021e2:	222d      	movs	r2, #45	; 0x2d
 80021e4:	425b      	negs	r3, r3
 80021e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021ea:	486f      	ldr	r0, [pc, #444]	; (80023a8 <_printf_i+0x21c>)
 80021ec:	220a      	movs	r2, #10
 80021ee:	e039      	b.n	8002264 <_printf_i+0xd8>
 80021f0:	2973      	cmp	r1, #115	; 0x73
 80021f2:	f000 809d 	beq.w	8002330 <_printf_i+0x1a4>
 80021f6:	d808      	bhi.n	800220a <_printf_i+0x7e>
 80021f8:	296f      	cmp	r1, #111	; 0x6f
 80021fa:	d020      	beq.n	800223e <_printf_i+0xb2>
 80021fc:	2970      	cmp	r1, #112	; 0x70
 80021fe:	d1dd      	bne.n	80021bc <_printf_i+0x30>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	e003      	b.n	8002212 <_printf_i+0x86>
 800220a:	2975      	cmp	r1, #117	; 0x75
 800220c:	d017      	beq.n	800223e <_printf_i+0xb2>
 800220e:	2978      	cmp	r1, #120	; 0x78
 8002210:	d1d4      	bne.n	80021bc <_printf_i+0x30>
 8002212:	2378      	movs	r3, #120	; 0x78
 8002214:	4865      	ldr	r0, [pc, #404]	; (80023ac <_printf_i+0x220>)
 8002216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800221a:	e055      	b.n	80022c8 <_printf_i+0x13c>
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002222:	1d19      	adds	r1, r3, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800222c:	2301      	movs	r3, #1
 800222e:	e08c      	b.n	800234a <_printf_i+0x1be>
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002236:	6011      	str	r1, [r2, #0]
 8002238:	bf18      	it	ne
 800223a:	b21b      	sxthne	r3, r3
 800223c:	e7cf      	b.n	80021de <_printf_i+0x52>
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	6825      	ldr	r5, [r4, #0]
 8002242:	1d18      	adds	r0, r3, #4
 8002244:	6010      	str	r0, [r2, #0]
 8002246:	0628      	lsls	r0, r5, #24
 8002248:	d501      	bpl.n	800224e <_printf_i+0xc2>
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e002      	b.n	8002254 <_printf_i+0xc8>
 800224e:	0668      	lsls	r0, r5, #25
 8002250:	d5fb      	bpl.n	800224a <_printf_i+0xbe>
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	296f      	cmp	r1, #111	; 0x6f
 8002256:	bf14      	ite	ne
 8002258:	220a      	movne	r2, #10
 800225a:	2208      	moveq	r2, #8
 800225c:	4852      	ldr	r0, [pc, #328]	; (80023a8 <_printf_i+0x21c>)
 800225e:	2100      	movs	r1, #0
 8002260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002264:	6865      	ldr	r5, [r4, #4]
 8002266:	2d00      	cmp	r5, #0
 8002268:	60a5      	str	r5, [r4, #8]
 800226a:	f2c0 8095 	blt.w	8002398 <_printf_i+0x20c>
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	f021 0104 	bic.w	r1, r1, #4
 8002274:	6021      	str	r1, [r4, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d13d      	bne.n	80022f6 <_printf_i+0x16a>
 800227a:	2d00      	cmp	r5, #0
 800227c:	f040 808e 	bne.w	800239c <_printf_i+0x210>
 8002280:	4665      	mov	r5, ip
 8002282:	2a08      	cmp	r2, #8
 8002284:	d10b      	bne.n	800229e <_printf_i+0x112>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	07db      	lsls	r3, r3, #31
 800228a:	d508      	bpl.n	800229e <_printf_i+0x112>
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	6862      	ldr	r2, [r4, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	bfde      	ittt	le
 8002294:	2330      	movle	r3, #48	; 0x30
 8002296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800229a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800229e:	ebac 0305 	sub.w	r3, ip, r5
 80022a2:	6123      	str	r3, [r4, #16]
 80022a4:	f8cd 8000 	str.w	r8, [sp]
 80022a8:	463b      	mov	r3, r7
 80022aa:	aa03      	add	r2, sp, #12
 80022ac:	4621      	mov	r1, r4
 80022ae:	4630      	mov	r0, r6
 80022b0:	f7ff fef6 	bl	80020a0 <_printf_common>
 80022b4:	3001      	adds	r0, #1
 80022b6:	d14d      	bne.n	8002354 <_printf_i+0x1c8>
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	b005      	add	sp, #20
 80022be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022c2:	4839      	ldr	r0, [pc, #228]	; (80023a8 <_printf_i+0x21c>)
 80022c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80022c8:	6813      	ldr	r3, [r2, #0]
 80022ca:	6821      	ldr	r1, [r4, #0]
 80022cc:	1d1d      	adds	r5, r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6015      	str	r5, [r2, #0]
 80022d2:	060a      	lsls	r2, r1, #24
 80022d4:	d50b      	bpl.n	80022ee <_printf_i+0x162>
 80022d6:	07ca      	lsls	r2, r1, #31
 80022d8:	bf44      	itt	mi
 80022da:	f041 0120 	orrmi.w	r1, r1, #32
 80022de:	6021      	strmi	r1, [r4, #0]
 80022e0:	b91b      	cbnz	r3, 80022ea <_printf_i+0x15e>
 80022e2:	6822      	ldr	r2, [r4, #0]
 80022e4:	f022 0220 	bic.w	r2, r2, #32
 80022e8:	6022      	str	r2, [r4, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	e7b7      	b.n	800225e <_printf_i+0xd2>
 80022ee:	064d      	lsls	r5, r1, #25
 80022f0:	bf48      	it	mi
 80022f2:	b29b      	uxthmi	r3, r3
 80022f4:	e7ef      	b.n	80022d6 <_printf_i+0x14a>
 80022f6:	4665      	mov	r5, ip
 80022f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80022fc:	fb02 3311 	mls	r3, r2, r1, r3
 8002300:	5cc3      	ldrb	r3, [r0, r3]
 8002302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002306:	460b      	mov	r3, r1
 8002308:	2900      	cmp	r1, #0
 800230a:	d1f5      	bne.n	80022f8 <_printf_i+0x16c>
 800230c:	e7b9      	b.n	8002282 <_printf_i+0xf6>
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	6825      	ldr	r5, [r4, #0]
 8002312:	1d18      	adds	r0, r3, #4
 8002314:	6961      	ldr	r1, [r4, #20]
 8002316:	6010      	str	r0, [r2, #0]
 8002318:	0628      	lsls	r0, r5, #24
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	d501      	bpl.n	8002322 <_printf_i+0x196>
 800231e:	6019      	str	r1, [r3, #0]
 8002320:	e002      	b.n	8002328 <_printf_i+0x19c>
 8002322:	066a      	lsls	r2, r5, #25
 8002324:	d5fb      	bpl.n	800231e <_printf_i+0x192>
 8002326:	8019      	strh	r1, [r3, #0]
 8002328:	2300      	movs	r3, #0
 800232a:	4665      	mov	r5, ip
 800232c:	6123      	str	r3, [r4, #16]
 800232e:	e7b9      	b.n	80022a4 <_printf_i+0x118>
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	1d19      	adds	r1, r3, #4
 8002334:	6011      	str	r1, [r2, #0]
 8002336:	681d      	ldr	r5, [r3, #0]
 8002338:	6862      	ldr	r2, [r4, #4]
 800233a:	2100      	movs	r1, #0
 800233c:	4628      	mov	r0, r5
 800233e:	f000 feb1 	bl	80030a4 <memchr>
 8002342:	b108      	cbz	r0, 8002348 <_printf_i+0x1bc>
 8002344:	1b40      	subs	r0, r0, r5
 8002346:	6060      	str	r0, [r4, #4]
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	6123      	str	r3, [r4, #16]
 800234c:	2300      	movs	r3, #0
 800234e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002352:	e7a7      	b.n	80022a4 <_printf_i+0x118>
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	462a      	mov	r2, r5
 8002358:	4639      	mov	r1, r7
 800235a:	4630      	mov	r0, r6
 800235c:	47c0      	blx	r8
 800235e:	3001      	adds	r0, #1
 8002360:	d0aa      	beq.n	80022b8 <_printf_i+0x12c>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	079b      	lsls	r3, r3, #30
 8002366:	d413      	bmi.n	8002390 <_printf_i+0x204>
 8002368:	68e0      	ldr	r0, [r4, #12]
 800236a:	9b03      	ldr	r3, [sp, #12]
 800236c:	4298      	cmp	r0, r3
 800236e:	bfb8      	it	lt
 8002370:	4618      	movlt	r0, r3
 8002372:	e7a3      	b.n	80022bc <_printf_i+0x130>
 8002374:	2301      	movs	r3, #1
 8002376:	464a      	mov	r2, r9
 8002378:	4639      	mov	r1, r7
 800237a:	4630      	mov	r0, r6
 800237c:	47c0      	blx	r8
 800237e:	3001      	adds	r0, #1
 8002380:	d09a      	beq.n	80022b8 <_printf_i+0x12c>
 8002382:	3501      	adds	r5, #1
 8002384:	68e3      	ldr	r3, [r4, #12]
 8002386:	9a03      	ldr	r2, [sp, #12]
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	42ab      	cmp	r3, r5
 800238c:	dcf2      	bgt.n	8002374 <_printf_i+0x1e8>
 800238e:	e7eb      	b.n	8002368 <_printf_i+0x1dc>
 8002390:	2500      	movs	r5, #0
 8002392:	f104 0919 	add.w	r9, r4, #25
 8002396:	e7f5      	b.n	8002384 <_printf_i+0x1f8>
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ac      	bne.n	80022f6 <_printf_i+0x16a>
 800239c:	7803      	ldrb	r3, [r0, #0]
 800239e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023a6:	e76c      	b.n	8002282 <_printf_i+0xf6>
 80023a8:	08003bf7 	.word	0x08003bf7
 80023ac:	08003c08 	.word	0x08003c08

080023b0 <siprintf>:
 80023b0:	b40e      	push	{r1, r2, r3}
 80023b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023b6:	b500      	push	{lr}
 80023b8:	b09c      	sub	sp, #112	; 0x70
 80023ba:	ab1d      	add	r3, sp, #116	; 0x74
 80023bc:	9002      	str	r0, [sp, #8]
 80023be:	9006      	str	r0, [sp, #24]
 80023c0:	9107      	str	r1, [sp, #28]
 80023c2:	9104      	str	r1, [sp, #16]
 80023c4:	4808      	ldr	r0, [pc, #32]	; (80023e8 <siprintf+0x38>)
 80023c6:	4909      	ldr	r1, [pc, #36]	; (80023ec <siprintf+0x3c>)
 80023c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80023cc:	9105      	str	r1, [sp, #20]
 80023ce:	6800      	ldr	r0, [r0, #0]
 80023d0:	a902      	add	r1, sp, #8
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f001 fa6a 	bl	80038ac <_svfiprintf_r>
 80023d8:	2200      	movs	r2, #0
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	b01c      	add	sp, #112	; 0x70
 80023e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023e4:	b003      	add	sp, #12
 80023e6:	4770      	bx	lr
 80023e8:	20000004 	.word	0x20000004
 80023ec:	ffff0208 	.word	0xffff0208

080023f0 <quorem>:
 80023f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023f4:	6903      	ldr	r3, [r0, #16]
 80023f6:	690c      	ldr	r4, [r1, #16]
 80023f8:	4680      	mov	r8, r0
 80023fa:	42a3      	cmp	r3, r4
 80023fc:	f2c0 8084 	blt.w	8002508 <quorem+0x118>
 8002400:	3c01      	subs	r4, #1
 8002402:	f101 0714 	add.w	r7, r1, #20
 8002406:	f100 0614 	add.w	r6, r0, #20
 800240a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800240e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002412:	3501      	adds	r5, #1
 8002414:	fbb0 f5f5 	udiv	r5, r0, r5
 8002418:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800241c:	eb06 030c 	add.w	r3, r6, ip
 8002420:	eb07 090c 	add.w	r9, r7, ip
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	b39d      	cbz	r5, 8002490 <quorem+0xa0>
 8002428:	f04f 0a00 	mov.w	sl, #0
 800242c:	4638      	mov	r0, r7
 800242e:	46b6      	mov	lr, r6
 8002430:	46d3      	mov	fp, sl
 8002432:	f850 2b04 	ldr.w	r2, [r0], #4
 8002436:	b293      	uxth	r3, r2
 8002438:	fb05 a303 	mla	r3, r5, r3, sl
 800243c:	0c12      	lsrs	r2, r2, #16
 800243e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002442:	fb05 a202 	mla	r2, r5, r2, sl
 8002446:	b29b      	uxth	r3, r3
 8002448:	ebab 0303 	sub.w	r3, fp, r3
 800244c:	f8de b000 	ldr.w	fp, [lr]
 8002450:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002454:	fa1f fb8b 	uxth.w	fp, fp
 8002458:	445b      	add	r3, fp
 800245a:	fa1f fb82 	uxth.w	fp, r2
 800245e:	f8de 2000 	ldr.w	r2, [lr]
 8002462:	4581      	cmp	r9, r0
 8002464:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002472:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002476:	f84e 3b04 	str.w	r3, [lr], #4
 800247a:	d2da      	bcs.n	8002432 <quorem+0x42>
 800247c:	f856 300c 	ldr.w	r3, [r6, ip]
 8002480:	b933      	cbnz	r3, 8002490 <quorem+0xa0>
 8002482:	9b01      	ldr	r3, [sp, #4]
 8002484:	3b04      	subs	r3, #4
 8002486:	429e      	cmp	r6, r3
 8002488:	461a      	mov	r2, r3
 800248a:	d331      	bcc.n	80024f0 <quorem+0x100>
 800248c:	f8c8 4010 	str.w	r4, [r8, #16]
 8002490:	4640      	mov	r0, r8
 8002492:	f001 f835 	bl	8003500 <__mcmp>
 8002496:	2800      	cmp	r0, #0
 8002498:	db26      	blt.n	80024e8 <quorem+0xf8>
 800249a:	4630      	mov	r0, r6
 800249c:	f04f 0c00 	mov.w	ip, #0
 80024a0:	3501      	adds	r5, #1
 80024a2:	f857 1b04 	ldr.w	r1, [r7], #4
 80024a6:	f8d0 e000 	ldr.w	lr, [r0]
 80024aa:	b28b      	uxth	r3, r1
 80024ac:	ebac 0303 	sub.w	r3, ip, r3
 80024b0:	fa1f f28e 	uxth.w	r2, lr
 80024b4:	4413      	add	r3, r2
 80024b6:	0c0a      	lsrs	r2, r1, #16
 80024b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80024bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024c6:	45b9      	cmp	r9, r7
 80024c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80024cc:	f840 3b04 	str.w	r3, [r0], #4
 80024d0:	d2e7      	bcs.n	80024a2 <quorem+0xb2>
 80024d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80024d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80024da:	b92a      	cbnz	r2, 80024e8 <quorem+0xf8>
 80024dc:	3b04      	subs	r3, #4
 80024de:	429e      	cmp	r6, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	d30b      	bcc.n	80024fc <quorem+0x10c>
 80024e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80024e8:	4628      	mov	r0, r5
 80024ea:	b003      	add	sp, #12
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	3b04      	subs	r3, #4
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d1c9      	bne.n	800248c <quorem+0x9c>
 80024f8:	3c01      	subs	r4, #1
 80024fa:	e7c4      	b.n	8002486 <quorem+0x96>
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	3b04      	subs	r3, #4
 8002500:	2a00      	cmp	r2, #0
 8002502:	d1ef      	bne.n	80024e4 <quorem+0xf4>
 8002504:	3c01      	subs	r4, #1
 8002506:	e7ea      	b.n	80024de <quorem+0xee>
 8002508:	2000      	movs	r0, #0
 800250a:	e7ee      	b.n	80024ea <quorem+0xfa>
 800250c:	0000      	movs	r0, r0
	...

08002510 <_dtoa_r>:
 8002510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002514:	4616      	mov	r6, r2
 8002516:	461f      	mov	r7, r3
 8002518:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800251a:	b095      	sub	sp, #84	; 0x54
 800251c:	4604      	mov	r4, r0
 800251e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002522:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002526:	b93d      	cbnz	r5, 8002538 <_dtoa_r+0x28>
 8002528:	2010      	movs	r0, #16
 800252a:	f000 fdb3 	bl	8003094 <malloc>
 800252e:	6260      	str	r0, [r4, #36]	; 0x24
 8002530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002534:	6005      	str	r5, [r0, #0]
 8002536:	60c5      	str	r5, [r0, #12]
 8002538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	b151      	cbz	r1, 8002554 <_dtoa_r+0x44>
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	2301      	movs	r3, #1
 8002542:	4093      	lsls	r3, r2
 8002544:	604a      	str	r2, [r1, #4]
 8002546:	608b      	str	r3, [r1, #8]
 8002548:	4620      	mov	r0, r4
 800254a:	f000 fdf8 	bl	800313e <_Bfree>
 800254e:	2200      	movs	r2, #0
 8002550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	1e3b      	subs	r3, r7, #0
 8002556:	bfaf      	iteee	ge
 8002558:	2300      	movge	r3, #0
 800255a:	2201      	movlt	r2, #1
 800255c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002560:	9303      	strlt	r3, [sp, #12]
 8002562:	bfac      	ite	ge
 8002564:	f8c8 3000 	strge.w	r3, [r8]
 8002568:	f8c8 2000 	strlt.w	r2, [r8]
 800256c:	4bae      	ldr	r3, [pc, #696]	; (8002828 <_dtoa_r+0x318>)
 800256e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002572:	ea33 0308 	bics.w	r3, r3, r8
 8002576:	d11b      	bne.n	80025b0 <_dtoa_r+0xa0>
 8002578:	f242 730f 	movw	r3, #9999	; 0x270f
 800257c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	9b02      	ldr	r3, [sp, #8]
 8002582:	b923      	cbnz	r3, 800258e <_dtoa_r+0x7e>
 8002584:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002588:	2800      	cmp	r0, #0
 800258a:	f000 8545 	beq.w	8003018 <_dtoa_r+0xb08>
 800258e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002590:	b953      	cbnz	r3, 80025a8 <_dtoa_r+0x98>
 8002592:	4ba6      	ldr	r3, [pc, #664]	; (800282c <_dtoa_r+0x31c>)
 8002594:	e021      	b.n	80025da <_dtoa_r+0xca>
 8002596:	4ba6      	ldr	r3, [pc, #664]	; (8002830 <_dtoa_r+0x320>)
 8002598:	9306      	str	r3, [sp, #24]
 800259a:	3308      	adds	r3, #8
 800259c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	9806      	ldr	r0, [sp, #24]
 80025a2:	b015      	add	sp, #84	; 0x54
 80025a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a8:	4ba0      	ldr	r3, [pc, #640]	; (800282c <_dtoa_r+0x31c>)
 80025aa:	9306      	str	r3, [sp, #24]
 80025ac:	3303      	adds	r3, #3
 80025ae:	e7f5      	b.n	800259c <_dtoa_r+0x8c>
 80025b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	2300      	movs	r3, #0
 80025b8:	4630      	mov	r0, r6
 80025ba:	4639      	mov	r1, r7
 80025bc:	f7fe fa04 	bl	80009c8 <__aeabi_dcmpeq>
 80025c0:	4682      	mov	sl, r0
 80025c2:	b160      	cbz	r0, 80025de <_dtoa_r+0xce>
 80025c4:	2301      	movs	r3, #1
 80025c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8520 	beq.w	8003012 <_dtoa_r+0xb02>
 80025d2:	4b98      	ldr	r3, [pc, #608]	; (8002834 <_dtoa_r+0x324>)
 80025d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	9306      	str	r3, [sp, #24]
 80025dc:	e7e0      	b.n	80025a0 <_dtoa_r+0x90>
 80025de:	ab12      	add	r3, sp, #72	; 0x48
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	ab13      	add	r3, sp, #76	; 0x4c
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4632      	mov	r2, r6
 80025e8:	463b      	mov	r3, r7
 80025ea:	4620      	mov	r0, r4
 80025ec:	f001 f800 	bl	80035f0 <__d2b>
 80025f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80025f4:	4683      	mov	fp, r0
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d07d      	beq.n	80026f6 <_dtoa_r+0x1e6>
 80025fa:	46b0      	mov	r8, r6
 80025fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002600:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002604:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002608:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800260c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002610:	2200      	movs	r2, #0
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <_dtoa_r+0x328>)
 8002614:	4640      	mov	r0, r8
 8002616:	4649      	mov	r1, r9
 8002618:	f7fd fdb6 	bl	8000188 <__aeabi_dsub>
 800261c:	a37c      	add	r3, pc, #496	; (adr r3, 8002810 <_dtoa_r+0x300>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fd ff69 	bl	80004f8 <__aeabi_dmul>
 8002626:	a37c      	add	r3, pc, #496	; (adr r3, 8002818 <_dtoa_r+0x308>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd fdae 	bl	800018c <__adddf3>
 8002630:	4606      	mov	r6, r0
 8002632:	4628      	mov	r0, r5
 8002634:	460f      	mov	r7, r1
 8002636:	f7fd fef5 	bl	8000424 <__aeabi_i2d>
 800263a:	a379      	add	r3, pc, #484	; (adr r3, 8002820 <_dtoa_r+0x310>)
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f7fd ff5a 	bl	80004f8 <__aeabi_dmul>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4630      	mov	r0, r6
 800264a:	4639      	mov	r1, r7
 800264c:	f7fd fd9e 	bl	800018c <__adddf3>
 8002650:	4606      	mov	r6, r0
 8002652:	460f      	mov	r7, r1
 8002654:	f7fe fa00 	bl	8000a58 <__aeabi_d2iz>
 8002658:	2200      	movs	r2, #0
 800265a:	4682      	mov	sl, r0
 800265c:	2300      	movs	r3, #0
 800265e:	4630      	mov	r0, r6
 8002660:	4639      	mov	r1, r7
 8002662:	f7fe f9bb 	bl	80009dc <__aeabi_dcmplt>
 8002666:	b148      	cbz	r0, 800267c <_dtoa_r+0x16c>
 8002668:	4650      	mov	r0, sl
 800266a:	f7fd fedb 	bl	8000424 <__aeabi_i2d>
 800266e:	4632      	mov	r2, r6
 8002670:	463b      	mov	r3, r7
 8002672:	f7fe f9a9 	bl	80009c8 <__aeabi_dcmpeq>
 8002676:	b908      	cbnz	r0, 800267c <_dtoa_r+0x16c>
 8002678:	f10a 3aff 	add.w	sl, sl, #4294967295
 800267c:	f1ba 0f16 	cmp.w	sl, #22
 8002680:	d85a      	bhi.n	8002738 <_dtoa_r+0x228>
 8002682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002686:	496d      	ldr	r1, [pc, #436]	; (800283c <_dtoa_r+0x32c>)
 8002688:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800268c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002690:	f7fe f9c2 	bl	8000a18 <__aeabi_dcmpgt>
 8002694:	2800      	cmp	r0, #0
 8002696:	d051      	beq.n	800273c <_dtoa_r+0x22c>
 8002698:	2300      	movs	r3, #0
 800269a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800269e:	930d      	str	r3, [sp, #52]	; 0x34
 80026a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80026a2:	1b5d      	subs	r5, r3, r5
 80026a4:	1e6b      	subs	r3, r5, #1
 80026a6:	9307      	str	r3, [sp, #28]
 80026a8:	bf43      	ittte	mi
 80026aa:	2300      	movmi	r3, #0
 80026ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80026b0:	9307      	strmi	r3, [sp, #28]
 80026b2:	f04f 0900 	movpl.w	r9, #0
 80026b6:	f1ba 0f00 	cmp.w	sl, #0
 80026ba:	db41      	blt.n	8002740 <_dtoa_r+0x230>
 80026bc:	9b07      	ldr	r3, [sp, #28]
 80026be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80026c2:	4453      	add	r3, sl
 80026c4:	9307      	str	r3, [sp, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9308      	str	r3, [sp, #32]
 80026ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	f200 808f 	bhi.w	80027f0 <_dtoa_r+0x2e0>
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	bfc4      	itt	gt
 80026d6:	3b04      	subgt	r3, #4
 80026d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80026da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80026dc:	bfc8      	it	gt
 80026de:	2500      	movgt	r5, #0
 80026e0:	f1a3 0302 	sub.w	r3, r3, #2
 80026e4:	bfd8      	it	le
 80026e6:	2501      	movle	r5, #1
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	f200 808d 	bhi.w	8002808 <_dtoa_r+0x2f8>
 80026ee:	e8df f003 	tbb	[pc, r3]
 80026f2:	7d7b      	.short	0x7d7b
 80026f4:	6f2f      	.short	0x6f2f
 80026f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80026fa:	441d      	add	r5, r3
 80026fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002700:	2820      	cmp	r0, #32
 8002702:	dd13      	ble.n	800272c <_dtoa_r+0x21c>
 8002704:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002708:	9b02      	ldr	r3, [sp, #8]
 800270a:	fa08 f800 	lsl.w	r8, r8, r0
 800270e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002712:	fa23 f000 	lsr.w	r0, r3, r0
 8002716:	ea48 0000 	orr.w	r0, r8, r0
 800271a:	f7fd fe73 	bl	8000404 <__aeabi_ui2d>
 800271e:	2301      	movs	r3, #1
 8002720:	4680      	mov	r8, r0
 8002722:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002726:	3d01      	subs	r5, #1
 8002728:	9310      	str	r3, [sp, #64]	; 0x40
 800272a:	e771      	b.n	8002610 <_dtoa_r+0x100>
 800272c:	9b02      	ldr	r3, [sp, #8]
 800272e:	f1c0 0020 	rsb	r0, r0, #32
 8002732:	fa03 f000 	lsl.w	r0, r3, r0
 8002736:	e7f0      	b.n	800271a <_dtoa_r+0x20a>
 8002738:	2301      	movs	r3, #1
 800273a:	e7b0      	b.n	800269e <_dtoa_r+0x18e>
 800273c:	900d      	str	r0, [sp, #52]	; 0x34
 800273e:	e7af      	b.n	80026a0 <_dtoa_r+0x190>
 8002740:	f1ca 0300 	rsb	r3, sl, #0
 8002744:	9308      	str	r3, [sp, #32]
 8002746:	2300      	movs	r3, #0
 8002748:	eba9 090a 	sub.w	r9, r9, sl
 800274c:	930c      	str	r3, [sp, #48]	; 0x30
 800274e:	e7bc      	b.n	80026ca <_dtoa_r+0x1ba>
 8002750:	2301      	movs	r3, #1
 8002752:	9309      	str	r3, [sp, #36]	; 0x24
 8002754:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002756:	2b00      	cmp	r3, #0
 8002758:	dd74      	ble.n	8002844 <_dtoa_r+0x334>
 800275a:	4698      	mov	r8, r3
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	2200      	movs	r2, #0
 8002760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002762:	6072      	str	r2, [r6, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	f102 0014 	add.w	r0, r2, #20
 800276a:	4298      	cmp	r0, r3
 800276c:	6871      	ldr	r1, [r6, #4]
 800276e:	d96e      	bls.n	800284e <_dtoa_r+0x33e>
 8002770:	4620      	mov	r0, r4
 8002772:	f000 fcb0 	bl	80030d6 <_Balloc>
 8002776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002778:	6030      	str	r0, [r6, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b8 0f0e 	cmp.w	r8, #14
 8002780:	9306      	str	r3, [sp, #24]
 8002782:	f200 80ed 	bhi.w	8002960 <_dtoa_r+0x450>
 8002786:	2d00      	cmp	r5, #0
 8002788:	f000 80ea 	beq.w	8002960 <_dtoa_r+0x450>
 800278c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002790:	f1ba 0f00 	cmp.w	sl, #0
 8002794:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002798:	dd77      	ble.n	800288a <_dtoa_r+0x37a>
 800279a:	4a28      	ldr	r2, [pc, #160]	; (800283c <_dtoa_r+0x32c>)
 800279c:	f00a 030f 	and.w	r3, sl, #15
 80027a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80027a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80027a8:	06f0      	lsls	r0, r6, #27
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80027b2:	d568      	bpl.n	8002886 <_dtoa_r+0x376>
 80027b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <_dtoa_r+0x330>)
 80027ba:	2503      	movs	r5, #3
 80027bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027c0:	f7fd ffc4 	bl	800074c <__aeabi_ddiv>
 80027c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027c8:	f006 060f 	and.w	r6, r6, #15
 80027cc:	4f1c      	ldr	r7, [pc, #112]	; (8002840 <_dtoa_r+0x330>)
 80027ce:	e04f      	b.n	8002870 <_dtoa_r+0x360>
 80027d0:	2301      	movs	r3, #1
 80027d2:	9309      	str	r3, [sp, #36]	; 0x24
 80027d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027d6:	4453      	add	r3, sl
 80027d8:	f103 0801 	add.w	r8, r3, #1
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	4643      	mov	r3, r8
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	bfb8      	it	lt
 80027e4:	2301      	movlt	r3, #1
 80027e6:	e7ba      	b.n	800275e <_dtoa_r+0x24e>
 80027e8:	2300      	movs	r3, #0
 80027ea:	e7b2      	b.n	8002752 <_dtoa_r+0x242>
 80027ec:	2300      	movs	r3, #0
 80027ee:	e7f0      	b.n	80027d2 <_dtoa_r+0x2c2>
 80027f0:	2501      	movs	r5, #1
 80027f2:	2300      	movs	r3, #0
 80027f4:	9509      	str	r5, [sp, #36]	; 0x24
 80027f6:	931e      	str	r3, [sp, #120]	; 0x78
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	2200      	movs	r2, #0
 80027fe:	9304      	str	r3, [sp, #16]
 8002800:	4698      	mov	r8, r3
 8002802:	2312      	movs	r3, #18
 8002804:	921f      	str	r2, [sp, #124]	; 0x7c
 8002806:	e7aa      	b.n	800275e <_dtoa_r+0x24e>
 8002808:	2301      	movs	r3, #1
 800280a:	9309      	str	r3, [sp, #36]	; 0x24
 800280c:	e7f4      	b.n	80027f8 <_dtoa_r+0x2e8>
 800280e:	bf00      	nop
 8002810:	636f4361 	.word	0x636f4361
 8002814:	3fd287a7 	.word	0x3fd287a7
 8002818:	8b60c8b3 	.word	0x8b60c8b3
 800281c:	3fc68a28 	.word	0x3fc68a28
 8002820:	509f79fb 	.word	0x509f79fb
 8002824:	3fd34413 	.word	0x3fd34413
 8002828:	7ff00000 	.word	0x7ff00000
 800282c:	08003c22 	.word	0x08003c22
 8002830:	08003c19 	.word	0x08003c19
 8002834:	08003bf6 	.word	0x08003bf6
 8002838:	3ff80000 	.word	0x3ff80000
 800283c:	08003c50 	.word	0x08003c50
 8002840:	08003c28 	.word	0x08003c28
 8002844:	2301      	movs	r3, #1
 8002846:	9304      	str	r3, [sp, #16]
 8002848:	4698      	mov	r8, r3
 800284a:	461a      	mov	r2, r3
 800284c:	e7da      	b.n	8002804 <_dtoa_r+0x2f4>
 800284e:	3101      	adds	r1, #1
 8002850:	6071      	str	r1, [r6, #4]
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	e787      	b.n	8002766 <_dtoa_r+0x256>
 8002856:	07f1      	lsls	r1, r6, #31
 8002858:	d508      	bpl.n	800286c <_dtoa_r+0x35c>
 800285a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800285e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002862:	f7fd fe49 	bl	80004f8 <__aeabi_dmul>
 8002866:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800286a:	3501      	adds	r5, #1
 800286c:	1076      	asrs	r6, r6, #1
 800286e:	3708      	adds	r7, #8
 8002870:	2e00      	cmp	r6, #0
 8002872:	d1f0      	bne.n	8002856 <_dtoa_r+0x346>
 8002874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800287c:	f7fd ff66 	bl	800074c <__aeabi_ddiv>
 8002880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002884:	e01b      	b.n	80028be <_dtoa_r+0x3ae>
 8002886:	2502      	movs	r5, #2
 8002888:	e7a0      	b.n	80027cc <_dtoa_r+0x2bc>
 800288a:	f000 80a4 	beq.w	80029d6 <_dtoa_r+0x4c6>
 800288e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002892:	f1ca 0600 	rsb	r6, sl, #0
 8002896:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <_dtoa_r+0x608>)
 8002898:	f006 020f 	and.w	r2, r6, #15
 800289c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f7fd fe28 	bl	80004f8 <__aeabi_dmul>
 80028a8:	2502      	movs	r5, #2
 80028aa:	2300      	movs	r3, #0
 80028ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028b0:	4f9a      	ldr	r7, [pc, #616]	; (8002b1c <_dtoa_r+0x60c>)
 80028b2:	1136      	asrs	r6, r6, #4
 80028b4:	2e00      	cmp	r6, #0
 80028b6:	f040 8083 	bne.w	80029c0 <_dtoa_r+0x4b0>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e0      	bne.n	8002880 <_dtoa_r+0x370>
 80028be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 808a 	beq.w	80029da <_dtoa_r+0x4ca>
 80028c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80028ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80028d2:	2200      	movs	r2, #0
 80028d4:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <_dtoa_r+0x610>)
 80028d6:	f7fe f881 	bl	80009dc <__aeabi_dcmplt>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d07d      	beq.n	80029da <_dtoa_r+0x4ca>
 80028de:	f1b8 0f00 	cmp.w	r8, #0
 80028e2:	d07a      	beq.n	80029da <_dtoa_r+0x4ca>
 80028e4:	9b04      	ldr	r3, [sp, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	dd36      	ble.n	8002958 <_dtoa_r+0x448>
 80028ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80028ee:	2200      	movs	r2, #0
 80028f0:	4b8c      	ldr	r3, [pc, #560]	; (8002b24 <_dtoa_r+0x614>)
 80028f2:	f7fd fe01 	bl	80004f8 <__aeabi_dmul>
 80028f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028fa:	9e04      	ldr	r6, [sp, #16]
 80028fc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002900:	3501      	adds	r5, #1
 8002902:	4628      	mov	r0, r5
 8002904:	f7fd fd8e 	bl	8000424 <__aeabi_i2d>
 8002908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800290c:	f7fd fdf4 	bl	80004f8 <__aeabi_dmul>
 8002910:	2200      	movs	r2, #0
 8002912:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <_dtoa_r+0x618>)
 8002914:	f7fd fc3a 	bl	800018c <__adddf3>
 8002918:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800291c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002920:	950b      	str	r5, [sp, #44]	; 0x2c
 8002922:	2e00      	cmp	r6, #0
 8002924:	d15c      	bne.n	80029e0 <_dtoa_r+0x4d0>
 8002926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <_dtoa_r+0x61c>)
 800292e:	f7fd fc2b 	bl	8000188 <__aeabi_dsub>
 8002932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002934:	462b      	mov	r3, r5
 8002936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800293a:	f7fe f86d 	bl	8000a18 <__aeabi_dcmpgt>
 800293e:	2800      	cmp	r0, #0
 8002940:	f040 8281 	bne.w	8002e46 <_dtoa_r+0x936>
 8002944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800294a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800294e:	f7fe f845 	bl	80009dc <__aeabi_dcmplt>
 8002952:	2800      	cmp	r0, #0
 8002954:	f040 8275 	bne.w	8002e42 <_dtoa_r+0x932>
 8002958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800295c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002962:	2b00      	cmp	r3, #0
 8002964:	f2c0 814b 	blt.w	8002bfe <_dtoa_r+0x6ee>
 8002968:	f1ba 0f0e 	cmp.w	sl, #14
 800296c:	f300 8147 	bgt.w	8002bfe <_dtoa_r+0x6ee>
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <_dtoa_r+0x608>)
 8002972:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800297e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002980:	2b00      	cmp	r3, #0
 8002982:	f280 80d7 	bge.w	8002b34 <_dtoa_r+0x624>
 8002986:	f1b8 0f00 	cmp.w	r8, #0
 800298a:	f300 80d3 	bgt.w	8002b34 <_dtoa_r+0x624>
 800298e:	f040 8257 	bne.w	8002e40 <_dtoa_r+0x930>
 8002992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002996:	2200      	movs	r2, #0
 8002998:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <_dtoa_r+0x61c>)
 800299a:	f7fd fdad 	bl	80004f8 <__aeabi_dmul>
 800299e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029a2:	f7fe f82f 	bl	8000a04 <__aeabi_dcmpge>
 80029a6:	4646      	mov	r6, r8
 80029a8:	4647      	mov	r7, r8
 80029aa:	2800      	cmp	r0, #0
 80029ac:	f040 822d 	bne.w	8002e0a <_dtoa_r+0x8fa>
 80029b0:	9b06      	ldr	r3, [sp, #24]
 80029b2:	9a06      	ldr	r2, [sp, #24]
 80029b4:	1c5d      	adds	r5, r3, #1
 80029b6:	2331      	movs	r3, #49	; 0x31
 80029b8:	f10a 0a01 	add.w	sl, sl, #1
 80029bc:	7013      	strb	r3, [r2, #0]
 80029be:	e228      	b.n	8002e12 <_dtoa_r+0x902>
 80029c0:	07f2      	lsls	r2, r6, #31
 80029c2:	d505      	bpl.n	80029d0 <_dtoa_r+0x4c0>
 80029c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029c8:	f7fd fd96 	bl	80004f8 <__aeabi_dmul>
 80029cc:	2301      	movs	r3, #1
 80029ce:	3501      	adds	r5, #1
 80029d0:	1076      	asrs	r6, r6, #1
 80029d2:	3708      	adds	r7, #8
 80029d4:	e76e      	b.n	80028b4 <_dtoa_r+0x3a4>
 80029d6:	2502      	movs	r5, #2
 80029d8:	e771      	b.n	80028be <_dtoa_r+0x3ae>
 80029da:	4657      	mov	r7, sl
 80029dc:	4646      	mov	r6, r8
 80029de:	e790      	b.n	8002902 <_dtoa_r+0x3f2>
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <_dtoa_r+0x608>)
 80029e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80029e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80029ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d048      	beq.n	8002a82 <_dtoa_r+0x572>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	2000      	movs	r0, #0
 80029f6:	494e      	ldr	r1, [pc, #312]	; (8002b30 <_dtoa_r+0x620>)
 80029f8:	f7fd fea8 	bl	800074c <__aeabi_ddiv>
 80029fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a00:	f7fd fbc2 	bl	8000188 <__aeabi_dsub>
 8002a04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a08:	9d06      	ldr	r5, [sp, #24]
 8002a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a0e:	f7fe f823 	bl	8000a58 <__aeabi_d2iz>
 8002a12:	9011      	str	r0, [sp, #68]	; 0x44
 8002a14:	f7fd fd06 	bl	8000424 <__aeabi_i2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a20:	f7fd fbb2 	bl	8000188 <__aeabi_dsub>
 8002a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	f805 3b01 	strb.w	r3, [r5], #1
 8002a30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a34:	f7fd ffd2 	bl	80009dc <__aeabi_dcmplt>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d163      	bne.n	8002b04 <_dtoa_r+0x5f4>
 8002a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a40:	2000      	movs	r0, #0
 8002a42:	4937      	ldr	r1, [pc, #220]	; (8002b20 <_dtoa_r+0x610>)
 8002a44:	f7fd fba0 	bl	8000188 <__aeabi_dsub>
 8002a48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a4c:	f7fd ffc6 	bl	80009dc <__aeabi_dcmplt>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f040 80b5 	bne.w	8002bc0 <_dtoa_r+0x6b0>
 8002a56:	9b06      	ldr	r3, [sp, #24]
 8002a58:	1aeb      	subs	r3, r5, r3
 8002a5a:	429e      	cmp	r6, r3
 8002a5c:	f77f af7c 	ble.w	8002958 <_dtoa_r+0x448>
 8002a60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002a64:	2200      	movs	r2, #0
 8002a66:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <_dtoa_r+0x614>)
 8002a68:	f7fd fd46 	bl	80004f8 <__aeabi_dmul>
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a76:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <_dtoa_r+0x614>)
 8002a78:	f7fd fd3e 	bl	80004f8 <__aeabi_dmul>
 8002a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a80:	e7c3      	b.n	8002a0a <_dtoa_r+0x4fa>
 8002a82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002a86:	f7fd fd37 	bl	80004f8 <__aeabi_dmul>
 8002a8a:	9b06      	ldr	r3, [sp, #24]
 8002a8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002a90:	199d      	adds	r5, r3, r6
 8002a92:	461e      	mov	r6, r3
 8002a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a98:	f7fd ffde 	bl	8000a58 <__aeabi_d2iz>
 8002a9c:	9011      	str	r0, [sp, #68]	; 0x44
 8002a9e:	f7fd fcc1 	bl	8000424 <__aeabi_i2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002aaa:	f7fd fb6d 	bl	8000188 <__aeabi_dsub>
 8002aae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ab4:	3330      	adds	r3, #48	; 0x30
 8002ab6:	f806 3b01 	strb.w	r3, [r6], #1
 8002aba:	42ae      	cmp	r6, r5
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	d124      	bne.n	8002b0c <_dtoa_r+0x5fc>
 8002ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <_dtoa_r+0x620>)
 8002ac8:	f7fd fb60 	bl	800018c <__adddf3>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ad4:	f7fd ffa0 	bl	8000a18 <__aeabi_dcmpgt>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d171      	bne.n	8002bc0 <_dtoa_r+0x6b0>
 8002adc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4913      	ldr	r1, [pc, #76]	; (8002b30 <_dtoa_r+0x620>)
 8002ae4:	f7fd fb50 	bl	8000188 <__aeabi_dsub>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002af0:	f7fd ff74 	bl	80009dc <__aeabi_dcmplt>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	f43f af2f 	beq.w	8002958 <_dtoa_r+0x448>
 8002afa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002afe:	1e6a      	subs	r2, r5, #1
 8002b00:	2b30      	cmp	r3, #48	; 0x30
 8002b02:	d001      	beq.n	8002b08 <_dtoa_r+0x5f8>
 8002b04:	46ba      	mov	sl, r7
 8002b06:	e04a      	b.n	8002b9e <_dtoa_r+0x68e>
 8002b08:	4615      	mov	r5, r2
 8002b0a:	e7f6      	b.n	8002afa <_dtoa_r+0x5ea>
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <_dtoa_r+0x614>)
 8002b0e:	f7fd fcf3 	bl	80004f8 <__aeabi_dmul>
 8002b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b16:	e7bd      	b.n	8002a94 <_dtoa_r+0x584>
 8002b18:	08003c50 	.word	0x08003c50
 8002b1c:	08003c28 	.word	0x08003c28
 8002b20:	3ff00000 	.word	0x3ff00000
 8002b24:	40240000 	.word	0x40240000
 8002b28:	401c0000 	.word	0x401c0000
 8002b2c:	40140000 	.word	0x40140000
 8002b30:	3fe00000 	.word	0x3fe00000
 8002b34:	9d06      	ldr	r5, [sp, #24]
 8002b36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b3e:	4630      	mov	r0, r6
 8002b40:	4639      	mov	r1, r7
 8002b42:	f7fd fe03 	bl	800074c <__aeabi_ddiv>
 8002b46:	f7fd ff87 	bl	8000a58 <__aeabi_d2iz>
 8002b4a:	4681      	mov	r9, r0
 8002b4c:	f7fd fc6a 	bl	8000424 <__aeabi_i2d>
 8002b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b54:	f7fd fcd0 	bl	80004f8 <__aeabi_dmul>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	4639      	mov	r1, r7
 8002b60:	f7fd fb12 	bl	8000188 <__aeabi_dsub>
 8002b64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8002b68:	f805 6b01 	strb.w	r6, [r5], #1
 8002b6c:	9e06      	ldr	r6, [sp, #24]
 8002b6e:	4602      	mov	r2, r0
 8002b70:	1bae      	subs	r6, r5, r6
 8002b72:	45b0      	cmp	r8, r6
 8002b74:	460b      	mov	r3, r1
 8002b76:	d135      	bne.n	8002be4 <_dtoa_r+0x6d4>
 8002b78:	f7fd fb08 	bl	800018c <__adddf3>
 8002b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b80:	4606      	mov	r6, r0
 8002b82:	460f      	mov	r7, r1
 8002b84:	f7fd ff48 	bl	8000a18 <__aeabi_dcmpgt>
 8002b88:	b9c8      	cbnz	r0, 8002bbe <_dtoa_r+0x6ae>
 8002b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b8e:	4630      	mov	r0, r6
 8002b90:	4639      	mov	r1, r7
 8002b92:	f7fd ff19 	bl	80009c8 <__aeabi_dcmpeq>
 8002b96:	b110      	cbz	r0, 8002b9e <_dtoa_r+0x68e>
 8002b98:	f019 0f01 	tst.w	r9, #1
 8002b9c:	d10f      	bne.n	8002bbe <_dtoa_r+0x6ae>
 8002b9e:	4659      	mov	r1, fp
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f000 facc 	bl	800313e <_Bfree>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002baa:	702b      	strb	r3, [r5, #0]
 8002bac:	f10a 0301 	add.w	r3, sl, #1
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f43f acf3 	beq.w	80025a0 <_dtoa_r+0x90>
 8002bba:	601d      	str	r5, [r3, #0]
 8002bbc:	e4f0      	b.n	80025a0 <_dtoa_r+0x90>
 8002bbe:	4657      	mov	r7, sl
 8002bc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002bc4:	1e6b      	subs	r3, r5, #1
 8002bc6:	2a39      	cmp	r2, #57	; 0x39
 8002bc8:	d106      	bne.n	8002bd8 <_dtoa_r+0x6c8>
 8002bca:	9a06      	ldr	r2, [sp, #24]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <_dtoa_r+0x6d0>
 8002bd0:	2330      	movs	r3, #48	; 0x30
 8002bd2:	7013      	strb	r3, [r2, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	3701      	adds	r7, #1
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	3201      	adds	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e791      	b.n	8002b04 <_dtoa_r+0x5f4>
 8002be0:	461d      	mov	r5, r3
 8002be2:	e7ed      	b.n	8002bc0 <_dtoa_r+0x6b0>
 8002be4:	2200      	movs	r2, #0
 8002be6:	4b99      	ldr	r3, [pc, #612]	; (8002e4c <_dtoa_r+0x93c>)
 8002be8:	f7fd fc86 	bl	80004f8 <__aeabi_dmul>
 8002bec:	2200      	movs	r2, #0
 8002bee:	2300      	movs	r3, #0
 8002bf0:	4606      	mov	r6, r0
 8002bf2:	460f      	mov	r7, r1
 8002bf4:	f7fd fee8 	bl	80009c8 <__aeabi_dcmpeq>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d09e      	beq.n	8002b3a <_dtoa_r+0x62a>
 8002bfc:	e7cf      	b.n	8002b9e <_dtoa_r+0x68e>
 8002bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	f000 8088 	beq.w	8002d16 <_dtoa_r+0x806>
 8002c06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002c08:	2a01      	cmp	r2, #1
 8002c0a:	dc6d      	bgt.n	8002ce8 <_dtoa_r+0x7d8>
 8002c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d066      	beq.n	8002ce0 <_dtoa_r+0x7d0>
 8002c12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002c16:	464d      	mov	r5, r9
 8002c18:	9e08      	ldr	r6, [sp, #32]
 8002c1a:	9a07      	ldr	r2, [sp, #28]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	441a      	add	r2, r3
 8002c20:	4620      	mov	r0, r4
 8002c22:	4499      	add	r9, r3
 8002c24:	9207      	str	r2, [sp, #28]
 8002c26:	f000 fb2a 	bl	800327e <__i2b>
 8002c2a:	4607      	mov	r7, r0
 8002c2c:	2d00      	cmp	r5, #0
 8002c2e:	dd0b      	ble.n	8002c48 <_dtoa_r+0x738>
 8002c30:	9b07      	ldr	r3, [sp, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dd08      	ble.n	8002c48 <_dtoa_r+0x738>
 8002c36:	42ab      	cmp	r3, r5
 8002c38:	bfa8      	it	ge
 8002c3a:	462b      	movge	r3, r5
 8002c3c:	9a07      	ldr	r2, [sp, #28]
 8002c3e:	eba9 0903 	sub.w	r9, r9, r3
 8002c42:	1aed      	subs	r5, r5, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	9307      	str	r3, [sp, #28]
 8002c48:	9b08      	ldr	r3, [sp, #32]
 8002c4a:	b1eb      	cbz	r3, 8002c88 <_dtoa_r+0x778>
 8002c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d065      	beq.n	8002d1e <_dtoa_r+0x80e>
 8002c52:	b18e      	cbz	r6, 8002c78 <_dtoa_r+0x768>
 8002c54:	4639      	mov	r1, r7
 8002c56:	4632      	mov	r2, r6
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f000 fbaf 	bl	80033bc <__pow5mult>
 8002c5e:	465a      	mov	r2, fp
 8002c60:	4601      	mov	r1, r0
 8002c62:	4607      	mov	r7, r0
 8002c64:	4620      	mov	r0, r4
 8002c66:	f000 fb13 	bl	8003290 <__multiply>
 8002c6a:	4659      	mov	r1, fp
 8002c6c:	900a      	str	r0, [sp, #40]	; 0x28
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f000 fa65 	bl	800313e <_Bfree>
 8002c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c76:	469b      	mov	fp, r3
 8002c78:	9b08      	ldr	r3, [sp, #32]
 8002c7a:	1b9a      	subs	r2, r3, r6
 8002c7c:	d004      	beq.n	8002c88 <_dtoa_r+0x778>
 8002c7e:	4659      	mov	r1, fp
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 fb9b 	bl	80033bc <__pow5mult>
 8002c86:	4683      	mov	fp, r0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f000 faf7 	bl	800327e <__i2b>
 8002c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c92:	4606      	mov	r6, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 81c6 	beq.w	8003026 <_dtoa_r+0xb16>
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f000 fb8c 	bl	80033bc <__pow5mult>
 8002ca4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002ca6:	4606      	mov	r6, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	dc3e      	bgt.n	8002d2a <_dtoa_r+0x81a>
 8002cac:	9b02      	ldr	r3, [sp, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d137      	bne.n	8002d22 <_dtoa_r+0x812>
 8002cb2:	9b03      	ldr	r3, [sp, #12]
 8002cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d134      	bne.n	8002d26 <_dtoa_r+0x816>
 8002cbc:	9b03      	ldr	r3, [sp, #12]
 8002cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	0d1b      	lsrs	r3, r3, #20
 8002cc4:	051b      	lsls	r3, r3, #20
 8002cc6:	b12b      	cbz	r3, 8002cd4 <_dtoa_r+0x7c4>
 8002cc8:	9b07      	ldr	r3, [sp, #28]
 8002cca:	f109 0901 	add.w	r9, r9, #1
 8002cce:	3301      	adds	r3, #1
 8002cd0:	9307      	str	r3, [sp, #28]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	9308      	str	r3, [sp, #32]
 8002cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d128      	bne.n	8002d2e <_dtoa_r+0x81e>
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e02e      	b.n	8002d3e <_dtoa_r+0x82e>
 8002ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ce2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002ce6:	e796      	b.n	8002c16 <_dtoa_r+0x706>
 8002ce8:	9b08      	ldr	r3, [sp, #32]
 8002cea:	f108 36ff 	add.w	r6, r8, #4294967295
 8002cee:	42b3      	cmp	r3, r6
 8002cf0:	bfb7      	itett	lt
 8002cf2:	9b08      	ldrlt	r3, [sp, #32]
 8002cf4:	1b9e      	subge	r6, r3, r6
 8002cf6:	1af2      	sublt	r2, r6, r3
 8002cf8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8002cfa:	bfbf      	itttt	lt
 8002cfc:	9608      	strlt	r6, [sp, #32]
 8002cfe:	189b      	addlt	r3, r3, r2
 8002d00:	930c      	strlt	r3, [sp, #48]	; 0x30
 8002d02:	2600      	movlt	r6, #0
 8002d04:	f1b8 0f00 	cmp.w	r8, #0
 8002d08:	bfb9      	ittee	lt
 8002d0a:	eba9 0508 	sublt.w	r5, r9, r8
 8002d0e:	2300      	movlt	r3, #0
 8002d10:	464d      	movge	r5, r9
 8002d12:	4643      	movge	r3, r8
 8002d14:	e781      	b.n	8002c1a <_dtoa_r+0x70a>
 8002d16:	9e08      	ldr	r6, [sp, #32]
 8002d18:	464d      	mov	r5, r9
 8002d1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002d1c:	e786      	b.n	8002c2c <_dtoa_r+0x71c>
 8002d1e:	9a08      	ldr	r2, [sp, #32]
 8002d20:	e7ad      	b.n	8002c7e <_dtoa_r+0x76e>
 8002d22:	2300      	movs	r3, #0
 8002d24:	e7d6      	b.n	8002cd4 <_dtoa_r+0x7c4>
 8002d26:	9b02      	ldr	r3, [sp, #8]
 8002d28:	e7d4      	b.n	8002cd4 <_dtoa_r+0x7c4>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9308      	str	r3, [sp, #32]
 8002d2e:	6933      	ldr	r3, [r6, #16]
 8002d30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002d34:	6918      	ldr	r0, [r3, #16]
 8002d36:	f000 fa54 	bl	80031e2 <__hi0bits>
 8002d3a:	f1c0 0020 	rsb	r0, r0, #32
 8002d3e:	9b07      	ldr	r3, [sp, #28]
 8002d40:	4418      	add	r0, r3
 8002d42:	f010 001f 	ands.w	r0, r0, #31
 8002d46:	d047      	beq.n	8002dd8 <_dtoa_r+0x8c8>
 8002d48:	f1c0 0320 	rsb	r3, r0, #32
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	dd3b      	ble.n	8002dc8 <_dtoa_r+0x8b8>
 8002d50:	9b07      	ldr	r3, [sp, #28]
 8002d52:	f1c0 001c 	rsb	r0, r0, #28
 8002d56:	4481      	add	r9, r0
 8002d58:	4405      	add	r5, r0
 8002d5a:	4403      	add	r3, r0
 8002d5c:	9307      	str	r3, [sp, #28]
 8002d5e:	f1b9 0f00 	cmp.w	r9, #0
 8002d62:	dd05      	ble.n	8002d70 <_dtoa_r+0x860>
 8002d64:	4659      	mov	r1, fp
 8002d66:	464a      	mov	r2, r9
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f000 fb75 	bl	8003458 <__lshift>
 8002d6e:	4683      	mov	fp, r0
 8002d70:	9b07      	ldr	r3, [sp, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dd05      	ble.n	8002d82 <_dtoa_r+0x872>
 8002d76:	4631      	mov	r1, r6
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 fb6c 	bl	8003458 <__lshift>
 8002d80:	4606      	mov	r6, r0
 8002d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d84:	b353      	cbz	r3, 8002ddc <_dtoa_r+0x8cc>
 8002d86:	4631      	mov	r1, r6
 8002d88:	4658      	mov	r0, fp
 8002d8a:	f000 fbb9 	bl	8003500 <__mcmp>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	da24      	bge.n	8002ddc <_dtoa_r+0x8cc>
 8002d92:	2300      	movs	r3, #0
 8002d94:	4659      	mov	r1, fp
 8002d96:	220a      	movs	r2, #10
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 f9e7 	bl	800316c <__multadd>
 8002d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002da0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002da4:	4683      	mov	fp, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8144 	beq.w	8003034 <_dtoa_r+0xb24>
 8002dac:	2300      	movs	r3, #0
 8002dae:	4639      	mov	r1, r7
 8002db0:	220a      	movs	r2, #10
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 f9da 	bl	800316c <__multadd>
 8002db8:	9b04      	ldr	r3, [sp, #16]
 8002dba:	4607      	mov	r7, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc4d      	bgt.n	8002e5c <_dtoa_r+0x94c>
 8002dc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	dd4a      	ble.n	8002e5c <_dtoa_r+0x94c>
 8002dc6:	e011      	b.n	8002dec <_dtoa_r+0x8dc>
 8002dc8:	d0c9      	beq.n	8002d5e <_dtoa_r+0x84e>
 8002dca:	9a07      	ldr	r2, [sp, #28]
 8002dcc:	331c      	adds	r3, #28
 8002dce:	441a      	add	r2, r3
 8002dd0:	4499      	add	r9, r3
 8002dd2:	441d      	add	r5, r3
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	e7c1      	b.n	8002d5c <_dtoa_r+0x84c>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	e7f6      	b.n	8002dca <_dtoa_r+0x8ba>
 8002ddc:	f1b8 0f00 	cmp.w	r8, #0
 8002de0:	dc36      	bgt.n	8002e50 <_dtoa_r+0x940>
 8002de2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	dd33      	ble.n	8002e50 <_dtoa_r+0x940>
 8002de8:	f8cd 8010 	str.w	r8, [sp, #16]
 8002dec:	9b04      	ldr	r3, [sp, #16]
 8002dee:	b963      	cbnz	r3, 8002e0a <_dtoa_r+0x8fa>
 8002df0:	4631      	mov	r1, r6
 8002df2:	2205      	movs	r2, #5
 8002df4:	4620      	mov	r0, r4
 8002df6:	f000 f9b9 	bl	800316c <__multadd>
 8002dfa:	4601      	mov	r1, r0
 8002dfc:	4606      	mov	r6, r0
 8002dfe:	4658      	mov	r0, fp
 8002e00:	f000 fb7e 	bl	8003500 <__mcmp>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f73f add3 	bgt.w	80029b0 <_dtoa_r+0x4a0>
 8002e0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e0c:	9d06      	ldr	r5, [sp, #24]
 8002e0e:	ea6f 0a03 	mvn.w	sl, r3
 8002e12:	f04f 0900 	mov.w	r9, #0
 8002e16:	4631      	mov	r1, r6
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f000 f990 	bl	800313e <_Bfree>
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	f43f aebd 	beq.w	8002b9e <_dtoa_r+0x68e>
 8002e24:	f1b9 0f00 	cmp.w	r9, #0
 8002e28:	d005      	beq.n	8002e36 <_dtoa_r+0x926>
 8002e2a:	45b9      	cmp	r9, r7
 8002e2c:	d003      	beq.n	8002e36 <_dtoa_r+0x926>
 8002e2e:	4649      	mov	r1, r9
 8002e30:	4620      	mov	r0, r4
 8002e32:	f000 f984 	bl	800313e <_Bfree>
 8002e36:	4639      	mov	r1, r7
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f000 f980 	bl	800313e <_Bfree>
 8002e3e:	e6ae      	b.n	8002b9e <_dtoa_r+0x68e>
 8002e40:	2600      	movs	r6, #0
 8002e42:	4637      	mov	r7, r6
 8002e44:	e7e1      	b.n	8002e0a <_dtoa_r+0x8fa>
 8002e46:	46ba      	mov	sl, r7
 8002e48:	4637      	mov	r7, r6
 8002e4a:	e5b1      	b.n	80029b0 <_dtoa_r+0x4a0>
 8002e4c:	40240000 	.word	0x40240000
 8002e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e52:	f8cd 8010 	str.w	r8, [sp, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80f3 	beq.w	8003042 <_dtoa_r+0xb32>
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	dd05      	ble.n	8002e6c <_dtoa_r+0x95c>
 8002e60:	4639      	mov	r1, r7
 8002e62:	462a      	mov	r2, r5
 8002e64:	4620      	mov	r0, r4
 8002e66:	f000 faf7 	bl	8003458 <__lshift>
 8002e6a:	4607      	mov	r7, r0
 8002e6c:	9b08      	ldr	r3, [sp, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04c      	beq.n	8002f0c <_dtoa_r+0x9fc>
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4620      	mov	r0, r4
 8002e76:	f000 f92e 	bl	80030d6 <_Balloc>
 8002e7a:	4605      	mov	r5, r0
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	f107 010c 	add.w	r1, r7, #12
 8002e82:	3202      	adds	r2, #2
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	300c      	adds	r0, #12
 8002e88:	f000 f91a 	bl	80030c0 <memcpy>
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	4629      	mov	r1, r5
 8002e90:	4620      	mov	r0, r4
 8002e92:	f000 fae1 	bl	8003458 <__lshift>
 8002e96:	46b9      	mov	r9, r7
 8002e98:	4607      	mov	r7, r0
 8002e9a:	9b06      	ldr	r3, [sp, #24]
 8002e9c:	9307      	str	r3, [sp, #28]
 8002e9e:	9b02      	ldr	r3, [sp, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	9308      	str	r3, [sp, #32]
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	4658      	mov	r0, fp
 8002eaa:	f7ff faa1 	bl	80023f0 <quorem>
 8002eae:	4649      	mov	r1, r9
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002eb6:	4658      	mov	r0, fp
 8002eb8:	f000 fb22 	bl	8003500 <__mcmp>
 8002ebc:	463a      	mov	r2, r7
 8002ebe:	9002      	str	r0, [sp, #8]
 8002ec0:	4631      	mov	r1, r6
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f000 fb36 	bl	8003534 <__mdiff>
 8002ec8:	68c3      	ldr	r3, [r0, #12]
 8002eca:	4602      	mov	r2, r0
 8002ecc:	bb03      	cbnz	r3, 8002f10 <_dtoa_r+0xa00>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	9009      	str	r0, [sp, #36]	; 0x24
 8002ed2:	4658      	mov	r0, fp
 8002ed4:	f000 fb14 	bl	8003500 <__mcmp>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002edc:	4611      	mov	r1, r2
 8002ede:	4620      	mov	r0, r4
 8002ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee2:	f000 f92c 	bl	800313e <_Bfree>
 8002ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee8:	b9a3      	cbnz	r3, 8002f14 <_dtoa_r+0xa04>
 8002eea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002eec:	b992      	cbnz	r2, 8002f14 <_dtoa_r+0xa04>
 8002eee:	9a08      	ldr	r2, [sp, #32]
 8002ef0:	b982      	cbnz	r2, 8002f14 <_dtoa_r+0xa04>
 8002ef2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002ef6:	d029      	beq.n	8002f4c <_dtoa_r+0xa3c>
 8002ef8:	9b02      	ldr	r3, [sp, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	dd01      	ble.n	8002f02 <_dtoa_r+0x9f2>
 8002efe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8002f02:	9b07      	ldr	r3, [sp, #28]
 8002f04:	1c5d      	adds	r5, r3, #1
 8002f06:	f883 8000 	strb.w	r8, [r3]
 8002f0a:	e784      	b.n	8002e16 <_dtoa_r+0x906>
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	e7c2      	b.n	8002e96 <_dtoa_r+0x986>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e7e3      	b.n	8002edc <_dtoa_r+0x9cc>
 8002f14:	9a02      	ldr	r2, [sp, #8]
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	db04      	blt.n	8002f24 <_dtoa_r+0xa14>
 8002f1a:	d123      	bne.n	8002f64 <_dtoa_r+0xa54>
 8002f1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002f1e:	bb0a      	cbnz	r2, 8002f64 <_dtoa_r+0xa54>
 8002f20:	9a08      	ldr	r2, [sp, #32]
 8002f22:	b9fa      	cbnz	r2, 8002f64 <_dtoa_r+0xa54>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	ddec      	ble.n	8002f02 <_dtoa_r+0x9f2>
 8002f28:	4659      	mov	r1, fp
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f000 fa93 	bl	8003458 <__lshift>
 8002f32:	4631      	mov	r1, r6
 8002f34:	4683      	mov	fp, r0
 8002f36:	f000 fae3 	bl	8003500 <__mcmp>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	dc03      	bgt.n	8002f46 <_dtoa_r+0xa36>
 8002f3e:	d1e0      	bne.n	8002f02 <_dtoa_r+0x9f2>
 8002f40:	f018 0f01 	tst.w	r8, #1
 8002f44:	d0dd      	beq.n	8002f02 <_dtoa_r+0x9f2>
 8002f46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f4a:	d1d8      	bne.n	8002efe <_dtoa_r+0x9ee>
 8002f4c:	9b07      	ldr	r3, [sp, #28]
 8002f4e:	9a07      	ldr	r2, [sp, #28]
 8002f50:	1c5d      	adds	r5, r3, #1
 8002f52:	2339      	movs	r3, #57	; 0x39
 8002f54:	7013      	strb	r3, [r2, #0]
 8002f56:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002f5a:	1e6a      	subs	r2, r5, #1
 8002f5c:	2b39      	cmp	r3, #57	; 0x39
 8002f5e:	d04d      	beq.n	8002ffc <_dtoa_r+0xaec>
 8002f60:	3301      	adds	r3, #1
 8002f62:	e052      	b.n	800300a <_dtoa_r+0xafa>
 8002f64:	9a07      	ldr	r2, [sp, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f102 0501 	add.w	r5, r2, #1
 8002f6c:	dd06      	ble.n	8002f7c <_dtoa_r+0xa6c>
 8002f6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002f72:	d0eb      	beq.n	8002f4c <_dtoa_r+0xa3c>
 8002f74:	f108 0801 	add.w	r8, r8, #1
 8002f78:	9b07      	ldr	r3, [sp, #28]
 8002f7a:	e7c4      	b.n	8002f06 <_dtoa_r+0x9f6>
 8002f7c:	9b06      	ldr	r3, [sp, #24]
 8002f7e:	9a04      	ldr	r2, [sp, #16]
 8002f80:	1aeb      	subs	r3, r5, r3
 8002f82:	4293      	cmp	r3, r2
 8002f84:	f805 8c01 	strb.w	r8, [r5, #-1]
 8002f88:	d021      	beq.n	8002fce <_dtoa_r+0xabe>
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	220a      	movs	r2, #10
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 f8eb 	bl	800316c <__multadd>
 8002f96:	45b9      	cmp	r9, r7
 8002f98:	4683      	mov	fp, r0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f04f 020a 	mov.w	r2, #10
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	d105      	bne.n	8002fb4 <_dtoa_r+0xaa4>
 8002fa8:	f000 f8e0 	bl	800316c <__multadd>
 8002fac:	4681      	mov	r9, r0
 8002fae:	4607      	mov	r7, r0
 8002fb0:	9507      	str	r5, [sp, #28]
 8002fb2:	e778      	b.n	8002ea6 <_dtoa_r+0x996>
 8002fb4:	f000 f8da 	bl	800316c <__multadd>
 8002fb8:	4639      	mov	r1, r7
 8002fba:	4681      	mov	r9, r0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	220a      	movs	r2, #10
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f000 f8d3 	bl	800316c <__multadd>
 8002fc6:	4607      	mov	r7, r0
 8002fc8:	e7f2      	b.n	8002fb0 <_dtoa_r+0xaa0>
 8002fca:	f04f 0900 	mov.w	r9, #0
 8002fce:	4659      	mov	r1, fp
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f000 fa40 	bl	8003458 <__lshift>
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4683      	mov	fp, r0
 8002fdc:	f000 fa90 	bl	8003500 <__mcmp>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	dcb8      	bgt.n	8002f56 <_dtoa_r+0xa46>
 8002fe4:	d102      	bne.n	8002fec <_dtoa_r+0xadc>
 8002fe6:	f018 0f01 	tst.w	r8, #1
 8002fea:	d1b4      	bne.n	8002f56 <_dtoa_r+0xa46>
 8002fec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002ff0:	1e6a      	subs	r2, r5, #1
 8002ff2:	2b30      	cmp	r3, #48	; 0x30
 8002ff4:	f47f af0f 	bne.w	8002e16 <_dtoa_r+0x906>
 8002ff8:	4615      	mov	r5, r2
 8002ffa:	e7f7      	b.n	8002fec <_dtoa_r+0xadc>
 8002ffc:	9b06      	ldr	r3, [sp, #24]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d105      	bne.n	800300e <_dtoa_r+0xafe>
 8003002:	2331      	movs	r3, #49	; 0x31
 8003004:	9a06      	ldr	r2, [sp, #24]
 8003006:	f10a 0a01 	add.w	sl, sl, #1
 800300a:	7013      	strb	r3, [r2, #0]
 800300c:	e703      	b.n	8002e16 <_dtoa_r+0x906>
 800300e:	4615      	mov	r5, r2
 8003010:	e7a1      	b.n	8002f56 <_dtoa_r+0xa46>
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <_dtoa_r+0xb60>)
 8003014:	f7ff bae1 	b.w	80025da <_dtoa_r+0xca>
 8003018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f aabb 	bne.w	8002596 <_dtoa_r+0x86>
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <_dtoa_r+0xb64>)
 8003022:	f7ff bada 	b.w	80025da <_dtoa_r+0xca>
 8003026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003028:	2b01      	cmp	r3, #1
 800302a:	f77f ae3f 	ble.w	8002cac <_dtoa_r+0x79c>
 800302e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003030:	9308      	str	r3, [sp, #32]
 8003032:	e653      	b.n	8002cdc <_dtoa_r+0x7cc>
 8003034:	9b04      	ldr	r3, [sp, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	dc03      	bgt.n	8003042 <_dtoa_r+0xb32>
 800303a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800303c:	2b02      	cmp	r3, #2
 800303e:	f73f aed5 	bgt.w	8002dec <_dtoa_r+0x8dc>
 8003042:	9d06      	ldr	r5, [sp, #24]
 8003044:	4631      	mov	r1, r6
 8003046:	4658      	mov	r0, fp
 8003048:	f7ff f9d2 	bl	80023f0 <quorem>
 800304c:	9b06      	ldr	r3, [sp, #24]
 800304e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003052:	f805 8b01 	strb.w	r8, [r5], #1
 8003056:	9a04      	ldr	r2, [sp, #16]
 8003058:	1aeb      	subs	r3, r5, r3
 800305a:	429a      	cmp	r2, r3
 800305c:	ddb5      	ble.n	8002fca <_dtoa_r+0xaba>
 800305e:	4659      	mov	r1, fp
 8003060:	2300      	movs	r3, #0
 8003062:	220a      	movs	r2, #10
 8003064:	4620      	mov	r0, r4
 8003066:	f000 f881 	bl	800316c <__multadd>
 800306a:	4683      	mov	fp, r0
 800306c:	e7ea      	b.n	8003044 <_dtoa_r+0xb34>
 800306e:	bf00      	nop
 8003070:	08003bf5 	.word	0x08003bf5
 8003074:	08003c19 	.word	0x08003c19

08003078 <_localeconv_r>:
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <_localeconv_r+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a18      	ldr	r0, [r3, #32]
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <_localeconv_r+0x18>)
 8003080:	2800      	cmp	r0, #0
 8003082:	bf08      	it	eq
 8003084:	4618      	moveq	r0, r3
 8003086:	30f0      	adds	r0, #240	; 0xf0
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000004 	.word	0x20000004
 8003090:	20000068 	.word	0x20000068

08003094 <malloc>:
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <malloc+0xc>)
 8003096:	4601      	mov	r1, r0
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	f000 bb53 	b.w	8003744 <_malloc_r>
 800309e:	bf00      	nop
 80030a0:	20000004 	.word	0x20000004

080030a4 <memchr>:
 80030a4:	b510      	push	{r4, lr}
 80030a6:	b2c9      	uxtb	r1, r1
 80030a8:	4402      	add	r2, r0
 80030aa:	4290      	cmp	r0, r2
 80030ac:	4603      	mov	r3, r0
 80030ae:	d101      	bne.n	80030b4 <memchr+0x10>
 80030b0:	2300      	movs	r3, #0
 80030b2:	e003      	b.n	80030bc <memchr+0x18>
 80030b4:	781c      	ldrb	r4, [r3, #0]
 80030b6:	3001      	adds	r0, #1
 80030b8:	428c      	cmp	r4, r1
 80030ba:	d1f6      	bne.n	80030aa <memchr+0x6>
 80030bc:	4618      	mov	r0, r3
 80030be:	bd10      	pop	{r4, pc}

080030c0 <memcpy>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	1e43      	subs	r3, r0, #1
 80030c4:	440a      	add	r2, r1
 80030c6:	4291      	cmp	r1, r2
 80030c8:	d100      	bne.n	80030cc <memcpy+0xc>
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030d4:	e7f7      	b.n	80030c6 <memcpy+0x6>

080030d6 <_Balloc>:
 80030d6:	b570      	push	{r4, r5, r6, lr}
 80030d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80030da:	4604      	mov	r4, r0
 80030dc:	460e      	mov	r6, r1
 80030de:	b93d      	cbnz	r5, 80030f0 <_Balloc+0x1a>
 80030e0:	2010      	movs	r0, #16
 80030e2:	f7ff ffd7 	bl	8003094 <malloc>
 80030e6:	6260      	str	r0, [r4, #36]	; 0x24
 80030e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80030ec:	6005      	str	r5, [r0, #0]
 80030ee:	60c5      	str	r5, [r0, #12]
 80030f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80030f2:	68eb      	ldr	r3, [r5, #12]
 80030f4:	b183      	cbz	r3, 8003118 <_Balloc+0x42>
 80030f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80030fe:	b9b8      	cbnz	r0, 8003130 <_Balloc+0x5a>
 8003100:	2101      	movs	r1, #1
 8003102:	fa01 f506 	lsl.w	r5, r1, r6
 8003106:	1d6a      	adds	r2, r5, #5
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4620      	mov	r0, r4
 800310c:	f000 fabf 	bl	800368e <_calloc_r>
 8003110:	b160      	cbz	r0, 800312c <_Balloc+0x56>
 8003112:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003116:	e00e      	b.n	8003136 <_Balloc+0x60>
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	2104      	movs	r1, #4
 800311c:	4620      	mov	r0, r4
 800311e:	f000 fab6 	bl	800368e <_calloc_r>
 8003122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003124:	60e8      	str	r0, [r5, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e4      	bne.n	80030f6 <_Balloc+0x20>
 800312c:	2000      	movs	r0, #0
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003136:	2300      	movs	r3, #0
 8003138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800313c:	e7f7      	b.n	800312e <_Balloc+0x58>

0800313e <_Bfree>:
 800313e:	b570      	push	{r4, r5, r6, lr}
 8003140:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003142:	4606      	mov	r6, r0
 8003144:	460d      	mov	r5, r1
 8003146:	b93c      	cbnz	r4, 8003158 <_Bfree+0x1a>
 8003148:	2010      	movs	r0, #16
 800314a:	f7ff ffa3 	bl	8003094 <malloc>
 800314e:	6270      	str	r0, [r6, #36]	; 0x24
 8003150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003154:	6004      	str	r4, [r0, #0]
 8003156:	60c4      	str	r4, [r0, #12]
 8003158:	b13d      	cbz	r5, 800316a <_Bfree+0x2c>
 800315a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800315c:	686a      	ldr	r2, [r5, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003164:	6029      	str	r1, [r5, #0]
 8003166:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800316a:	bd70      	pop	{r4, r5, r6, pc}

0800316c <__multadd>:
 800316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003170:	461f      	mov	r7, r3
 8003172:	4606      	mov	r6, r0
 8003174:	460c      	mov	r4, r1
 8003176:	2300      	movs	r3, #0
 8003178:	690d      	ldr	r5, [r1, #16]
 800317a:	f101 0c14 	add.w	ip, r1, #20
 800317e:	f8dc 0000 	ldr.w	r0, [ip]
 8003182:	3301      	adds	r3, #1
 8003184:	b281      	uxth	r1, r0
 8003186:	fb02 7101 	mla	r1, r2, r1, r7
 800318a:	0c00      	lsrs	r0, r0, #16
 800318c:	0c0f      	lsrs	r7, r1, #16
 800318e:	fb02 7000 	mla	r0, r2, r0, r7
 8003192:	b289      	uxth	r1, r1
 8003194:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003198:	429d      	cmp	r5, r3
 800319a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800319e:	f84c 1b04 	str.w	r1, [ip], #4
 80031a2:	dcec      	bgt.n	800317e <__multadd+0x12>
 80031a4:	b1d7      	cbz	r7, 80031dc <__multadd+0x70>
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	42ab      	cmp	r3, r5
 80031aa:	dc12      	bgt.n	80031d2 <__multadd+0x66>
 80031ac:	6861      	ldr	r1, [r4, #4]
 80031ae:	4630      	mov	r0, r6
 80031b0:	3101      	adds	r1, #1
 80031b2:	f7ff ff90 	bl	80030d6 <_Balloc>
 80031b6:	4680      	mov	r8, r0
 80031b8:	6922      	ldr	r2, [r4, #16]
 80031ba:	f104 010c 	add.w	r1, r4, #12
 80031be:	3202      	adds	r2, #2
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	300c      	adds	r0, #12
 80031c4:	f7ff ff7c 	bl	80030c0 <memcpy>
 80031c8:	4621      	mov	r1, r4
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7ff ffb7 	bl	800313e <_Bfree>
 80031d0:	4644      	mov	r4, r8
 80031d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80031d6:	3501      	adds	r5, #1
 80031d8:	615f      	str	r7, [r3, #20]
 80031da:	6125      	str	r5, [r4, #16]
 80031dc:	4620      	mov	r0, r4
 80031de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031e2 <__hi0bits>:
 80031e2:	0c02      	lsrs	r2, r0, #16
 80031e4:	0412      	lsls	r2, r2, #16
 80031e6:	4603      	mov	r3, r0
 80031e8:	b9b2      	cbnz	r2, 8003218 <__hi0bits+0x36>
 80031ea:	0403      	lsls	r3, r0, #16
 80031ec:	2010      	movs	r0, #16
 80031ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80031f2:	bf04      	itt	eq
 80031f4:	021b      	lsleq	r3, r3, #8
 80031f6:	3008      	addeq	r0, #8
 80031f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80031fc:	bf04      	itt	eq
 80031fe:	011b      	lsleq	r3, r3, #4
 8003200:	3004      	addeq	r0, #4
 8003202:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003206:	bf04      	itt	eq
 8003208:	009b      	lsleq	r3, r3, #2
 800320a:	3002      	addeq	r0, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	db06      	blt.n	800321e <__hi0bits+0x3c>
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	d503      	bpl.n	800321c <__hi0bits+0x3a>
 8003214:	3001      	adds	r0, #1
 8003216:	4770      	bx	lr
 8003218:	2000      	movs	r0, #0
 800321a:	e7e8      	b.n	80031ee <__hi0bits+0xc>
 800321c:	2020      	movs	r0, #32
 800321e:	4770      	bx	lr

08003220 <__lo0bits>:
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	4601      	mov	r1, r0
 8003224:	f013 0207 	ands.w	r2, r3, #7
 8003228:	d00b      	beq.n	8003242 <__lo0bits+0x22>
 800322a:	07da      	lsls	r2, r3, #31
 800322c:	d423      	bmi.n	8003276 <__lo0bits+0x56>
 800322e:	0798      	lsls	r0, r3, #30
 8003230:	bf49      	itett	mi
 8003232:	085b      	lsrmi	r3, r3, #1
 8003234:	089b      	lsrpl	r3, r3, #2
 8003236:	2001      	movmi	r0, #1
 8003238:	600b      	strmi	r3, [r1, #0]
 800323a:	bf5c      	itt	pl
 800323c:	600b      	strpl	r3, [r1, #0]
 800323e:	2002      	movpl	r0, #2
 8003240:	4770      	bx	lr
 8003242:	b298      	uxth	r0, r3
 8003244:	b9a8      	cbnz	r0, 8003272 <__lo0bits+0x52>
 8003246:	2010      	movs	r0, #16
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800324e:	bf04      	itt	eq
 8003250:	0a1b      	lsreq	r3, r3, #8
 8003252:	3008      	addeq	r0, #8
 8003254:	071a      	lsls	r2, r3, #28
 8003256:	bf04      	itt	eq
 8003258:	091b      	lsreq	r3, r3, #4
 800325a:	3004      	addeq	r0, #4
 800325c:	079a      	lsls	r2, r3, #30
 800325e:	bf04      	itt	eq
 8003260:	089b      	lsreq	r3, r3, #2
 8003262:	3002      	addeq	r0, #2
 8003264:	07da      	lsls	r2, r3, #31
 8003266:	d402      	bmi.n	800326e <__lo0bits+0x4e>
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	d006      	beq.n	800327a <__lo0bits+0x5a>
 800326c:	3001      	adds	r0, #1
 800326e:	600b      	str	r3, [r1, #0]
 8003270:	4770      	bx	lr
 8003272:	4610      	mov	r0, r2
 8003274:	e7e9      	b.n	800324a <__lo0bits+0x2a>
 8003276:	2000      	movs	r0, #0
 8003278:	4770      	bx	lr
 800327a:	2020      	movs	r0, #32
 800327c:	4770      	bx	lr

0800327e <__i2b>:
 800327e:	b510      	push	{r4, lr}
 8003280:	460c      	mov	r4, r1
 8003282:	2101      	movs	r1, #1
 8003284:	f7ff ff27 	bl	80030d6 <_Balloc>
 8003288:	2201      	movs	r2, #1
 800328a:	6144      	str	r4, [r0, #20]
 800328c:	6102      	str	r2, [r0, #16]
 800328e:	bd10      	pop	{r4, pc}

08003290 <__multiply>:
 8003290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	4614      	mov	r4, r2
 8003296:	690a      	ldr	r2, [r1, #16]
 8003298:	6923      	ldr	r3, [r4, #16]
 800329a:	4688      	mov	r8, r1
 800329c:	429a      	cmp	r2, r3
 800329e:	bfbe      	ittt	lt
 80032a0:	460b      	movlt	r3, r1
 80032a2:	46a0      	movlt	r8, r4
 80032a4:	461c      	movlt	r4, r3
 80032a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80032aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80032ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80032b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80032b6:	eb07 0609 	add.w	r6, r7, r9
 80032ba:	42b3      	cmp	r3, r6
 80032bc:	bfb8      	it	lt
 80032be:	3101      	addlt	r1, #1
 80032c0:	f7ff ff09 	bl	80030d6 <_Balloc>
 80032c4:	f100 0514 	add.w	r5, r0, #20
 80032c8:	462b      	mov	r3, r5
 80032ca:	2200      	movs	r2, #0
 80032cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80032d0:	4573      	cmp	r3, lr
 80032d2:	d316      	bcc.n	8003302 <__multiply+0x72>
 80032d4:	f104 0214 	add.w	r2, r4, #20
 80032d8:	f108 0114 	add.w	r1, r8, #20
 80032dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80032e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	9b00      	ldr	r3, [sp, #0]
 80032e8:	9201      	str	r2, [sp, #4]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d80c      	bhi.n	8003308 <__multiply+0x78>
 80032ee:	2e00      	cmp	r6, #0
 80032f0:	dd03      	ble.n	80032fa <__multiply+0x6a>
 80032f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d05d      	beq.n	80033b6 <__multiply+0x126>
 80032fa:	6106      	str	r6, [r0, #16]
 80032fc:	b003      	add	sp, #12
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	f843 2b04 	str.w	r2, [r3], #4
 8003306:	e7e3      	b.n	80032d0 <__multiply+0x40>
 8003308:	f8b2 b000 	ldrh.w	fp, [r2]
 800330c:	f1bb 0f00 	cmp.w	fp, #0
 8003310:	d023      	beq.n	800335a <__multiply+0xca>
 8003312:	4689      	mov	r9, r1
 8003314:	46ac      	mov	ip, r5
 8003316:	f04f 0800 	mov.w	r8, #0
 800331a:	f859 4b04 	ldr.w	r4, [r9], #4
 800331e:	f8dc a000 	ldr.w	sl, [ip]
 8003322:	b2a3      	uxth	r3, r4
 8003324:	fa1f fa8a 	uxth.w	sl, sl
 8003328:	fb0b a303 	mla	r3, fp, r3, sl
 800332c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003330:	f8dc 4000 	ldr.w	r4, [ip]
 8003334:	4443      	add	r3, r8
 8003336:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800333a:	fb0b 840a 	mla	r4, fp, sl, r8
 800333e:	46e2      	mov	sl, ip
 8003340:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003344:	b29b      	uxth	r3, r3
 8003346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800334a:	454f      	cmp	r7, r9
 800334c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003350:	f84a 3b04 	str.w	r3, [sl], #4
 8003354:	d82b      	bhi.n	80033ae <__multiply+0x11e>
 8003356:	f8cc 8004 	str.w	r8, [ip, #4]
 800335a:	9b01      	ldr	r3, [sp, #4]
 800335c:	3204      	adds	r2, #4
 800335e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003362:	f1ba 0f00 	cmp.w	sl, #0
 8003366:	d020      	beq.n	80033aa <__multiply+0x11a>
 8003368:	4689      	mov	r9, r1
 800336a:	46a8      	mov	r8, r5
 800336c:	f04f 0b00 	mov.w	fp, #0
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	f8b9 c000 	ldrh.w	ip, [r9]
 8003376:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800337a:	b29b      	uxth	r3, r3
 800337c:	fb0a 440c 	mla	r4, sl, ip, r4
 8003380:	46c4      	mov	ip, r8
 8003382:	445c      	add	r4, fp
 8003384:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003388:	f84c 3b04 	str.w	r3, [ip], #4
 800338c:	f859 3b04 	ldr.w	r3, [r9], #4
 8003390:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	fb0a b303 	mla	r3, sl, r3, fp
 800339a:	454f      	cmp	r7, r9
 800339c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80033a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80033a4:	d805      	bhi.n	80033b2 <__multiply+0x122>
 80033a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80033aa:	3504      	adds	r5, #4
 80033ac:	e79b      	b.n	80032e6 <__multiply+0x56>
 80033ae:	46d4      	mov	ip, sl
 80033b0:	e7b3      	b.n	800331a <__multiply+0x8a>
 80033b2:	46e0      	mov	r8, ip
 80033b4:	e7dd      	b.n	8003372 <__multiply+0xe2>
 80033b6:	3e01      	subs	r6, #1
 80033b8:	e799      	b.n	80032ee <__multiply+0x5e>
	...

080033bc <__pow5mult>:
 80033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4615      	mov	r5, r2
 80033c2:	f012 0203 	ands.w	r2, r2, #3
 80033c6:	4606      	mov	r6, r0
 80033c8:	460f      	mov	r7, r1
 80033ca:	d007      	beq.n	80033dc <__pow5mult+0x20>
 80033cc:	4c21      	ldr	r4, [pc, #132]	; (8003454 <__pow5mult+0x98>)
 80033ce:	3a01      	subs	r2, #1
 80033d0:	2300      	movs	r3, #0
 80033d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80033d6:	f7ff fec9 	bl	800316c <__multadd>
 80033da:	4607      	mov	r7, r0
 80033dc:	10ad      	asrs	r5, r5, #2
 80033de:	d035      	beq.n	800344c <__pow5mult+0x90>
 80033e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80033e2:	b93c      	cbnz	r4, 80033f4 <__pow5mult+0x38>
 80033e4:	2010      	movs	r0, #16
 80033e6:	f7ff fe55 	bl	8003094 <malloc>
 80033ea:	6270      	str	r0, [r6, #36]	; 0x24
 80033ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80033f0:	6004      	str	r4, [r0, #0]
 80033f2:	60c4      	str	r4, [r0, #12]
 80033f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80033f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80033fc:	b94c      	cbnz	r4, 8003412 <__pow5mult+0x56>
 80033fe:	f240 2171 	movw	r1, #625	; 0x271
 8003402:	4630      	mov	r0, r6
 8003404:	f7ff ff3b 	bl	800327e <__i2b>
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003410:	6003      	str	r3, [r0, #0]
 8003412:	f04f 0800 	mov.w	r8, #0
 8003416:	07eb      	lsls	r3, r5, #31
 8003418:	d50a      	bpl.n	8003430 <__pow5mult+0x74>
 800341a:	4639      	mov	r1, r7
 800341c:	4622      	mov	r2, r4
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff ff36 	bl	8003290 <__multiply>
 8003424:	4681      	mov	r9, r0
 8003426:	4639      	mov	r1, r7
 8003428:	4630      	mov	r0, r6
 800342a:	f7ff fe88 	bl	800313e <_Bfree>
 800342e:	464f      	mov	r7, r9
 8003430:	106d      	asrs	r5, r5, #1
 8003432:	d00b      	beq.n	800344c <__pow5mult+0x90>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	b938      	cbnz	r0, 8003448 <__pow5mult+0x8c>
 8003438:	4622      	mov	r2, r4
 800343a:	4621      	mov	r1, r4
 800343c:	4630      	mov	r0, r6
 800343e:	f7ff ff27 	bl	8003290 <__multiply>
 8003442:	6020      	str	r0, [r4, #0]
 8003444:	f8c0 8000 	str.w	r8, [r0]
 8003448:	4604      	mov	r4, r0
 800344a:	e7e4      	b.n	8003416 <__pow5mult+0x5a>
 800344c:	4638      	mov	r0, r7
 800344e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003452:	bf00      	nop
 8003454:	08003d18 	.word	0x08003d18

08003458 <__lshift>:
 8003458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800345c:	460c      	mov	r4, r1
 800345e:	4607      	mov	r7, r0
 8003460:	4616      	mov	r6, r2
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003468:	eb0a 0903 	add.w	r9, sl, r3
 800346c:	6849      	ldr	r1, [r1, #4]
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	f109 0501 	add.w	r5, r9, #1
 8003474:	42ab      	cmp	r3, r5
 8003476:	db32      	blt.n	80034de <__lshift+0x86>
 8003478:	4638      	mov	r0, r7
 800347a:	f7ff fe2c 	bl	80030d6 <_Balloc>
 800347e:	2300      	movs	r3, #0
 8003480:	4680      	mov	r8, r0
 8003482:	461a      	mov	r2, r3
 8003484:	f100 0114 	add.w	r1, r0, #20
 8003488:	4553      	cmp	r3, sl
 800348a:	db2b      	blt.n	80034e4 <__lshift+0x8c>
 800348c:	6920      	ldr	r0, [r4, #16]
 800348e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003492:	f104 0314 	add.w	r3, r4, #20
 8003496:	f016 021f 	ands.w	r2, r6, #31
 800349a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800349e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80034a2:	d025      	beq.n	80034f0 <__lshift+0x98>
 80034a4:	2000      	movs	r0, #0
 80034a6:	f1c2 0e20 	rsb	lr, r2, #32
 80034aa:	468a      	mov	sl, r1
 80034ac:	681e      	ldr	r6, [r3, #0]
 80034ae:	4096      	lsls	r6, r2
 80034b0:	4330      	orrs	r0, r6
 80034b2:	f84a 0b04 	str.w	r0, [sl], #4
 80034b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80034ba:	459c      	cmp	ip, r3
 80034bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80034c0:	d814      	bhi.n	80034ec <__lshift+0x94>
 80034c2:	6048      	str	r0, [r1, #4]
 80034c4:	b108      	cbz	r0, 80034ca <__lshift+0x72>
 80034c6:	f109 0502 	add.w	r5, r9, #2
 80034ca:	3d01      	subs	r5, #1
 80034cc:	4638      	mov	r0, r7
 80034ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80034d2:	4621      	mov	r1, r4
 80034d4:	f7ff fe33 	bl	800313e <_Bfree>
 80034d8:	4640      	mov	r0, r8
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	3101      	adds	r1, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	e7c7      	b.n	8003474 <__lshift+0x1c>
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80034e8:	3301      	adds	r3, #1
 80034ea:	e7cd      	b.n	8003488 <__lshift+0x30>
 80034ec:	4651      	mov	r1, sl
 80034ee:	e7dc      	b.n	80034aa <__lshift+0x52>
 80034f0:	3904      	subs	r1, #4
 80034f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80034f6:	459c      	cmp	ip, r3
 80034f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80034fc:	d8f9      	bhi.n	80034f2 <__lshift+0x9a>
 80034fe:	e7e4      	b.n	80034ca <__lshift+0x72>

08003500 <__mcmp>:
 8003500:	6903      	ldr	r3, [r0, #16]
 8003502:	690a      	ldr	r2, [r1, #16]
 8003504:	b530      	push	{r4, r5, lr}
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	d10c      	bne.n	8003524 <__mcmp+0x24>
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	3014      	adds	r0, #20
 800350e:	3114      	adds	r1, #20
 8003510:	1884      	adds	r4, r0, r2
 8003512:	4411      	add	r1, r2
 8003514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800351c:	4295      	cmp	r5, r2
 800351e:	d003      	beq.n	8003528 <__mcmp+0x28>
 8003520:	d305      	bcc.n	800352e <__mcmp+0x2e>
 8003522:	2301      	movs	r3, #1
 8003524:	4618      	mov	r0, r3
 8003526:	bd30      	pop	{r4, r5, pc}
 8003528:	42a0      	cmp	r0, r4
 800352a:	d3f3      	bcc.n	8003514 <__mcmp+0x14>
 800352c:	e7fa      	b.n	8003524 <__mcmp+0x24>
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e7f7      	b.n	8003524 <__mcmp+0x24>

08003534 <__mdiff>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	460d      	mov	r5, r1
 800353a:	4607      	mov	r7, r0
 800353c:	4611      	mov	r1, r2
 800353e:	4628      	mov	r0, r5
 8003540:	4614      	mov	r4, r2
 8003542:	f7ff ffdd 	bl	8003500 <__mcmp>
 8003546:	1e06      	subs	r6, r0, #0
 8003548:	d108      	bne.n	800355c <__mdiff+0x28>
 800354a:	4631      	mov	r1, r6
 800354c:	4638      	mov	r0, r7
 800354e:	f7ff fdc2 	bl	80030d6 <_Balloc>
 8003552:	2301      	movs	r3, #1
 8003554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355c:	bfa4      	itt	ge
 800355e:	4623      	movge	r3, r4
 8003560:	462c      	movge	r4, r5
 8003562:	4638      	mov	r0, r7
 8003564:	6861      	ldr	r1, [r4, #4]
 8003566:	bfa6      	itte	ge
 8003568:	461d      	movge	r5, r3
 800356a:	2600      	movge	r6, #0
 800356c:	2601      	movlt	r6, #1
 800356e:	f7ff fdb2 	bl	80030d6 <_Balloc>
 8003572:	f04f 0e00 	mov.w	lr, #0
 8003576:	60c6      	str	r6, [r0, #12]
 8003578:	692b      	ldr	r3, [r5, #16]
 800357a:	6926      	ldr	r6, [r4, #16]
 800357c:	f104 0214 	add.w	r2, r4, #20
 8003580:	f105 0914 	add.w	r9, r5, #20
 8003584:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003588:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800358c:	f100 0114 	add.w	r1, r0, #20
 8003590:	f852 ab04 	ldr.w	sl, [r2], #4
 8003594:	f859 5b04 	ldr.w	r5, [r9], #4
 8003598:	fa1f f38a 	uxth.w	r3, sl
 800359c:	4473      	add	r3, lr
 800359e:	b2ac      	uxth	r4, r5
 80035a0:	1b1b      	subs	r3, r3, r4
 80035a2:	0c2c      	lsrs	r4, r5, #16
 80035a4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80035a8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80035b2:	45c8      	cmp	r8, r9
 80035b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80035b8:	4694      	mov	ip, r2
 80035ba:	f841 4b04 	str.w	r4, [r1], #4
 80035be:	d8e7      	bhi.n	8003590 <__mdiff+0x5c>
 80035c0:	45bc      	cmp	ip, r7
 80035c2:	d304      	bcc.n	80035ce <__mdiff+0x9a>
 80035c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80035c8:	b183      	cbz	r3, 80035ec <__mdiff+0xb8>
 80035ca:	6106      	str	r6, [r0, #16]
 80035cc:	e7c4      	b.n	8003558 <__mdiff+0x24>
 80035ce:	f85c 4b04 	ldr.w	r4, [ip], #4
 80035d2:	b2a2      	uxth	r2, r4
 80035d4:	4472      	add	r2, lr
 80035d6:	1413      	asrs	r3, r2, #16
 80035d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80035dc:	b292      	uxth	r2, r2
 80035de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80035e2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80035e6:	f841 2b04 	str.w	r2, [r1], #4
 80035ea:	e7e9      	b.n	80035c0 <__mdiff+0x8c>
 80035ec:	3e01      	subs	r6, #1
 80035ee:	e7e9      	b.n	80035c4 <__mdiff+0x90>

080035f0 <__d2b>:
 80035f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80035f4:	461c      	mov	r4, r3
 80035f6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80035fa:	2101      	movs	r1, #1
 80035fc:	4690      	mov	r8, r2
 80035fe:	f7ff fd6a 	bl	80030d6 <_Balloc>
 8003602:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003606:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800360a:	4607      	mov	r7, r0
 800360c:	bb34      	cbnz	r4, 800365c <__d2b+0x6c>
 800360e:	9201      	str	r2, [sp, #4]
 8003610:	f1b8 0200 	subs.w	r2, r8, #0
 8003614:	d027      	beq.n	8003666 <__d2b+0x76>
 8003616:	a802      	add	r0, sp, #8
 8003618:	f840 2d08 	str.w	r2, [r0, #-8]!
 800361c:	f7ff fe00 	bl	8003220 <__lo0bits>
 8003620:	9900      	ldr	r1, [sp, #0]
 8003622:	b1f0      	cbz	r0, 8003662 <__d2b+0x72>
 8003624:	9a01      	ldr	r2, [sp, #4]
 8003626:	f1c0 0320 	rsb	r3, r0, #32
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	430b      	orrs	r3, r1
 8003630:	40c2      	lsrs	r2, r0
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	9201      	str	r2, [sp, #4]
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2102      	movne	r1, #2
 800363e:	2101      	moveq	r1, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	6139      	str	r1, [r7, #16]
 8003644:	b1c4      	cbz	r4, 8003678 <__d2b+0x88>
 8003646:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800364a:	4404      	add	r4, r0
 800364c:	6034      	str	r4, [r6, #0]
 800364e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003652:	6028      	str	r0, [r5, #0]
 8003654:	4638      	mov	r0, r7
 8003656:	b002      	add	sp, #8
 8003658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003660:	e7d5      	b.n	800360e <__d2b+0x1e>
 8003662:	6179      	str	r1, [r7, #20]
 8003664:	e7e7      	b.n	8003636 <__d2b+0x46>
 8003666:	a801      	add	r0, sp, #4
 8003668:	f7ff fdda 	bl	8003220 <__lo0bits>
 800366c:	2101      	movs	r1, #1
 800366e:	9b01      	ldr	r3, [sp, #4]
 8003670:	6139      	str	r1, [r7, #16]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	3020      	adds	r0, #32
 8003676:	e7e5      	b.n	8003644 <__d2b+0x54>
 8003678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800367c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003680:	6030      	str	r0, [r6, #0]
 8003682:	6918      	ldr	r0, [r3, #16]
 8003684:	f7ff fdad 	bl	80031e2 <__hi0bits>
 8003688:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800368c:	e7e1      	b.n	8003652 <__d2b+0x62>

0800368e <_calloc_r>:
 800368e:	b538      	push	{r3, r4, r5, lr}
 8003690:	fb02 f401 	mul.w	r4, r2, r1
 8003694:	4621      	mov	r1, r4
 8003696:	f000 f855 	bl	8003744 <_malloc_r>
 800369a:	4605      	mov	r5, r0
 800369c:	b118      	cbz	r0, 80036a6 <_calloc_r+0x18>
 800369e:	4622      	mov	r2, r4
 80036a0:	2100      	movs	r1, #0
 80036a2:	f7fe fa2d 	bl	8001b00 <memset>
 80036a6:	4628      	mov	r0, r5
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080036ac <_free_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4605      	mov	r5, r0
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d043      	beq.n	800373c <_free_r+0x90>
 80036b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b8:	1f0c      	subs	r4, r1, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfb8      	it	lt
 80036be:	18e4      	addlt	r4, r4, r3
 80036c0:	f000 fa27 	bl	8003b12 <__malloc_lock>
 80036c4:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <_free_r+0x94>)
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	4610      	mov	r0, r2
 80036ca:	b933      	cbnz	r3, 80036da <_free_r+0x2e>
 80036cc:	6063      	str	r3, [r4, #4]
 80036ce:	6014      	str	r4, [r2, #0]
 80036d0:	4628      	mov	r0, r5
 80036d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036d6:	f000 ba1d 	b.w	8003b14 <__malloc_unlock>
 80036da:	42a3      	cmp	r3, r4
 80036dc:	d90b      	bls.n	80036f6 <_free_r+0x4a>
 80036de:	6821      	ldr	r1, [r4, #0]
 80036e0:	1862      	adds	r2, r4, r1
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bf01      	itttt	eq
 80036e6:	681a      	ldreq	r2, [r3, #0]
 80036e8:	685b      	ldreq	r3, [r3, #4]
 80036ea:	1852      	addeq	r2, r2, r1
 80036ec:	6022      	streq	r2, [r4, #0]
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	6004      	str	r4, [r0, #0]
 80036f2:	e7ed      	b.n	80036d0 <_free_r+0x24>
 80036f4:	4613      	mov	r3, r2
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	b10a      	cbz	r2, 80036fe <_free_r+0x52>
 80036fa:	42a2      	cmp	r2, r4
 80036fc:	d9fa      	bls.n	80036f4 <_free_r+0x48>
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	1858      	adds	r0, r3, r1
 8003702:	42a0      	cmp	r0, r4
 8003704:	d10b      	bne.n	800371e <_free_r+0x72>
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	4401      	add	r1, r0
 800370a:	1858      	adds	r0, r3, r1
 800370c:	4282      	cmp	r2, r0
 800370e:	6019      	str	r1, [r3, #0]
 8003710:	d1de      	bne.n	80036d0 <_free_r+0x24>
 8003712:	6810      	ldr	r0, [r2, #0]
 8003714:	6852      	ldr	r2, [r2, #4]
 8003716:	4401      	add	r1, r0
 8003718:	6019      	str	r1, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	e7d8      	b.n	80036d0 <_free_r+0x24>
 800371e:	d902      	bls.n	8003726 <_free_r+0x7a>
 8003720:	230c      	movs	r3, #12
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	e7d4      	b.n	80036d0 <_free_r+0x24>
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	1821      	adds	r1, r4, r0
 800372a:	428a      	cmp	r2, r1
 800372c:	bf01      	itttt	eq
 800372e:	6811      	ldreq	r1, [r2, #0]
 8003730:	6852      	ldreq	r2, [r2, #4]
 8003732:	1809      	addeq	r1, r1, r0
 8003734:	6021      	streq	r1, [r4, #0]
 8003736:	6062      	str	r2, [r4, #4]
 8003738:	605c      	str	r4, [r3, #4]
 800373a:	e7c9      	b.n	80036d0 <_free_r+0x24>
 800373c:	bd38      	pop	{r3, r4, r5, pc}
 800373e:	bf00      	nop
 8003740:	200001fc 	.word	0x200001fc

08003744 <_malloc_r>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	1ccd      	adds	r5, r1, #3
 8003748:	f025 0503 	bic.w	r5, r5, #3
 800374c:	3508      	adds	r5, #8
 800374e:	2d0c      	cmp	r5, #12
 8003750:	bf38      	it	cc
 8003752:	250c      	movcc	r5, #12
 8003754:	2d00      	cmp	r5, #0
 8003756:	4606      	mov	r6, r0
 8003758:	db01      	blt.n	800375e <_malloc_r+0x1a>
 800375a:	42a9      	cmp	r1, r5
 800375c:	d903      	bls.n	8003766 <_malloc_r+0x22>
 800375e:	230c      	movs	r3, #12
 8003760:	6033      	str	r3, [r6, #0]
 8003762:	2000      	movs	r0, #0
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	f000 f9d4 	bl	8003b12 <__malloc_lock>
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <_malloc_r+0xac>)
 800376c:	6814      	ldr	r4, [r2, #0]
 800376e:	4621      	mov	r1, r4
 8003770:	b991      	cbnz	r1, 8003798 <_malloc_r+0x54>
 8003772:	4c20      	ldr	r4, [pc, #128]	; (80037f4 <_malloc_r+0xb0>)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	b91b      	cbnz	r3, 8003780 <_malloc_r+0x3c>
 8003778:	4630      	mov	r0, r6
 800377a:	f000 f98f 	bl	8003a9c <_sbrk_r>
 800377e:	6020      	str	r0, [r4, #0]
 8003780:	4629      	mov	r1, r5
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f98a 	bl	8003a9c <_sbrk_r>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d124      	bne.n	80037d6 <_malloc_r+0x92>
 800378c:	230c      	movs	r3, #12
 800378e:	4630      	mov	r0, r6
 8003790:	6033      	str	r3, [r6, #0]
 8003792:	f000 f9bf 	bl	8003b14 <__malloc_unlock>
 8003796:	e7e4      	b.n	8003762 <_malloc_r+0x1e>
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	1b5b      	subs	r3, r3, r5
 800379c:	d418      	bmi.n	80037d0 <_malloc_r+0x8c>
 800379e:	2b0b      	cmp	r3, #11
 80037a0:	d90f      	bls.n	80037c2 <_malloc_r+0x7e>
 80037a2:	600b      	str	r3, [r1, #0]
 80037a4:	18cc      	adds	r4, r1, r3
 80037a6:	50cd      	str	r5, [r1, r3]
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 f9b3 	bl	8003b14 <__malloc_unlock>
 80037ae:	f104 000b 	add.w	r0, r4, #11
 80037b2:	1d23      	adds	r3, r4, #4
 80037b4:	f020 0007 	bic.w	r0, r0, #7
 80037b8:	1ac3      	subs	r3, r0, r3
 80037ba:	d0d3      	beq.n	8003764 <_malloc_r+0x20>
 80037bc:	425a      	negs	r2, r3
 80037be:	50e2      	str	r2, [r4, r3]
 80037c0:	e7d0      	b.n	8003764 <_malloc_r+0x20>
 80037c2:	684b      	ldr	r3, [r1, #4]
 80037c4:	428c      	cmp	r4, r1
 80037c6:	bf16      	itet	ne
 80037c8:	6063      	strne	r3, [r4, #4]
 80037ca:	6013      	streq	r3, [r2, #0]
 80037cc:	460c      	movne	r4, r1
 80037ce:	e7eb      	b.n	80037a8 <_malloc_r+0x64>
 80037d0:	460c      	mov	r4, r1
 80037d2:	6849      	ldr	r1, [r1, #4]
 80037d4:	e7cc      	b.n	8003770 <_malloc_r+0x2c>
 80037d6:	1cc4      	adds	r4, r0, #3
 80037d8:	f024 0403 	bic.w	r4, r4, #3
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d005      	beq.n	80037ec <_malloc_r+0xa8>
 80037e0:	1a21      	subs	r1, r4, r0
 80037e2:	4630      	mov	r0, r6
 80037e4:	f000 f95a 	bl	8003a9c <_sbrk_r>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d0cf      	beq.n	800378c <_malloc_r+0x48>
 80037ec:	6025      	str	r5, [r4, #0]
 80037ee:	e7db      	b.n	80037a8 <_malloc_r+0x64>
 80037f0:	200001fc 	.word	0x200001fc
 80037f4:	20000200 	.word	0x20000200

080037f8 <__ssputs_r>:
 80037f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	688e      	ldr	r6, [r1, #8]
 80037fe:	4682      	mov	sl, r0
 8003800:	429e      	cmp	r6, r3
 8003802:	460c      	mov	r4, r1
 8003804:	4690      	mov	r8, r2
 8003806:	4699      	mov	r9, r3
 8003808:	d837      	bhi.n	800387a <__ssputs_r+0x82>
 800380a:	898a      	ldrh	r2, [r1, #12]
 800380c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003810:	d031      	beq.n	8003876 <__ssputs_r+0x7e>
 8003812:	2302      	movs	r3, #2
 8003814:	6825      	ldr	r5, [r4, #0]
 8003816:	6909      	ldr	r1, [r1, #16]
 8003818:	1a6f      	subs	r7, r5, r1
 800381a:	6965      	ldr	r5, [r4, #20]
 800381c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003820:	fb95 f5f3 	sdiv	r5, r5, r3
 8003824:	f109 0301 	add.w	r3, r9, #1
 8003828:	443b      	add	r3, r7
 800382a:	429d      	cmp	r5, r3
 800382c:	bf38      	it	cc
 800382e:	461d      	movcc	r5, r3
 8003830:	0553      	lsls	r3, r2, #21
 8003832:	d530      	bpl.n	8003896 <__ssputs_r+0x9e>
 8003834:	4629      	mov	r1, r5
 8003836:	f7ff ff85 	bl	8003744 <_malloc_r>
 800383a:	4606      	mov	r6, r0
 800383c:	b950      	cbnz	r0, 8003854 <__ssputs_r+0x5c>
 800383e:	230c      	movs	r3, #12
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f8ca 3000 	str.w	r3, [sl]
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	463a      	mov	r2, r7
 8003856:	6921      	ldr	r1, [r4, #16]
 8003858:	f7ff fc32 	bl	80030c0 <memcpy>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	6126      	str	r6, [r4, #16]
 800386a:	443e      	add	r6, r7
 800386c:	6026      	str	r6, [r4, #0]
 800386e:	464e      	mov	r6, r9
 8003870:	6165      	str	r5, [r4, #20]
 8003872:	1bed      	subs	r5, r5, r7
 8003874:	60a5      	str	r5, [r4, #8]
 8003876:	454e      	cmp	r6, r9
 8003878:	d900      	bls.n	800387c <__ssputs_r+0x84>
 800387a:	464e      	mov	r6, r9
 800387c:	4632      	mov	r2, r6
 800387e:	4641      	mov	r1, r8
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	f000 f92d 	bl	8003ae0 <memmove>
 8003886:	68a3      	ldr	r3, [r4, #8]
 8003888:	2000      	movs	r0, #0
 800388a:	1b9b      	subs	r3, r3, r6
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	441e      	add	r6, r3
 8003892:	6026      	str	r6, [r4, #0]
 8003894:	e7dc      	b.n	8003850 <__ssputs_r+0x58>
 8003896:	462a      	mov	r2, r5
 8003898:	f000 f93d 	bl	8003b16 <_realloc_r>
 800389c:	4606      	mov	r6, r0
 800389e:	2800      	cmp	r0, #0
 80038a0:	d1e2      	bne.n	8003868 <__ssputs_r+0x70>
 80038a2:	6921      	ldr	r1, [r4, #16]
 80038a4:	4650      	mov	r0, sl
 80038a6:	f7ff ff01 	bl	80036ac <_free_r>
 80038aa:	e7c8      	b.n	800383e <__ssputs_r+0x46>

080038ac <_svfiprintf_r>:
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	461d      	mov	r5, r3
 80038b2:	898b      	ldrh	r3, [r1, #12]
 80038b4:	b09d      	sub	sp, #116	; 0x74
 80038b6:	061f      	lsls	r7, r3, #24
 80038b8:	4680      	mov	r8, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	4616      	mov	r6, r2
 80038be:	d50f      	bpl.n	80038e0 <_svfiprintf_r+0x34>
 80038c0:	690b      	ldr	r3, [r1, #16]
 80038c2:	b96b      	cbnz	r3, 80038e0 <_svfiprintf_r+0x34>
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	f7ff ff3d 	bl	8003744 <_malloc_r>
 80038ca:	6020      	str	r0, [r4, #0]
 80038cc:	6120      	str	r0, [r4, #16]
 80038ce:	b928      	cbnz	r0, 80038dc <_svfiprintf_r+0x30>
 80038d0:	230c      	movs	r3, #12
 80038d2:	f8c8 3000 	str.w	r3, [r8]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	e0c8      	b.n	8003a6e <_svfiprintf_r+0x1c2>
 80038dc:	2340      	movs	r3, #64	; 0x40
 80038de:	6163      	str	r3, [r4, #20]
 80038e0:	2300      	movs	r3, #0
 80038e2:	9309      	str	r3, [sp, #36]	; 0x24
 80038e4:	2320      	movs	r3, #32
 80038e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ea:	2330      	movs	r3, #48	; 0x30
 80038ec:	f04f 0b01 	mov.w	fp, #1
 80038f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f4:	9503      	str	r5, [sp, #12]
 80038f6:	4637      	mov	r7, r6
 80038f8:	463d      	mov	r5, r7
 80038fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038fe:	b10b      	cbz	r3, 8003904 <_svfiprintf_r+0x58>
 8003900:	2b25      	cmp	r3, #37	; 0x25
 8003902:	d13e      	bne.n	8003982 <_svfiprintf_r+0xd6>
 8003904:	ebb7 0a06 	subs.w	sl, r7, r6
 8003908:	d00b      	beq.n	8003922 <_svfiprintf_r+0x76>
 800390a:	4653      	mov	r3, sl
 800390c:	4632      	mov	r2, r6
 800390e:	4621      	mov	r1, r4
 8003910:	4640      	mov	r0, r8
 8003912:	f7ff ff71 	bl	80037f8 <__ssputs_r>
 8003916:	3001      	adds	r0, #1
 8003918:	f000 80a4 	beq.w	8003a64 <_svfiprintf_r+0x1b8>
 800391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391e:	4453      	add	r3, sl
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
 8003922:	783b      	ldrb	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 809d 	beq.w	8003a64 <_svfiprintf_r+0x1b8>
 800392a:	2300      	movs	r3, #0
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9307      	str	r3, [sp, #28]
 8003938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393c:	931a      	str	r3, [sp, #104]	; 0x68
 800393e:	462f      	mov	r7, r5
 8003940:	2205      	movs	r2, #5
 8003942:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003946:	4850      	ldr	r0, [pc, #320]	; (8003a88 <_svfiprintf_r+0x1dc>)
 8003948:	f7ff fbac 	bl	80030a4 <memchr>
 800394c:	9b04      	ldr	r3, [sp, #16]
 800394e:	b9d0      	cbnz	r0, 8003986 <_svfiprintf_r+0xda>
 8003950:	06d9      	lsls	r1, r3, #27
 8003952:	bf44      	itt	mi
 8003954:	2220      	movmi	r2, #32
 8003956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800395a:	071a      	lsls	r2, r3, #28
 800395c:	bf44      	itt	mi
 800395e:	222b      	movmi	r2, #43	; 0x2b
 8003960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003964:	782a      	ldrb	r2, [r5, #0]
 8003966:	2a2a      	cmp	r2, #42	; 0x2a
 8003968:	d015      	beq.n	8003996 <_svfiprintf_r+0xea>
 800396a:	462f      	mov	r7, r5
 800396c:	2000      	movs	r0, #0
 800396e:	250a      	movs	r5, #10
 8003970:	9a07      	ldr	r2, [sp, #28]
 8003972:	4639      	mov	r1, r7
 8003974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003978:	3b30      	subs	r3, #48	; 0x30
 800397a:	2b09      	cmp	r3, #9
 800397c:	d94d      	bls.n	8003a1a <_svfiprintf_r+0x16e>
 800397e:	b1b8      	cbz	r0, 80039b0 <_svfiprintf_r+0x104>
 8003980:	e00f      	b.n	80039a2 <_svfiprintf_r+0xf6>
 8003982:	462f      	mov	r7, r5
 8003984:	e7b8      	b.n	80038f8 <_svfiprintf_r+0x4c>
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <_svfiprintf_r+0x1dc>)
 8003988:	463d      	mov	r5, r7
 800398a:	1a80      	subs	r0, r0, r2
 800398c:	fa0b f000 	lsl.w	r0, fp, r0
 8003990:	4318      	orrs	r0, r3
 8003992:	9004      	str	r0, [sp, #16]
 8003994:	e7d3      	b.n	800393e <_svfiprintf_r+0x92>
 8003996:	9a03      	ldr	r2, [sp, #12]
 8003998:	1d11      	adds	r1, r2, #4
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	9103      	str	r1, [sp, #12]
 800399e:	2a00      	cmp	r2, #0
 80039a0:	db01      	blt.n	80039a6 <_svfiprintf_r+0xfa>
 80039a2:	9207      	str	r2, [sp, #28]
 80039a4:	e004      	b.n	80039b0 <_svfiprintf_r+0x104>
 80039a6:	4252      	negs	r2, r2
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	9207      	str	r2, [sp, #28]
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	783b      	ldrb	r3, [r7, #0]
 80039b2:	2b2e      	cmp	r3, #46	; 0x2e
 80039b4:	d10c      	bne.n	80039d0 <_svfiprintf_r+0x124>
 80039b6:	787b      	ldrb	r3, [r7, #1]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d133      	bne.n	8003a24 <_svfiprintf_r+0x178>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	3702      	adds	r7, #2
 80039c0:	1d1a      	adds	r2, r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	9203      	str	r2, [sp, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	4d2e      	ldr	r5, [pc, #184]	; (8003a8c <_svfiprintf_r+0x1e0>)
 80039d2:	2203      	movs	r2, #3
 80039d4:	7839      	ldrb	r1, [r7, #0]
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7ff fb64 	bl	80030a4 <memchr>
 80039dc:	b138      	cbz	r0, 80039ee <_svfiprintf_r+0x142>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	fa03 f000 	lsl.w	r0, r3, r0
 80039e6:	9b04      	ldr	r3, [sp, #16]
 80039e8:	3701      	adds	r7, #1
 80039ea:	4303      	orrs	r3, r0
 80039ec:	9304      	str	r3, [sp, #16]
 80039ee:	7839      	ldrb	r1, [r7, #0]
 80039f0:	2206      	movs	r2, #6
 80039f2:	4827      	ldr	r0, [pc, #156]	; (8003a90 <_svfiprintf_r+0x1e4>)
 80039f4:	1c7e      	adds	r6, r7, #1
 80039f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fa:	f7ff fb53 	bl	80030a4 <memchr>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d038      	beq.n	8003a74 <_svfiprintf_r+0x1c8>
 8003a02:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <_svfiprintf_r+0x1e8>)
 8003a04:	bb13      	cbnz	r3, 8003a4c <_svfiprintf_r+0x1a0>
 8003a06:	9b03      	ldr	r3, [sp, #12]
 8003a08:	3307      	adds	r3, #7
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	3308      	adds	r3, #8
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a14:	444b      	add	r3, r9
 8003a16:	9309      	str	r3, [sp, #36]	; 0x24
 8003a18:	e76d      	b.n	80038f6 <_svfiprintf_r+0x4a>
 8003a1a:	fb05 3202 	mla	r2, r5, r2, r3
 8003a1e:	2001      	movs	r0, #1
 8003a20:	460f      	mov	r7, r1
 8003a22:	e7a6      	b.n	8003972 <_svfiprintf_r+0xc6>
 8003a24:	2300      	movs	r3, #0
 8003a26:	250a      	movs	r5, #10
 8003a28:	4619      	mov	r1, r3
 8003a2a:	3701      	adds	r7, #1
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a34:	3a30      	subs	r2, #48	; 0x30
 8003a36:	2a09      	cmp	r2, #9
 8003a38:	d903      	bls.n	8003a42 <_svfiprintf_r+0x196>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0c8      	beq.n	80039d0 <_svfiprintf_r+0x124>
 8003a3e:	9105      	str	r1, [sp, #20]
 8003a40:	e7c6      	b.n	80039d0 <_svfiprintf_r+0x124>
 8003a42:	fb05 2101 	mla	r1, r5, r1, r2
 8003a46:	2301      	movs	r3, #1
 8003a48:	4607      	mov	r7, r0
 8003a4a:	e7f0      	b.n	8003a2e <_svfiprintf_r+0x182>
 8003a4c:	ab03      	add	r3, sp, #12
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4622      	mov	r2, r4
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_svfiprintf_r+0x1ec>)
 8003a54:	a904      	add	r1, sp, #16
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7fe f8ec 	bl	8001c34 <_printf_float>
 8003a5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a60:	4681      	mov	r9, r0
 8003a62:	d1d6      	bne.n	8003a12 <_svfiprintf_r+0x166>
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	065b      	lsls	r3, r3, #25
 8003a68:	f53f af35 	bmi.w	80038d6 <_svfiprintf_r+0x2a>
 8003a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6e:	b01d      	add	sp, #116	; 0x74
 8003a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a74:	ab03      	add	r3, sp, #12
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4622      	mov	r2, r4
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_svfiprintf_r+0x1ec>)
 8003a7c:	a904      	add	r1, sp, #16
 8003a7e:	4640      	mov	r0, r8
 8003a80:	f7fe fb84 	bl	800218c <_printf_i>
 8003a84:	e7ea      	b.n	8003a5c <_svfiprintf_r+0x1b0>
 8003a86:	bf00      	nop
 8003a88:	08003d24 	.word	0x08003d24
 8003a8c:	08003d2a 	.word	0x08003d2a
 8003a90:	08003d2e 	.word	0x08003d2e
 8003a94:	08001c35 	.word	0x08001c35
 8003a98:	080037f9 	.word	0x080037f9

08003a9c <_sbrk_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	4c05      	ldr	r4, [pc, #20]	; (8003ab8 <_sbrk_r+0x1c>)
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	6023      	str	r3, [r4, #0]
 8003aa8:	f7fd ffa0 	bl	80019ec <_sbrk>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_sbrk_r+0x1a>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_sbrk_r+0x1a>
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	2000025c 	.word	0x2000025c

08003abc <__ascii_mbtowc>:
 8003abc:	b082      	sub	sp, #8
 8003abe:	b901      	cbnz	r1, 8003ac2 <__ascii_mbtowc+0x6>
 8003ac0:	a901      	add	r1, sp, #4
 8003ac2:	b142      	cbz	r2, 8003ad6 <__ascii_mbtowc+0x1a>
 8003ac4:	b14b      	cbz	r3, 8003ada <__ascii_mbtowc+0x1e>
 8003ac6:	7813      	ldrb	r3, [r2, #0]
 8003ac8:	600b      	str	r3, [r1, #0]
 8003aca:	7812      	ldrb	r2, [r2, #0]
 8003acc:	1c10      	adds	r0, r2, #0
 8003ace:	bf18      	it	ne
 8003ad0:	2001      	movne	r0, #1
 8003ad2:	b002      	add	sp, #8
 8003ad4:	4770      	bx	lr
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	e7fb      	b.n	8003ad2 <__ascii_mbtowc+0x16>
 8003ada:	f06f 0001 	mvn.w	r0, #1
 8003ade:	e7f8      	b.n	8003ad2 <__ascii_mbtowc+0x16>

08003ae0 <memmove>:
 8003ae0:	4288      	cmp	r0, r1
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	eb01 0302 	add.w	r3, r1, r2
 8003ae8:	d807      	bhi.n	8003afa <memmove+0x1a>
 8003aea:	1e42      	subs	r2, r0, #1
 8003aec:	4299      	cmp	r1, r3
 8003aee:	d00a      	beq.n	8003b06 <memmove+0x26>
 8003af0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003af8:	e7f8      	b.n	8003aec <memmove+0xc>
 8003afa:	4283      	cmp	r3, r0
 8003afc:	d9f5      	bls.n	8003aea <memmove+0xa>
 8003afe:	1881      	adds	r1, r0, r2
 8003b00:	1ad2      	subs	r2, r2, r3
 8003b02:	42d3      	cmn	r3, r2
 8003b04:	d100      	bne.n	8003b08 <memmove+0x28>
 8003b06:	bd10      	pop	{r4, pc}
 8003b08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b10:	e7f7      	b.n	8003b02 <memmove+0x22>

08003b12 <__malloc_lock>:
 8003b12:	4770      	bx	lr

08003b14 <__malloc_unlock>:
 8003b14:	4770      	bx	lr

08003b16 <_realloc_r>:
 8003b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b18:	4607      	mov	r7, r0
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	460e      	mov	r6, r1
 8003b1e:	b921      	cbnz	r1, 8003b2a <_realloc_r+0x14>
 8003b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b24:	4611      	mov	r1, r2
 8003b26:	f7ff be0d 	b.w	8003744 <_malloc_r>
 8003b2a:	b922      	cbnz	r2, 8003b36 <_realloc_r+0x20>
 8003b2c:	f7ff fdbe 	bl	80036ac <_free_r>
 8003b30:	4625      	mov	r5, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b36:	f000 f821 	bl	8003b7c <_malloc_usable_size_r>
 8003b3a:	42a0      	cmp	r0, r4
 8003b3c:	d20f      	bcs.n	8003b5e <_realloc_r+0x48>
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4638      	mov	r0, r7
 8003b42:	f7ff fdff 	bl	8003744 <_malloc_r>
 8003b46:	4605      	mov	r5, r0
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d0f2      	beq.n	8003b32 <_realloc_r+0x1c>
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4622      	mov	r2, r4
 8003b50:	f7ff fab6 	bl	80030c0 <memcpy>
 8003b54:	4631      	mov	r1, r6
 8003b56:	4638      	mov	r0, r7
 8003b58:	f7ff fda8 	bl	80036ac <_free_r>
 8003b5c:	e7e9      	b.n	8003b32 <_realloc_r+0x1c>
 8003b5e:	4635      	mov	r5, r6
 8003b60:	e7e7      	b.n	8003b32 <_realloc_r+0x1c>

08003b62 <__ascii_wctomb>:
 8003b62:	b149      	cbz	r1, 8003b78 <__ascii_wctomb+0x16>
 8003b64:	2aff      	cmp	r2, #255	; 0xff
 8003b66:	bf8b      	itete	hi
 8003b68:	238a      	movhi	r3, #138	; 0x8a
 8003b6a:	700a      	strbls	r2, [r1, #0]
 8003b6c:	6003      	strhi	r3, [r0, #0]
 8003b6e:	2001      	movls	r0, #1
 8003b70:	bf88      	it	hi
 8003b72:	f04f 30ff 	movhi.w	r0, #4294967295
 8003b76:	4770      	bx	lr
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4770      	bx	lr

08003b7c <_malloc_usable_size_r>:
 8003b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b80:	1f18      	subs	r0, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfbc      	itt	lt
 8003b86:	580b      	ldrlt	r3, [r1, r0]
 8003b88:	18c0      	addlt	r0, r0, r3
 8003b8a:	4770      	bx	lr

08003b8c <_init>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr

08003b98 <_fini>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr
