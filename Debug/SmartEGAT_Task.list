
SmartEGAT_Task.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac6c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800ada0  0800ada0  0001ada0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4b4  0800b4b4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4b4  0800b4b4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003264  200001ec  0800b6a8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003450  0800b6a8  00023450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bf2  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c1d  00000000  00000000  00034e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000064b0  00000000  00000000  00037a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c38  00000000  00000000  0003ded8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b88  00000000  00000000  0003eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004627  00000000  00000000  0003f698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ae52  00000000  00000000  00043cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000188b0  00000000  00000000  0004eb11  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000673c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004630  00000000  00000000  0006743c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001ec 	.word	0x200001ec
 800014c:	00000000 	.word	0x00000000
 8000150:	0800ad84 	.word	0x0800ad84

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f0 	.word	0x200001f0
 800016c:	0800ad84 	.word	0x0800ad84

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	; 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002d2:	f1a4 0401 	sub.w	r4, r4, #1
 80002d6:	d1e9      	bne.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_frsub>:
 8000b9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba0:	e002      	b.n	8000ba8 <__addsf3>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_fsub>:
 8000ba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba8 <__addsf3>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	bf1f      	itttt	ne
 8000bac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb0:	ea92 0f03 	teqne	r2, r3
 8000bb4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbc:	d06a      	beq.n	8000c94 <__addsf3+0xec>
 8000bbe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc6:	bfc1      	itttt	gt
 8000bc8:	18d2      	addgt	r2, r2, r3
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	4048      	eorgt	r0, r1
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	2b19      	cmp	r3, #25
 8000bd6:	bf88      	it	hi
 8000bd8:	4770      	bxhi	lr
 8000bda:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be6:	bf18      	it	ne
 8000be8:	4240      	negne	r0, r0
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4249      	negne	r1, r1
 8000bfa:	ea92 0f03 	teq	r2, r3
 8000bfe:	d03f      	beq.n	8000c80 <__addsf3+0xd8>
 8000c00:	f1a2 0201 	sub.w	r2, r2, #1
 8000c04:	fa41 fc03 	asr.w	ip, r1, r3
 8000c08:	eb10 000c 	adds.w	r0, r0, ip
 8000c0c:	f1c3 0320 	rsb	r3, r3, #32
 8000c10:	fa01 f103 	lsl.w	r1, r1, r3
 8000c14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__addsf3+0x78>
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c24:	d313      	bcc.n	8000c4e <__addsf3+0xa6>
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d306      	bcc.n	8000c3a <__addsf3+0x92>
 8000c2c:	0840      	lsrs	r0, r0, #1
 8000c2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c32:	f102 0201 	add.w	r2, r2, #1
 8000c36:	2afe      	cmp	r2, #254	; 0xfe
 8000c38:	d251      	bcs.n	8000cde <__addsf3+0x136>
 8000c3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c42:	bf08      	it	eq
 8000c44:	f020 0001 	biceq.w	r0, r0, #1
 8000c48:	ea40 0003 	orr.w	r0, r0, r3
 8000c4c:	4770      	bx	lr
 8000c4e:	0049      	lsls	r1, r1, #1
 8000c50:	eb40 0000 	adc.w	r0, r0, r0
 8000c54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	d1ed      	bne.n	8000c3a <__addsf3+0x92>
 8000c5e:	fab0 fc80 	clz	ip, r0
 8000c62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c66:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6e:	bfaa      	itet	ge
 8000c70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c74:	4252      	neglt	r2, r2
 8000c76:	4318      	orrge	r0, r3
 8000c78:	bfbc      	itt	lt
 8000c7a:	40d0      	lsrlt	r0, r2
 8000c7c:	4318      	orrlt	r0, r3
 8000c7e:	4770      	bx	lr
 8000c80:	f092 0f00 	teq	r2, #0
 8000c84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c88:	bf06      	itte	eq
 8000c8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8e:	3201      	addeq	r2, #1
 8000c90:	3b01      	subne	r3, #1
 8000c92:	e7b5      	b.n	8000c00 <__addsf3+0x58>
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d021      	beq.n	8000ce8 <__addsf3+0x140>
 8000ca4:	ea92 0f03 	teq	r2, r3
 8000ca8:	d004      	beq.n	8000cb4 <__addsf3+0x10c>
 8000caa:	f092 0f00 	teq	r2, #0
 8000cae:	bf08      	it	eq
 8000cb0:	4608      	moveq	r0, r1
 8000cb2:	4770      	bx	lr
 8000cb4:	ea90 0f01 	teq	r0, r1
 8000cb8:	bf1c      	itt	ne
 8000cba:	2000      	movne	r0, #0
 8000cbc:	4770      	bxne	lr
 8000cbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc2:	d104      	bne.n	8000cce <__addsf3+0x126>
 8000cc4:	0040      	lsls	r0, r0, #1
 8000cc6:	bf28      	it	cs
 8000cc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	4770      	bx	lr
 8000cce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd2:	bf3c      	itt	cc
 8000cd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bxcc	lr
 8000cda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce6:	4770      	bx	lr
 8000ce8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cec:	bf16      	itet	ne
 8000cee:	4608      	movne	r0, r1
 8000cf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf4:	4601      	movne	r1, r0
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	bf06      	itte	eq
 8000cfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfe:	ea90 0f01 	teqeq	r0, r1
 8000d02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_ui2f>:
 8000d08:	f04f 0300 	mov.w	r3, #0
 8000d0c:	e004      	b.n	8000d18 <__aeabi_i2f+0x8>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_i2f>:
 8000d10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	bf48      	it	mi
 8000d16:	4240      	negmi	r0, r0
 8000d18:	ea5f 0c00 	movs.w	ip, r0
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d24:	4601      	mov	r1, r0
 8000d26:	f04f 0000 	mov.w	r0, #0
 8000d2a:	e01c      	b.n	8000d66 <__aeabi_l2f+0x2a>

08000d2c <__aeabi_ul2f>:
 8000d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d30:	bf08      	it	eq
 8000d32:	4770      	bxeq	lr
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e00a      	b.n	8000d50 <__aeabi_l2f+0x14>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_l2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d48:	d502      	bpl.n	8000d50 <__aeabi_l2f+0x14>
 8000d4a:	4240      	negs	r0, r0
 8000d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d50:	ea5f 0c01 	movs.w	ip, r1
 8000d54:	bf02      	ittt	eq
 8000d56:	4684      	moveq	ip, r0
 8000d58:	4601      	moveq	r1, r0
 8000d5a:	2000      	moveq	r0, #0
 8000d5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d60:	bf08      	it	eq
 8000d62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6a:	fabc f28c 	clz	r2, ip
 8000d6e:	3a08      	subs	r2, #8
 8000d70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d74:	db10      	blt.n	8000d98 <__aeabi_l2f+0x5c>
 8000d76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d88:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f102 0220 	add.w	r2, r2, #32
 8000d9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fmul>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d06f      	beq.n	8000eb0 <__aeabi_fmul+0xf8>
 8000dd0:	441a      	add	r2, r3
 8000dd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd6:	0240      	lsls	r0, r0, #9
 8000dd8:	bf18      	it	ne
 8000dda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dde:	d01e      	beq.n	8000e1e <__aeabi_fmul+0x66>
 8000de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dec:	fba0 3101 	umull	r3, r1, r0, r1
 8000df0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df8:	bf3e      	ittt	cc
 8000dfa:	0049      	lslcc	r1, r1, #1
 8000dfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e00:	005b      	lslcc	r3, r3, #1
 8000e02:	ea40 0001 	orr.w	r0, r0, r1
 8000e06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0a:	2afd      	cmp	r2, #253	; 0xfd
 8000e0c:	d81d      	bhi.n	8000e4a <__aeabi_fmul+0x92>
 8000e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e16:	bf08      	it	eq
 8000e18:	f020 0001 	biceq.w	r0, r0, #1
 8000e1c:	4770      	bx	lr
 8000e1e:	f090 0f00 	teq	r0, #0
 8000e22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e26:	bf08      	it	eq
 8000e28:	0249      	lsleq	r1, r1, #9
 8000e2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e32:	3a7f      	subs	r2, #127	; 0x7f
 8000e34:	bfc2      	ittt	gt
 8000e36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3e:	4770      	bxgt	lr
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	dc5d      	bgt.n	8000f08 <__aeabi_fmul+0x150>
 8000e4c:	f112 0f19 	cmn.w	r2, #25
 8000e50:	bfdc      	itt	le
 8000e52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e56:	4770      	bxle	lr
 8000e58:	f1c2 0200 	rsb	r2, r2, #0
 8000e5c:	0041      	lsls	r1, r0, #1
 8000e5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e62:	f1c2 0220 	rsb	r2, r2, #32
 8000e66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6e:	f140 0000 	adc.w	r0, r0, #0
 8000e72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e76:	bf08      	it	eq
 8000e78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e7c:	4770      	bx	lr
 8000e7e:	f092 0f00 	teq	r2, #0
 8000e82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0040      	lsleq	r0, r0, #1
 8000e8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8e:	3a01      	subeq	r2, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fmul+0xce>
 8000e92:	ea40 000c 	orr.w	r0, r0, ip
 8000e96:	f093 0f00 	teq	r3, #0
 8000e9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0049      	lsleq	r1, r1, #1
 8000ea2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea6:	3b01      	subeq	r3, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xe6>
 8000eaa:	ea41 010c 	orr.w	r1, r1, ip
 8000eae:	e78f      	b.n	8000dd0 <__aeabi_fmul+0x18>
 8000eb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	bf18      	it	ne
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d00a      	beq.n	8000ed6 <__aeabi_fmul+0x11e>
 8000ec0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec4:	bf18      	it	ne
 8000ec6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eca:	d1d8      	bne.n	8000e7e <__aeabi_fmul+0xc6>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	4770      	bx	lr
 8000ed6:	f090 0f00 	teq	r0, #0
 8000eda:	bf17      	itett	ne
 8000edc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee0:	4608      	moveq	r0, r1
 8000ee2:	f091 0f00 	teqne	r1, #0
 8000ee6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eea:	d014      	beq.n	8000f16 <__aeabi_fmul+0x15e>
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d101      	bne.n	8000ef6 <__aeabi_fmul+0x13e>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	d10f      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000ef6:	ea93 0f0c 	teq	r3, ip
 8000efa:	d103      	bne.n	8000f04 <__aeabi_fmul+0x14c>
 8000efc:	024b      	lsls	r3, r1, #9
 8000efe:	bf18      	it	ne
 8000f00:	4608      	movne	r0, r1
 8000f02:	d108      	bne.n	8000f16 <__aeabi_fmul+0x15e>
 8000f04:	ea80 0001 	eor.w	r0, r0, r1
 8000f08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_fdiv>:
 8000f20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f28:	bf1e      	ittt	ne
 8000f2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2e:	ea92 0f0c 	teqne	r2, ip
 8000f32:	ea93 0f0c 	teqne	r3, ip
 8000f36:	d069      	beq.n	800100c <__aeabi_fdiv+0xec>
 8000f38:	eba2 0203 	sub.w	r2, r2, r3
 8000f3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f40:	0249      	lsls	r1, r1, #9
 8000f42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f46:	d037      	beq.n	8000fb8 <__aeabi_fdiv+0x98>
 8000f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	bf38      	it	cc
 8000f5c:	005b      	lslcc	r3, r3, #1
 8000f5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f66:	428b      	cmp	r3, r1
 8000f68:	bf24      	itt	cs
 8000f6a:	1a5b      	subcs	r3, r3, r1
 8000f6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f74:	bf24      	itt	cs
 8000f76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f82:	bf24      	itt	cs
 8000f84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f90:	bf24      	itt	cs
 8000f92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	bf18      	it	ne
 8000f9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa2:	d1e0      	bne.n	8000f66 <__aeabi_fdiv+0x46>
 8000fa4:	2afd      	cmp	r2, #253	; 0xfd
 8000fa6:	f63f af50 	bhi.w	8000e4a <__aeabi_fmul+0x92>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc0:	327f      	adds	r2, #127	; 0x7f
 8000fc2:	bfc2      	ittt	gt
 8000fc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fcc:	4770      	bxgt	lr
 8000fce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	3a01      	subs	r2, #1
 8000fd8:	e737      	b.n	8000e4a <__aeabi_fmul+0x92>
 8000fda:	f092 0f00 	teq	r2, #0
 8000fde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe2:	bf02      	ittt	eq
 8000fe4:	0040      	lsleq	r0, r0, #1
 8000fe6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fea:	3a01      	subeq	r2, #1
 8000fec:	d0f9      	beq.n	8000fe2 <__aeabi_fdiv+0xc2>
 8000fee:	ea40 000c 	orr.w	r0, r0, ip
 8000ff2:	f093 0f00 	teq	r3, #0
 8000ff6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0049      	lsleq	r1, r1, #1
 8000ffe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001002:	3b01      	subeq	r3, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xda>
 8001006:	ea41 010c 	orr.w	r1, r1, ip
 800100a:	e795      	b.n	8000f38 <__aeabi_fdiv+0x18>
 800100c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001010:	ea92 0f0c 	teq	r2, ip
 8001014:	d108      	bne.n	8001028 <__aeabi_fdiv+0x108>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	f47f af7d 	bne.w	8000f16 <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	f47f af70 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 8001024:	4608      	mov	r0, r1
 8001026:	e776      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001028:	ea93 0f0c 	teq	r3, ip
 800102c:	d104      	bne.n	8001038 <__aeabi_fdiv+0x118>
 800102e:	024b      	lsls	r3, r1, #9
 8001030:	f43f af4c 	beq.w	8000ecc <__aeabi_fmul+0x114>
 8001034:	4608      	mov	r0, r1
 8001036:	e76e      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001038:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800103c:	bf18      	it	ne
 800103e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001042:	d1ca      	bne.n	8000fda <__aeabi_fdiv+0xba>
 8001044:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001048:	f47f af5c 	bne.w	8000f04 <__aeabi_fmul+0x14c>
 800104c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001050:	f47f af3c 	bne.w	8000ecc <__aeabi_fmul+0x114>
 8001054:	e75f      	b.n	8000f16 <__aeabi_fmul+0x15e>
 8001056:	bf00      	nop

08001058 <__gesf2>:
 8001058:	f04f 3cff 	mov.w	ip, #4294967295
 800105c:	e006      	b.n	800106c <__cmpsf2+0x4>
 800105e:	bf00      	nop

08001060 <__lesf2>:
 8001060:	f04f 0c01 	mov.w	ip, #1
 8001064:	e002      	b.n	800106c <__cmpsf2+0x4>
 8001066:	bf00      	nop

08001068 <__cmpsf2>:
 8001068:	f04f 0c01 	mov.w	ip, #1
 800106c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	bf18      	it	ne
 800107e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001082:	d011      	beq.n	80010a8 <__cmpsf2+0x40>
 8001084:	b001      	add	sp, #4
 8001086:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108a:	bf18      	it	ne
 800108c:	ea90 0f01 	teqne	r0, r1
 8001090:	bf58      	it	pl
 8001092:	ebb2 0003 	subspl.w	r0, r2, r3
 8001096:	bf88      	it	hi
 8001098:	17c8      	asrhi	r0, r1, #31
 800109a:	bf38      	it	cc
 800109c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a0:	bf18      	it	ne
 80010a2:	f040 0001 	orrne.w	r0, r0, #1
 80010a6:	4770      	bx	lr
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__cmpsf2+0x4c>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d105      	bne.n	80010c0 <__cmpsf2+0x58>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d1e4      	bne.n	8001084 <__cmpsf2+0x1c>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d0e1      	beq.n	8001084 <__cmpsf2+0x1c>
 80010c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_cfrcmple>:
 80010c8:	4684      	mov	ip, r0
 80010ca:	4608      	mov	r0, r1
 80010cc:	4661      	mov	r1, ip
 80010ce:	e7ff      	b.n	80010d0 <__aeabi_cfcmpeq>

080010d0 <__aeabi_cfcmpeq>:
 80010d0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d2:	f7ff ffc9 	bl	8001068 <__cmpsf2>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	bf48      	it	mi
 80010da:	f110 0f00 	cmnmi.w	r0, #0
 80010de:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e0 <__aeabi_fcmpeq>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff fff4 	bl	80010d0 <__aeabi_cfcmpeq>
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmplt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffea 	bl	80010d0 <__aeabi_cfcmpeq>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmple>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffe0 	bl	80010d0 <__aeabi_cfcmpeq>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpge>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffd2 	bl	80010c8 <__aeabi_cfrcmple>
 8001124:	bf94      	ite	ls
 8001126:	2001      	movls	r0, #1
 8001128:	2000      	movhi	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmpgt>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffc8 	bl	80010c8 <__aeabi_cfrcmple>
 8001138:	bf34      	ite	cc
 800113a:	2001      	movcc	r0, #1
 800113c:	2000      	movcs	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <Calculate_LightIntensityPercentage>:

#include "LDR_Light_Sensor.h"

// Local Functions

float Calculate_LightIntensityPercentage(uint16_t adcValue) {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08d      	sub	sp, #52	; 0x34
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
    // Constants
    const float Vcc = 3.3;       // Supply voltage
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <Calculate_LightIntensityPercentage+0x124>)
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    const float R_fixed = 10000; // Fixed resistor value (10kΩ)
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <Calculate_LightIntensityPercentage+0x128>)
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    const float R_min = 100;     // Minimum LDR resistance (100Ω)
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001158:	623b      	str	r3, [r7, #32]
    const float R_max = 200000;  // Maximum LDR resistance (200kΩ)
 800115a:	4b46      	ldr	r3, [pc, #280]	; (8001274 <Calculate_LightIntensityPercentage+0x130>)
 800115c:	61fb      	str	r3, [r7, #28]

    // Calculate Vout from ADC value
    float Vout = (adcValue * Vcc) / 4096.0;
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fdd5 	bl	8000d10 <__aeabi_i2f>
 8001166:	4603      	mov	r3, r0
 8001168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe24 	bl	8000db8 <__aeabi_fmul>
 8001170:	4603      	mov	r3, r0
 8001172:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fed2 	bl	8000f20 <__aeabi_fdiv>
 800117c:	4603      	mov	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]

    // Calculate LDR resistance
    float R_LDR = R_fixed * ((Vcc / Vout) - 1);
 8001180:	69b9      	ldr	r1, [r7, #24]
 8001182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001184:	f7ff fecc 	bl	8000f20 <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
 800118a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd08 	bl	8000ba4 <__aeabi_fsub>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119a:	f7ff fe0d 	bl	8000db8 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

    // Apply a logarithmic scale
    float log_R_LDR = log(R_LDR);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff f95a 	bl	800045c <__aeabi_f2d>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	4618      	mov	r0, r3
 80011ae:	4621      	mov	r1, r4
 80011b0:	f009 fbb2 	bl	800a918 <log>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fc9e 	bl	8000afc <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]
    float log_R_min = log(R_min);
 80011c4:	6a38      	ldr	r0, [r7, #32]
 80011c6:	f7ff f949 	bl	800045c <__aeabi_f2d>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f009 fba1 	bl	800a918 <log>
 80011d6:	4603      	mov	r3, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	4618      	mov	r0, r3
 80011dc:	4621      	mov	r1, r4
 80011de:	f7ff fc8d 	bl	8000afc <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
    float log_R_max = log(R_max);
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f7ff f938 	bl	800045c <__aeabi_f2d>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	f009 fb90 	bl	800a918 <log>
 80011f8:	4603      	mov	r3, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4618      	mov	r0, r3
 80011fe:	4621      	mov	r1, r4
 8001200:	f7ff fc7c 	bl	8000afc <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	60bb      	str	r3, [r7, #8]
    float intensityPercentage = ((log_R_LDR - log_R_min) / (log_R_max - log_R_min)) * 100;
 8001208:	68f9      	ldr	r1, [r7, #12]
 800120a:	6938      	ldr	r0, [r7, #16]
 800120c:	f7ff fcca 	bl	8000ba4 <__aeabi_fsub>
 8001210:	4603      	mov	r3, r0
 8001212:	461c      	mov	r4, r3
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fcc4 	bl	8000ba4 <__aeabi_fsub>
 800121c:	4603      	mov	r3, r0
 800121e:	4619      	mov	r1, r3
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe7d 	bl	8000f20 <__aeabi_fdiv>
 8001226:	4603      	mov	r3, r0
 8001228:	4911      	ldr	r1, [pc, #68]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fdc4 	bl	8000db8 <__aeabi_fmul>
 8001230:	4603      	mov	r3, r0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Clamp percentage to [0, 100] to avoid invalid values
    if (intensityPercentage > 100) {
 8001234:	490e      	ldr	r1, [pc, #56]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001238:	f7ff ff7a 	bl	8001130 <__aeabi_fcmpgt>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <Calculate_LightIntensityPercentage+0x104>
        intensityPercentage = 100;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <Calculate_LightIntensityPercentage+0x12c>)
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001246:	e00a      	b.n	800125e <Calculate_LightIntensityPercentage+0x11a>
    } else if (intensityPercentage < 0) {
 8001248:	f04f 0100 	mov.w	r1, #0
 800124c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800124e:	f7ff ff51 	bl	80010f4 <__aeabi_fcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <Calculate_LightIntensityPercentage+0x11a>
        intensityPercentage = 0;
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return intensityPercentage;
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001260:	4618      	mov	r0, r3
 8001262:	3734      	adds	r7, #52	; 0x34
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40533333 	.word	0x40533333
 800126c:	461c4000 	.word	0x461c4000
 8001270:	42c80000 	.word	0x42c80000
 8001274:	48435000 	.word	0x48435000

08001278 <HAL_LDR_Init>:



// APIs
void HAL_LDR_Init(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	// ADC Configuration
		ADC_Config_t ADCCfg = {
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
				.conversions = ADC_NumOfConvs_1,
				.dataAlginement = ADC_DataAlign_Right,
				.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
				.P_IRQ_Callback = NULL
		};
		ADC_Init(ADC1, &ADCCfg, GPIO_PIN_1);
 800128a:	463b      	mov	r3, r7
 800128c:	2202      	movs	r2, #2
 800128e:	4619      	mov	r1, r3
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HAL_LDR_Init+0x2c>)
 8001292:	f001 fad9 	bl	8002848 <ADC_Init>

		// Perform a Dummy Read.
		HAL_LDR_Read_Intensity();
 8001296:	f000 f807 	bl	80012a8 <HAL_LDR_Read_Intensity>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012400 	.word	0x40012400

080012a8 <HAL_LDR_Read_Intensity>:


float HAL_LDR_Read_Intensity(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	uint16_t adcValue = ADC_Read_SingleChannel(ADC1, LDR_ADC_CH);
 80012ae:	2101      	movs	r1, #1
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <HAL_LDR_Read_Intensity+0x34>)
 80012b2:	f001 fb71 	bl	8002998 <ADC_Read_SingleChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	807b      	strh	r3, [r7, #2]
	// Calculate Intensity as a Percentage.
	float intensity;
	if(adcValue != 0){
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_LDR_Read_Intensity+0x24>
		intensity = Calculate_LightIntensityPercentage(adcValue);
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff3e 	bl	8001144 <Calculate_LightIntensityPercentage>
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	e002      	b.n	80012d2 <HAL_LDR_Read_Intensity+0x2a>
	}else {
		intensity = 0;
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
	}

	return intensity;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40012400 	.word	0x40012400

080012e0 <HAL_LM35_Init>:
 */

#include "LM35_Temp_Sensor.h"

// APIs
void HAL_LM35_Init(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
	// ADC Configuration
	ADC_Config_t ADCCfg = {
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
			.conversions = ADC_NumOfConvs_1,
			.dataAlginement = ADC_DataAlign_Right,
			.IRQ_Enable = ADC_IRQ_Disable,      // Interrupts disabled
			.P_IRQ_Callback = NULL
	};
	ADC_Init(ADC1, &ADCCfg, GPIO_PIN_0);
 80012f2:	463b      	mov	r3, r7
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <HAL_LM35_Init+0x2c>)
 80012fa:	f001 faa5 	bl	8002848 <ADC_Init>

	// Perform a Dummy Read.
	HAL_LM35_Read();
 80012fe:	f000 f807 	bl	8001310 <HAL_LM35_Read>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012400 	.word	0x40012400

08001310 <HAL_LM35_Read>:


float HAL_LM35_Read(){
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
	uint16_t adcValue = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	81fb      	strh	r3, [r7, #14]

	adcValue = ADC_Read_SingleChannel(ADC1, LM35_ADC_CH);
 800131a:	2100      	movs	r1, #0
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <HAL_LM35_Read+0x68>)
 800131e:	f001 fb3b 	bl	8002998 <ADC_Read_SingleChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	81fb      	strh	r3, [r7, #14]
	float voltage = (adcValue * 3.3) / 4096.0;
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f885 	bl	8000438 <__aeabi_i2d>
 800132e:	a310      	add	r3, pc, #64	; (adr r3, 8001370 <HAL_LM35_Read+0x60>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff f8ea 	bl	800050c <__aeabi_dmul>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	4618      	mov	r0, r3
 800133e:	4621      	mov	r1, r4
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_LM35_Read+0x6c>)
 8001346:	f7ff fa0b 	bl	8000760 <__aeabi_ddiv>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	4618      	mov	r0, r3
 8001350:	4621      	mov	r1, r4
 8001352:	f7ff fbd3 	bl	8000afc <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	60bb      	str	r3, [r7, #8]
	float temperature = voltage * 100.0;
 800135a:	4909      	ldr	r1, [pc, #36]	; (8001380 <HAL_LM35_Read+0x70>)
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f7ff fd2b 	bl	8000db8 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	607b      	str	r3, [r7, #4]

	return temperature;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	66666666 	.word	0x66666666
 8001374:	400a6666 	.word	0x400a6666
 8001378:	40012400 	.word	0x40012400
 800137c:	40b00000 	.word	0x40b00000
 8001380:	42c80000 	.word	0x42c80000

08001384 <HAL_Relay_Init>:

#include "Relay_5V_Actuator.h"



void HAL_Relay_Init(GPIO_TYPE_DEF* gpio, uint16_t GPIO_PIN_NUM){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
	GPIO_PinConfig_t gpioCfg;
	gpioCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001390:	2304      	movs	r3, #4
 8001392:	73bb      	strb	r3, [r7, #14]
	gpioCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_2M;
 8001394:	2302      	movs	r3, #2
 8001396:	73fb      	strb	r3, [r7, #15]
	gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_Init(gpio, &gpioCfg);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f001 fcbb 	bl	8002d1e <MCAL_GPIO_Init>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_Relay_ACT>:
	}else{
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_LOW);
	}
}

void HAL_Relay_ACT(GPIO_TYPE_DEF* gpio, uint16_t GPIO_PIN_NUM, uint8_t data){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
	if(data == 1){
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d106      	bne.n	80013d4 <HAL_Relay_ACT+0x24>
		MCAL_GPIO_WritePin(gpio, GPIO_PIN_NUM, GPIO_PIN_HIGH);
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f001 fd45 	bl	8002e5c <MCAL_GPIO_WritePin>
	}else{
		MCAL_GPIO_WritePin(gpio, GPIO_PIN_NUM, GPIO_PIN_LOW);
	}
}
 80013d2:	e005      	b.n	80013e0 <HAL_Relay_ACT+0x30>
		MCAL_GPIO_WritePin(gpio, GPIO_PIN_NUM, GPIO_PIN_LOW);
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f001 fd3e 	bl	8002e5c <MCAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <case_insensitive_strcmp+0x16>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	e05e      	b.n	80014c0 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d10d      	bne.n	8001426 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800140a:	2300      	movs	r3, #0
 800140c:	e058      	b.n	80014c0 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001416:	2300      	movs	r3, #0
 8001418:	e052      	b.n	80014c0 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3301      	adds	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	f004 ff1e 	bl	800626c <__locale_ctype_ptr>
 8001430:	4602      	mov	r2, r0
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3301      	adds	r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d103      	bne.n	800144a <case_insensitive_strcmp+0x62>
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	f103 0420 	add.w	r4, r3, #32
 8001448:	e000      	b.n	800144c <case_insensitive_strcmp+0x64>
 800144a:	7bfc      	ldrb	r4, [r7, #15]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	73bb      	strb	r3, [r7, #14]
 8001452:	f004 ff0b 	bl	800626c <__locale_ctype_ptr>
 8001456:	4602      	mov	r2, r0
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	3301      	adds	r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <case_insensitive_strcmp+0x86>
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	3320      	adds	r3, #32
 800146c:	e000      	b.n	8001470 <case_insensitive_strcmp+0x88>
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	429c      	cmp	r4, r3
 8001472:	d0cc      	beq.n	800140e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	737b      	strb	r3, [r7, #13]
 800147a:	f004 fef7 	bl	800626c <__locale_ctype_ptr>
 800147e:	4602      	mov	r2, r0
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	3301      	adds	r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d103      	bne.n	8001498 <case_insensitive_strcmp+0xb0>
 8001490:	7b7b      	ldrb	r3, [r7, #13]
 8001492:	f103 0420 	add.w	r4, r3, #32
 8001496:	e000      	b.n	800149a <case_insensitive_strcmp+0xb2>
 8001498:	7b7c      	ldrb	r4, [r7, #13]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	733b      	strb	r3, [r7, #12]
 80014a0:	f004 fee4 	bl	800626c <__locale_ctype_ptr>
 80014a4:	4602      	mov	r2, r0
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <case_insensitive_strcmp+0xd4>
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	3320      	adds	r3, #32
 80014ba:	e000      	b.n	80014be <case_insensitive_strcmp+0xd6>
 80014bc:	7b3b      	ldrb	r3, [r7, #12]
 80014be:	1ae3      	subs	r3, r4, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}

080014c8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2028      	movs	r0, #40	; 0x28
 80014d6:	4798      	blx	r3
 80014d8:	60f8      	str	r0, [r7, #12]
    if (node)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80014e0:	2228      	movs	r2, #40	; 0x28
 80014e2:	2100      	movs	r1, #0
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f004 fefc 	bl	80062e2 <memset>
    }

    return node;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001500:	e03d      	b.n	800157e <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <cJSON_Delete+0x32>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffe7 	bl	80014f4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <cJSON_Delete+0x58>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <cJSON_Delete+0x98>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6912      	ldr	r2, [r2, #16]
 8001542:	4610      	mov	r0, r2
 8001544:	4798      	blx	r3
            item->valuestring = NULL;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <cJSON_Delete+0x7e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <cJSON_Delete+0x98>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6a12      	ldr	r2, [r2, #32]
 8001568:	4610      	mov	r0, r2
 800156a:	4798      	blx	r3
            item->string = NULL;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <cJSON_Delete+0x98>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	4798      	blx	r3
        item = next;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1be      	bne.n	8001502 <cJSON_Delete+0xe>
    }
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000000 	.word	0x20000000

08001590 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001594:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b099      	sub	sp, #100	; 0x64
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f04f 0400 	mov.w	r4, #0
 80015b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80015ba:	f7ff ffe9 	bl	8001590 <get_decimal_point>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <parse_number+0x36>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <parse_number+0x3a>
    {
        return false;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e104      	b.n	80017e4 <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015de:	e09f      	b.n	8001720 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ea:	440b      	add	r3, r1
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3b2b      	subs	r3, #43	; 0x2b
 80015f2:	2b3a      	cmp	r3, #58	; 0x3a
 80015f4:	f200 80a4 	bhi.w	8001740 <parse_number+0x1a0>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <parse_number+0x60>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	080016ed 	.word	0x080016ed
 8001604:	08001741 	.word	0x08001741
 8001608:	080016ed 	.word	0x080016ed
 800160c:	0800170b 	.word	0x0800170b
 8001610:	08001741 	.word	0x08001741
 8001614:	080016ed 	.word	0x080016ed
 8001618:	080016ed 	.word	0x080016ed
 800161c:	080016ed 	.word	0x080016ed
 8001620:	080016ed 	.word	0x080016ed
 8001624:	080016ed 	.word	0x080016ed
 8001628:	080016ed 	.word	0x080016ed
 800162c:	080016ed 	.word	0x080016ed
 8001630:	080016ed 	.word	0x080016ed
 8001634:	080016ed 	.word	0x080016ed
 8001638:	080016ed 	.word	0x080016ed
 800163c:	08001741 	.word	0x08001741
 8001640:	08001741 	.word	0x08001741
 8001644:	08001741 	.word	0x08001741
 8001648:	08001741 	.word	0x08001741
 800164c:	08001741 	.word	0x08001741
 8001650:	08001741 	.word	0x08001741
 8001654:	08001741 	.word	0x08001741
 8001658:	08001741 	.word	0x08001741
 800165c:	08001741 	.word	0x08001741
 8001660:	08001741 	.word	0x08001741
 8001664:	08001741 	.word	0x08001741
 8001668:	080016ed 	.word	0x080016ed
 800166c:	08001741 	.word	0x08001741
 8001670:	08001741 	.word	0x08001741
 8001674:	08001741 	.word	0x08001741
 8001678:	08001741 	.word	0x08001741
 800167c:	08001741 	.word	0x08001741
 8001680:	08001741 	.word	0x08001741
 8001684:	08001741 	.word	0x08001741
 8001688:	08001741 	.word	0x08001741
 800168c:	08001741 	.word	0x08001741
 8001690:	08001741 	.word	0x08001741
 8001694:	08001741 	.word	0x08001741
 8001698:	08001741 	.word	0x08001741
 800169c:	08001741 	.word	0x08001741
 80016a0:	08001741 	.word	0x08001741
 80016a4:	08001741 	.word	0x08001741
 80016a8:	08001741 	.word	0x08001741
 80016ac:	08001741 	.word	0x08001741
 80016b0:	08001741 	.word	0x08001741
 80016b4:	08001741 	.word	0x08001741
 80016b8:	08001741 	.word	0x08001741
 80016bc:	08001741 	.word	0x08001741
 80016c0:	08001741 	.word	0x08001741
 80016c4:	08001741 	.word	0x08001741
 80016c8:	08001741 	.word	0x08001741
 80016cc:	08001741 	.word	0x08001741
 80016d0:	08001741 	.word	0x08001741
 80016d4:	08001741 	.word	0x08001741
 80016d8:	08001741 	.word	0x08001741
 80016dc:	08001741 	.word	0x08001741
 80016e0:	08001741 	.word	0x08001741
 80016e4:	08001741 	.word	0x08001741
 80016e8:	080016ed 	.word	0x080016ed
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6899      	ldr	r1, [r3, #8]
 80016f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f6:	440b      	add	r3, r1
 80016f8:	4413      	add	r3, r2
 80016fa:	7819      	ldrb	r1, [r3, #0]
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
                break;
 8001708:	e007      	b.n	800171a <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001710:	4413      	add	r3, r2
 8001712:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001716:	701a      	strb	r2, [r3, #0]
                break;
 8001718:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800171a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171c:	3301      	adds	r3, #1
 800171e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001722:	2b3e      	cmp	r3, #62	; 0x3e
 8001724:	d80e      	bhi.n	8001744 <parse_number+0x1a4>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00b      	beq.n	8001744 <parse_number+0x1a4>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001732:	441a      	add	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	f4ff af51 	bcc.w	80015e0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800173e:	e001      	b.n	8001744 <parse_number+0x1a4>
                goto loop_end;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <parse_number+0x1a6>
loop_end:
 8001744:	bf00      	nop
    number_c_string[i] = '\0';
 8001746:	f107 0208 	add.w	r2, r7, #8
 800174a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174c:	4413      	add	r3, r2
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001752:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f006 fa07 	bl	8007b70 <strtod>
 8001762:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8001766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	429a      	cmp	r2, r3
 800176e:	d101      	bne.n	8001774 <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001770:	2300      	movs	r3, #0
 8001772:	e037      	b.n	80017e4 <parse_number+0x244>
    }

    item->valuedouble = number;
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800177a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800177e:	a31c      	add	r3, pc, #112	; (adr r3, 80017f0 <parse_number+0x250>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001788:	f7ff f946 	bl	8000a18 <__aeabi_dcmpge>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001798:	615a      	str	r2, [r3, #20]
 800179a:	e015      	b.n	80017c8 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <parse_number+0x258>)
 80017a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017a6:	f7ff f92d 	bl	8000a04 <__aeabi_dcmple>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	e006      	b.n	80017c8 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 80017ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017be:	f7ff f955 	bl	8000a6c <__aeabi_d2iz>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2208      	movs	r2, #8
 80017cc:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017d4:	4611      	mov	r1, r2
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	1a8a      	subs	r2, r1, r2
 80017dc:	441a      	add	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	609a      	str	r2, [r3, #8]
    return true;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3764      	adds	r7, #100	; 0x64
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}
 80017ec:	f3af 8000 	nop.w
 80017f0:	ffc00000 	.word	0xffc00000
 80017f4:	41dfffff 	.word	0x41dfffff
 80017f8:	c1e00000 	.word	0xc1e00000

080017fc <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	e04c      	b.n	80018ac <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b2f      	cmp	r3, #47	; 0x2f
 800181c:	d90f      	bls.n	800183e <parse_hex4+0x42>
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b39      	cmp	r3, #57	; 0x39
 8001828:	d809      	bhi.n	800183e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	3b30      	subs	r3, #48	; 0x30
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e02d      	b.n	800189a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b40      	cmp	r3, #64	; 0x40
 8001848:	d90f      	bls.n	800186a <parse_hex4+0x6e>
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b46      	cmp	r3, #70	; 0x46
 8001854:	d809      	bhi.n	800186a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	3b37      	subs	r3, #55	; 0x37
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e017      	b.n	800189a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b60      	cmp	r3, #96	; 0x60
 8001874:	d90f      	bls.n	8001896 <parse_hex4+0x9a>
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b66      	cmp	r3, #102	; 0x66
 8001880:	d809      	bhi.n	8001896 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	3b57      	subs	r3, #87	; 0x57
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e001      	b.n	800189a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001896:	2300      	movs	r3, #0
 8001898:	e00c      	b.n	80018b4 <parse_hex4+0xb8>
        }

        if (i < 3)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d802      	bhi.n	80018a6 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3301      	adds	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d9af      	bls.n	8001812 <parse_hex4+0x16>
        }
    }

    return h;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
	...

080018c0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	f340 80b7 	ble.w	8001a6a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	3302      	adds	r3, #2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff7b 	bl	80017fc <parse_hex4>
 8001906:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800190e:	d304      	bcc.n	800191a <utf16_literal_to_utf8+0x5a>
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001916:	f0c0 80aa 	bcc.w	8001a6e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001920:	d337      	bcc.n	8001992 <utf16_literal_to_utf8+0xd2>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001928:	d233      	bcs.n	8001992 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3306      	adds	r3, #6
 800192e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001934:	230c      	movs	r3, #12
 8001936:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b05      	cmp	r3, #5
 8001942:	f340 8096 	ble.w	8001a72 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b5c      	cmp	r3, #92	; 0x5c
 800194c:	f040 8093 	bne.w	8001a76 <utf16_literal_to_utf8+0x1b6>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b75      	cmp	r3, #117	; 0x75
 8001958:	f040 808d 	bne.w	8001a76 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3302      	adds	r3, #2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff4b 	bl	80017fc <parse_hex4>
 8001966:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800196e:	f0c0 8082 	bcc.w	8001a76 <utf16_literal_to_utf8+0x1b6>
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001978:	d27d      	bcs.n	8001a76 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	029a      	lsls	r2, r3, #10
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <utf16_literal_to_utf8+0x1c8>)
 8001980:	4013      	ands	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001988:	4313      	orrs	r3, r2
 800198a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001990:	e004      	b.n	800199c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001992:	2306      	movs	r3, #6
 8001994:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	2b7f      	cmp	r3, #127	; 0x7f
 80019a0:	d803      	bhi.n	80019aa <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019a8:	e01f      	b.n	80019ea <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b0:	d206      	bcs.n	80019c0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80019b8:	23c0      	movs	r3, #192	; 0xc0
 80019ba:	f887 3020 	strb.w	r3, [r7, #32]
 80019be:	e014      	b.n	80019ea <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d206      	bcs.n	80019d6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80019ce:	23e0      	movs	r3, #224	; 0xe0
 80019d0:	f887 3020 	strb.w	r3, [r7, #32]
 80019d4:	e009      	b.n	80019ea <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019dc:	d24d      	bcs.n	8001a7a <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019de:	2304      	movs	r3, #4
 80019e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019e4:	23f0      	movs	r3, #240	; 0xf0
 80019e6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019f4:	e015      	b.n	8001a22 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a08:	440b      	add	r3, r1
 8001a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001a18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e5      	bne.n	80019f6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d909      	bls.n	8001a46 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a5e:	441a      	add	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a68:	e009      	b.n	8001a7e <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001a6a:	bf00      	nop
 8001a6c:	e006      	b.n	8001a7c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <utf16_literal_to_utf8+0x1bc>

fail:
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a7a:	bf00      	nop
    return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	000ffc00 	.word	0x000ffc00

08001a8c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b22      	cmp	r3, #34	; 0x22
 8001ac8:	f040 816c 	bne.w	8001da4 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ad4:	e018      	b.n	8001b08 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b5c      	cmp	r3, #92	; 0x5c
 8001adc:	d111      	bne.n	8001b02 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f080 8159 	bcs.w	8001da8 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	3301      	adds	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	3301      	adds	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d203      	bcs.n	8001b22 <parse_string+0x96>
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b22      	cmp	r3, #34	; 0x22
 8001b20:	d1d9      	bne.n	8001ad6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f080 813b 	bcs.w	8001dac <parse_string+0x320>
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b22      	cmp	r3, #34	; 0x22
 8001b3c:	f040 8136 	bne.w	8001dac <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6892      	ldr	r2, [r2, #8]
 8001b4a:	440a      	add	r2, r1
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	3201      	adds	r2, #1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4798      	blx	r3
 8001b62:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8122 	beq.w	8001db0 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b70:	e0fc      	b.n	8001d6c <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b5c      	cmp	r3, #92	; 0x5c
 8001b78:	d008      	beq.n	8001b8c <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	1c53      	adds	r3, r2, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1c59      	adds	r1, r3, #1
 8001b84:	60f9      	str	r1, [r7, #12]
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e0ef      	b.n	8001d6c <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f340 810c 	ble.w	8001db4 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	3b22      	subs	r3, #34	; 0x22
 8001ba4:	2b53      	cmp	r3, #83	; 0x53
 8001ba6:	f200 8107 	bhi.w	8001db8 <parse_string+0x32c>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <parse_string+0x124>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001d3d 	.word	0x08001d3d
 8001bb4:	08001db9 	.word	0x08001db9
 8001bb8:	08001db9 	.word	0x08001db9
 8001bbc:	08001db9 	.word	0x08001db9
 8001bc0:	08001db9 	.word	0x08001db9
 8001bc4:	08001db9 	.word	0x08001db9
 8001bc8:	08001db9 	.word	0x08001db9
 8001bcc:	08001db9 	.word	0x08001db9
 8001bd0:	08001db9 	.word	0x08001db9
 8001bd4:	08001db9 	.word	0x08001db9
 8001bd8:	08001db9 	.word	0x08001db9
 8001bdc:	08001db9 	.word	0x08001db9
 8001be0:	08001db9 	.word	0x08001db9
 8001be4:	08001d3d 	.word	0x08001d3d
 8001be8:	08001db9 	.word	0x08001db9
 8001bec:	08001db9 	.word	0x08001db9
 8001bf0:	08001db9 	.word	0x08001db9
 8001bf4:	08001db9 	.word	0x08001db9
 8001bf8:	08001db9 	.word	0x08001db9
 8001bfc:	08001db9 	.word	0x08001db9
 8001c00:	08001db9 	.word	0x08001db9
 8001c04:	08001db9 	.word	0x08001db9
 8001c08:	08001db9 	.word	0x08001db9
 8001c0c:	08001db9 	.word	0x08001db9
 8001c10:	08001db9 	.word	0x08001db9
 8001c14:	08001db9 	.word	0x08001db9
 8001c18:	08001db9 	.word	0x08001db9
 8001c1c:	08001db9 	.word	0x08001db9
 8001c20:	08001db9 	.word	0x08001db9
 8001c24:	08001db9 	.word	0x08001db9
 8001c28:	08001db9 	.word	0x08001db9
 8001c2c:	08001db9 	.word	0x08001db9
 8001c30:	08001db9 	.word	0x08001db9
 8001c34:	08001db9 	.word	0x08001db9
 8001c38:	08001db9 	.word	0x08001db9
 8001c3c:	08001db9 	.word	0x08001db9
 8001c40:	08001db9 	.word	0x08001db9
 8001c44:	08001db9 	.word	0x08001db9
 8001c48:	08001db9 	.word	0x08001db9
 8001c4c:	08001db9 	.word	0x08001db9
 8001c50:	08001db9 	.word	0x08001db9
 8001c54:	08001db9 	.word	0x08001db9
 8001c58:	08001db9 	.word	0x08001db9
 8001c5c:	08001db9 	.word	0x08001db9
 8001c60:	08001db9 	.word	0x08001db9
 8001c64:	08001db9 	.word	0x08001db9
 8001c68:	08001db9 	.word	0x08001db9
 8001c6c:	08001db9 	.word	0x08001db9
 8001c70:	08001db9 	.word	0x08001db9
 8001c74:	08001db9 	.word	0x08001db9
 8001c78:	08001db9 	.word	0x08001db9
 8001c7c:	08001db9 	.word	0x08001db9
 8001c80:	08001db9 	.word	0x08001db9
 8001c84:	08001db9 	.word	0x08001db9
 8001c88:	08001db9 	.word	0x08001db9
 8001c8c:	08001db9 	.word	0x08001db9
 8001c90:	08001db9 	.word	0x08001db9
 8001c94:	08001db9 	.word	0x08001db9
 8001c98:	08001d3d 	.word	0x08001d3d
 8001c9c:	08001db9 	.word	0x08001db9
 8001ca0:	08001db9 	.word	0x08001db9
 8001ca4:	08001db9 	.word	0x08001db9
 8001ca8:	08001db9 	.word	0x08001db9
 8001cac:	08001db9 	.word	0x08001db9
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001db9 	.word	0x08001db9
 8001cb8:	08001db9 	.word	0x08001db9
 8001cbc:	08001db9 	.word	0x08001db9
 8001cc0:	08001d0d 	.word	0x08001d0d
 8001cc4:	08001db9 	.word	0x08001db9
 8001cc8:	08001db9 	.word	0x08001db9
 8001ccc:	08001db9 	.word	0x08001db9
 8001cd0:	08001db9 	.word	0x08001db9
 8001cd4:	08001db9 	.word	0x08001db9
 8001cd8:	08001db9 	.word	0x08001db9
 8001cdc:	08001db9 	.word	0x08001db9
 8001ce0:	08001d19 	.word	0x08001d19
 8001ce4:	08001db9 	.word	0x08001db9
 8001ce8:	08001db9 	.word	0x08001db9
 8001cec:	08001db9 	.word	0x08001db9
 8001cf0:	08001d25 	.word	0x08001d25
 8001cf4:	08001db9 	.word	0x08001db9
 8001cf8:	08001d31 	.word	0x08001d31
 8001cfc:	08001d4b 	.word	0x08001d4b
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60fa      	str	r2, [r7, #12]
 8001d06:	2208      	movs	r2, #8
 8001d08:	701a      	strb	r2, [r3, #0]
                    break;
 8001d0a:	e02b      	b.n	8001d64 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	60fa      	str	r2, [r7, #12]
 8001d12:	220c      	movs	r2, #12
 8001d14:	701a      	strb	r2, [r3, #0]
                    break;
 8001d16:	e025      	b.n	8001d64 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60fa      	str	r2, [r7, #12]
 8001d1e:	220a      	movs	r2, #10
 8001d20:	701a      	strb	r2, [r3, #0]
                    break;
 8001d22:	e01f      	b.n	8001d64 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60fa      	str	r2, [r7, #12]
 8001d2a:	220d      	movs	r2, #13
 8001d2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d2e:	e019      	b.n	8001d64 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60fa      	str	r2, [r7, #12]
 8001d36:	2209      	movs	r2, #9
 8001d38:	701a      	strb	r2, [r3, #0]
                    break;
 8001d3a:	e013      	b.n	8001d64 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60fa      	str	r2, [r7, #12]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	7852      	ldrb	r2, [r2, #1]
 8001d46:	701a      	strb	r2, [r3, #0]
                    break;
 8001d48:	e00c      	b.n	8001d64 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d54:	f7ff fdb4 	bl	80018c0 <utf16_literal_to_utf8>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d02c      	beq.n	8001dbc <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001d62:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	4413      	add	r3, r2
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f4ff aefe 	bcc.w	8001b72 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2210      	movs	r2, #16
 8001d80:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	609a      	str	r2, [r3, #8]

    return true;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e020      	b.n	8001de6 <parse_string+0x35a>
        goto fail;
 8001da4:	bf00      	nop
 8001da6:	e00a      	b.n	8001dbe <parse_string+0x332>
                    goto fail;
 8001da8:	bf00      	nop
 8001daa:	e008      	b.n	8001dbe <parse_string+0x332>

fail:
 8001dac:	bf00      	nop
 8001dae:	e006      	b.n	8001dbe <parse_string+0x332>
            goto fail; /* allocation failure */
 8001db0:	bf00      	nop
 8001db2:	e004      	b.n	8001dbe <parse_string+0x332>
                goto fail;
 8001db4:	bf00      	nop
 8001db6:	e002      	b.n	8001dbe <parse_string+0x332>
                    goto fail;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <parse_string+0x332>
                        goto fail;
 8001dbc:	bf00      	nop
    if (output != NULL)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <parse_string+0x344>
    {
        input_buffer->hooks.deallocate(output);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	69f8      	ldr	r0, [r7, #28]
 8001dca:	4798      	blx	r3
        output = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <parse_string+0x358>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop

08001df0 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <buffer_skip_whitespace+0x16>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e02c      	b.n	8001e64 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <buffer_skip_whitespace+0x2c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d306      	bcc.n	8001e2a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	e021      	b.n	8001e64 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <buffer_skip_whitespace+0x5c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <buffer_skip_whitespace+0x5c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d9e9      	bls.n	8001e20 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d104      	bne.n	8001e62 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <skip_utf8_bom+0x1e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <skip_utf8_bom+0x1e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e01c      	b.n	8001ecc <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d018      	beq.n	8001eca <skip_utf8_bom+0x5a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	1d1a      	adds	r2, r3, #4
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d211      	bcs.n	8001eca <skip_utf8_bom+0x5a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4413      	add	r3, r2
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <skip_utf8_bom+0x64>)
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 f826 	bl	8006f06 <strncmp>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d104      	bne.n	8001eca <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	1cda      	adds	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	0800add8 	.word	0x0800add8

08001ed8 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e00c      	b.n	8001f08 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7fe f948 	bl	8000184 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f805 	bl	8001f10 <cJSON_ParseWithLengthOpts>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <cJSON_ParseWithLengthOpts+0x128>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <cJSON_ParseWithLengthOpts+0x128>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d042      	beq.n	8001fce <cJSON_ParseWithLengthOpts+0xbe>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d03f      	beq.n	8001fce <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001f5a:	4a38      	ldr	r2, [pc, #224]	; (800203c <cJSON_ParseWithLengthOpts+0x12c>)
 8001f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f62:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f66:	4835      	ldr	r0, [pc, #212]	; (800203c <cJSON_ParseWithLengthOpts+0x12c>)
 8001f68:	f7ff faae 	bl	80014c8 <cJSON_New_Item>
 8001f6c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d02e      	beq.n	8001fd2 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff79 	bl	8001e70 <skip_utf8_bom>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff35 	bl	8001df0 <buffer_skip_whitespace>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f8c:	f000 f866 	bl	800205c <parse_value>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01f      	beq.n	8001fd6 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff25 	bl	8001df0 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20f      	bcs.n	8001fce <cJSON_ParseWithLengthOpts+0xbe>
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fcc:	e02f      	b.n	800202e <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001fce:	bf00      	nop
 8001fd0:	e002      	b.n	8001fd8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001fd6:	bf00      	nop
    if (item != NULL)
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001fde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fe0:	f7ff fa88 	bl	80014f4 <cJSON_Delete>
    }

    if (value != NULL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d202      	bcs.n	8002000 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e005      	b.n	800200c <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b01      	subs	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	441a      	add	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <cJSON_ParseWithLengthOpts+0x128>)
 800201e:	461a      	mov	r2, r3
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002028:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3738      	adds	r7, #56	; 0x38
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000208 	.word	0x20000208
 800203c:	20000000 	.word	0x20000000

08002040 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff43 	bl	8001ed8 <cJSON_ParseWithOpts>
 8002052:	4603      	mov	r3, r0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <parse_value+0x18>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <parse_value+0x1c>
    {
        return false; /* no input */
 8002074:	2300      	movs	r3, #0
 8002076:	e0d2      	b.n	800221e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01d      	beq.n	80020ba <parse_value+0x5e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	d816      	bhi.n	80020ba <parse_value+0x5e>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4413      	add	r3, r2
 8002096:	2204      	movs	r2, #4
 8002098:	4963      	ldr	r1, [pc, #396]	; (8002228 <parse_value+0x1cc>)
 800209a:	4618      	mov	r0, r3
 800209c:	f004 ff33 	bl	8006f06 <strncmp>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	1d1a      	adds	r2, r3, #4
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	609a      	str	r2, [r3, #8]
        return true;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0b1      	b.n	800221e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01d      	beq.n	80020fc <parse_value+0xa0>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	1d5a      	adds	r2, r3, #5
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d816      	bhi.n	80020fc <parse_value+0xa0>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4413      	add	r3, r2
 80020d8:	2205      	movs	r2, #5
 80020da:	4954      	ldr	r1, [pc, #336]	; (800222c <parse_value+0x1d0>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 ff12 	bl	8006f06 <strncmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d109      	bne.n	80020fc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	1d5a      	adds	r2, r3, #5
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	609a      	str	r2, [r3, #8]
        return true;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e090      	b.n	800221e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d020      	beq.n	8002144 <parse_value+0xe8>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	1d1a      	adds	r2, r3, #4
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d819      	bhi.n	8002144 <parse_value+0xe8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	4413      	add	r3, r2
 800211a:	2204      	movs	r2, #4
 800211c:	4944      	ldr	r1, [pc, #272]	; (8002230 <parse_value+0x1d4>)
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fef1 	bl	8006f06 <strncmp>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	1d1a      	adds	r2, r3, #4
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
        return true;
 8002140:	2301      	movs	r3, #1
 8002142:	e06c      	b.n	800221e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d013      	beq.n	8002172 <parse_value+0x116>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d20d      	bcs.n	8002172 <parse_value+0x116>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b22      	cmp	r3, #34	; 0x22
 8002164:	d105      	bne.n	8002172 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fc8f 	bl	8001a8c <parse_string>
 800216e:	4603      	mov	r3, r0
 8002170:	e055      	b.n	800221e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d023      	beq.n	80021c0 <parse_value+0x164>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d21d      	bcs.n	80021c0 <parse_value+0x164>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b2d      	cmp	r3, #45	; 0x2d
 8002192:	d00f      	beq.n	80021b4 <parse_value+0x158>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b2f      	cmp	r3, #47	; 0x2f
 80021a2:	d90d      	bls.n	80021c0 <parse_value+0x164>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b39      	cmp	r3, #57	; 0x39
 80021b2:	d805      	bhi.n	80021c0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff f9f2 	bl	80015a0 <parse_number>
 80021bc:	4603      	mov	r3, r0
 80021be:	e02e      	b.n	800221e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d013      	beq.n	80021ee <parse_value+0x192>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d20d      	bcs.n	80021ee <parse_value+0x192>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b5b      	cmp	r3, #91	; 0x5b
 80021e0:	d105      	bne.n	80021ee <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f825 	bl	8002234 <parse_array>
 80021ea:	4603      	mov	r3, r0
 80021ec:	e017      	b.n	800221e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <parse_value+0x1c0>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d20d      	bcs.n	800221c <parse_value+0x1c0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b7b      	cmp	r3, #123	; 0x7b
 800220e:	d105      	bne.n	800221c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8d2 	bl	80023bc <parse_object>
 8002218:	4603      	mov	r3, r0
 800221a:	e000      	b.n	800221e <parse_value+0x1c2>
    }

    return false;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800adac 	.word	0x0800adac
 800222c:	0800addc 	.word	0x0800addc
 8002230:	0800ade4 	.word	0x0800ade4

08002234 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224e:	d301      	bcc.n	8002254 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002250:	2300      	movs	r3, #0
 8002252:	e0af      	b.n	80023b4 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b5b      	cmp	r3, #91	; 0x5b
 800226c:	f040 8094 	bne.w	8002398 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	f7ff fdb8 	bl	8001df0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <parse_array+0x6e>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d207      	bcs.n	80022a2 <parse_array+0x6e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b5d      	cmp	r3, #93	; 0x5d
 80022a0:	d061      	beq.n	8002366 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <parse_array+0x80>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d305      	bcc.n	80022c0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	609a      	str	r2, [r3, #8]
        goto fail;
 80022be:	e072      	b.n	80023a6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3310      	adds	r3, #16
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f8fa 	bl	80014c8 <cJSON_New_Item>
 80022d4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d05f      	beq.n	800239c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e007      	b.n	80022fc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f7ff fd72 	bl	8001df0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	6938      	ldr	r0, [r7, #16]
 8002310:	f7ff fea4 	bl	800205c <parse_value>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d042      	beq.n	80023a0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f7ff fd68 	bl	8001df0 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <parse_array+0x10e>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d207      	bcs.n	8002342 <parse_array+0x10e>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b2c      	cmp	r3, #44	; 0x2c
 8002340:	d0c3      	beq.n	80022ca <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02d      	beq.n	80023a4 <parse_array+0x170>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d227      	bcs.n	80023a4 <parse_array+0x170>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b5d      	cmp	r3, #93	; 0x5d
 8002362:	d11f      	bne.n	80023a4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002364:	e000      	b.n	8002368 <parse_array+0x134>
        goto success;
 8002366:	bf00      	nop
    input_buffer->depth--;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <parse_array+0x14a>
        head->prev = current_item;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	609a      	str	r2, [r3, #8]

    return true;
 8002394:	2301      	movs	r3, #1
 8002396:	e00d      	b.n	80023b4 <parse_array+0x180>
        goto fail;
 8002398:	bf00      	nop
 800239a:	e004      	b.n	80023a6 <parse_array+0x172>
            goto fail; /* allocation failure */
 800239c:	bf00      	nop
 800239e:	e002      	b.n	80023a6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <parse_array+0x172>

fail:
 80023a4:	bf00      	nop
    if (head != NULL)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f7ff f8a1 	bl	80014f4 <cJSON_Delete>
    }

    return false;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d6:	d301      	bcc.n	80023dc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80023d8:	2300      	movs	r3, #0
 80023da:	e0f0      	b.n	80025be <parse_object+0x202>
    }
    input_buffer->depth++;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80da 	beq.w	80025a2 <parse_object+0x1e6>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	f080 80d3 	bcs.w	80025a2 <parse_object+0x1e6>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4413      	add	r3, r2
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b7b      	cmp	r3, #123	; 0x7b
 800240a:	f040 80ca 	bne.w	80025a2 <parse_object+0x1e6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f7ff fce9 	bl	8001df0 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <parse_object+0x86>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d208      	bcs.n	8002442 <parse_object+0x86>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b7d      	cmp	r3, #125	; 0x7d
 800243e:	f000 8097 	beq.w	8002570 <parse_object+0x1b4>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <parse_object+0x98>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d305      	bcc.n	8002460 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	609a      	str	r2, [r3, #8]
        goto fail;
 800245e:	e0a7      	b.n	80025b0 <parse_object+0x1f4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	3310      	adds	r3, #16
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f82a 	bl	80014c8 <cJSON_New_Item>
 8002474:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8094 	beq.w	80025a6 <parse_object+0x1ea>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e007      	b.n	800249e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d07e      	beq.n	80025a2 <parse_object+0x1e6>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d277      	bcs.n	80025a2 <parse_object+0x1e6>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f7ff fc97 	bl	8001df0 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	6938      	ldr	r0, [r7, #16]
 80024c6:	f7ff fae1 	bl	8001a8c <parse_string>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d06c      	beq.n	80025aa <parse_object+0x1ee>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f7ff fc8d 	bl	8001df0 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d05b      	beq.n	80025a2 <parse_object+0x1e6>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d255      	bcs.n	80025a2 <parse_object+0x1e6>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b3a      	cmp	r3, #58	; 0x3a
 8002504:	d14d      	bne.n	80025a2 <parse_object+0x1e6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002510:	6838      	ldr	r0, [r7, #0]
 8002512:	f7ff fc6d 	bl	8001df0 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	6938      	ldr	r0, [r7, #16]
 800251a:	f7ff fd9f 	bl	800205c <parse_value>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d044      	beq.n	80025ae <parse_object+0x1f2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	f7ff fc63 	bl	8001df0 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <parse_object+0x190>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d207      	bcs.n	800254c <parse_object+0x190>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b2c      	cmp	r3, #44	; 0x2c
 800254a:	d08e      	beq.n	800246a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d027      	beq.n	80025a2 <parse_object+0x1e6>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d221      	bcs.n	80025a2 <parse_object+0x1e6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b7d      	cmp	r3, #125	; 0x7d
 800256c:	d119      	bne.n	80025a2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800256e:	e000      	b.n	8002572 <parse_object+0x1b6>
        goto success; /* empty object */
 8002570:	bf00      	nop
    input_buffer->depth--;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <parse_object+0x1cc>
        head->prev = current_item;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	60da      	str	r2, [r3, #12]
    item->child = head;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	609a      	str	r2, [r3, #8]
    return true;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00d      	b.n	80025be <parse_object+0x202>

fail:
 80025a2:	bf00      	nop
 80025a4:	e004      	b.n	80025b0 <parse_object+0x1f4>
            goto fail; /* allocation failure */
 80025a6:	bf00      	nop
 80025a8:	e002      	b.n	80025b0 <parse_object+0x1f4>
            goto fail; /* failed to parse name */
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <parse_object+0x1f4>
            goto fail; /* failed to parse value */
 80025ae:	bf00      	nop
    if (head != NULL)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <parse_object+0x200>
    {
        cJSON_Delete(head);
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7fe ff9c 	bl	80014f4 <cJSON_Delete>
    }

    return false;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <get_object_item+0x1c>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <get_object_item+0x20>
    {
        return NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e033      	b.n	800264e <get_object_item+0x88>
    }

    current_element = object->child;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80025f2:	e002      	b.n	80025fa <get_object_item+0x34>
        {
            current_element = current_element->next;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01c      	beq.n	800263a <get_object_item+0x74>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d018      	beq.n	800263a <get_object_item+0x74>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4619      	mov	r1, r3
 800260e:	68b8      	ldr	r0, [r7, #8]
 8002610:	f7fd fdae 	bl	8000170 <strcmp>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ec      	bne.n	80025f4 <get_object_item+0x2e>
 800261a:	e00e      	b.n	800263a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <get_object_item+0x74>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4619      	mov	r1, r3
 800262e:	68b8      	ldr	r0, [r7, #8]
 8002630:	f7fe feda 	bl	80013e8 <case_insensitive_strcmp>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <get_object_item+0x82>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <get_object_item+0x86>
        return NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	e000      	b.n	800264e <get_object_item+0x88>
    }

    return current_element;
 800264c:	697b      	ldr	r3, [r7, #20]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002660:	2201      	movs	r2, #1
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffae 	bl	80025c6 <get_object_item>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <cJSON_IsNull>:
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
}
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <cJSON_IsNull+0x12>
    {
        return false;
 8002682:	2300      	movs	r3, #0
 8002684:	e007      	b.n	8002696 <cJSON_IsNull+0x22>
    }

    return (item->type & 0xFF) == cJSON_NULL;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b04      	cmp	r3, #4
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <cJSON_IsString+0x12>
    {
        return false;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e007      	b.n	80026c2 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <Parse_Command>:

    cJSON_Delete(json);
}


void Parse_Command(const char *json_msg, COMMAND_TYPE* currCommand) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    cJSON *root = cJSON_Parse(json_msg);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fcb2 	bl	8002040 <cJSON_Parse>
 80026dc:	61b8      	str	r0, [r7, #24]
    if (!root) {
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <Parse_Command+0x20>
        printf("Error: JSON Parse Failed\r\n");
 80026e4:	4838      	ldr	r0, [pc, #224]	; (80027c8 <Parse_Command+0xfc>)
 80026e6:	f004 fb57 	bl	8006d98 <puts>
        return;
 80026ea:	e06a      	b.n	80027c2 <Parse_Command+0xf6>
    }

    cJSON *command = cJSON_GetObjectItemCaseSensitive(root, "command");
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <Parse_Command+0x100>)
 80026ee:	69b8      	ldr	r0, [r7, #24]
 80026f0:	f7ff ffb1 	bl	8002656 <cJSON_GetObjectItemCaseSensitive>
 80026f4:	6178      	str	r0, [r7, #20]
    cJSON *nodeID = cJSON_GetObjectItemCaseSensitive(root, "nodeID");
 80026f6:	4936      	ldr	r1, [pc, #216]	; (80027d0 <Parse_Command+0x104>)
 80026f8:	69b8      	ldr	r0, [r7, #24]
 80026fa:	f7ff ffac 	bl	8002656 <cJSON_GetObjectItemCaseSensitive>
 80026fe:	6138      	str	r0, [r7, #16]
    cJSON *data = cJSON_GetObjectItemCaseSensitive(root, "data");
 8002700:	4934      	ldr	r1, [pc, #208]	; (80027d4 <Parse_Command+0x108>)
 8002702:	69b8      	ldr	r0, [r7, #24]
 8002704:	f7ff ffa7 	bl	8002656 <cJSON_GetObjectItemCaseSensitive>
 8002708:	60f8      	str	r0, [r7, #12]

    if(cJSON_IsString(command)  && cJSON_IsString(nodeID)){
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ffc8 	bl	80026a0 <cJSON_IsString>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02f      	beq.n	8002776 <Parse_Command+0xaa>
 8002716:	6938      	ldr	r0, [r7, #16]
 8002718:	f7ff ffc2 	bl	80026a0 <cJSON_IsString>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d029      	beq.n	8002776 <Parse_Command+0xaa>
        //MCAL_UART_SendData(UART1, (uint8_t*)command, 3, enable);

    	strcpy(currCommand->cmd, command->valuestring);
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f004 fbe3 	bl	8006ef6 <strcpy>
    	strcpy(currCommand->nodeID, nodeID->valuestring);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	1d5a      	adds	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f004 fbdb 	bl	8006ef6 <strcpy>
    	if(cJSON_IsNull(data) || !data){
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff ff97 	bl	8002674 <cJSON_IsNull>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <Parse_Command+0x86>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <Parse_Command+0x96>
    		strcpy(currCommand->data, "null");
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	330a      	adds	r3, #10
 8002756:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <Parse_Command+0x10c>)
 8002758:	6810      	ldr	r0, [r2, #0]
 800275a:	6018      	str	r0, [r3, #0]
 800275c:	7912      	ldrb	r2, [r2, #4]
 800275e:	711a      	strb	r2, [r3, #4]
    	if(cJSON_IsNull(data) || !data){
 8002760:	e02c      	b.n	80027bc <Parse_Command+0xf0>
    	}else{
    		strcpy(currCommand->data, data->valuestring);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f103 020a 	add.w	r2, r3, #10
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f004 fbc1 	bl	8006ef6 <strcpy>
    	if(cJSON_IsNull(data) || !data){
 8002774:	e022      	b.n	80027bc <Parse_Command+0xf0>
    	}
    }else{
		char *buffer = "\r\nError: DATA INVALID!\r\n";
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <Parse_Command+0x110>)
 8002778:	60bb      	str	r3, [r7, #8]
		//MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
		for(int i = 0; i < strlen(buffer); i++)
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e00b      	b.n	8002798 <Parse_Command+0xcc>
			UART_Send_SingelChar(UART1, buffer[i], enable);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	4619      	mov	r1, r3
 800278c:	4814      	ldr	r0, [pc, #80]	; (80027e0 <Parse_Command+0x114>)
 800278e:	f000 fd11 	bl	80031b4 <UART_Send_SingelChar>
		for(int i = 0; i < strlen(buffer); i++)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	68b8      	ldr	r0, [r7, #8]
 800279a:	f7fd fcf3 	bl	8000184 <strlen>
 800279e:	4602      	mov	r2, r0
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d8ec      	bhi.n	8002780 <Parse_Command+0xb4>
		strcpy(currCommand->cmd, "");
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
		strcpy(currCommand->nodeID, "");
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3305      	adds	r3, #5
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		strcpy(currCommand->data, "");
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	330a      	adds	r3, #10
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    }

    cJSON_Delete(root);
 80027bc:	69b8      	ldr	r0, [r7, #24]
 80027be:	f7fe fe99 	bl	80014f4 <cJSON_Delete>
}
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	0800ae14 	.word	0x0800ae14
 80027cc:	0800ae30 	.word	0x0800ae30
 80027d0:	0800ae38 	.word	0x0800ae38
 80027d4:	0800ae40 	.word	0x0800ae40
 80027d8:	0800ae48 	.word	0x0800ae48
 80027dc:	0800ae50 	.word	0x0800ae50
 80027e0:	40013800 	.word	0x40013800

080027e4 <Validate_JSON_Format>:

int Validate_JSON_Format(const char *json_msg) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    cJSON *root = cJSON_Parse(json_msg);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc27 	bl	8002040 <cJSON_Parse>
 80027f2:	6138      	str	r0, [r7, #16]
    if (!root) {
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d119      	bne.n	800282e <Validate_JSON_Format+0x4a>
        char* buffer = "\r\nError: Invalid JSON format!\r\n";
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <Validate_JSON_Format+0x5c>)
 80027fc:	60fb      	str	r3, [r7, #12]
		//MCAL_UART_SendData(UART1, (uint8_t*)buffer, strlen(buffer), enable);
        for(int i = 0; i < strlen(buffer); i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e00b      	b.n	800281c <Validate_JSON_Format+0x38>
        	UART_Send_SingelChar(UART1, buffer[i], enable);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <Validate_JSON_Format+0x60>)
 8002812:	f000 fccf 	bl	80031b4 <UART_Send_SingelChar>
        for(int i = 0; i < strlen(buffer); i++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7fd fcb1 	bl	8000184 <strlen>
 8002822:	4602      	mov	r2, r0
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	429a      	cmp	r2, r3
 8002828:	d8ec      	bhi.n	8002804 <Validate_JSON_Format+0x20>
        return 0;
 800282a:	2300      	movs	r3, #0
 800282c:	e003      	b.n	8002836 <Validate_JSON_Format+0x52>
    }
    cJSON_Delete(root);
 800282e:	6938      	ldr	r0, [r7, #16]
 8002830:	f7fe fe60 	bl	80014f4 <cJSON_Delete>
    return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	0800ae6c 	.word	0x0800ae6c
 8002844:	40013800 	.word	0x40013800

08002848 <ADC_Init>:
/*
 * Function Description: This function is used to initialize ADC1
 * 						 With two channels 0 and 1.
 *
 */
void ADC_Init(ADC_TYPE_DEF* ADC , ADC_Config_t* ADCCfg, uint16_t GPIO_PIN_NUM) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
    // Enable clocks for ADC and GPIO
    RCC_GPIOA_CLk_EN();
 8002856:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <ADC_Init+0x138>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a49      	ldr	r2, [pc, #292]	; (8002980 <ADC_Init+0x138>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6193      	str	r3, [r2, #24]
    if(ADC == ADC1){
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a47      	ldr	r2, [pc, #284]	; (8002984 <ADC_Init+0x13c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d106      	bne.n	8002878 <ADC_Init+0x30>
    	RCC_ADC1_CLK_EN();
 800286a:	4b45      	ldr	r3, [pc, #276]	; (8002980 <ADC_Init+0x138>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4a44      	ldr	r2, [pc, #272]	; (8002980 <ADC_Init+0x138>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6193      	str	r3, [r2, #24]
 8002876:	e009      	b.n	800288c <ADC_Init+0x44>
    }else if(ADC == ADC2){
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a43      	ldr	r2, [pc, #268]	; (8002988 <ADC_Init+0x140>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d105      	bne.n	800288c <ADC_Init+0x44>
    	RCC_ADC2_CLK_EN();
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <ADC_Init+0x138>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a3e      	ldr	r2, [pc, #248]	; (8002980 <ADC_Init+0x138>)
 8002886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288a:	6193      	str	r3, [r2, #24]
    }

    GPIO_PinConfig_t gpioCfg;
    gpioCfg.GPIO_MODE = GPIO_MODE_ANALOG;
 800288c:	2300      	movs	r3, #0
 800288e:	74bb      	strb	r3, [r7, #18]
    gpioCfg.GPIO_PinNumber = GPIO_PIN_NUM;
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	823b      	strh	r3, [r7, #16]

    // Channel Pin Analog Mode Initilization.
    MCAL_GPIO_Init(GPIOA, &gpioCfg);
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	4619      	mov	r1, r3
 800289a:	483c      	ldr	r0, [pc, #240]	; (800298c <ADC_Init+0x144>)
 800289c:	f000 fa3f 	bl	8002d1e <MCAL_GPIO_Init>

    // Configure GPIO Pins PA0 and PA1 for analog input (reset to analog mode)
    GPIOA->CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <ADC_Init+0x144>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <ADC_Init+0x144>)
 80028a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028aa:	6013      	str	r3, [r2, #0]

    // Enable ADC by setting ADON bit
    ADC->CR2 |= (1 << 0);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]

    // SCAN mode Enabled
    ADC->CR1 |= ADCCfg->mode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

    // Set continuous or single conversion mode
    if (ADCCfg->convMode == ADC_Conv_CONT_MODE) {
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	799b      	ldrb	r3, [r3, #6]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d106      	bne.n	80028dc <ADC_Init+0x94>
        ADC->CR2 |= (1 << 1); // Enable continuous mode
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	e009      	b.n	80028f0 <ADC_Init+0xa8>
    } else if (ADCCfg->convMode == ADC_Conv_Single_MODE) {
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	799b      	ldrb	r3, [r3, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <ADC_Init+0xa8>
        ADC->CR2 &= ~(1 << 1); // Disable continuous mode (single conversion)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 0202 	bic.w	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
    }

    // Configure data alignment (right or left)
    if (ADCCfg->dataAlginement == ADC_DataAlign_Right) {
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	79db      	ldrb	r3, [r3, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <ADC_Init+0xbe>
        ADC->CR2 &= ~(1 << 11); // Right alignment
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e009      	b.n	800291a <ADC_Init+0xd2>
    } else if (ADCCfg->dataAlginement == ADC_DataAlign_Left) {
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	79db      	ldrb	r3, [r3, #7]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <ADC_Init+0xd2>
        ADC->CR2 |= (1 << 11); // Left alignment
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	609a      	str	r2, [r3, #8]
    }

    // Enable or disable End of Conversion (EOC) interrupt
    if (ADCCfg->IRQ_Enable == ADC_IRQ_Enable) {
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	7a1b      	ldrb	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10c      	bne.n	800293c <ADC_Init+0xf4>
        NVIC_IRQ18_ADC_Enable; // Enable ADC interrupt in NVIC
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <ADC_Init+0x148>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <ADC_Init+0x148>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
        ADC->CR1 |= (1 << 5); // Enable EOC interrupt
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f043 0220 	orr.w	r2, r3, #32
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	e009      	b.n	8002950 <ADC_Init+0x108>
    } else if (ADCCfg->IRQ_Enable == ADC_IRQ_Disable) {
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	7a1b      	ldrb	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <ADC_Init+0x108>
        ADC->CR1 &= ~(1 << 5); // Disable EOC interrupt
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 0220 	bic.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
    }

    // Set ADC callback if interrupt mode is enabled
    G_ADC_Callback = ADCCfg->P_IRQ_Callback;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <ADC_Init+0x14c>)
 8002956:	6013      	str	r3, [r2, #0]

    // Wait for ADC stabilization (tSTAB)
    for (int i = 0; i <= 1000; i++);
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e002      	b.n	8002964 <ADC_Init+0x11c>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296a:	ddf8      	ble.n	800295e <ADC_Init+0x116>

    // Set ADON again to start the ADC
    ADC->CR2 |= (1 << 0);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40012400 	.word	0x40012400
 8002988:	40012800 	.word	0x40012800
 800298c:	40010800 	.word	0x40010800
 8002990:	e000e100 	.word	0xe000e100
 8002994:	20003390 	.word	0x20003390

08002998 <ADC_Read_SingleChannel>:


uint16_t ADC_Read_SingleChannel(ADC_TYPE_DEF* ADC, uint16_t channel) {
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]

	uint16_t adcValue = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	81fb      	strh	r3, [r7, #14]
    // Select the ADC channel
    ADC->SQR3 = channel;
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34

    // Start the conversion
    ADC->CR2 |= ADC_CR2_SWSTART;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]

    // Wait for the End of  First Conversion Conversion (EOC) flag
    while (!(ADC->SR & ADC_SR_EOC));
 80029ba:	bf00      	nop
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f9      	beq.n	80029bc <ADC_Read_SingleChannel+0x24>
    // Read the ADC value For Channel 1.
    adcValue = ADC->DR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	81fb      	strh	r3, [r7, #14]

    return adcValue;
 80029ce:	89fb      	ldrh	r3, [r7, #14]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
	...

080029dc <ADC1_2_IRQHandler>:
	 ADC->CR2 = 0;                  // Clear control register 2


}

void ADC1_2_IRQHandler(){
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	if(G_ADC_Callback){
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <ADC1_2_IRQHandler+0x30>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <ADC1_2_IRQHandler+0x12>
		G_ADC_Callback();
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <ADC1_2_IRQHandler+0x30>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4798      	blx	r3
	}
	ADC1->SR &= ~(1 << 1);
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <ADC1_2_IRQHandler+0x34>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <ADC1_2_IRQHandler+0x34>)
 80029f4:	f023 0302 	bic.w	r3, r3, #2
 80029f8:	6013      	str	r3, [r2, #0]
	ADC2->SR &= ~(1 << 1);
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <ADC1_2_IRQHandler+0x38>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <ADC1_2_IRQHandler+0x38>)
 8002a00:	f023 0302 	bic.w	r3, r3, #2
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20003390 	.word	0x20003390
 8002a10:	40012400 	.word	0x40012400
 8002a14:	40012800 	.word	0x40012800

08002a18 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <EXTI0_IRQHandler+0x1c>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <EXTI0_IRQHandler+0x1c>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <EXTI0_IRQHandler+0x20>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4798      	blx	r3
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40010400 	.word	0x40010400
 8002a38:	20003394 	.word	0x20003394

08002a3c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <EXTI1_IRQHandler+0x1c>)
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <EXTI1_IRQHandler+0x1c>)
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <EXTI1_IRQHandler+0x20>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	20003394 	.word	0x20003394

08002a60 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <EXTI2_IRQHandler+0x1c>)
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <EXTI2_IRQHandler+0x1c>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <EXTI2_IRQHandler+0x20>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4798      	blx	r3
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40010400 	.word	0x40010400
 8002a80:	20003394 	.word	0x20003394

08002a84 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <EXTI3_IRQHandler+0x1c>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <EXTI3_IRQHandler+0x1c>)
 8002a8e:	f043 0308 	orr.w	r3, r3, #8
 8002a92:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <EXTI3_IRQHandler+0x20>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4798      	blx	r3
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	20003394 	.word	0x20003394

08002aa8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <EXTI4_IRQHandler+0x1c>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <EXTI4_IRQHandler+0x1c>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <EXTI4_IRQHandler+0x20>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	4798      	blx	r3
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010400 	.word	0x40010400
 8002ac8:	20003394 	.word	0x20003394

08002acc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8002ad0:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	4a22      	ldr	r2, [pc, #136]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002ae2:	f043 0320 	orr.w	r3, r3, #32
 8002ae6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <EXTI9_5_IRQHandler+0xa4>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b04:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <EXTI9_5_IRQHandler+0xa4>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b22:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <EXTI9_5_IRQHandler+0xa4>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <EXTI9_5_IRQHandler+0xa4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 8002b48:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <EXTI9_5_IRQHandler+0xa0>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <EXTI9_5_IRQHandler+0xa4>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	4798      	blx	r3
	}
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40010400 	.word	0x40010400
 8002b70:	20003394 	.word	0x20003394

08002b74 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4a2a      	ldr	r2, [pc, #168]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bac:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bca:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be8:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c06:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <EXTI15_10_IRQHandler+0xdc>)
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <EXTI15_10_IRQHandler+0xe0>)
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	4798      	blx	r3
	}
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40010400 	.word	0x40010400
 8002c54:	20003394 	.word	0x20003394

08002c58 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d042      	beq.n	8002cee <getCRLHPinPos+0x96>
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	dc11      	bgt.n	8002c90 <getCRLHPinPos+0x38>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d036      	beq.n	8002cde <getCRLHPinPos+0x86>
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	dc06      	bgt.n	8002c82 <getCRLHPinPos+0x2a>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d02e      	beq.n	8002cd6 <getCRLHPinPos+0x7e>
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d02e      	beq.n	8002cda <getCRLHPinPos+0x82>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d028      	beq.n	8002cd2 <getCRLHPinPos+0x7a>
 8002c80:	e047      	b.n	8002d12 <getCRLHPinPos+0xba>
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d02f      	beq.n	8002ce6 <getCRLHPinPos+0x8e>
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d02f      	beq.n	8002cea <getCRLHPinPos+0x92>
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d029      	beq.n	8002ce2 <getCRLHPinPos+0x8a>
 8002c8e:	e040      	b.n	8002d12 <getCRLHPinPos+0xba>
 8002c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c94:	d033      	beq.n	8002cfe <getCRLHPinPos+0xa6>
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	dc09      	bgt.n	8002cb0 <getCRLHPinPos+0x58>
 8002c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca0:	d029      	beq.n	8002cf6 <getCRLHPinPos+0x9e>
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d028      	beq.n	8002cfa <getCRLHPinPos+0xa2>
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cac:	d021      	beq.n	8002cf2 <getCRLHPinPos+0x9a>
 8002cae:	e030      	b.n	8002d12 <getCRLHPinPos+0xba>
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d027      	beq.n	8002d06 <getCRLHPinPos+0xae>
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	dc03      	bgt.n	8002cc4 <getCRLHPinPos+0x6c>
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d01f      	beq.n	8002d02 <getCRLHPinPos+0xaa>
 8002cc2:	e026      	b.n	8002d12 <getCRLHPinPos+0xba>
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc8:	d01f      	beq.n	8002d0a <getCRLHPinPos+0xb2>
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d01e      	beq.n	8002d0e <getCRLHPinPos+0xb6>
 8002cd0:	e01f      	b.n	8002d12 <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e01e      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e01c      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e01a      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8002cde:	230c      	movs	r3, #12
 8002ce0:	e018      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	e016      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 8002ce6:	2314      	movs	r3, #20
 8002ce8:	e014      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 8002cea:	2318      	movs	r3, #24
 8002cec:	e012      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8002cee:	231c      	movs	r3, #28
 8002cf0:	e010      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e00e      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e00c      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	e00a      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8002cfe:	230c      	movs	r3, #12
 8002d00:	e008      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 8002d02:	2310      	movs	r3, #16
 8002d04:	e006      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 8002d06:	2314      	movs	r3, #20
 8002d08:	e004      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 8002d0a:	2318      	movs	r3, #24
 8002d0c:	e002      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 8002d0e:	231c      	movs	r3, #28
 8002d10:	e000      	b.n	8002d14 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8002d1e:	b590      	push	{r4, r7, lr}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2b80      	cmp	r3, #128	; 0x80
 8002d36:	d902      	bls.n	8002d3e <MCAL_GPIO_Init+0x20>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	e000      	b.n	8002d40 <MCAL_GPIO_Init+0x22>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff86 	bl	8002c58 <getCRLHPinPos>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	230f      	movs	r3, #15
 8002d50:	4093      	lsls	r3, r2
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	401a      	ands	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	789b      	ldrb	r3, [r3, #2]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d00b      	beq.n	8002d7e <MCAL_GPIO_Init+0x60>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d007      	beq.n	8002d7e <MCAL_GPIO_Init+0x60>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	789b      	ldrb	r3, [r3, #2]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d003      	beq.n	8002d7e <MCAL_GPIO_Init+0x60>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	d10e      	bne.n	8002d9c <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	789b      	ldrb	r3, [r3, #2]
 8002d82:	3b04      	subs	r3, #4
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	b25a      	sxtb	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	78db      	ldrb	r3, [r3, #3]
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e039      	b.n	8002e10 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	789b      	ldrb	r3, [r3, #2]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d003      	beq.n	8002dac <MCAL_GPIO_Init+0x8e>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10c      	bne.n	8002dc6 <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	789b      	ldrb	r3, [r3, #2]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	b25a      	sxtb	r2, r3
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e024      	b.n	8002e10 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	789b      	ldrb	r3, [r3, #2]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d104      	bne.n	8002dd8 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e01b      	b.n	8002e10 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	789b      	ldrb	r3, [r3, #2]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d107      	bne.n	8002df8 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	e00b      	b.n	8002e10 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	789b      	ldrb	r3, [r3, #2]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d107      	bne.n	8002e10 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	8812      	ldrh	r2, [r2, #0]
 8002e08:	43d2      	mvns	r2, r2
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8002e10:	7bfc      	ldrb	r4, [r7, #15]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff1e 	bl	8002c58 <getCRLHPinPos>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	fa04 f203 	lsl.w	r2, r4, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	601a      	str	r2, [r3, #0]

}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <MCAL_GPIO_ReadPin>:
 * @param [in]	- pinNum: Set pin number according @ref GPIO_PINS_define
 * @retval 		- The input pin value (two values based on @ref GPIO_PIN_state).
 * Note 		- none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TYPE_DEF* gpiox, uint16_t pinNum){
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
	if((gpiox->IDR & pinNum) != (uint32_t) GPIO_PIN_LOW){
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MCAL_GPIO_ReadPin+0x1c>
		return (uint8_t) GPIO_PIN_HIGH;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <MCAL_GPIO_ReadPin+0x1e>
	}else {
		return (uint8_t) GPIO_PIN_LOW;
 8002e50:	2300      	movs	r3, #0
	}
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <MCAL_GPIO_WritePin>:
 * @param [in]	- value: Set pin to a specific value.
 * @retval 		- none.
 * Note 		- none
 */

void MCAL_GPIO_WritePin(GPIO_TYPE_DEF* gpiox, uint16_t pinNum, uint8_t value){
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_HIGH){
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <MCAL_GPIO_WritePin+0x24>
		gpiox->ODR |= (uint32_t)pinNum;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60da      	str	r2, [r3, #12]
	}else {
		gpiox->ODR &= (uint32_t)(~pinNum);
		// OR
		// gpiox->BRR = (uint32_t)pinNum;
	}
}
 8002e7e:	e006      	b.n	8002e8e <MCAL_GPIO_WritePin+0x32>
		gpiox->ODR &= (uint32_t)(~pinNum);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	43d2      	mvns	r2, r2
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d006      	beq.n	8002eb8 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d302      	bcc.n	8002eb4 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d004      	beq.n	8002ebc <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8002eb2:	e005      	b.n	8002ec0 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8002eb6:	e004      	b.n	8002ec2 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8002eba:	e002      	b.n	8002ec2 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <MCAL_RCC_GET_SYS_CLKFreq+0x40>)
 8002ebe:	e000      	b.n	8002ec2 <MCAL_RCC_GET_SYS_CLKFreq+0x2a>
		break;
	}

	return 0;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	00186a00 	.word	0x00186a00
 8002ed8:	00f42400 	.word	0x00f42400

08002edc <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8002ee0:	f7ff ffda 	bl	8002e98 <MCAL_RCC_GET_SYS_CLKFreq>
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <MCAL_RCC_GET_HCLKFreq+0x20>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	0800b174 	.word	0x0800b174

08002f04 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8002f08:	f7ff ffe8 	bl	8002edc <MCAL_RCC_GET_HCLKFreq>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	0800b16c 	.word	0x0800b16c

08002f2c <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8002f30:	f7ff ffd4 	bl	8002edc <MCAL_RCC_GET_HCLKFreq>
 8002f34:	4601      	mov	r1, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0adb      	lsrs	r3, r3, #11
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800b16c 	.word	0x0800b16c

08002f54 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(void) {
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
    if (TIM2->SR & (1 << 0)) { // Check update interrupt flag
 8002f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <TIM2_IRQHandler+0x28>
        TIM2->SR &= ~(1 << 0); // Clear interrupt flag
 8002f66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6113      	str	r3, [r2, #16]
        delayFlag = 0;           // Signal delay completion
 8002f76:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <TIM2_IRQHandler+0x30>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	2000000c 	.word	0x2000000c

08002f88 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler() {
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <TIM1_UP_IRQHandler+0x24>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <TIM1_UP_IRQHandler+0x24>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <TIM1_UP_IRQHandler+0x28>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <TIM1_UP_IRQHandler+0x28>)
 8002fa2:	801a      	strh	r2, [r3, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	20000214 	.word	0x20000214

08002fb4 <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8002fb8:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <TIM3_IRQHandler+0x24>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <TIM3_IRQHandler+0x24>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <TIM3_IRQHandler+0x28>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <TIM3_IRQHandler+0x28>)
 8002fce:	801a      	strh	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	20000212 	.word	0x20000212

08002fe0 <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <TIM4_IRQHandler+0x24>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4a06      	ldr	r2, [pc, #24]	; (8003004 <TIM4_IRQHandler+0x24>)
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <TIM4_IRQHandler+0x28>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <TIM4_IRQHandler+0x28>)
 8002ffa:	801a      	strh	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40000800 	.word	0x40000800
 8003008:	20000210 	.word	0x20000210

0800300c <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a5d      	ldr	r2, [pc, #372]	; (8003190 <MCAL_UART_Init+0x184>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d109      	bne.n	8003032 <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 800301e:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <MCAL_UART_Init+0x188>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 8003024:	4b5c      	ldr	r3, [pc, #368]	; (8003198 <MCAL_UART_Init+0x18c>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4a5b      	ldr	r2, [pc, #364]	; (8003198 <MCAL_UART_Init+0x18c>)
 800302a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800302e:	6193      	str	r3, [r2, #24]
 8003030:	e01a      	b.n	8003068 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a59      	ldr	r2, [pc, #356]	; (800319c <MCAL_UART_Init+0x190>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d109      	bne.n	800304e <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 800303a:	4a56      	ldr	r2, [pc, #344]	; (8003194 <MCAL_UART_Init+0x188>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 8003040:	4b55      	ldr	r3, [pc, #340]	; (8003198 <MCAL_UART_Init+0x18c>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <MCAL_UART_Init+0x18c>)
 8003046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	e00c      	b.n	8003068 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <MCAL_UART_Init+0x194>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 8003056:	4a4f      	ldr	r2, [pc, #316]	; (8003194 <MCAL_UART_Init+0x188>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 800305c:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <MCAL_UART_Init+0x18c>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a4d      	ldr	r2, [pc, #308]	; (8003198 <MCAL_UART_Init+0x18c>)
 8003062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003066:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	7a12      	ldrb	r2, [r2, #8]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	7a52      	ldrb	r2, [r2, #9]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	7a92      	ldrb	r2, [r2, #10]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	7ad2      	ldrb	r2, [r2, #11]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a34      	ldr	r2, [pc, #208]	; (8003190 <MCAL_UART_Init+0x184>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d105      	bne.n	80030ce <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 80030c2:	f7ff ff33 	bl	8002f2c <MCAL_RCC_GET_PCLK2Freq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <MCAL_UART_Init+0x198>)
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e004      	b.n	80030d8 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 80030ce:	f7ff ff19 	bl	8002f04 <MCAL_RCC_GET_PCLK1Freq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <MCAL_UART_Init+0x198>)
 80030d6:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <MCAL_UART_Init+0x198>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	0119      	lsls	r1, r3, #4
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <MCAL_UART_Init+0x198>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <MCAL_UART_Init+0x198>)
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	2064      	movs	r0, #100	; 0x64
 8003110:	fb00 f303 	mul.w	r3, r0, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <MCAL_UART_Init+0x19c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	430b      	orrs	r3, r1
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <MCAL_UART_Init+0x1a0>)
 8003128:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <MCAL_UART_Init+0x1a0>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7b1b      	ldrb	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d026      	beq.n	8003188 <MCAL_UART_Init+0x17c>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	7b12      	ldrb	r2, [r2, #12]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a11      	ldr	r2, [pc, #68]	; (8003190 <MCAL_UART_Init+0x184>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d106      	bne.n	800315e <MCAL_UART_Init+0x152>
			NVIC_IRQ37_UART1_Enable;
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 8003156:	f043 0320 	orr.w	r3, r3, #32
 800315a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 800315c:	e014      	b.n	8003188 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART2){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <MCAL_UART_Init+0x190>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d106      	bne.n	8003174 <MCAL_UART_Init+0x168>
			NVIC_IRQ38_UART2_Enable;
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 800316c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003170:	6013      	str	r3, [r2, #0]
}
 8003172:	e009      	b.n	8003188 <MCAL_UART_Init+0x17c>
		}else if(uartx == UART3){
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <MCAL_UART_Init+0x194>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d105      	bne.n	8003188 <MCAL_UART_Init+0x17c>
			NVIC_IRQ39_UART3_Enable;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <MCAL_UART_Init+0x1a4>)
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40013800 	.word	0x40013800
 8003194:	200033dc 	.word	0x200033dc
 8003198:	40021000 	.word	0x40021000
 800319c:	40004400 	.word	0x40004400
 80031a0:	40014800 	.word	0x40014800
 80031a4:	200033d8 	.word	0x200033d8
 80031a8:	51eb851f 	.word	0x51eb851f
 80031ac:	200033d4 	.word	0x200033d4
 80031b0:	e000e104 	.word	0xe000e104

080031b4 <UART_Send_SingelChar>:
		}
	}

}

void UART_Send_SingelChar(UART_TYPE_DEF* uartx, uint8_t data, enum Polling_Mechanism polling) {
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
 80031c0:	4613      	mov	r3, r2
 80031c2:	70bb      	strb	r3, [r7, #2]
	//uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
    while (!(uartx->SR & (1 << 7)));  // Wait for TXE
 80031c4:	bf00      	nop
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f9      	beq.n	80031c6 <UART_Send_SingelChar+0x12>
    uartx->DR = data;                // Write data
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]
    while (!(uartx->SR & (1 << 6))); // Wait for TC (Transmission Complete)
 80031d8:	bf00      	nop
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f9      	beq.n	80031da <UART_Send_SingelChar+0x26>
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <MCAL_UART_GPIO_SetPins+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d118      	bne.n	8003232 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8003206:	2306      	movs	r3, #6
 8003208:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	4619      	mov	r1, r3
 8003214:	4825      	ldr	r0, [pc, #148]	; (80032ac <MCAL_UART_GPIO_SetPins+0xbc>)
 8003216:	f7ff fd82 	bl	8002d1e <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800321a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8003220:	2308      	movs	r3, #8
 8003222:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	4619      	mov	r1, r3
 800322a:	4820      	ldr	r0, [pc, #128]	; (80032ac <MCAL_UART_GPIO_SetPins+0xbc>)
 800322c:	f7ff fd77 	bl	8002d1e <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8003230:	e036      	b.n	80032a0 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d116      	bne.n	8003268 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800323a:	2304      	movs	r3, #4
 800323c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800323e:	2306      	movs	r3, #6
 8003240:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4619      	mov	r1, r3
 800324c:	4817      	ldr	r0, [pc, #92]	; (80032ac <MCAL_UART_GPIO_SetPins+0xbc>)
 800324e:	f7ff fd66 	bl	8002d1e <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8003252:	2308      	movs	r3, #8
 8003254:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8003256:	2308      	movs	r3, #8
 8003258:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	4619      	mov	r1, r3
 8003260:	4812      	ldr	r0, [pc, #72]	; (80032ac <MCAL_UART_GPIO_SetPins+0xbc>)
 8003262:	f7ff fd5c 	bl	8002d1e <MCAL_GPIO_Init>
}
 8003266:	e01b      	b.n	80032a0 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MCAL_UART_GPIO_SetPins+0xc4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d117      	bne.n	80032a0 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8003270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003274:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8003276:	2306      	movs	r3, #6
 8003278:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	4619      	mov	r1, r3
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8003286:	f7ff fd4a 	bl	8002d1e <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800328a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800328e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8003290:	2308      	movs	r3, #8
 8003292:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	4619      	mov	r1, r3
 800329a:	4807      	ldr	r0, [pc, #28]	; (80032b8 <MCAL_UART_GPIO_SetPins+0xc8>)
 800329c:	f7ff fd3f 	bl	8002d1e <MCAL_GPIO_Init>
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40010800 	.word	0x40010800
 80032b0:	40004400 	.word	0x40004400
 80032b4:	40014800 	.word	0x40014800
 80032b8:	40010c00 	.word	0x40010c00

080032bc <USART2_IRQHandler>:
// ISR()
//void USART1_IRQHandler(){
//	UARTGlobalCfg[0]->P_IRQ_Callback();
//}

void USART2_IRQHandler(){
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 80032c0:	4b02      	ldr	r3, [pc, #8]	; (80032cc <USART2_IRQHandler+0x10>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	4798      	blx	r3
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200033dc 	.word	0x200033dc

080032d0 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <USART3_IRQHandler+0x10>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	4798      	blx	r3
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200033dc 	.word	0x200033dc

080032e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f103 0208 	add.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f103 0208 	add.w	r2, r3, #8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f103 0208 	add.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e00c      	b.n	8003374 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3308      	adds	r3, #8
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e002      	b.n	8003368 <vListInsert+0x2e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	d2f6      	bcs.n	8003362 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6852      	ldr	r2, [r2, #4]
 80033ca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d103      	bne.n	80033de <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003406:	2301      	movs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d063      	beq.n	80034dc <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05f      	beq.n	80034dc <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2000      	movs	r0, #0
 8003426:	fba2 1203 	umull	r1, r2, r2, r3
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	0013      	movs	r3, r2
 8003434:	2400      	movs	r4, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d000      	beq.n	800343c <xQueueGenericReset+0x40>
 800343a:	2001      	movs	r0, #1
 800343c:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d14c      	bne.n	80034dc <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 8003442:	f001 fddb 	bl	8004ffc <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	441a      	add	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	3b01      	subs	r3, #1
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	441a      	add	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d114      	bne.n	80034c2 <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3310      	adds	r3, #16
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 ffb7 	bl	8004418 <xTaskRemoveFromEventList>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <xQueueGenericReset+0xf0>)
 80034b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	e009      	b.n	80034d6 <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3310      	adds	r3, #16
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff0c 	bl	80032e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff07 	bl	80032e4 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 80034d6:	f001 fda9 	bl	800502c <vPortExitCritical>
 80034da:	e001      	b.n	80034e0 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd90      	pop	{r4, r7, pc}
 80034ea:	bf00      	nop
 80034ec:	e000ed04 	.word	0xe000ed04

080034f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b08b      	sub	sp, #44	; 0x2c
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d033      	beq.n	8003570 <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003508:	2000      	movs	r0, #0
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	fba2 1203 	umull	r1, r2, r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f04f 0400 	mov.w	r4, #0
 800351a:	0013      	movs	r3, r2
 800351c:	2400      	movs	r4, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d000      	beq.n	8003524 <xQueueGenericCreate+0x34>
 8003522:	2001      	movs	r0, #1
 8003524:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d122      	bne.n	8003570 <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003532:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8003536:	d81b      	bhi.n	8003570 <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3348      	adds	r3, #72	; 0x48
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fde8 	bl	800511c <pvPortMalloc>
 800354c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3348      	adds	r3, #72	; 0x48
 800355c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800355e:	79fa      	ldrb	r2, [r7, #7]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f805 	bl	800357a <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003570:	69fb      	ldr	r3, [r7, #28]
    }
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	; 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd90      	pop	{r4, r7, pc}

0800357a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e002      	b.n	800359c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035a8:	2101      	movs	r1, #1
 80035aa:	69b8      	ldr	r0, [r7, #24]
 80035ac:	f7ff ff26 	bl	80033fc <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80035ce:	f001 fd15 	bl	8004ffc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <xQueueGenericSend+0x2c>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d129      	bne.n	8003638 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	6a38      	ldr	r0, [r7, #32]
 80035ea:	f000 f98d 	bl	8003908 <prvCopyDataToQueue>
 80035ee:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	3324      	adds	r3, #36	; 0x24
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ff0b 	bl	8004418 <xTaskRemoveFromEventList>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003608:	4b3f      	ldr	r3, [pc, #252]	; (8003708 <xQueueGenericSend+0x150>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	e00a      	b.n	8003630 <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <xQueueGenericSend+0x150>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003630:	f001 fcfc 	bl	800502c <vPortExitCritical>
                return pdPASS;
 8003634:	2301      	movs	r3, #1
 8003636:	e063      	b.n	8003700 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800363e:	f001 fcf5 	bl	800502c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003642:	2300      	movs	r3, #0
 8003644:	e05c      	b.n	8003700 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	4618      	mov	r0, r3
 8003652:	f000 ffa9 	bl	80045a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800365a:	f001 fce7 	bl	800502c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800365e:	f000 fc39 	bl	8003ed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003662:	f001 fccb 	bl	8004ffc <vPortEnterCritical>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366c:	b25b      	sxtb	r3, r3
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d103      	bne.n	800367c <xQueueGenericSend+0xc4>
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003682:	b25b      	sxtb	r3, r3
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d103      	bne.n	8003692 <xQueueGenericSend+0xda>
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003692:	f001 fccb 	bl	800502c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003696:	1d3a      	adds	r2, r7, #4
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 ff98 	bl	80045d4 <xTaskCheckForTimeOut>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d124      	bne.n	80036f4 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036aa:	6a38      	ldr	r0, [r7, #32]
 80036ac:	f000 fa16 	bl	8003adc <prvIsQueueFull>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	3310      	adds	r3, #16
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fe5c 	bl	800437c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80036c4:	6a38      	ldr	r0, [r7, #32]
 80036c6:	f000 f9a1 	bl	8003a0c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80036ca:	f000 fc11 	bl	8003ef0 <xTaskResumeAll>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f af7c 	bne.w	80035ce <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <xQueueGenericSend+0x150>)
 80036d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	e772      	b.n	80035ce <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80036e8:	6a38      	ldr	r0, [r7, #32]
 80036ea:	f000 f98f 	bl	8003a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80036ee:	f000 fbff 	bl	8003ef0 <xTaskResumeAll>
 80036f2:	e76c      	b.n	80035ce <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80036f4:	6a38      	ldr	r0, [r7, #32]
 80036f6:	f000 f989 	bl	8003a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80036fa:	f000 fbf9 	bl	8003ef0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80036fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	; 0x30
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800371e:	f3ef 8211 	mrs	r2, BASEPRI
 8003722:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	61ba      	str	r2, [r7, #24]
 8003734:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003736:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <xQueueGenericSendFromISR+0x40>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d12f      	bne.n	80037ac <xQueueGenericSendFromISR+0xa0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003762:	f000 f8d1 	bl	8003908 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003766:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d112      	bne.n	8003796 <xQueueGenericSendFromISR+0x8a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <xQueueGenericSendFromISR+0x9a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fe4b 	bl	8004418 <xTaskRemoveFromEventList>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00e      	beq.n	80037a6 <xQueueGenericSendFromISR+0x9a>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <xQueueGenericSendFromISR+0x9a>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e007      	b.n	80037a6 <xQueueGenericSendFromISR+0x9a>
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800379a:	3301      	adds	r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	b25a      	sxtb	r2, r3
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80037a6:	2301      	movs	r3, #1
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        {
 80037aa:	e001      	b.n	80037b0 <xQueueGenericSendFromISR+0xa4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80037ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3730      	adds	r7, #48	; 0x30
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037d8:	f001 fc10 	bl	8004ffc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01f      	beq.n	8003828 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	6a38      	ldr	r0, [r7, #32]
 80037ec:	f000 f8e8 	bl	80039c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00f      	beq.n	8003820 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	3310      	adds	r3, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fe07 	bl	8004418 <xTaskRemoveFromEventList>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <xQueueReceive+0x140>)
 8003812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003820:	f001 fc04 	bl	800502c <vPortExitCritical>
                return pdPASS;
 8003824:	2301      	movs	r3, #1
 8003826:	e069      	b.n	80038fc <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800382e:	f001 fbfd 	bl	800502c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003832:	2300      	movs	r3, #0
 8003834:	e062      	b.n	80038fc <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4618      	mov	r0, r3
 8003842:	f000 feb1 	bl	80045a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003846:	2301      	movs	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800384a:	f001 fbef 	bl	800502c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800384e:	f000 fb41 	bl	8003ed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003852:	f001 fbd3 	bl	8004ffc <vPortEnterCritical>
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800385c:	b25b      	sxtb	r3, r3
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d103      	bne.n	800386c <xQueueReceive+0xa8>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003872:	b25b      	sxtb	r3, r3
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d103      	bne.n	8003882 <xQueueReceive+0xbe>
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003882:	f001 fbd3 	bl	800502c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003886:	1d3a      	adds	r2, r7, #4
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fea0 	bl	80045d4 <xTaskCheckForTimeOut>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d123      	bne.n	80038e2 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800389a:	6a38      	ldr	r0, [r7, #32]
 800389c:	f000 f908 	bl	8003ab0 <prvIsQueueEmpty>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d017      	beq.n	80038d6 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	3324      	adds	r3, #36	; 0x24
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fd64 	bl	800437c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80038b4:	6a38      	ldr	r0, [r7, #32]
 80038b6:	f000 f8a9 	bl	8003a0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80038ba:	f000 fb19 	bl	8003ef0 <xTaskResumeAll>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d189      	bne.n	80037d8 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <xQueueReceive+0x140>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	e780      	b.n	80037d8 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038d6:	6a38      	ldr	r0, [r7, #32]
 80038d8:	f000 f898 	bl	8003a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038dc:	f000 fb08 	bl	8003ef0 <xTaskResumeAll>
 80038e0:	e77a      	b.n	80037d8 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038e2:	6a38      	ldr	r0, [r7, #32]
 80038e4:	f000 f892 	bl	8003a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038e8:	f000 fb02 	bl	8003ef0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ec:	6a38      	ldr	r0, [r7, #32]
 80038ee:	f000 f8df 	bl	8003ab0 <prvIsQueueEmpty>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f43f af6f 	beq.w	80037d8 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80038fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d043      	beq.n	80039ae <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d119      	bne.n	8003960 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6858      	ldr	r0, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	461a      	mov	r2, r3
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	f002 fcc8 	bl	80062cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d32b      	bcc.n	80039ae <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e026      	b.n	80039ae <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68d8      	ldr	r0, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	f002 fcae 	bl	80062cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	425b      	negs	r3, r3
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d207      	bcs.n	800399c <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	425b      	negs	r3, r3
 8003996:	441a      	add	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d105      	bne.n	80039ae <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80039b6:	693b      	ldr	r3, [r7, #16]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d303      	bcc.n	80039f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	461a      	mov	r2, r3
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f002 fc64 	bl	80062cc <memcpy>
    }
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a14:	f001 faf2 	bl	8004ffc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a20:	e011      	b.n	8003a46 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3324      	adds	r3, #36	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fcf2 	bl	8004418 <xTaskRemoveFromEventList>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a3a:	f000 fe15 	bl	8004668 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	dce9      	bgt.n	8003a22 <prvUnlockQueue+0x16>
 8003a4e:	e000      	b.n	8003a52 <prvUnlockQueue+0x46>
                        break;
 8003a50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a5a:	f001 fae7 	bl	800502c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a5e:	f001 facd 	bl	8004ffc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a6a:	e011      	b.n	8003a90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3310      	adds	r3, #16
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fccd 	bl	8004418 <xTaskRemoveFromEventList>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a84:	f000 fdf0 	bl	8004668 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dce9      	bgt.n	8003a6c <prvUnlockQueue+0x60>
 8003a98:	e000      	b.n	8003a9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003aa4:	f001 fac2 	bl	800502c <vPortExitCritical>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ab8:	f001 faa0 	bl	8004ffc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e001      	b.n	8003ace <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ace:	f001 faad 	bl	800502c <vPortExitCritical>

    return xReturn;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ae4:	f001 fa8a 	bl	8004ffc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d102      	bne.n	8003afa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003afe:	f001 fa95 	bl	800502c <vPortExitCritical>

    return xReturn;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b1c:	f001 fa6e 	bl	8004ffc <vPortEnterCritical>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d103      	bne.n	8003b36 <vQueueWaitForMessageRestricted+0x2a>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d103      	bne.n	8003b4c <vQueueWaitForMessageRestricted+0x40>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4c:	f001 fa6e 	bl	800502c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fc21 	bl	80043a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff50 	bl	8003a0c <prvUnlockQueue>
    }
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fac7 	bl	800511c <pvPortMalloc>
 8003b8e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b96:	204c      	movs	r0, #76	; 0x4c
 8003b98:	f001 fac0 	bl	800511c <pvPortMalloc>
 8003b9c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8003baa:	e005      	b.n	8003bb8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f001 fb63 	bl	8005278 <vPortFree>
 8003bb2:	e001      	b.n	8003bb8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	9301      	str	r3, [sp, #4]
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f80e 	bl	8003bf6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003bda:	69f8      	ldr	r0, [r7, #28]
 8003bdc:	f000 f884 	bl	8003ce8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003be0:	2301      	movs	r3, #1
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e002      	b.n	8003bec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003bec:	69bb      	ldr	r3, [r7, #24]
    }
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01f      	beq.n	8003c64 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e012      	b.n	8003c50 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	7819      	ldrb	r1, [r3, #0]
 8003c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	3334      	adds	r3, #52	; 0x34
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d9e9      	bls.n	8003c2a <prvInitialiseNewTask+0x34>
 8003c56:	e000      	b.n	8003c5a <prvInitialiseNewTask+0x64>
            {
                break;
 8003c58:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c62:	e003      	b.n	8003c6c <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d901      	bls.n	8003c76 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c72:	2304      	movs	r3, #4
 8003c74:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fb4e 	bl	8003322 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	3318      	adds	r3, #24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fb49 	bl	8003322 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c94:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f1c3 0205 	rsb	r2, r3, #5
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	3344      	adds	r3, #68	; 0x44
 8003caa:	2204      	movs	r2, #4
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 fb17 	bl	80062e2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	3348      	adds	r3, #72	; 0x48
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f002 fb10 	bl	80062e2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	6938      	ldr	r0, [r7, #16]
 8003cc8:	f001 f908 	bl	8004edc <pxPortInitialiseStack>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003cf0:	f001 f984 	bl	8004ffc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <prvAddNewTaskToReadyList+0x108>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <prvAddNewTaskToReadyList+0x108>)
 8003cfc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <prvAddNewTaskToReadyList+0x10c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003d06:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <prvAddNewTaskToReadyList+0x10c>)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d0c:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <prvAddNewTaskToReadyList+0x108>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d110      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003d14:	f000 fccc 	bl	80046b0 <prvInitialiseTaskLists>
 8003d18:	e00d      	b.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003d1a:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <prvAddNewTaskToReadyList+0x110>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <prvAddNewTaskToReadyList+0x10c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d802      	bhi.n	8003d36 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <prvAddNewTaskToReadyList+0x10c>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <prvAddNewTaskToReadyList+0x114>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <prvAddNewTaskToReadyList+0x114>)
 8003d3e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	4b2d      	ldr	r3, [pc, #180]	; (8003e00 <prvAddNewTaskToReadyList+0x118>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <prvAddNewTaskToReadyList+0x118>)
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	492b      	ldr	r1, [pc, #172]	; (8003e04 <prvAddNewTaskToReadyList+0x11c>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3304      	adds	r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	3204      	adds	r2, #4
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <prvAddNewTaskToReadyList+0x11c>)
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	615a      	str	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4918      	ldr	r1, [pc, #96]	; (8003e04 <prvAddNewTaskToReadyList+0x11c>)
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	4814      	ldr	r0, [pc, #80]	; (8003e04 <prvAddNewTaskToReadyList+0x11c>)
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4403      	add	r3, r0
 8003dbc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003dbe:	f001 f935 	bl	800502c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <prvAddNewTaskToReadyList+0x110>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <prvAddNewTaskToReadyList+0x10c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d207      	bcs.n	8003de8 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <prvAddNewTaskToReadyList+0x120>)
 8003dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200002f0 	.word	0x200002f0
 8003df4:	20000218 	.word	0x20000218
 8003df8:	200002fc 	.word	0x200002fc
 8003dfc:	2000030c 	.word	0x2000030c
 8003e00:	200002f8 	.word	0x200002f8
 8003e04:	2000021c 	.word	0x2000021c
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8003e1e:	f000 f859 	bl	8003ed4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e22:	2100      	movs	r1, #0
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fcf7 	bl	8004818 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003e2a:	f000 f861 	bl	8003ef0 <xTaskResumeAll>
 8003e2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <vTaskDelay+0x44>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <vTaskStartScheduler+0x64>)
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	4915      	ldr	r1, [pc, #84]	; (8003ebc <vTaskStartScheduler+0x68>)
 8003e68:	4815      	ldr	r0, [pc, #84]	; (8003ec0 <vTaskStartScheduler+0x6c>)
 8003e6a:	f7ff fe83 	bl	8003b74 <xTaskCreate>
 8003e6e:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003e76:	f000 fd4f 	bl	8004918 <xTimerCreateTimerTask>
 8003e7a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d114      	bne.n	8003eac <vTaskStartScheduler+0x58>
        __asm volatile
 8003e82:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <vTaskStartScheduler+0x70>)
 8003e96:	f04f 32ff 	mov.w	r2, #4294967295
 8003e9a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vTaskStartScheduler+0x74>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <vTaskStartScheduler+0x78>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003ea8:	f001 f888 	bl	8004fbc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <vTaskStartScheduler+0x7c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000314 	.word	0x20000314
 8003ebc:	0800aeb0 	.word	0x0800aeb0
 8003ec0:	08004681 	.word	0x08004681
 8003ec4:	20000310 	.word	0x20000310
 8003ec8:	200002fc 	.word	0x200002fc
 8003ecc:	200002f4 	.word	0x200002f4
 8003ed0:	20000010 	.word	0x20000010

08003ed4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <vTaskSuspendAll+0x18>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	4a03      	ldr	r2, [pc, #12]	; (8003eec <vTaskSuspendAll+0x18>)
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000318 	.word	0x20000318

08003ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003efe:	f001 f87d 	bl	8004ffc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003f02:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <xTaskResumeAll+0x1b4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	4a66      	ldr	r2, [pc, #408]	; (80040a4 <xTaskResumeAll+0x1b4>)
 8003f0a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0c:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <xTaskResumeAll+0x1b4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 80c0 	bne.w	8004096 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f16:	4b64      	ldr	r3, [pc, #400]	; (80040a8 <xTaskResumeAll+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80bb 	beq.w	8004096 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f20:	e08a      	b.n	8004038 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b62      	ldr	r3, [pc, #392]	; (80040ac <xTaskResumeAll+0x1bc>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6a12      	ldr	r2, [r2, #32]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	69d2      	ldr	r2, [r2, #28]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d103      	bne.n	8003f58 <xTaskResumeAll+0x68>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	68d2      	ldr	r2, [r2, #12]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6892      	ldr	r2, [r2, #8]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d103      	bne.n	8003f96 <xTaskResumeAll+0xa6>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	615a      	str	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	2201      	movs	r2, #1
 8003fac:	409a      	lsls	r2, r3
 8003fae:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <xTaskResumeAll+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <xTaskResumeAll+0x1c0>)
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbc:	493d      	ldr	r1, [pc, #244]	; (80040b4 <xTaskResumeAll+0x1c4>)
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3304      	adds	r3, #4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	3204      	adds	r2, #4
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a2e      	ldr	r2, [pc, #184]	; (80040b4 <xTaskResumeAll+0x1c4>)
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	615a      	str	r2, [r3, #20]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	492b      	ldr	r1, [pc, #172]	; (80040b4 <xTaskResumeAll+0x1c4>)
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	4827      	ldr	r0, [pc, #156]	; (80040b4 <xTaskResumeAll+0x1c4>)
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4403      	add	r3, r0
 8004022:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <xTaskResumeAll+0x1c8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <xTaskResumeAll+0x1cc>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004038:	4b1c      	ldr	r3, [pc, #112]	; (80040ac <xTaskResumeAll+0x1bc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f47f af70 	bne.w	8003f22 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004048:	f000 fbae 	bl	80047a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800404c:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <xTaskResumeAll+0x1d0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d010      	beq.n	800407a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004058:	f000 f844 	bl	80040e4 <xTaskIncrementTick>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <xTaskResumeAll+0x1cc>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3b01      	subs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f1      	bne.n	8004058 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <xTaskResumeAll+0x1d0>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <xTaskResumeAll+0x1cc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <xTaskResumeAll+0x1d4>)
 8004088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004096:	f000 ffc9 	bl	800502c <vPortExitCritical>

    return xAlreadyYielded;
 800409a:	693b      	ldr	r3, [r7, #16]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000318 	.word	0x20000318
 80040a8:	200002f0 	.word	0x200002f0
 80040ac:	200002b0 	.word	0x200002b0
 80040b0:	200002f8 	.word	0x200002f8
 80040b4:	2000021c 	.word	0x2000021c
 80040b8:	20000218 	.word	0x20000218
 80040bc:	20000304 	.word	0x20000304
 80040c0:	20000300 	.word	0x20000300
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <xTaskGetTickCount+0x18>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80040d4:	687b      	ldr	r3, [r7, #4]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	200002f4 	.word	0x200002f4

080040e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ee:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <xTaskIncrementTick+0x1e0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 80dc 	bne.w	80042b0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040f8:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <xTaskIncrementTick+0x1e4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004100:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <xTaskIncrementTick+0x1e4>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d110      	bne.n	800412e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <xTaskIncrementTick+0x1e8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <xTaskIncrementTick+0x1ec>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6d      	ldr	r2, [pc, #436]	; (80042cc <xTaskIncrementTick+0x1e8>)
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4a6d      	ldr	r2, [pc, #436]	; (80042d0 <xTaskIncrementTick+0x1ec>)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <xTaskIncrementTick+0x1f0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	4a6b      	ldr	r2, [pc, #428]	; (80042d4 <xTaskIncrementTick+0x1f0>)
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	f000 fb3d 	bl	80047a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800412e:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <xTaskIncrementTick+0x1f4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	429a      	cmp	r2, r3
 8004136:	f0c0 80a6 	bcc.w	8004286 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	4b64      	ldr	r3, [pc, #400]	; (80042cc <xTaskIncrementTick+0x1e8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	4b64      	ldr	r3, [pc, #400]	; (80042d8 <xTaskIncrementTick+0x1f4>)
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	601a      	str	r2, [r3, #0]
                    break;
 800414c:	e09b      	b.n	8004286 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <xTaskIncrementTick+0x1e8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	429a      	cmp	r2, r3
 8004164:	d203      	bcs.n	800416e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004166:	4a5c      	ldr	r2, [pc, #368]	; (80042d8 <xTaskIncrementTick+0x1f4>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800416c:	e08b      	b.n	8004286 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68d2      	ldr	r2, [r2, #12]
 800417c:	609a      	str	r2, [r3, #8]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3304      	adds	r3, #4
 8004190:	429a      	cmp	r2, r3
 8004192:	d103      	bne.n	800419c <xTaskIncrementTick+0xb8>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2200      	movs	r2, #0
 80041a0:	615a      	str	r2, [r3, #20]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01e      	beq.n	80041f2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	6a12      	ldr	r2, [r2, #32]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	69d2      	ldr	r2, [r2, #28]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3318      	adds	r3, #24
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <xTaskIncrementTick+0xfe>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	4b38      	ldr	r3, [pc, #224]	; (80042dc <xTaskIncrementTick+0x1f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	4a36      	ldr	r2, [pc, #216]	; (80042dc <xTaskIncrementTick+0x1f8>)
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	4935      	ldr	r1, [pc, #212]	; (80042e0 <xTaskIncrementTick+0x1fc>)
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	3304      	adds	r3, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	3204      	adds	r2, #4
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <xTaskIncrementTick+0x1fc>)
 8004248:	441a      	add	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	615a      	str	r2, [r3, #20]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4923      	ldr	r1, [pc, #140]	; (80042e0 <xTaskIncrementTick+0x1fc>)
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	481f      	ldr	r0, [pc, #124]	; (80042e0 <xTaskIncrementTick+0x1fc>)
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4403      	add	r3, r0
 800426e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <xTaskIncrementTick+0x200>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	f4ff af5d 	bcc.w	800413a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004284:	e759      	b.n	800413a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <xTaskIncrementTick+0x200>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4914      	ldr	r1, [pc, #80]	; (80042e0 <xTaskIncrementTick+0x1fc>)
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d901      	bls.n	80042a2 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <xTaskIncrementTick+0x204>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	e004      	b.n	80042ba <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <xTaskIncrementTick+0x208>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <xTaskIncrementTick+0x208>)
 80042b8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80042ba:	69fb      	ldr	r3, [r7, #28]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000318 	.word	0x20000318
 80042c8:	200002f4 	.word	0x200002f4
 80042cc:	200002a8 	.word	0x200002a8
 80042d0:	200002ac 	.word	0x200002ac
 80042d4:	20000308 	.word	0x20000308
 80042d8:	20000310 	.word	0x20000310
 80042dc:	200002f8 	.word	0x200002f8
 80042e0:	2000021c 	.word	0x2000021c
 80042e4:	20000218 	.word	0x20000218
 80042e8:	20000304 	.word	0x20000304
 80042ec:	20000300 	.word	0x20000300

080042f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <vTaskSwitchContext+0x78>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <vTaskSwitchContext+0x7c>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004304:	e02a      	b.n	800435c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <vTaskSwitchContext+0x7c>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <vTaskSwitchContext+0x80>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	fab3 f383 	clz	r3, r3
 8004318:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f1c3 031f 	rsb	r3, r3, #31
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a11      	ldr	r2, [pc, #68]	; (8004374 <vTaskSwitchContext+0x84>)
 800432e:	4413      	add	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	3308      	adds	r3, #8
 8004344:	429a      	cmp	r2, r3
 8004346:	d104      	bne.n	8004352 <vTaskSwitchContext+0x62>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <vTaskSwitchContext+0x88>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000318 	.word	0x20000318
 800436c:	20000304 	.word	0x20000304
 8004370:	200002f8 	.word	0x200002f8
 8004374:	2000021c 	.word	0x2000021c
 8004378:	20000218 	.word	0x20000218

0800437c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <vTaskPlaceOnEventList+0x28>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3318      	adds	r3, #24
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe ffd3 	bl	800333a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004394:	2101      	movs	r1, #1
 8004396:	6838      	ldr	r0, [r7, #0]
 8004398:	f000 fa3e 	bl	8004818 <prvAddCurrentTaskToDelayedList>
}
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000218 	.word	0x20000218

080043a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	4b16      	ldr	r3, [pc, #88]	; (8004414 <vTaskPlaceOnEventListRestricted+0x6c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	61da      	str	r2, [r3, #28]
 80043c2:	4b14      	ldr	r3, [pc, #80]	; (8004414 <vTaskPlaceOnEventListRestricted+0x6c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	6892      	ldr	r2, [r2, #8]
 80043ca:	621a      	str	r2, [r3, #32]
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <vTaskPlaceOnEventListRestricted+0x6c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	3218      	adds	r2, #24
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <vTaskPlaceOnEventListRestricted+0x6c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f103 0218 	add.w	r2, r3, #24
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <vTaskPlaceOnEventListRestricted+0x6c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 80043fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004400:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f000 fa07 	bl	8004818 <prvAddCurrentTaskToDelayedList>
    }
 800440a:	bf00      	nop
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000218 	.word	0x20000218

08004418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	6a12      	ldr	r2, [r2, #32]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	69d2      	ldr	r2, [r2, #28]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3318      	adds	r3, #24
 800444a:	429a      	cmp	r2, r3
 800444c:	d103      	bne.n	8004456 <xTaskRemoveFromEventList+0x3e>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6a1a      	ldr	r2, [r3, #32]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2200      	movs	r2, #0
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	1e5a      	subs	r2, r3, #1
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <xTaskRemoveFromEventList+0x178>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d15e      	bne.n	800452c <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	68d2      	ldr	r2, [r2, #12]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	6892      	ldr	r2, [r2, #8]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	3304      	adds	r3, #4
 8004490:	429a      	cmp	r2, r3
 8004492:	d103      	bne.n	800449c <xTaskRemoveFromEventList+0x84>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2200      	movs	r2, #0
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	2201      	movs	r2, #1
 80044b2:	409a      	lsls	r2, r3
 80044b4:	4b37      	ldr	r3, [pc, #220]	; (8004594 <xTaskRemoveFromEventList+0x17c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	4a36      	ldr	r2, [pc, #216]	; (8004594 <xTaskRemoveFromEventList+0x17c>)
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	4935      	ldr	r1, [pc, #212]	; (8004598 <xTaskRemoveFromEventList+0x180>)
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3304      	adds	r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	3204      	adds	r2, #4
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1d1a      	adds	r2, r3, #4
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <xTaskRemoveFromEventList+0x180>)
 8004502:	441a      	add	r2, r3
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	615a      	str	r2, [r3, #20]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4922      	ldr	r1, [pc, #136]	; (8004598 <xTaskRemoveFromEventList+0x180>)
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	481e      	ldr	r0, [pc, #120]	; (8004598 <xTaskRemoveFromEventList+0x180>)
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4403      	add	r3, r0
 8004528:	6019      	str	r1, [r3, #0]
 800452a:	e01b      	b.n	8004564 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800452c:	4b1b      	ldr	r3, [pc, #108]	; (800459c <xTaskRemoveFromEventList+0x184>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	61da      	str	r2, [r3, #28]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	621a      	str	r2, [r3, #32]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	3218      	adds	r2, #24
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f103 0218 	add.w	r2, r3, #24
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	4a11      	ldr	r2, [pc, #68]	; (800459c <xTaskRemoveFromEventList+0x184>)
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <xTaskRemoveFromEventList+0x184>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	4a0e      	ldr	r2, [pc, #56]	; (800459c <xTaskRemoveFromEventList+0x184>)
 8004562:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <xTaskRemoveFromEventList+0x188>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	429a      	cmp	r2, r3
 8004570:	d905      	bls.n	800457e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004572:	2301      	movs	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <xTaskRemoveFromEventList+0x18c>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e001      	b.n	8004582 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8004582:	69fb      	ldr	r3, [r7, #28]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3724      	adds	r7, #36	; 0x24
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000318 	.word	0x20000318
 8004594:	200002f8 	.word	0x200002f8
 8004598:	2000021c 	.word	0x2000021c
 800459c:	200002b0 	.word	0x200002b0
 80045a0:	20000218 	.word	0x20000218
 80045a4:	20000304 	.word	0x20000304

080045a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <vTaskInternalSetTimeOutState+0x24>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <vTaskInternalSetTimeOutState+0x28>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000308 	.word	0x20000308
 80045d0:	200002f4 	.word	0x200002f4

080045d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80045de:	f000 fd0d 	bl	8004ffc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <xTaskCheckForTimeOut+0x8c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e026      	b.n	8004650 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4b17      	ldr	r3, [pc, #92]	; (8004664 <xTaskCheckForTimeOut+0x90>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d00a      	beq.n	8004624 <xTaskCheckForTimeOut+0x50>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	429a      	cmp	r2, r3
 8004616:	d305      	bcc.n	8004624 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e015      	b.n	8004650 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	429a      	cmp	r2, r3
 800462c:	d20b      	bcs.n	8004646 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ffb4 	bl	80045a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e004      	b.n	8004650 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004650:	f000 fcec 	bl	800502c <vPortExitCritical>

    return xReturn;
 8004654:	697b      	ldr	r3, [r7, #20]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200002f4 	.word	0x200002f4
 8004664:	20000308 	.word	0x20000308

08004668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <vTaskMissedYield+0x14>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000304 	.word	0x20000304

08004680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004688:	f000 f852 	bl	8004730 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <prvIdleTask+0x28>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d9f9      	bls.n	8004688 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <prvIdleTask+0x2c>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80046a4:	e7f0      	b.n	8004688 <prvIdleTask+0x8>
 80046a6:	bf00      	nop
 80046a8:	2000021c 	.word	0x2000021c
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	e00c      	b.n	80046d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <prvInitialiseTaskLists+0x60>)
 80046c8:	4413      	add	r3, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe0a 	bl	80032e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3301      	adds	r3, #1
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d9ef      	bls.n	80046bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046dc:	480d      	ldr	r0, [pc, #52]	; (8004714 <prvInitialiseTaskLists+0x64>)
 80046de:	f7fe fe01 	bl	80032e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046e2:	480d      	ldr	r0, [pc, #52]	; (8004718 <prvInitialiseTaskLists+0x68>)
 80046e4:	f7fe fdfe 	bl	80032e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046e8:	480c      	ldr	r0, [pc, #48]	; (800471c <prvInitialiseTaskLists+0x6c>)
 80046ea:	f7fe fdfb 	bl	80032e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80046ee:	480c      	ldr	r0, [pc, #48]	; (8004720 <prvInitialiseTaskLists+0x70>)
 80046f0:	f7fe fdf8 	bl	80032e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80046f4:	480b      	ldr	r0, [pc, #44]	; (8004724 <prvInitialiseTaskLists+0x74>)
 80046f6:	f7fe fdf5 	bl	80032e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvInitialiseTaskLists+0x78>)
 80046fc:	4a05      	ldr	r2, [pc, #20]	; (8004714 <prvInitialiseTaskLists+0x64>)
 80046fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvInitialiseTaskLists+0x7c>)
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <prvInitialiseTaskLists+0x68>)
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2000021c 	.word	0x2000021c
 8004714:	20000280 	.word	0x20000280
 8004718:	20000294 	.word	0x20000294
 800471c:	200002b0 	.word	0x200002b0
 8004720:	200002c4 	.word	0x200002c4
 8004724:	200002dc 	.word	0x200002dc
 8004728:	200002a8 	.word	0x200002a8
 800472c:	200002ac 	.word	0x200002ac

08004730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004736:	e019      	b.n	800476c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004738:	f000 fc60 	bl	8004ffc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <prvCheckTasksWaitingTermination+0x4c>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fe2e 	bl	80033aa <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <prvCheckTasksWaitingTermination+0x50>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <prvCheckTasksWaitingTermination+0x50>)
 8004756:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <prvCheckTasksWaitingTermination+0x54>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3b01      	subs	r3, #1
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <prvCheckTasksWaitingTermination+0x54>)
 8004760:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004762:	f000 fc63 	bl	800502c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f80e 	bl	8004788 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <prvCheckTasksWaitingTermination+0x54>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e1      	bne.n	8004738 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200002c4 	.word	0x200002c4
 8004780:	200002f0 	.word	0x200002f0
 8004784:	200002d8 	.word	0x200002d8

08004788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fd6f 	bl	8005278 <vPortFree>
                vPortFree( pxTCB );
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fd6c 	bl	8005278 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <prvResetNextTaskUnblockTime+0x2c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <prvResetNextTaskUnblockTime+0x30>)
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80047be:	e005      	b.n	80047cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <prvResetNextTaskUnblockTime+0x2c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a03      	ldr	r2, [pc, #12]	; (80047d8 <prvResetNextTaskUnblockTime+0x30>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	200002a8 	.word	0x200002a8
 80047d8:	20000310 	.word	0x20000310

080047dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <xTaskGetSchedulerState+0x34>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80047ea:	2301      	movs	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	e008      	b.n	8004802 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <xTaskGetSchedulerState+0x38>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80047f8:	2302      	movs	r3, #2
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	e001      	b.n	8004802 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004802:	687b      	ldr	r3, [r7, #4]
    }
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	200002fc 	.word	0x200002fc
 8004814:	20000318 	.word	0x20000318

08004818 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3304      	adds	r3, #4
 800482e:	4618      	mov	r0, r3
 8004830:	f7fe fdbb 	bl	80033aa <uxListRemove>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800483a:	4b31      	ldr	r3, [pc, #196]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <prvAddCurrentTaskToDelayedList+0xec>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4013      	ands	r3, r2
 800484e:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <prvAddCurrentTaskToDelayedList+0xec>)
 8004850:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d124      	bne.n	80048a4 <prvAddCurrentTaskToDelayedList+0x8c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d021      	beq.n	80048a4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
 800486e:	4b24      	ldr	r3, [pc, #144]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	6892      	ldr	r2, [r2, #8]
 8004876:	60da      	str	r2, [r3, #12]
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	3204      	adds	r2, #4
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004894:	615a      	str	r2, [r3, #20]
 8004896:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a1a      	ldr	r2, [pc, #104]	; (8004908 <prvAddCurrentTaskToDelayedList+0xf0>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80048a2:	e026      	b.n	80048f2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d209      	bcs.n	80048d0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <prvAddCurrentTaskToDelayedList+0xf4>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe fd36 	bl	800333a <vListInsert>
}
 80048ce:	e010      	b.n	80048f2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <prvAddCurrentTaskToDelayedList+0xf8>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fe fd2c 	bl	800333a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d202      	bcs.n	80048f2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80048ec:	4a09      	ldr	r2, [pc, #36]	; (8004914 <prvAddCurrentTaskToDelayedList+0xfc>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6013      	str	r3, [r2, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200002f4 	.word	0x200002f4
 8004900:	20000218 	.word	0x20000218
 8004904:	200002f8 	.word	0x200002f8
 8004908:	200002dc 	.word	0x200002dc
 800490c:	200002ac 	.word	0x200002ac
 8004910:	200002a8 	.word	0x200002a8
 8004914:	20000310 	.word	0x20000310

08004918 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004922:	f000 fab1 	bl	8004e88 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <xTimerCreateTimerTask+0x38>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <xTimerCreateTimerTask+0x3c>)
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	2301      	movs	r3, #1
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493c:	4906      	ldr	r1, [pc, #24]	; (8004958 <xTimerCreateTimerTask+0x40>)
 800493e:	4807      	ldr	r0, [pc, #28]	; (800495c <xTimerCreateTimerTask+0x44>)
 8004940:	f7ff f918 	bl	8003b74 <xTaskCreate>
 8004944:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 8004946:	687b      	ldr	r3, [r7, #4]
    }
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	2000034c 	.word	0x2000034c
 8004954:	20000350 	.word	0x20000350
 8004958:	0800aeb8 	.word	0x0800aeb8
 800495c:	08004b19 	.word	0x08004b19

08004960 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800496e:	2028      	movs	r0, #40	; 0x28
 8004970:	f000 fbd4 	bl	800511c <pvPortMalloc>
 8004974:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	9301      	str	r3, [sp, #4]
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f805 	bl	80049a2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004998:	697b      	ldr	r3, [r7, #20]
        }
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
            * created/initialised. */
        prvCheckForValidListAndQueue();
 80049b0:	f000 fa6a 	bl	8004e88 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
            * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fca6 	bl	8003322 <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <prvInitialiseNewTimer+0x4c>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <xTimerGenericCommand+0x7c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02a      	beq.n	8004a68 <xTimerGenericCommand+0x70>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	61bb      	str	r3, [r7, #24]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	dc18      	bgt.n	8004a56 <xTimerGenericCommand+0x5e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a24:	f7ff feda 	bl	80047dc <xTaskGetSchedulerState>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d109      	bne.n	8004a42 <xTimerGenericCommand+0x4a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <xTimerGenericCommand+0x7c>)
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	f107 0110 	add.w	r1, r7, #16
 8004a36:	2300      	movs	r3, #0
 8004a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a3a:	f7fe fdbd 	bl	80035b8 <xQueueGenericSend>
 8004a3e:	61f8      	str	r0, [r7, #28]
 8004a40:	e012      	b.n	8004a68 <xTimerGenericCommand+0x70>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <xTimerGenericCommand+0x7c>)
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	f107 0110 	add.w	r1, r7, #16
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f7fe fdb3 	bl	80035b8 <xQueueGenericSend>
 8004a52:	61f8      	str	r0, [r7, #28]
 8004a54:	e008      	b.n	8004a68 <xTimerGenericCommand+0x70>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <xTimerGenericCommand+0x7c>)
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	f107 0110 	add.w	r1, r7, #16
 8004a5e:	2300      	movs	r3, #0
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	f7fe fe53 	bl	800370c <xQueueGenericSendFromISR>
 8004a66:	61f8      	str	r0, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a68:	69fb      	ldr	r3, [r7, #28]
    }
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000034c 	.word	0x2000034c

08004a78 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a84:	e008      	b.n	8004a98 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	18d1      	adds	r1, r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8d9 	bl	8004c5c <prvInsertTimerInActiveList>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ea      	bne.n	8004a86 <prvReloadTimer+0xe>
        }
    }
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <prvProcessExpiredTimer+0x5c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fc6a 	bl	80033aa <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ffc5 	bl	8004a78 <prvReloadTimer>
 8004aee:	e008      	b.n	8004b02 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	4798      	blx	r3
    }
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000344 	.word	0x20000344

08004b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f857 	bl	8004bd8 <prvGetNextExpireTime>
 8004b2a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f803 	bl	8004b3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b36:	f000 f8d3 	bl	8004ce0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b3a:	e7f1      	b.n	8004b20 <prvTimerTask+0x8>

08004b3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b46:	f7ff f9c5 	bl	8003ed4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f864 	bl	8004c1c <prvSampleTimeNow>
 8004b54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d130      	bne.n	8004bbe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <prvProcessTimerOrBlockTask+0x3c>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d806      	bhi.n	8004b78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004b6a:	f7ff f9c1 	bl	8003ef0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ffa1 	bl	8004ab8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b76:	e024      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <prvProcessTimerOrBlockTask+0x90>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <prvProcessTimerOrBlockTask+0x50>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <prvProcessTimerOrBlockTask+0x52>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <prvProcessTimerOrBlockTask+0x94>)
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	f7fe ffb5 	bl	8003b0c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004ba2:	f7ff f9a5 	bl	8003ef0 <xTaskResumeAll>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <prvProcessTimerOrBlockTask+0x98>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
    }
 8004bbc:	e001      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004bbe:	f7ff f997 	bl	8003ef0 <xTaskResumeAll>
    }
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000348 	.word	0x20000348
 8004bd0:	2000034c 	.word	0x2000034c
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <prvGetNextExpireTime+0x40>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <prvGetNextExpireTime+0x16>
 8004bea:	2201      	movs	r2, #1
 8004bec:	e000      	b.n	8004bf0 <prvGetNextExpireTime+0x18>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <prvGetNextExpireTime+0x40>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e001      	b.n	8004c0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
    }
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	20000344 	.word	0x20000344

08004c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c24:	f7ff fa50 	bl	80040c8 <xTaskGetTickCount>
 8004c28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <prvSampleTimeNow+0x3c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d205      	bcs.n	8004c40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004c34:	f000 f902 	bl	8004e3c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c46:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <prvSampleTimeNow+0x3c>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    }
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000354 	.word	0x20000354

08004c5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d812      	bhi.n	8004ca8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e01b      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <prvInsertTimerInActiveList+0x7c>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7fe fb4a 	bl	800333a <vListInsert>
 8004ca6:	e012      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d206      	bcs.n	8004cbe <prvInsertTimerInActiveList+0x62>
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e007      	b.n	8004cce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <prvInsertTimerInActiveList+0x80>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7fe fb36 	bl	800333a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004cce:	697b      	ldr	r3, [r7, #20]
    }
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000348 	.word	0x20000348
 8004cdc:	20000344 	.word	0x20000344

08004ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ce6:	e097      	b.n	8004e18 <prvProcessReceivedCommands+0x138>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f2c0 8093 	blt.w	8004e16 <prvProcessReceivedCommands+0x136>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fb52 	bl	80033aa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d06:	463b      	mov	r3, r7
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff87 	bl	8004c1c <prvSampleTimeNow>
 8004d0e:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d87f      	bhi.n	8004e18 <prvProcessReceivedCommands+0x138>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <prvProcessReceivedCommands+0x40>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d45 	.word	0x08004d45
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004dad 	.word	0x08004dad
 8004d2c:	08004dc1 	.word	0x08004dc1
 8004d30:	08004ded 	.word	0x08004ded
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d45 	.word	0x08004d45
 8004d3c:	08004dad 	.word	0x08004dad
 8004d40:	08004dc1 	.word	0x08004dc1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	18d1      	adds	r1, r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ff7a 	bl	8004c5c <prvInsertTimerInActiveList>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d054      	beq.n	8004e18 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4413      	add	r3, r2
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4619      	mov	r1, r3
 8004d88:	6978      	ldr	r0, [r7, #20]
 8004d8a:	f7ff fe75 	bl	8004a78 <prvReloadTimer>
 8004d8e:	e008      	b.n	8004da2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004daa:	e035      	b.n	8004e18 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8004dbe:	e02b      	b.n	8004e18 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	18d1      	adds	r1, r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7ff ff39 	bl	8004c5c <prvInsertTimerInActiveList>
                        break;
 8004dea:	e015      	b.n	8004e18 <prvProcessReceivedCommands+0x138>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <prvProcessReceivedCommands+0x122>
                                {
                                    vPortFree( pxTimer );
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f000 fa3c 	bl	8005278 <vPortFree>
 8004e00:	e00a      	b.n	8004e18 <prvProcessReceivedCommands+0x138>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e14:	e000      	b.n	8004e18 <prvProcessReceivedCommands+0x138>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e16:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <prvProcessReceivedCommands+0x158>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	1d39      	adds	r1, r7, #4
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fccf 	bl	80037c4 <xQueueReceive>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af5d 	bne.w	8004ce8 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2000034c 	.word	0x2000034c

08004e3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e42:	e009      	b.n	8004e58 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e44:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e52:	6838      	ldr	r0, [r7, #0]
 8004e54:	f7ff fe30 	bl	8004ab8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <prvSwitchTimerLists+0x48>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <prvSwitchTimerLists+0x44>)
 8004e6e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <prvSwitchTimerLists+0x48>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
    }
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000344 	.word	0x20000344
 8004e84:	20000348 	.word	0x20000348

08004e88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004e8c:	f000 f8b6 	bl	8004ffc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <prvCheckForValidListAndQueue+0x40>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8004e98:	480c      	ldr	r0, [pc, #48]	; (8004ecc <prvCheckForValidListAndQueue+0x44>)
 8004e9a:	f7fe fa23 	bl	80032e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004e9e:	480c      	ldr	r0, [pc, #48]	; (8004ed0 <prvCheckForValidListAndQueue+0x48>)
 8004ea0:	f7fe fa20 	bl	80032e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <prvCheckForValidListAndQueue+0x4c>)
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <prvCheckForValidListAndQueue+0x44>)
 8004ea8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <prvCheckForValidListAndQueue+0x50>)
 8004eac:	4a08      	ldr	r2, [pc, #32]	; (8004ed0 <prvCheckForValidListAndQueue+0x48>)
 8004eae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	210c      	movs	r1, #12
 8004eb4:	2002      	movs	r0, #2
 8004eb6:	f7fe fb1b 	bl	80034f0 <xQueueGenericCreate>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <prvCheckForValidListAndQueue+0x40>)
 8004ebe:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ec0:	f000 f8b4 	bl	800502c <vPortExitCritical>
    }
 8004ec4:	bf00      	nop
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2000034c 	.word	0x2000034c
 8004ecc:	2000031c 	.word	0x2000031c
 8004ed0:	20000330 	.word	0x20000330
 8004ed4:	20000344 	.word	0x20000344
 8004ed8:	20000348 	.word	0x20000348

08004edc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b04      	subs	r3, #4
 8004eec:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ef4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <pxPortInitialiseStack+0x54>)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b14      	subs	r3, #20
 8004f16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b20      	subs	r3, #32
 8004f22:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr
 8004f30:	08004f35 	.word	0x08004f35

08004f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f3e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004f50:	bf00      	nop
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0fc      	beq.n	8004f52 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr
	...

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f8e:	4770      	bx	lr

08004f90 <pxCurrentTCBConst2>:
 8004f90:	20000218 	.word	0x20000218
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004f98:	4806      	ldr	r0, [pc, #24]	; (8004fb4 <prvPortStartFirstTask+0x1c>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	b662      	cpsie	i
 8004fa4:	b661      	cpsie	f
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	df00      	svc	0
 8004fb0:	bf00      	nop
 8004fb2:	0000      	.short	0x0000
 8004fb4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop

08004fbc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <xPortStartScheduler+0x38>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	; (8004ff4 <xPortStartScheduler+0x38>)
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004fcc:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <xPortStartScheduler+0x38>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <xPortStartScheduler+0x38>)
 8004fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004fd8:	f000 f886 	bl	80050e8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <xPortStartScheduler+0x3c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004fe2:	f7ff ffd9 	bl	8004f98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004fe6:	f7ff f983 	bl	80042f0 <vTaskSwitchContext>
    prvTaskExitError();
 8004fea:	f7ff ffa3 	bl	8004f34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	e000ed20 	.word	0xe000ed20
 8004ff8:	20000014 	.word	0x20000014

08004ffc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <vPortEnterCritical+0x2c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a03      	ldr	r2, [pc, #12]	; (8005028 <vPortEnterCritical+0x2c>)
 800501c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	20000014 	.word	0x20000014

0800502c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <vPortExitCritical+0x2c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <vPortExitCritical+0x2c>)
 800503a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <vPortExitCritical+0x2c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <vPortExitCritical+0x22>
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
        __asm volatile
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	20000014 	.word	0x20000014
 800505c:	00000000 	.word	0x00000000

08005060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005060:	f3ef 8009 	mrs	r0, PSP
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <pxCurrentTCBConst>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005070:	6010      	str	r0, [r2, #0]
 8005072:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005076:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800507a:	f380 8811 	msr	BASEPRI, r0
 800507e:	f7ff f937 	bl	80042f0 <vTaskSwitchContext>
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8811 	msr	BASEPRI, r0
 800508a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005096:	f380 8809 	msr	PSP, r0
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	4770      	bx	lr

080050a0 <pxCurrentTCBConst>:
 80050a0:	20000218 	.word	0x20000218
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
        __asm volatile
 80050ae:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80050c0:	f7ff f810 	bl	80040e4 <xTaskIncrementTick>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <SysTick_Handler+0x3c>)
 80050cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <vPortSetupTimerInterrupt+0x24>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <vPortSetupTimerInterrupt+0x28>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <vPortSetupTimerInterrupt+0x2c>)
 80050fa:	4a07      	ldr	r2, [pc, #28]	; (8005118 <vPortSetupTimerInterrupt+0x30>)
 80050fc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050fe:	4b03      	ldr	r3, [pc, #12]	; (800510c <vPortSetupTimerInterrupt+0x24>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	e000e010 	.word	0xe000e010
 8005110:	e000e018 	.word	0xe000e018
 8005114:	e000e014 	.word	0xe000e014
 8005118:	0001193f 	.word	0x0001193f

0800511c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8005128:	f7fe fed4 	bl	8003ed4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <pvPortMalloc+0x144>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005134:	f000 f8e0 	bl	80052f8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005138:	4b4a      	ldr	r3, [pc, #296]	; (8005264 <pvPortMalloc+0x148>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8086 	bne.w	8005252 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800514c:	2208      	movs	r2, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d218      	bcs.n	800518a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8005158:	2208      	movs	r2, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4413      	add	r3, r2
 800515e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	2b00      	cmp	r3, #0
 8005168:	d011      	beq.n	800518e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f023 0307 	bic.w	r3, r3, #7
 8005170:	3308      	adds	r3, #8
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d205      	bcs.n	8005184 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	3308      	adds	r3, #8
 8005180:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005182:	e004      	b.n	800518e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005188:	e001      	b.n	800518e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05e      	beq.n	8005252 <pvPortMalloc+0x136>
 8005194:	4b34      	ldr	r3, [pc, #208]	; (8005268 <pvPortMalloc+0x14c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d859      	bhi.n	8005252 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800519e:	4b33      	ldr	r3, [pc, #204]	; (800526c <pvPortMalloc+0x150>)
 80051a0:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 80051a2:	4b32      	ldr	r3, [pc, #200]	; (800526c <pvPortMalloc+0x150>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a8:	e004      	b.n	80051b4 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <pvPortMalloc+0xaa>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f1      	bne.n	80051aa <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80051c6:	4b26      	ldr	r3, [pc, #152]	; (8005260 <pvPortMalloc+0x144>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d040      	beq.n	8005252 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2208      	movs	r2, #8
 80051d6:	4413      	add	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	2308      	movs	r3, #8
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d90f      	bls.n	8005212 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	1ad2      	subs	r2, r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f000 f8d5 	bl	80053bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <pvPortMalloc+0x14c>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	4a12      	ldr	r2, [pc, #72]	; (8005268 <pvPortMalloc+0x14c>)
 800521e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <pvPortMalloc+0x14c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <pvPortMalloc+0x154>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d203      	bcs.n	8005234 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800522c:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <pvPortMalloc+0x14c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <pvPortMalloc+0x154>)
 8005232:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <pvPortMalloc+0x148>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	431a      	orrs	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <pvPortMalloc+0x158>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <pvPortMalloc+0x158>)
 8005250:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005252:	f7fe fe4d 	bl	8003ef0 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8005256:	68fb      	ldr	r3, [r7, #12]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20003360 	.word	0x20003360
 8005264:	20003374 	.word	0x20003374
 8005268:	20003364 	.word	0x20003364
 800526c:	20003358 	.word	0x20003358
 8005270:	20003368 	.word	0x20003368
 8005274:	2000336c 	.word	0x2000336c

08005278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d02c      	beq.n	80052e4 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800528a:	2308      	movs	r3, #8
 800528c:	425b      	negs	r3, r3
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <vPortFree+0x74>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01e      	beq.n	80052e4 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11a      	bne.n	80052e4 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <vPortFree+0x74>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	401a      	ands	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80052be:	f7fe fe09 	bl	8003ed4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <vPortFree+0x78>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <vPortFree+0x78>)
 80052ce:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f000 f873 	bl	80053bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <vPortFree+0x7c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <vPortFree+0x7c>)
 80052de:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80052e0:	f7fe fe06 	bl	8003ef0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	20003374 	.word	0x20003374
 80052f0:	20003364 	.word	0x20003364
 80052f4:	20003370 	.word	0x20003370

080052f8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005302:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <prvHeapInit+0xac>)
 8005306:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3307      	adds	r3, #7
 8005316:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a1f      	ldr	r2, [pc, #124]	; (80053a4 <prvHeapInit+0xac>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <prvHeapInit+0xb0>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <prvHeapInit+0xb0>)
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005344:	2208      	movs	r2, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0307 	bic.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <prvHeapInit+0xb4>)
 8005358:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <prvHeapInit+0xb4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <prvHeapInit+0xb4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <prvHeapInit+0xb4>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <prvHeapInit+0xb8>)
 8005386:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <prvHeapInit+0xbc>)
 800538e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <prvHeapInit+0xc0>)
 8005392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000358 	.word	0x20000358
 80053a8:	20003358 	.word	0x20003358
 80053ac:	20003360 	.word	0x20003360
 80053b0:	20003368 	.word	0x20003368
 80053b4:	20003364 	.word	0x20003364
 80053b8:	20003374 	.word	0x20003374

080053bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053c4:	4b27      	ldr	r3, [pc, #156]	; (8005464 <prvInsertBlockIntoFreeList+0xa8>)
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e002      	b.n	80053d0 <prvInsertBlockIntoFreeList+0x14>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d8f7      	bhi.n	80053ca <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4413      	add	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d108      	bne.n	80053fe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	441a      	add	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d118      	bne.n	8005444 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <prvInsertBlockIntoFreeList+0xac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d00d      	beq.n	800543a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e008      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <prvInsertBlockIntoFreeList+0xac>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e003      	b.n	800544c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d002      	beq.n	800545a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	20003358 	.word	0x20003358
 8005468:	20003360 	.word	0x20003360

0800546c <clockInit>:
// ------------------------------------------------------------------
// Global functions
// ------------------------------------------------------------------


void clockInit(){
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <clockInit+0x30>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	4a09      	ldr	r2, [pc, #36]	; (800549c <clockInit+0x30>)
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLk_EN();
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <clockInit+0x30>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <clockInit+0x30>)
 8005482:	f043 0308 	orr.w	r3, r3, #8
 8005486:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <clockInit+0x30>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	4a03      	ldr	r2, [pc, #12]	; (800549c <clockInit+0x30>)
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	6193      	str	r3, [r2, #24]
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40021000 	.word	0x40021000

080054a0 <TempSensorStatusPeriodicTimer_Handler>:
void Store_Command_Handler(void *vparams);
void Command_Execute_Handler(void *vparams);


// Periodic Timers Callback.
void TempSensorStatusPeriodicTimer_Handler(TimerHandle_t xTimer){
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	tempLastStatus = HAL_LM35_Read();
 80054a8:	f7fb ff32 	bl	8001310 <HAL_LM35_Read>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <TempSensorStatusPeriodicTimer_Handler+0x6c>)
 80054b0:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x88\", \"data\": %.2f ^C}\r\n", tempLastStatus);
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <TempSensorStatusPeriodicTimer_Handler+0x6c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fa ffd0 	bl	800045c <__aeabi_f2d>
 80054bc:	4603      	mov	r3, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	461a      	mov	r2, r3
 80054c2:	4623      	mov	r3, r4
 80054c4:	4912      	ldr	r1, [pc, #72]	; (8005510 <TempSensorStatusPeriodicTimer_Handler+0x70>)
 80054c6:	4813      	ldr	r0, [pc, #76]	; (8005514 <TempSensorStatusPeriodicTimer_Handler+0x74>)
 80054c8:	f001 fc86 	bl	8006dd8 <siprintf>
	for(int i = 0; i < strlen(buffer); i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e00b      	b.n	80054ea <TempSensorStatusPeriodicTimer_Handler+0x4a>
		UART_Send_SingelChar(UART2, buffer[i], enable);
 80054d2:	4a10      	ldr	r2, [pc, #64]	; (8005514 <TempSensorStatusPeriodicTimer_Handler+0x74>)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	4619      	mov	r1, r3
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <TempSensorStatusPeriodicTimer_Handler+0x78>)
 80054e0:	f7fd fe68 	bl	80031b4 <UART_Send_SingelChar>
	for(int i = 0; i < strlen(buffer); i++)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	480a      	ldr	r0, [pc, #40]	; (8005514 <TempSensorStatusPeriodicTimer_Handler+0x74>)
 80054ec:	f7fa fe4a 	bl	8000184 <strlen>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d8ec      	bhi.n	80054d2 <TempSensorStatusPeriodicTimer_Handler+0x32>
	memset(buffer, 0, 60);
 80054f8:	223c      	movs	r2, #60	; 0x3c
 80054fa:	2100      	movs	r1, #0
 80054fc:	4805      	ldr	r0, [pc, #20]	; (8005514 <TempSensorStatusPeriodicTimer_Handler+0x74>)
 80054fe:	f000 fef0 	bl	80062e2 <memset>
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	bd90      	pop	{r4, r7, pc}
 800550a:	bf00      	nop
 800550c:	2000337c 	.word	0x2000337c
 8005510:	0800aec0 	.word	0x0800aec0
 8005514:	2000340c 	.word	0x2000340c
 8005518:	40004400 	.word	0x40004400

0800551c <LightSensorStatusPeriodicTimer_Handler>:

void LightSensorStatusPeriodicTimer_Handler(TimerHandle_t xTimer){
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	lightLastStatus = HAL_LDR_Read_Intensity();
 8005524:	f7fb fec0 	bl	80012a8 <HAL_LDR_Read_Intensity>
 8005528:	4602      	mov	r2, r0
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <LightSensorStatusPeriodicTimer_Handler+0x6c>)
 800552c:	601a      	str	r2, [r3, #0]
	sprintf(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x88\", \"data\": %.2f ^C}\r\n", lightLastStatus);
 800552e:	4b16      	ldr	r3, [pc, #88]	; (8005588 <LightSensorStatusPeriodicTimer_Handler+0x6c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7fa ff92 	bl	800045c <__aeabi_f2d>
 8005538:	4603      	mov	r3, r0
 800553a:	460c      	mov	r4, r1
 800553c:	461a      	mov	r2, r3
 800553e:	4623      	mov	r3, r4
 8005540:	4912      	ldr	r1, [pc, #72]	; (800558c <LightSensorStatusPeriodicTimer_Handler+0x70>)
 8005542:	4813      	ldr	r0, [pc, #76]	; (8005590 <LightSensorStatusPeriodicTimer_Handler+0x74>)
 8005544:	f001 fc48 	bl	8006dd8 <siprintf>
	for(int i = 0; i < strlen(buffer); i++)
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e00b      	b.n	8005566 <LightSensorStatusPeriodicTimer_Handler+0x4a>
		UART_Send_SingelChar(UART2, buffer[i], enable);
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <LightSensorStatusPeriodicTimer_Handler+0x74>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	4619      	mov	r1, r3
 800555a:	480e      	ldr	r0, [pc, #56]	; (8005594 <LightSensorStatusPeriodicTimer_Handler+0x78>)
 800555c:	f7fd fe2a 	bl	80031b4 <UART_Send_SingelChar>
	for(int i = 0; i < strlen(buffer); i++)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	480a      	ldr	r0, [pc, #40]	; (8005590 <LightSensorStatusPeriodicTimer_Handler+0x74>)
 8005568:	f7fa fe0c 	bl	8000184 <strlen>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d8ec      	bhi.n	800554e <LightSensorStatusPeriodicTimer_Handler+0x32>
	memset(buffer, 0, 60);
 8005574:	223c      	movs	r2, #60	; 0x3c
 8005576:	2100      	movs	r1, #0
 8005578:	4805      	ldr	r0, [pc, #20]	; (8005590 <LightSensorStatusPeriodicTimer_Handler+0x74>)
 800557a:	f000 feb2 	bl	80062e2 <memset>

}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bd90      	pop	{r4, r7, pc}
 8005586:	bf00      	nop
 8005588:	20003380 	.word	0x20003380
 800558c:	0800aec0 	.word	0x0800aec0
 8005590:	2000340c 	.word	0x2000340c
 8005594:	40004400 	.word	0x40004400

08005598 <welcomeMessage>:


void welcomeMessage(){
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
	strcpy(buffer, "Welcome To SmartEGAT Task :) \r\nPlease Enter a Command: \r\n");
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <welcomeMessage+0x88>)
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <welcomeMessage+0x8c>)
 80055a2:	4614      	mov	r4, r2
 80055a4:	469c      	mov	ip, r3
 80055a6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80055aa:	4665      	mov	r5, ip
 80055ac:	4626      	mov	r6, r4
 80055ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055b0:	6028      	str	r0, [r5, #0]
 80055b2:	6069      	str	r1, [r5, #4]
 80055b4:	60aa      	str	r2, [r5, #8]
 80055b6:	60eb      	str	r3, [r5, #12]
 80055b8:	3410      	adds	r4, #16
 80055ba:	f10c 0c10 	add.w	ip, ip, #16
 80055be:	4574      	cmp	r4, lr
 80055c0:	d1f3      	bne.n	80055aa <welcomeMessage+0x12>
 80055c2:	4662      	mov	r2, ip
 80055c4:	4623      	mov	r3, r4
 80055c6:	cb03      	ldmia	r3!, {r0, r1}
 80055c8:	6010      	str	r0, [r2, #0]
 80055ca:	6051      	str	r1, [r2, #4]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	8113      	strh	r3, [r2, #8]
	for(int i = 0; i < strlen(buffer); i++){
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e014      	b.n	8005600 <welcomeMessage+0x68>
		UART_Send_SingelChar(UART1, buffer[i], enable);
 80055d6:	4a12      	ldr	r2, [pc, #72]	; (8005620 <welcomeMessage+0x88>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	4619      	mov	r1, r3
 80055e2:	4811      	ldr	r0, [pc, #68]	; (8005628 <welcomeMessage+0x90>)
 80055e4:	f7fd fde6 	bl	80031b4 <UART_Send_SingelChar>
		UART_Send_SingelChar(UART2, buffer[i], enable);
 80055e8:	4a0d      	ldr	r2, [pc, #52]	; (8005620 <welcomeMessage+0x88>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4413      	add	r3, r2
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	4619      	mov	r1, r3
 80055f4:	480d      	ldr	r0, [pc, #52]	; (800562c <welcomeMessage+0x94>)
 80055f6:	f7fd fddd 	bl	80031b4 <UART_Send_SingelChar>
	for(int i = 0; i < strlen(buffer); i++){
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3301      	adds	r3, #1
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	4807      	ldr	r0, [pc, #28]	; (8005620 <welcomeMessage+0x88>)
 8005602:	f7fa fdbf 	bl	8000184 <strlen>
 8005606:	4602      	mov	r2, r0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d8e3      	bhi.n	80055d6 <welcomeMessage+0x3e>
	}
	memset(buffer, 0, 60);
 800560e:	223c      	movs	r2, #60	; 0x3c
 8005610:	2100      	movs	r1, #0
 8005612:	4803      	ldr	r0, [pc, #12]	; (8005620 <welcomeMessage+0x88>)
 8005614:	f000 fe65 	bl	80062e2 <memset>
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	2000340c 	.word	0x2000340c
 8005624:	0800aef8 	.word	0x0800aef8
 8005628:	40013800 	.word	0x40013800
 800562c:	40004400 	.word	0x40004400

08005630 <main>:

// ------------------------------------------------------------------
// Main Function
// ------------------------------------------------------------------

int main(void) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8
	// Clock Initialization
	clockInit();
 8005636:	f7ff ff19 	bl	800546c <clockInit>

	// UART Configuration
	UART_Config_t uartCfg ;
	uartCfg.BaudRate = UART_BaudRate_9600;
 800563a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800563e:	60bb      	str	r3, [r7, #8]
	uartCfg.IRQ_Enable = UART_IRQ_Eanble_RXNEIE;
 8005640:	2320      	movs	r3, #32
 8005642:	743b      	strb	r3, [r7, #16]
	uartCfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
	uartCfg.Parity = UART_Parity_NONE;
 8005648:	2300      	movs	r3, #0
 800564a:	737b      	strb	r3, [r7, #13]
	uartCfg.Mode = UART_Mode_TX_RX;
 800564c:	230c      	movs	r3, #12
 800564e:	713b      	strb	r3, [r7, #4]
	uartCfg.Payload = UART_PayloadLength_8B;
 8005650:	2300      	movs	r3, #0
 8005652:	733b      	strb	r3, [r7, #12]
	uartCfg.StopBits = UART_StopBits_One;
 8005654:	2300      	movs	r3, #0
 8005656:	73bb      	strb	r3, [r7, #14]
	uartCfg.P_IRQ_Callback = NULL;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
	MCAL_UART_Init(UART1, &uartCfg);
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4832      	ldr	r0, [pc, #200]	; (800572c <main+0xfc>)
 8005662:	f7fd fcd3 	bl	800300c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(UART1);
 8005666:	4831      	ldr	r0, [pc, #196]	; (800572c <main+0xfc>)
 8005668:	f7fd fdc2 	bl	80031f0 <MCAL_UART_GPIO_SetPins>
	uartCfg.IRQ_Enable = UART_IRQ_Eanble_NONE;
 800566c:	2300      	movs	r3, #0
 800566e:	743b      	strb	r3, [r7, #16]
	MCAL_UART_Init(UART2, &uartCfg);
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	4619      	mov	r1, r3
 8005674:	482e      	ldr	r0, [pc, #184]	; (8005730 <main+0x100>)
 8005676:	f7fd fcc9 	bl	800300c <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(UART2);
 800567a:	482d      	ldr	r0, [pc, #180]	; (8005730 <main+0x100>)
 800567c:	f7fd fdb8 	bl	80031f0 <MCAL_UART_GPIO_SetPins>

	// Queues Creation.
	currCommandQueue = xQueueCreate(50, sizeof(char));
 8005680:	2200      	movs	r2, #0
 8005682:	2101      	movs	r1, #1
 8005684:	2032      	movs	r0, #50	; 0x32
 8005686:	f7fd ff33 	bl	80034f0 <xQueueGenericCreate>
 800568a:	4602      	mov	r2, r0
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <main+0x104>)
 800568e:	601a      	str	r2, [r3, #0]
	commandsQueue = xQueueCreate(5, MAX_CMD_LENGTH);
 8005690:	2200      	movs	r2, #0
 8005692:	2132      	movs	r1, #50	; 0x32
 8005694:	2005      	movs	r0, #5
 8005696:	f7fd ff2b 	bl	80034f0 <xQueueGenericCreate>
 800569a:	4602      	mov	r2, r0
 800569c:	4b26      	ldr	r3, [pc, #152]	; (8005738 <main+0x108>)
 800569e:	601a      	str	r2, [r3, #0]
	commandExecuteQueue = xQueueCreate(5, sizeof(COMMAND_TYPE));
 80056a0:	2200      	movs	r2, #0
 80056a2:	210f      	movs	r1, #15
 80056a4:	2005      	movs	r0, #5
 80056a6:	f7fd ff23 	bl	80034f0 <xQueueGenericCreate>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b23      	ldr	r3, [pc, #140]	; (800573c <main+0x10c>)
 80056ae:	601a      	str	r2, [r3, #0]

	// Tasks Creation.
	xTaskCreate(Store_Command_Handler, "Store Command", 256, NULL, 2, &Store_Command_Handle);
 80056b0:	4b23      	ldr	r3, [pc, #140]	; (8005740 <main+0x110>)
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	2302      	movs	r3, #2
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056be:	4921      	ldr	r1, [pc, #132]	; (8005744 <main+0x114>)
 80056c0:	4821      	ldr	r0, [pc, #132]	; (8005748 <main+0x118>)
 80056c2:	f7fe fa57 	bl	8003b74 <xTaskCreate>
	xTaskCreate(Parse_Command_Handler, "Parse Command", 128, NULL, 1, &Parse_Command_Handle);
 80056c6:	4b21      	ldr	r3, [pc, #132]	; (800574c <main+0x11c>)
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	2301      	movs	r3, #1
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2300      	movs	r3, #0
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	491f      	ldr	r1, [pc, #124]	; (8005750 <main+0x120>)
 80056d4:	481f      	ldr	r0, [pc, #124]	; (8005754 <main+0x124>)
 80056d6:	f7fe fa4d 	bl	8003b74 <xTaskCreate>
	xTaskCreate(Command_Execute_Handler, "Execute Command", 512, NULL, 2, &Command_Execute_Handle);
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <main+0x128>)
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	2302      	movs	r3, #2
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	491c      	ldr	r1, [pc, #112]	; (800575c <main+0x12c>)
 80056ea:	481d      	ldr	r0, [pc, #116]	; (8005760 <main+0x130>)
 80056ec:	f7fe fa42 	bl	8003b74 <xTaskCreate>

	// Timers Creation
	TempSensorStatusPeriodic_Timer = xTimerCreate("Tempareture Status TIM", (1000 / portTICK_PERIOD_MS), pdTRUE, (void*)0, TempSensorStatusPeriodicTimer_Handler);
 80056f0:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <main+0x134>)
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	2201      	movs	r2, #1
 80056f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056fc:	481a      	ldr	r0, [pc, #104]	; (8005768 <main+0x138>)
 80056fe:	f7ff f92f 	bl	8004960 <xTimerCreate>
 8005702:	4602      	mov	r2, r0
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <main+0x13c>)
 8005706:	601a      	str	r2, [r3, #0]
	LightSensorStatusPeriodic_Timer = xTimerCreate("Light Status TIM", (1000 / portTICK_PERIOD_MS), pdTRUE, (void*)1, LightSensorStatusPeriodicTimer_Handler);
 8005708:	4b19      	ldr	r3, [pc, #100]	; (8005770 <main+0x140>)
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2301      	movs	r3, #1
 800570e:	2201      	movs	r2, #1
 8005710:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005714:	4817      	ldr	r0, [pc, #92]	; (8005774 <main+0x144>)
 8005716:	f7ff f923 	bl	8004960 <xTimerCreate>
 800571a:	4602      	mov	r2, r0
 800571c:	4b16      	ldr	r3, [pc, #88]	; (8005778 <main+0x148>)
 800571e:	601a      	str	r2, [r3, #0]

	//RX_TX_Semaphore = xSemaphoreCreateBinary();

	welcomeMessage();
 8005720:	f7ff ff3a 	bl	8005598 <welcomeMessage>

	// Starting FreeRTOS Schedular.
	vTaskStartScheduler();
 8005724:	f7fe fb96 	bl	8003e54 <vTaskStartScheduler>

	while (1) {
 8005728:	e7fe      	b.n	8005728 <main+0xf8>
 800572a:	bf00      	nop
 800572c:	40013800 	.word	0x40013800
 8005730:	40004400 	.word	0x40004400
 8005734:	200033fc 	.word	0x200033fc
 8005738:	20003400 	.word	0x20003400
 800573c:	200033f0 	.word	0x200033f0
 8005740:	200033ec 	.word	0x200033ec
 8005744:	0800af34 	.word	0x0800af34
 8005748:	0800577d 	.word	0x0800577d
 800574c:	20003404 	.word	0x20003404
 8005750:	0800af44 	.word	0x0800af44
 8005754:	0800592d 	.word	0x0800592d
 8005758:	200033f4 	.word	0x200033f4
 800575c:	0800af54 	.word	0x0800af54
 8005760:	08005999 	.word	0x08005999
 8005764:	080054a1 	.word	0x080054a1
 8005768:	0800af64 	.word	0x0800af64
 800576c:	20003448 	.word	0x20003448
 8005770:	0800551d 	.word	0x0800551d
 8005774:	0800af7c 	.word	0x0800af7c
 8005778:	200033e8 	.word	0x200033e8

0800577c <Store_Command_Handler>:
 * 1. Recive Command From UART ISR.
 * 2. Validate command (from deletions).
 * 3. Validate Json Command is a valid json format.
 * 4. Send Command Via Queue to be preccessed and executed.
 */
void Store_Command_Handler(void *vparams){
 800577c:	b580      	push	{r7, lr}
 800577e:	b094      	sub	sp, #80	; 0x50
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	uint8_t ch = 'E';
 8005784:	2345      	movs	r3, #69	; 0x45
 8005786:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t commandIndex = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t cmdBuffer[MAX_CMD_LENGTH];

	while(1){
		if(xQueueReceive(currCommandQueue, &ch, (TickType_t)5) != pdFALSE){
 8005790:	4b62      	ldr	r3, [pc, #392]	; (800591c <Store_Command_Handler+0x1a0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f107 013b 	add.w	r1, r7, #59	; 0x3b
 8005798:	2205      	movs	r2, #5
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe f812 	bl	80037c4 <xQueueReceive>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80b2 	beq.w	800590c <Store_Command_Handler+0x190>
			// Command Validation.
			if(ch == '\b' || ch == 127){
 80057a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d003      	beq.n	80057b8 <Store_Command_Handler+0x3c>
 80057b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80057b4:	2b7f      	cmp	r3, #127	; 0x7f
 80057b6:	d112      	bne.n	80057de <Store_Command_Handler+0x62>
				if(commandIndex > 0){
 80057b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a5 	beq.w	800590c <Store_Command_Handler+0x190>
					commandIndex--;
 80057c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					cmdBuffer[commandIndex] = '\0';
 80057cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80057d4:	4413      	add	r3, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	f803 2c48 	strb.w	r2, [r3, #-72]
				if(commandIndex > 0){
 80057dc:	e096      	b.n	800590c <Store_Command_Handler+0x190>
				}
			}else if(ch == '}'){
 80057de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80057e2:	2b7d      	cmp	r3, #125	; 0x7d
 80057e4:	d15f      	bne.n	80058a6 <Store_Command_Handler+0x12a>
				if(commandIndex < (MAX_CMD_LENGTH - 1)){
 80057e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057ea:	2b30      	cmp	r3, #48	; 0x30
 80057ec:	d838      	bhi.n	8005860 <Store_Command_Handler+0xe4>
					cmdBuffer[commandIndex++] = ch;
 80057ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 80057f8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80057fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005800:	440b      	add	r3, r1
 8005802:	f803 2c48 	strb.w	r2, [r3, #-72]
					cmdBuffer[commandIndex] = '\0';
 8005806:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800580a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800580e:	4413      	add	r3, r2
 8005810:	2200      	movs	r2, #0
 8005812:	f803 2c48 	strb.w	r2, [r3, #-72]
					if((Validate_JSON_Format(cmdBuffer))){
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc ffe2 	bl	80027e4 <Validate_JSON_Format>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <Store_Command_Handler+0xba>
						xQueueSend(commandsQueue, cmdBuffer, (TickType_t) 5);
 8005826:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <Store_Command_Handler+0x1a4>)
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f107 0108 	add.w	r1, r7, #8
 800582e:	2300      	movs	r3, #0
 8005830:	2205      	movs	r2, #5
 8005832:	f7fd fec1 	bl	80035b8 <xQueueGenericSend>
					}
					UART_Send_SingelChar(UART1, '\r', enable);
 8005836:	2200      	movs	r2, #0
 8005838:	210d      	movs	r1, #13
 800583a:	483a      	ldr	r0, [pc, #232]	; (8005924 <Store_Command_Handler+0x1a8>)
 800583c:	f7fd fcba 	bl	80031b4 <UART_Send_SingelChar>
					UART_Send_SingelChar(UART1, '\n', enable);
 8005840:	2200      	movs	r2, #0
 8005842:	210a      	movs	r1, #10
 8005844:	4837      	ldr	r0, [pc, #220]	; (8005924 <Store_Command_Handler+0x1a8>)
 8005846:	f7fd fcb5 	bl	80031b4 <UART_Send_SingelChar>
					memset(cmdBuffer, 0, MAX_CMD_LENGTH); // Reset Command Buffer.
 800584a:	f107 0308 	add.w	r3, r7, #8
 800584e:	2232      	movs	r2, #50	; 0x32
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fd45 	bl	80062e2 <memset>
					commandIndex = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800585e:	e055      	b.n	800590c <Store_Command_Handler+0x190>
				}else {
					char *buffer = "\r\nError: Command too long!\r\n";
 8005860:	4b31      	ldr	r3, [pc, #196]	; (8005928 <Store_Command_Handler+0x1ac>)
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(int i = 0; i < strlen(buffer); i++){
 8005864:	2300      	movs	r3, #0
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48
 8005868:	e00b      	b.n	8005882 <Store_Command_Handler+0x106>
						UART_Send_SingelChar(UART1, buffer[i], enable);
 800586a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	4619      	mov	r1, r3
 8005876:	482b      	ldr	r0, [pc, #172]	; (8005924 <Store_Command_Handler+0x1a8>)
 8005878:	f7fd fc9c 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++){
 800587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587e:	3301      	adds	r3, #1
 8005880:	64bb      	str	r3, [r7, #72]	; 0x48
 8005882:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005884:	f7fa fc7e 	bl	8000184 <strlen>
 8005888:	4602      	mov	r2, r0
 800588a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588c:	429a      	cmp	r2, r3
 800588e:	d8ec      	bhi.n	800586a <Store_Command_Handler+0xee>
					}
					memset(cmdBuffer, 0, MAX_CMD_LENGTH);
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	2232      	movs	r2, #50	; 0x32
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fd22 	bl	80062e2 <memset>
					commandIndex = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80058a4:	e032      	b.n	800590c <Store_Command_Handler+0x190>
				}
			}else{
				if(commandIndex < (MAX_CMD_LENGTH - 1)){
 80058a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058aa:	2b30      	cmp	r3, #48	; 0x30
 80058ac:	d80c      	bhi.n	80058c8 <Store_Command_Handler+0x14c>
					cmdBuffer[commandIndex++] = ch;
 80058ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 80058b8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80058bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80058c0:	440b      	add	r3, r1
 80058c2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80058c6:	e021      	b.n	800590c <Store_Command_Handler+0x190>
				}else{
					char *buffer = "\r\nError: Command too long!\r\n";
 80058c8:	4b17      	ldr	r3, [pc, #92]	; (8005928 <Store_Command_Handler+0x1ac>)
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
					for(int i = 0; i < strlen(buffer); i++){
 80058cc:	2300      	movs	r3, #0
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
 80058d0:	e00b      	b.n	80058ea <Store_Command_Handler+0x16e>
						UART_Send_SingelChar(UART1, buffer[i], enable);
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2200      	movs	r2, #0
 80058dc:	4619      	mov	r1, r3
 80058de:	4811      	ldr	r0, [pc, #68]	; (8005924 <Store_Command_Handler+0x1a8>)
 80058e0:	f7fd fc68 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++){
 80058e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e6:	3301      	adds	r3, #1
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80058ec:	f7fa fc4a 	bl	8000184 <strlen>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d8ec      	bhi.n	80058d2 <Store_Command_Handler+0x156>
					}
					memset(cmdBuffer, 0, MAX_CMD_LENGTH);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	2232      	movs	r2, #50	; 0x32
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fcee 	bl	80062e2 <memset>
					commandIndex = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		ch = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		vTaskDelay(20);
 8005912:	2014      	movs	r0, #20
 8005914:	f7fe fa7a 	bl	8003e0c <vTaskDelay>
		if(xQueueReceive(currCommandQueue, &ch, (TickType_t)5) != pdFALSE){
 8005918:	e73a      	b.n	8005790 <Store_Command_Handler+0x14>
 800591a:	bf00      	nop
 800591c:	200033fc 	.word	0x200033fc
 8005920:	20003400 	.word	0x20003400
 8005924:	40013800 	.word	0x40013800
 8005928:	0800af90 	.word	0x0800af90

0800592c <Parse_Command_Handler>:
 * This function is responsible for:
 * 1. Recieve command from Queue.
 * 2. Decrypt the Json command and extract data.
 * 3. Send command struct via Queue.
 */
void Parse_Command_Handler(void *vparams){
 800592c:	b580      	push	{r7, lr}
 800592e:	b0a0      	sub	sp, #128	; 0x80
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	uint8_t cmd[50];
	COMMAND_TYPE command;
	char buffer[50];
	while(1){
		if(xQueueReceive(commandsQueue, cmd, (TickType_t) 5) != pdFALSE){
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <Parse_Command_Handler+0x64>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800593c:	2205      	movs	r2, #5
 800593e:	4618      	mov	r0, r3
 8005940:	f7fd ff40 	bl	80037c4 <xQueueReceive>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01d      	beq.n	8005986 <Parse_Command_Handler+0x5a>
			Parse_Command((const char*)cmd, &command);
 800594a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800594e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc feb9 	bl	80026cc <Parse_Command>
			xQueueSend(commandExecuteQueue, &command, (TickType_t) 5);
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <Parse_Command_Handler+0x68>)
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005962:	2300      	movs	r3, #0
 8005964:	2205      	movs	r2, #5
 8005966:	f7fd fe27 	bl	80035b8 <xQueueGenericSend>
			memset(buffer, 0, 50);
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	2232      	movs	r2, #50	; 0x32
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fcb5 	bl	80062e2 <memset>
			memset(cmd, 0, 50);
 8005978:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800597c:	2232      	movs	r2, #50	; 0x32
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fcae 	bl	80062e2 <memset>
		}
		vTaskDelay(15);
 8005986:	200f      	movs	r0, #15
 8005988:	f7fe fa40 	bl	8003e0c <vTaskDelay>
		if(xQueueReceive(commandsQueue, cmd, (TickType_t) 5) != pdFALSE){
 800598c:	e7d2      	b.n	8005934 <Parse_Command_Handler+0x8>
 800598e:	bf00      	nop
 8005990:	20003400 	.word	0x20003400
 8005994:	200033f0 	.word	0x200033f0

08005998 <Command_Execute_Handler>:
 * This function is responsible for:
 * 1. Recieve command struct.
 * 2. Validate Execute commands.
 */

void Command_Execute_Handler(void *vparams){
 8005998:	b5b0      	push	{r4, r5, r7, lr}
 800599a:	b0a0      	sub	sp, #128	; 0x80
 800599c:	af02      	add	r7, sp, #8
 800599e:	6078      	str	r0, [r7, #4]
	COMMAND_TYPE command;
	char buffer[55];
	uint8_t relayLastStatus = 0;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	while(1){
		if(xQueueReceive(commandExecuteQueue, &command, (TickType_t) 5)){
 80059a6:	4bb1      	ldr	r3, [pc, #708]	; (8005c6c <Command_Execute_Handler+0x2d4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80059ae:	2205      	movs	r2, #5
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd ff07 	bl	80037c4 <xQueueReceive>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 832e 	beq.w	800601a <Command_Execute_Handler+0x682>
			if(strcmp(command.cmd, "ENA") == 0){
 80059be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059c2:	49ab      	ldr	r1, [pc, #684]	; (8005c70 <Command_Execute_Handler+0x2d8>)
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fa fbd3 	bl	8000170 <strcmp>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 80cc 	bne.w	8005b6a <Command_Execute_Handler+0x1d2>
				if(strcmp(command.nodeID, "0x50") == 0){ // Node ID For Relay Actuator.
 80059d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059d6:	3305      	adds	r3, #5
 80059d8:	49a6      	ldr	r1, [pc, #664]	; (8005c74 <Command_Execute_Handler+0x2dc>)
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fa fbc8 	bl	8000170 <strcmp>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d12e      	bne.n	8005a44 <Command_Execute_Handler+0xac>
					HAL_Relay_Init(GPIOA, GPIO_PIN_11);
 80059e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ea:	48a3      	ldr	r0, [pc, #652]	; (8005c78 <Command_Execute_Handler+0x2e0>)
 80059ec:	f7fb fcca 	bl	8001384 <HAL_Relay_Init>
					strcpy(buffer, "{\"nodeType\":\"NA\", \"nodeID\": \"0x50\", \"data\":\"DONE\"}\r\n");
 80059f0:	f107 0308 	add.w	r3, r7, #8
 80059f4:	4aa1      	ldr	r2, [pc, #644]	; (8005c7c <Command_Execute_Handler+0x2e4>)
 80059f6:	461c      	mov	r4, r3
 80059f8:	4615      	mov	r5, r2
 80059fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	3404      	adds	r4, #4
 8005a0e:	7021      	strb	r1, [r4, #0]
					for(int i = 0; i < strlen(buffer); i++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	677b      	str	r3, [r7, #116]	; 0x74
 8005a14:	e00c      	b.n	8005a30 <Command_Execute_Handler+0x98>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005a16:	f107 0208 	add.w	r2, r7, #8
 8005a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1c:	4413      	add	r3, r2
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2200      	movs	r2, #0
 8005a22:	4619      	mov	r1, r3
 8005a24:	4896      	ldr	r0, [pc, #600]	; (8005c80 <Command_Execute_Handler+0x2e8>)
 8005a26:	f7fd fbc5 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a30:	f107 0308 	add.w	r3, r7, #8
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fa fba5 	bl	8000184 <strlen>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d8e9      	bhi.n	8005a16 <Command_Execute_Handler+0x7e>
 8005a42:	e2ea      	b.n	800601a <Command_Execute_Handler+0x682>
				}else if(strcmp(command.nodeID, "0x80") == 0){ // Node ID For Tempareture Sensor.
 8005a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a48:	3305      	adds	r3, #5
 8005a4a:	498e      	ldr	r1, [pc, #568]	; (8005c84 <Command_Execute_Handler+0x2ec>)
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fa fb8f 	bl	8000170 <strcmp>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d12b      	bne.n	8005ab0 <Command_Execute_Handler+0x118>
					HAL_LM35_Init();
 8005a58:	f7fb fc42 	bl	80012e0 <HAL_LM35_Init>
					strcpy(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x80\", \"data\":\"DONE\"}\r\n");
 8005a5c:	f107 0308 	add.w	r3, r7, #8
 8005a60:	4a89      	ldr	r2, [pc, #548]	; (8005c88 <Command_Execute_Handler+0x2f0>)
 8005a62:	461c      	mov	r4, r3
 8005a64:	4615      	mov	r5, r2
 8005a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a76:	6020      	str	r0, [r4, #0]
 8005a78:	3404      	adds	r4, #4
 8005a7a:	7021      	strb	r1, [r4, #0]
					for(int i = 0; i < strlen(buffer); i++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a80:	e00c      	b.n	8005a9c <Command_Execute_Handler+0x104>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005a82:	f107 0208 	add.w	r2, r7, #8
 8005a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a88:	4413      	add	r3, r2
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4619      	mov	r1, r3
 8005a90:	487b      	ldr	r0, [pc, #492]	; (8005c80 <Command_Execute_Handler+0x2e8>)
 8005a92:	f7fd fb8f 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a98:	3301      	adds	r3, #1
 8005a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a9c:	f107 0308 	add.w	r3, r7, #8
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fa fb6f 	bl	8000184 <strlen>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d8e9      	bhi.n	8005a82 <Command_Execute_Handler+0xea>
 8005aae:	e2b4      	b.n	800601a <Command_Execute_Handler+0x682>
				}else if(strcmp(command.nodeID, "0x81") == 0){ // Node ID For Lights Sensor.
 8005ab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ab4:	3305      	adds	r3, #5
 8005ab6:	4975      	ldr	r1, [pc, #468]	; (8005c8c <Command_Execute_Handler+0x2f4>)
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fa fb59 	bl	8000170 <strcmp>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d12b      	bne.n	8005b1c <Command_Execute_Handler+0x184>
					HAL_LDR_Init();
 8005ac4:	f7fb fbd8 	bl	8001278 <HAL_LDR_Init>
					strcpy(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x81\", \"data\":\"DONE\"}\r\n");
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4a70      	ldr	r2, [pc, #448]	; (8005c90 <Command_Execute_Handler+0x2f8>)
 8005ace:	461c      	mov	r4, r3
 8005ad0:	4615      	mov	r5, r2
 8005ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ae2:	6020      	str	r0, [r4, #0]
 8005ae4:	3404      	adds	r4, #4
 8005ae6:	7021      	strb	r1, [r4, #0]
					for(int i = 0; i < strlen(buffer); i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aec:	e00c      	b.n	8005b08 <Command_Execute_Handler+0x170>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005aee:	f107 0208 	add.w	r2, r7, #8
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	4413      	add	r3, r2
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	4619      	mov	r1, r3
 8005afc:	4860      	ldr	r0, [pc, #384]	; (8005c80 <Command_Execute_Handler+0x2e8>)
 8005afe:	f7fd fb59 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	3301      	adds	r3, #1
 8005b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fa fb39 	bl	8000184 <strlen>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d8e9      	bhi.n	8005aee <Command_Execute_Handler+0x156>
 8005b1a:	e27e      	b.n	800601a <Command_Execute_Handler+0x682>
				}else{
					strcpy(buffer, "Unknown NodeID!!\r\n");
 8005b1c:	f107 0308 	add.w	r3, r7, #8
 8005b20:	4a5c      	ldr	r2, [pc, #368]	; (8005c94 <Command_Execute_Handler+0x2fc>)
 8005b22:	461c      	mov	r4, r3
 8005b24:	4615      	mov	r5, r2
 8005b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	8022      	strh	r2, [r4, #0]
 8005b30:	3402      	adds	r4, #2
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	7023      	strb	r3, [r4, #0]
					for(int i = 0; i < strlen(buffer); i++)
 8005b36:	2300      	movs	r3, #0
 8005b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b3a:	e00c      	b.n	8005b56 <Command_Execute_Handler+0x1be>
						UART_Send_SingelChar(UART1, buffer[i], enable);
 8005b3c:	f107 0208 	add.w	r2, r7, #8
 8005b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b42:	4413      	add	r3, r2
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4853      	ldr	r0, [pc, #332]	; (8005c98 <Command_Execute_Handler+0x300>)
 8005b4c:	f7fd fb32 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b52:	3301      	adds	r3, #1
 8005b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b56:	f107 0308 	add.w	r3, r7, #8
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fa fb12 	bl	8000184 <strlen>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d8e9      	bhi.n	8005b3c <Command_Execute_Handler+0x1a4>
 8005b68:	e257      	b.n	800601a <Command_Execute_Handler+0x682>
				}
			}else if(strcmp(command.cmd, "ACT") == 0){
 8005b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b6e:	494b      	ldr	r1, [pc, #300]	; (8005c9c <Command_Execute_Handler+0x304>)
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fa fafd 	bl	8000170 <strcmp>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8099 	bne.w	8005cb0 <Command_Execute_Handler+0x318>
				if(strcmp(command.nodeID, "0x50") == 0){ // Node ID For Relay Actuator.
 8005b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b82:	3305      	adds	r3, #5
 8005b84:	493b      	ldr	r1, [pc, #236]	; (8005c74 <Command_Execute_Handler+0x2dc>)
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fa faf2 	bl	8000170 <strcmp>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d146      	bne.n	8005c20 <Command_Execute_Handler+0x288>
					if(strcmp(command.data, "0") == 0){
 8005b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b96:	330a      	adds	r3, #10
 8005b98:	4941      	ldr	r1, [pc, #260]	; (8005ca0 <Command_Execute_Handler+0x308>)
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fa fae8 	bl	8000170 <strcmp>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <Command_Execute_Handler+0x21c>
						HAL_Relay_ACT(GPIOA, GPIO_PIN_11, GPIO_PIN_LOW);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bac:	4832      	ldr	r0, [pc, #200]	; (8005c78 <Command_Execute_Handler+0x2e0>)
 8005bae:	f7fb fbff 	bl	80013b0 <HAL_Relay_ACT>
 8005bb2:	e232      	b.n	800601a <Command_Execute_Handler+0x682>
					}else if(strcmp(command.data, "1") == 0){
 8005bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bb8:	330a      	adds	r3, #10
 8005bba:	493a      	ldr	r1, [pc, #232]	; (8005ca4 <Command_Execute_Handler+0x30c>)
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fad7 	bl	8000170 <strcmp>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <Command_Execute_Handler+0x23e>
						HAL_Relay_ACT(GPIOA, GPIO_PIN_11, GPIO_PIN_HIGH);
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bce:	482a      	ldr	r0, [pc, #168]	; (8005c78 <Command_Execute_Handler+0x2e0>)
 8005bd0:	f7fb fbee 	bl	80013b0 <HAL_Relay_ACT>
 8005bd4:	e221      	b.n	800601a <Command_Execute_Handler+0x682>
					}else{
						strcpy(buffer, "Invalid Actuator Data!!\r\n");
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <Command_Execute_Handler+0x310>)
 8005bdc:	461c      	mov	r4, r3
 8005bde:	4615      	mov	r5, r2
 8005be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005be8:	c403      	stmia	r4!, {r0, r1}
 8005bea:	8022      	strh	r2, [r4, #0]
						for(int i = 0; i < strlen(buffer); i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	667b      	str	r3, [r7, #100]	; 0x64
 8005bf0:	e00c      	b.n	8005c0c <Command_Execute_Handler+0x274>
							UART_Send_SingelChar(UART1, buffer[i], enable);
 8005bf2:	f107 0208 	add.w	r2, r7, #8
 8005bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4825      	ldr	r0, [pc, #148]	; (8005c98 <Command_Execute_Handler+0x300>)
 8005c02:	f7fd fad7 	bl	80031b4 <UART_Send_SingelChar>
						for(int i = 0; i < strlen(buffer); i++)
 8005c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c08:	3301      	adds	r3, #1
 8005c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fab7 	bl	8000184 <strlen>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d8e9      	bhi.n	8005bf2 <Command_Execute_Handler+0x25a>
 8005c1e:	e1fc      	b.n	800601a <Command_Execute_Handler+0x682>
					}
				}else{
					strcpy(buffer, "Invalid Actuator NodeID!!\r\n");
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	4a21      	ldr	r2, [pc, #132]	; (8005cac <Command_Execute_Handler+0x314>)
 8005c26:	461c      	mov	r4, r3
 8005c28:	4615      	mov	r5, r2
 8005c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					for(int i = 0; i < strlen(buffer); i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3a:	e00c      	b.n	8005c56 <Command_Execute_Handler+0x2be>
						UART_Send_SingelChar(UART1, buffer[i], enable);
 8005c3c:	f107 0208 	add.w	r2, r7, #8
 8005c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2200      	movs	r2, #0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4813      	ldr	r0, [pc, #76]	; (8005c98 <Command_Execute_Handler+0x300>)
 8005c4c:	f7fd fab2 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c52:	3301      	adds	r3, #1
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fa92 	bl	8000184 <strlen>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d8e9      	bhi.n	8005c3c <Command_Execute_Handler+0x2a4>
 8005c68:	e1d7      	b.n	800601a <Command_Execute_Handler+0x682>
 8005c6a:	bf00      	nop
 8005c6c:	200033f0 	.word	0x200033f0
 8005c70:	0800afb0 	.word	0x0800afb0
 8005c74:	0800afb4 	.word	0x0800afb4
 8005c78:	40010800 	.word	0x40010800
 8005c7c:	0800afbc 	.word	0x0800afbc
 8005c80:	40004400 	.word	0x40004400
 8005c84:	0800aff4 	.word	0x0800aff4
 8005c88:	0800affc 	.word	0x0800affc
 8005c8c:	0800b034 	.word	0x0800b034
 8005c90:	0800b03c 	.word	0x0800b03c
 8005c94:	0800b074 	.word	0x0800b074
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	0800b088 	.word	0x0800b088
 8005ca0:	0800b08c 	.word	0x0800b08c
 8005ca4:	0800b090 	.word	0x0800b090
 8005ca8:	0800b094 	.word	0x0800b094
 8005cac:	0800b0b0 	.word	0x0800b0b0
				}
			}else if(strcmp(command.cmd, "STA") == 0){
 8005cb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cb4:	49b8      	ldr	r1, [pc, #736]	; (8005f98 <Command_Execute_Handler+0x600>)
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fa5a 	bl	8000170 <strcmp>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80a9 	bne.w	8005e16 <Command_Execute_Handler+0x47e>
				if(strcmp(command.nodeID, "0x50") == 0){
 8005cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cc8:	3305      	adds	r3, #5
 8005cca:	49b4      	ldr	r1, [pc, #720]	; (8005f9c <Command_Execute_Handler+0x604>)
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fa fa4f 	bl	8000170 <strcmp>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d129      	bne.n	8005d2c <Command_Execute_Handler+0x394>
					relayLastStatus = MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8005cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cdc:	48b0      	ldr	r0, [pc, #704]	; (8005fa0 <Command_Execute_Handler+0x608>)
 8005cde:	f7fd f8a9 	bl	8002e34 <MCAL_GPIO_ReadPin>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					sprintf(buffer, "{\"nodeType\":\"NA\", \"nodeID\": \"0x50\", \"data\": %d}\r\n", relayLastStatus);
 8005ce8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005cec:	f107 0308 	add.w	r3, r7, #8
 8005cf0:	49ac      	ldr	r1, [pc, #688]	; (8005fa4 <Command_Execute_Handler+0x60c>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 f870 	bl	8006dd8 <siprintf>
					for(int i = 0; i < strlen(buffer); i++)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfc:	e00c      	b.n	8005d18 <Command_Execute_Handler+0x380>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005cfe:	f107 0208 	add.w	r2, r7, #8
 8005d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	48a6      	ldr	r0, [pc, #664]	; (8005fa8 <Command_Execute_Handler+0x610>)
 8005d0e:	f7fd fa51 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d14:	3301      	adds	r3, #1
 8005d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fa31 	bl	8000184 <strlen>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d8e9      	bhi.n	8005cfe <Command_Execute_Handler+0x366>
 8005d2a:	e06c      	b.n	8005e06 <Command_Execute_Handler+0x46e>
				}else if(strcmp(command.nodeID, "0x80") == 0){
 8005d2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d30:	3305      	adds	r3, #5
 8005d32:	499e      	ldr	r1, [pc, #632]	; (8005fac <Command_Execute_Handler+0x614>)
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fa fa1b 	bl	8000170 <strcmp>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d12c      	bne.n	8005d9a <Command_Execute_Handler+0x402>
					tempLastStatus = HAL_LM35_Read();
 8005d40:	f7fb fae6 	bl	8001310 <HAL_LM35_Read>
 8005d44:	4602      	mov	r2, r0
 8005d46:	4b9a      	ldr	r3, [pc, #616]	; (8005fb0 <Command_Execute_Handler+0x618>)
 8005d48:	601a      	str	r2, [r3, #0]
					sprintf(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x88\", \"data\": %.2f ^C}\r\n", tempLastStatus);
 8005d4a:	4b99      	ldr	r3, [pc, #612]	; (8005fb0 <Command_Execute_Handler+0x618>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fa fb84 	bl	800045c <__aeabi_f2d>
 8005d54:	4603      	mov	r3, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	f107 0008 	add.w	r0, r7, #8
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	4994      	ldr	r1, [pc, #592]	; (8005fb4 <Command_Execute_Handler+0x61c>)
 8005d62:	f001 f839 	bl	8006dd8 <siprintf>
					for(int i = 0; i < strlen(buffer); i++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d6a:	e00c      	b.n	8005d86 <Command_Execute_Handler+0x3ee>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005d6c:	f107 0208 	add.w	r2, r7, #8
 8005d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d72:	4413      	add	r3, r2
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	4619      	mov	r1, r3
 8005d7a:	488b      	ldr	r0, [pc, #556]	; (8005fa8 <Command_Execute_Handler+0x610>)
 8005d7c:	f7fd fa1a 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005d80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d82:	3301      	adds	r3, #1
 8005d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa f9fa 	bl	8000184 <strlen>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d8e9      	bhi.n	8005d6c <Command_Execute_Handler+0x3d4>
 8005d98:	e035      	b.n	8005e06 <Command_Execute_Handler+0x46e>
				}else if(strcmp(command.nodeID, "0x81") == 0){
 8005d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d9e:	3305      	adds	r3, #5
 8005da0:	4985      	ldr	r1, [pc, #532]	; (8005fb8 <Command_Execute_Handler+0x620>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fa f9e4 	bl	8000170 <strcmp>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d12b      	bne.n	8005e06 <Command_Execute_Handler+0x46e>
					lightLastStatus = HAL_LDR_Read_Intensity();
 8005dae:	f7fb fa7b 	bl	80012a8 <HAL_LDR_Read_Intensity>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b81      	ldr	r3, [pc, #516]	; (8005fbc <Command_Execute_Handler+0x624>)
 8005db6:	601a      	str	r2, [r3, #0]
					sprintf(buffer, "{\"nodeType\":\"NS\", \"nodeID\": \"0x81\", \"data\": %.2f}\r\n", lightLastStatus);
 8005db8:	4b80      	ldr	r3, [pc, #512]	; (8005fbc <Command_Execute_Handler+0x624>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fa fb4d 	bl	800045c <__aeabi_f2d>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	f107 0008 	add.w	r0, r7, #8
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4623      	mov	r3, r4
 8005dce:	497c      	ldr	r1, [pc, #496]	; (8005fc0 <Command_Execute_Handler+0x628>)
 8005dd0:	f001 f802 	bl	8006dd8 <siprintf>
					for(int i = 0; i < strlen(buffer); i++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd8:	e00c      	b.n	8005df4 <Command_Execute_Handler+0x45c>
						UART_Send_SingelChar(UART2, buffer[i], enable);
 8005dda:	f107 0208 	add.w	r2, r7, #8
 8005dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de0:	4413      	add	r3, r2
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	4619      	mov	r1, r3
 8005de8:	486f      	ldr	r0, [pc, #444]	; (8005fa8 <Command_Execute_Handler+0x610>)
 8005dea:	f7fd f9e3 	bl	80031b4 <UART_Send_SingelChar>
					for(int i = 0; i < strlen(buffer); i++)
 8005dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df0:	3301      	adds	r3, #1
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fa f9c3 	bl	8000184 <strlen>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d8e9      	bhi.n	8005dda <Command_Execute_Handler+0x442>
				}
				memset(buffer, 0, 50);
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	2232      	movs	r2, #50	; 0x32
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fa67 	bl	80062e2 <memset>
 8005e14:	e101      	b.n	800601a <Command_Execute_Handler+0x682>
			}else if(strcmp(command.cmd, "DUR") == 0){
 8005e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e1a:	496a      	ldr	r1, [pc, #424]	; (8005fc4 <Command_Execute_Handler+0x62c>)
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa f9a7 	bl	8000170 <strcmp>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d172      	bne.n	8005f0e <Command_Execute_Handler+0x576>
				if(strcmp(command.nodeID, "0x80") == 0){
 8005e28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e2c:	3305      	adds	r3, #5
 8005e2e:	495f      	ldr	r1, [pc, #380]	; (8005fac <Command_Execute_Handler+0x614>)
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fa f99d 	bl	8000170 <strcmp>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d12e      	bne.n	8005e9a <Command_Execute_Handler+0x502>
					xTimerStart(TempSensorStatusPeriodic_Timer, portMAX_DELAY);
 8005e3c:	4b62      	ldr	r3, [pc, #392]	; (8005fc8 <Command_Execute_Handler+0x630>)
 8005e3e:	681c      	ldr	r4, [r3, #0]
 8005e40:	f7fe f942 	bl	80040c8 <xTaskGetTickCount>
 8005e44:	4602      	mov	r2, r0
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7fe fdd1 	bl	80049f8 <xTimerGenericCommand>
					if(command.nodeID != 0){
						sscanf(command.data, "%hd", &duration);
 8005e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e5a:	330a      	adds	r3, #10
 8005e5c:	4a5b      	ldr	r2, [pc, #364]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005e5e:	495c      	ldr	r1, [pc, #368]	; (8005fd0 <Command_Execute_Handler+0x638>)
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 ffd9 	bl	8006e18 <siscanf>
						duration = duration*200;
 8005e66:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	0092      	lsls	r2, r2, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	0091      	lsls	r1, r2, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	460b      	mov	r3, r1
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005e80:	801a      	strh	r2, [r3, #0]
						xTimerChangePeriod(TempSensorStatusPeriodic_Timer, (duration/portTICK_PERIOD_MS), (TickType_t)20);
 8005e82:	4b51      	ldr	r3, [pc, #324]	; (8005fc8 <Command_Execute_Handler+0x630>)
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	4b51      	ldr	r3, [pc, #324]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2314      	movs	r3, #20
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	2104      	movs	r1, #4
 8005e94:	f7fe fdb0 	bl	80049f8 <xTimerGenericCommand>
 8005e98:	e0bf      	b.n	800601a <Command_Execute_Handler+0x682>
					}
				}else if(strcmp(command.nodeID, "0x81") == 0){
 8005e9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e9e:	3305      	adds	r3, #5
 8005ea0:	4945      	ldr	r1, [pc, #276]	; (8005fb8 <Command_Execute_Handler+0x620>)
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fa f964 	bl	8000170 <strcmp>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f040 80b5 	bne.w	800601a <Command_Execute_Handler+0x682>
					xTimerStart(LightSensorStatusPeriodic_Timer, portMAX_DELAY);
 8005eb0:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <Command_Execute_Handler+0x63c>)
 8005eb2:	681c      	ldr	r4, [r3, #0]
 8005eb4:	f7fe f908 	bl	80040c8 <xTaskGetTickCount>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7fe fd97 	bl	80049f8 <xTimerGenericCommand>
					if(command.nodeID != 0){
						sscanf(command.data, "%hd", &duration);
 8005eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ece:	330a      	adds	r3, #10
 8005ed0:	4a3e      	ldr	r2, [pc, #248]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005ed2:	493f      	ldr	r1, [pc, #252]	; (8005fd0 <Command_Execute_Handler+0x638>)
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 ff9f 	bl	8006e18 <siscanf>
						duration = duration*200;
 8005eda:	4b3c      	ldr	r3, [pc, #240]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	0092      	lsls	r2, r2, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	0091      	lsls	r1, r2, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	460b      	mov	r3, r1
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005ef4:	801a      	strh	r2, [r3, #0]
						xTimerChangePeriod(LightSensorStatusPeriodic_Timer, (duration/portTICK_PERIOD_MS), (TickType_t)20);
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <Command_Execute_Handler+0x63c>)
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <Command_Execute_Handler+0x634>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	2314      	movs	r3, #20
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	2300      	movs	r3, #0
 8005f06:	2104      	movs	r1, #4
 8005f08:	f7fe fd76 	bl	80049f8 <xTimerGenericCommand>
 8005f0c:	e085      	b.n	800601a <Command_Execute_Handler+0x682>
					}
				}
			}else if(strcmp(command.cmd, "DIS") == 0){
 8005f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f12:	4931      	ldr	r1, [pc, #196]	; (8005fd8 <Command_Execute_Handler+0x640>)
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fa f92b 	bl	8000170 <strcmp>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d129      	bne.n	8005f74 <Command_Execute_Handler+0x5dc>
				if(strcmp(command.nodeID, "0x81") == 0){
 8005f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f24:	3305      	adds	r3, #5
 8005f26:	4924      	ldr	r1, [pc, #144]	; (8005fb8 <Command_Execute_Handler+0x620>)
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fa f921 	bl	8000170 <strcmp>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <Command_Execute_Handler+0x5b2>
					xTimerStop(LightSensorStatusPeriodic_Timer, portMAX_DELAY);
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <Command_Execute_Handler+0x63c>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2200      	movs	r2, #0
 8005f42:	2103      	movs	r1, #3
 8005f44:	f7fe fd58 	bl	80049f8 <xTimerGenericCommand>
 8005f48:	e067      	b.n	800601a <Command_Execute_Handler+0x682>
				}else if(strcmp(command.nodeID, "0x80") == 0){
 8005f4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f4e:	3305      	adds	r3, #5
 8005f50:	4916      	ldr	r1, [pc, #88]	; (8005fac <Command_Execute_Handler+0x614>)
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa f90c 	bl	8000170 <strcmp>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d15d      	bne.n	800601a <Command_Execute_Handler+0x682>
					xTimerStop(TempSensorStatusPeriodic_Timer, portMAX_DELAY);
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <Command_Execute_Handler+0x630>)
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2103      	movs	r1, #3
 8005f6e:	f7fe fd43 	bl	80049f8 <xTimerGenericCommand>
 8005f72:	e052      	b.n	800601a <Command_Execute_Handler+0x682>
				}
			}else {
				strcpy(buffer, "ERROR: Invalid Command!!\r\n");
 8005f74:	f107 0308 	add.w	r3, r7, #8
 8005f78:	4a18      	ldr	r2, [pc, #96]	; (8005fdc <Command_Execute_Handler+0x644>)
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	4615      	mov	r5, r2
 8005f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f86:	c403      	stmia	r4!, {r0, r1}
 8005f88:	8022      	strh	r2, [r4, #0]
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	0c13      	lsrs	r3, r2, #16
 8005f8e:	7023      	strb	r3, [r4, #0]
				for(int i = 0; i < strlen(buffer); i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	653b      	str	r3, [r7, #80]	; 0x50
 8005f94:	e031      	b.n	8005ffa <Command_Execute_Handler+0x662>
 8005f96:	bf00      	nop
 8005f98:	0800b0cc 	.word	0x0800b0cc
 8005f9c:	0800afb4 	.word	0x0800afb4
 8005fa0:	40010800 	.word	0x40010800
 8005fa4:	0800b0d0 	.word	0x0800b0d0
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	0800aff4 	.word	0x0800aff4
 8005fb0:	2000337c 	.word	0x2000337c
 8005fb4:	0800aec0 	.word	0x0800aec0
 8005fb8:	0800b034 	.word	0x0800b034
 8005fbc:	20003380 	.word	0x20003380
 8005fc0:	0800b104 	.word	0x0800b104
 8005fc4:	0800b138 	.word	0x0800b138
 8005fc8:	20003448 	.word	0x20003448
 8005fcc:	20003408 	.word	0x20003408
 8005fd0:	0800b13c 	.word	0x0800b13c
 8005fd4:	200033e8 	.word	0x200033e8
 8005fd8:	0800b140 	.word	0x0800b140
 8005fdc:	0800b144 	.word	0x0800b144
					UART_Send_SingelChar(UART1, buffer[i], enable);
 8005fe0:	f107 0208 	add.w	r2, r7, #8
 8005fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe6:	4413      	add	r3, r2
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	4619      	mov	r1, r3
 8005fee:	480d      	ldr	r0, [pc, #52]	; (8006024 <Command_Execute_Handler+0x68c>)
 8005ff0:	f7fd f8e0 	bl	80031b4 <UART_Send_SingelChar>
				for(int i = 0; i < strlen(buffer); i++)
 8005ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fa f8c0 	bl	8000184 <strlen>
 8006004:	4602      	mov	r2, r0
 8006006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006008:	429a      	cmp	r2, r3
 800600a:	d8e9      	bhi.n	8005fe0 <Command_Execute_Handler+0x648>
				memset(buffer, 0, 50);
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	2232      	movs	r2, #50	; 0x32
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f964 	bl	80062e2 <memset>
			}
		}
		vTaskDelay(15);
 800601a:	200f      	movs	r0, #15
 800601c:	f7fd fef6 	bl	8003e0c <vTaskDelay>
		if(xQueueReceive(commandExecuteQueue, &command, (TickType_t) 5)){
 8006020:	e4c1      	b.n	80059a6 <Command_Execute_Handler+0xe>
 8006022:	bf00      	nop
 8006024:	40013800 	.word	0x40013800

08006028 <USART1_IRQHandler>:
}

/*
 * ISR For UART RX.
 */
void USART1_IRQHandler() {
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
	if ((UART1->SR & (1 << 5)) >> 5) {  // Check if RXNE interrupt is set
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <USART1_IRQHandler+0x48>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d019      	beq.n	800606c <USART1_IRQHandler+0x44>
		//MCAL_UART_ReceiveData(UART1, (uint8_t*)&CMD, disable);  // Read data
		CMD = UART1->DR;
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <USART1_IRQHandler+0x48>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <USART1_IRQHandler+0x4c>)
 8006040:	701a      	strb	r2, [r3, #0]
		UART_Send_SingelChar(UART1, CMD, enable);  // Echo back or process the command
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <USART1_IRQHandler+0x4c>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2200      	movs	r2, #0
 800604a:	4619      	mov	r1, r3
 800604c:	4808      	ldr	r0, [pc, #32]	; (8006070 <USART1_IRQHandler+0x48>)
 800604e:	f7fd f8b1 	bl	80031b4 <UART_Send_SingelChar>
		xQueueSend(currCommandQueue, &CMD, (TickType_t) 5);
 8006052:	4b09      	ldr	r3, [pc, #36]	; (8006078 <USART1_IRQHandler+0x50>)
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	2205      	movs	r2, #5
 800605a:	4906      	ldr	r1, [pc, #24]	; (8006074 <USART1_IRQHandler+0x4c>)
 800605c:	f7fd faac 	bl	80035b8 <xQueueGenericSend>
		// Clear the RXNE flag (by reading DR or explicitly if needed by hardware)
		UART1->SR &= ~(1 << 5);
 8006060:	4b03      	ldr	r3, [pc, #12]	; (8006070 <USART1_IRQHandler+0x48>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a02      	ldr	r2, [pc, #8]	; (8006070 <USART1_IRQHandler+0x48>)
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	6013      	str	r3, [r2, #0]
	}
}
 800606c:	bf00      	nop
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40013800 	.word	0x40013800
 8006074:	20003378 	.word	0x20003378
 8006078:	200033fc 	.word	0x200033fc

0800607c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e00a      	b.n	80060a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800608e:	f3af 8000 	nop.w
 8006092:	4601      	mov	r1, r0
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	60ba      	str	r2, [r7, #8]
 800609a:	b2ca      	uxtb	r2, r1
 800609c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	3301      	adds	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	dbf0      	blt.n	800608e <_read+0x12>
	}

return len;
 80060ac:	687b      	ldr	r3, [r7, #4]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e009      	b.n	80060dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	60ba      	str	r2, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	dbf1      	blt.n	80060c8 <_write+0x12>
	}
	return len;
 80060e4:	687b      	ldr	r3, [r7, #4]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <_close>:

int _close(int file)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
	return -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006114:	605a      	str	r2, [r3, #4]
	return 0;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <_isatty>:

int _isatty(int file)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
	return 1;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
	return 0;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
	...

08006150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006158:	4a14      	ldr	r2, [pc, #80]	; (80061ac <_sbrk+0x5c>)
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <_sbrk+0x60>)
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <_sbrk+0x64>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <_sbrk+0x64>)
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <_sbrk+0x68>)
 8006170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <_sbrk+0x64>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	429a      	cmp	r2, r3
 800617e:	d207      	bcs.n	8006190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006180:	f000 f846 	bl	8006210 <__errno>
 8006184:	4602      	mov	r2, r0
 8006186:	230c      	movs	r3, #12
 8006188:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	e009      	b.n	80061a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006190:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <_sbrk+0x64>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <_sbrk+0x64>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	4a05      	ldr	r2, [pc, #20]	; (80061b4 <_sbrk+0x64>)
 80061a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061a2:	68fb      	ldr	r3, [r7, #12]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20005000 	.word	0x20005000
 80061b0:	00000400 	.word	0x00000400
 80061b4:	20003384 	.word	0x20003384
 80061b8:	20003450 	.word	0x20003450

080061bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80061bc:	480d      	ldr	r0, [pc, #52]	; (80061f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80061be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80061c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061c4:	480c      	ldr	r0, [pc, #48]	; (80061f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80061c6:	490d      	ldr	r1, [pc, #52]	; (80061fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80061c8:	4a0d      	ldr	r2, [pc, #52]	; (8006200 <LoopForever+0xe>)
  movs r3, #0
 80061ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061cc:	e002      	b.n	80061d4 <LoopCopyDataInit>

080061ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061d2:	3304      	adds	r3, #4

080061d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061d8:	d3f9      	bcc.n	80061ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80061dc:	4c0a      	ldr	r4, [pc, #40]	; (8006208 <LoopForever+0x16>)
  movs r3, #0
 80061de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061e0:	e001      	b.n	80061e6 <LoopFillZerobss>

080061e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061e4:	3204      	adds	r2, #4

080061e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061e8:	d3fb      	bcc.n	80061e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80061ea:	f000 f817 	bl	800621c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80061ee:	f7ff fa1f 	bl	8005630 <main>

080061f2 <LoopForever>:

LoopForever:
    b LoopForever
 80061f2:	e7fe      	b.n	80061f2 <LoopForever>
  ldr   r0, =_estack
 80061f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80061f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80061fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8006200:	0800b4bc 	.word	0x0800b4bc
  ldr r2, =_sbss
 8006204:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8006208:	20003450 	.word	0x20003450

0800620c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800620c:	e7fe      	b.n	800620c <ADC3_IRQHandler>
	...

08006210 <__errno>:
 8006210:	4b01      	ldr	r3, [pc, #4]	; (8006218 <__errno+0x8>)
 8006212:	6818      	ldr	r0, [r3, #0]
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000018 	.word	0x20000018

0800621c <__libc_init_array>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	2500      	movs	r5, #0
 8006220:	4e0c      	ldr	r6, [pc, #48]	; (8006254 <__libc_init_array+0x38>)
 8006222:	4c0d      	ldr	r4, [pc, #52]	; (8006258 <__libc_init_array+0x3c>)
 8006224:	1ba4      	subs	r4, r4, r6
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	42a5      	cmp	r5, r4
 800622a:	d109      	bne.n	8006240 <__libc_init_array+0x24>
 800622c:	f004 fdaa 	bl	800ad84 <_init>
 8006230:	2500      	movs	r5, #0
 8006232:	4e0a      	ldr	r6, [pc, #40]	; (800625c <__libc_init_array+0x40>)
 8006234:	4c0a      	ldr	r4, [pc, #40]	; (8006260 <__libc_init_array+0x44>)
 8006236:	1ba4      	subs	r4, r4, r6
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	42a5      	cmp	r5, r4
 800623c:	d105      	bne.n	800624a <__libc_init_array+0x2e>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006244:	4798      	blx	r3
 8006246:	3501      	adds	r5, #1
 8006248:	e7ee      	b.n	8006228 <__libc_init_array+0xc>
 800624a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800624e:	4798      	blx	r3
 8006250:	3501      	adds	r5, #1
 8006252:	e7f2      	b.n	800623a <__libc_init_array+0x1e>
 8006254:	0800b4b4 	.word	0x0800b4b4
 8006258:	0800b4b4 	.word	0x0800b4b4
 800625c:	0800b4b4 	.word	0x0800b4b4
 8006260:	0800b4b8 	.word	0x0800b4b8

08006264 <__locale_ctype_ptr_l>:
 8006264:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006268:	4770      	bx	lr
	...

0800626c <__locale_ctype_ptr>:
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <__locale_ctype_ptr+0x14>)
 800626e:	4a05      	ldr	r2, [pc, #20]	; (8006284 <__locale_ctype_ptr+0x18>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	bf08      	it	eq
 8006278:	4613      	moveq	r3, r2
 800627a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800627e:	4770      	bx	lr
 8006280:	20000018 	.word	0x20000018
 8006284:	2000007c 	.word	0x2000007c

08006288 <malloc>:
 8006288:	4b02      	ldr	r3, [pc, #8]	; (8006294 <malloc+0xc>)
 800628a:	4601      	mov	r1, r0
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f000 b87d 	b.w	800638c <_malloc_r>
 8006292:	bf00      	nop
 8006294:	20000018 	.word	0x20000018

08006298 <free>:
 8006298:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <free+0xc>)
 800629a:	4601      	mov	r1, r0
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	f000 b829 	b.w	80062f4 <_free_r>
 80062a2:	bf00      	nop
 80062a4:	20000018 	.word	0x20000018

080062a8 <__ascii_mbtowc>:
 80062a8:	b082      	sub	sp, #8
 80062aa:	b901      	cbnz	r1, 80062ae <__ascii_mbtowc+0x6>
 80062ac:	a901      	add	r1, sp, #4
 80062ae:	b142      	cbz	r2, 80062c2 <__ascii_mbtowc+0x1a>
 80062b0:	b14b      	cbz	r3, 80062c6 <__ascii_mbtowc+0x1e>
 80062b2:	7813      	ldrb	r3, [r2, #0]
 80062b4:	600b      	str	r3, [r1, #0]
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	1c10      	adds	r0, r2, #0
 80062ba:	bf18      	it	ne
 80062bc:	2001      	movne	r0, #1
 80062be:	b002      	add	sp, #8
 80062c0:	4770      	bx	lr
 80062c2:	4610      	mov	r0, r2
 80062c4:	e7fb      	b.n	80062be <__ascii_mbtowc+0x16>
 80062c6:	f06f 0001 	mvn.w	r0, #1
 80062ca:	e7f8      	b.n	80062be <__ascii_mbtowc+0x16>

080062cc <memcpy>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	1e43      	subs	r3, r0, #1
 80062d0:	440a      	add	r2, r1
 80062d2:	4291      	cmp	r1, r2
 80062d4:	d100      	bne.n	80062d8 <memcpy+0xc>
 80062d6:	bd10      	pop	{r4, pc}
 80062d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e0:	e7f7      	b.n	80062d2 <memcpy+0x6>

080062e2 <memset>:
 80062e2:	4603      	mov	r3, r0
 80062e4:	4402      	add	r2, r0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d100      	bne.n	80062ec <memset+0xa>
 80062ea:	4770      	bx	lr
 80062ec:	f803 1b01 	strb.w	r1, [r3], #1
 80062f0:	e7f9      	b.n	80062e6 <memset+0x4>
	...

080062f4 <_free_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4605      	mov	r5, r0
 80062f8:	2900      	cmp	r1, #0
 80062fa:	d043      	beq.n	8006384 <_free_r+0x90>
 80062fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006300:	1f0c      	subs	r4, r1, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfb8      	it	lt
 8006306:	18e4      	addlt	r4, r4, r3
 8006308:	f003 f8c5 	bl	8009496 <__malloc_lock>
 800630c:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <_free_r+0x94>)
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	4610      	mov	r0, r2
 8006312:	b933      	cbnz	r3, 8006322 <_free_r+0x2e>
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	6014      	str	r4, [r2, #0]
 8006318:	4628      	mov	r0, r5
 800631a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631e:	f003 b8bb 	b.w	8009498 <__malloc_unlock>
 8006322:	42a3      	cmp	r3, r4
 8006324:	d90b      	bls.n	800633e <_free_r+0x4a>
 8006326:	6821      	ldr	r1, [r4, #0]
 8006328:	1862      	adds	r2, r4, r1
 800632a:	4293      	cmp	r3, r2
 800632c:	bf01      	itttt	eq
 800632e:	681a      	ldreq	r2, [r3, #0]
 8006330:	685b      	ldreq	r3, [r3, #4]
 8006332:	1852      	addeq	r2, r2, r1
 8006334:	6022      	streq	r2, [r4, #0]
 8006336:	6063      	str	r3, [r4, #4]
 8006338:	6004      	str	r4, [r0, #0]
 800633a:	e7ed      	b.n	8006318 <_free_r+0x24>
 800633c:	4613      	mov	r3, r2
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	b10a      	cbz	r2, 8006346 <_free_r+0x52>
 8006342:	42a2      	cmp	r2, r4
 8006344:	d9fa      	bls.n	800633c <_free_r+0x48>
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	1858      	adds	r0, r3, r1
 800634a:	42a0      	cmp	r0, r4
 800634c:	d10b      	bne.n	8006366 <_free_r+0x72>
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	4401      	add	r1, r0
 8006352:	1858      	adds	r0, r3, r1
 8006354:	4282      	cmp	r2, r0
 8006356:	6019      	str	r1, [r3, #0]
 8006358:	d1de      	bne.n	8006318 <_free_r+0x24>
 800635a:	6810      	ldr	r0, [r2, #0]
 800635c:	6852      	ldr	r2, [r2, #4]
 800635e:	4401      	add	r1, r0
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	e7d8      	b.n	8006318 <_free_r+0x24>
 8006366:	d902      	bls.n	800636e <_free_r+0x7a>
 8006368:	230c      	movs	r3, #12
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	e7d4      	b.n	8006318 <_free_r+0x24>
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	1821      	adds	r1, r4, r0
 8006372:	428a      	cmp	r2, r1
 8006374:	bf01      	itttt	eq
 8006376:	6811      	ldreq	r1, [r2, #0]
 8006378:	6852      	ldreq	r2, [r2, #4]
 800637a:	1809      	addeq	r1, r1, r0
 800637c:	6021      	streq	r1, [r4, #0]
 800637e:	6062      	str	r2, [r4, #4]
 8006380:	605c      	str	r4, [r3, #4]
 8006382:	e7c9      	b.n	8006318 <_free_r+0x24>
 8006384:	bd38      	pop	{r3, r4, r5, pc}
 8006386:	bf00      	nop
 8006388:	20003388 	.word	0x20003388

0800638c <_malloc_r>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	1ccd      	adds	r5, r1, #3
 8006390:	f025 0503 	bic.w	r5, r5, #3
 8006394:	3508      	adds	r5, #8
 8006396:	2d0c      	cmp	r5, #12
 8006398:	bf38      	it	cc
 800639a:	250c      	movcc	r5, #12
 800639c:	2d00      	cmp	r5, #0
 800639e:	4606      	mov	r6, r0
 80063a0:	db01      	blt.n	80063a6 <_malloc_r+0x1a>
 80063a2:	42a9      	cmp	r1, r5
 80063a4:	d903      	bls.n	80063ae <_malloc_r+0x22>
 80063a6:	230c      	movs	r3, #12
 80063a8:	6033      	str	r3, [r6, #0]
 80063aa:	2000      	movs	r0, #0
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	f003 f872 	bl	8009496 <__malloc_lock>
 80063b2:	4a21      	ldr	r2, [pc, #132]	; (8006438 <_malloc_r+0xac>)
 80063b4:	6814      	ldr	r4, [r2, #0]
 80063b6:	4621      	mov	r1, r4
 80063b8:	b991      	cbnz	r1, 80063e0 <_malloc_r+0x54>
 80063ba:	4c20      	ldr	r4, [pc, #128]	; (800643c <_malloc_r+0xb0>)
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	b91b      	cbnz	r3, 80063c8 <_malloc_r+0x3c>
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 fcf9 	bl	8006db8 <_sbrk_r>
 80063c6:	6020      	str	r0, [r4, #0]
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 fcf4 	bl	8006db8 <_sbrk_r>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d124      	bne.n	800641e <_malloc_r+0x92>
 80063d4:	230c      	movs	r3, #12
 80063d6:	4630      	mov	r0, r6
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	f003 f85d 	bl	8009498 <__malloc_unlock>
 80063de:	e7e4      	b.n	80063aa <_malloc_r+0x1e>
 80063e0:	680b      	ldr	r3, [r1, #0]
 80063e2:	1b5b      	subs	r3, r3, r5
 80063e4:	d418      	bmi.n	8006418 <_malloc_r+0x8c>
 80063e6:	2b0b      	cmp	r3, #11
 80063e8:	d90f      	bls.n	800640a <_malloc_r+0x7e>
 80063ea:	600b      	str	r3, [r1, #0]
 80063ec:	18cc      	adds	r4, r1, r3
 80063ee:	50cd      	str	r5, [r1, r3]
 80063f0:	4630      	mov	r0, r6
 80063f2:	f003 f851 	bl	8009498 <__malloc_unlock>
 80063f6:	f104 000b 	add.w	r0, r4, #11
 80063fa:	1d23      	adds	r3, r4, #4
 80063fc:	f020 0007 	bic.w	r0, r0, #7
 8006400:	1ac3      	subs	r3, r0, r3
 8006402:	d0d3      	beq.n	80063ac <_malloc_r+0x20>
 8006404:	425a      	negs	r2, r3
 8006406:	50e2      	str	r2, [r4, r3]
 8006408:	e7d0      	b.n	80063ac <_malloc_r+0x20>
 800640a:	684b      	ldr	r3, [r1, #4]
 800640c:	428c      	cmp	r4, r1
 800640e:	bf16      	itet	ne
 8006410:	6063      	strne	r3, [r4, #4]
 8006412:	6013      	streq	r3, [r2, #0]
 8006414:	460c      	movne	r4, r1
 8006416:	e7eb      	b.n	80063f0 <_malloc_r+0x64>
 8006418:	460c      	mov	r4, r1
 800641a:	6849      	ldr	r1, [r1, #4]
 800641c:	e7cc      	b.n	80063b8 <_malloc_r+0x2c>
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d005      	beq.n	8006434 <_malloc_r+0xa8>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4630      	mov	r0, r6
 800642c:	f000 fcc4 	bl	8006db8 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d0cf      	beq.n	80063d4 <_malloc_r+0x48>
 8006434:	6025      	str	r5, [r4, #0]
 8006436:	e7db      	b.n	80063f0 <_malloc_r+0x64>
 8006438:	20003388 	.word	0x20003388
 800643c:	2000338c 	.word	0x2000338c

08006440 <__cvt>:
 8006440:	2b00      	cmp	r3, #0
 8006442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006446:	461e      	mov	r6, r3
 8006448:	bfbb      	ittet	lt
 800644a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800644e:	461e      	movlt	r6, r3
 8006450:	2300      	movge	r3, #0
 8006452:	232d      	movlt	r3, #45	; 0x2d
 8006454:	b088      	sub	sp, #32
 8006456:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006458:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800645c:	f027 0720 	bic.w	r7, r7, #32
 8006460:	2f46      	cmp	r7, #70	; 0x46
 8006462:	4614      	mov	r4, r2
 8006464:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006466:	700b      	strb	r3, [r1, #0]
 8006468:	d004      	beq.n	8006474 <__cvt+0x34>
 800646a:	2f45      	cmp	r7, #69	; 0x45
 800646c:	d100      	bne.n	8006470 <__cvt+0x30>
 800646e:	3501      	adds	r5, #1
 8006470:	2302      	movs	r3, #2
 8006472:	e000      	b.n	8006476 <__cvt+0x36>
 8006474:	2303      	movs	r3, #3
 8006476:	aa07      	add	r2, sp, #28
 8006478:	9204      	str	r2, [sp, #16]
 800647a:	aa06      	add	r2, sp, #24
 800647c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006480:	e9cd 3500 	strd	r3, r5, [sp]
 8006484:	4622      	mov	r2, r4
 8006486:	4633      	mov	r3, r6
 8006488:	f001 fd02 	bl	8007e90 <_dtoa_r>
 800648c:	2f47      	cmp	r7, #71	; 0x47
 800648e:	4680      	mov	r8, r0
 8006490:	d102      	bne.n	8006498 <__cvt+0x58>
 8006492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006494:	07db      	lsls	r3, r3, #31
 8006496:	d526      	bpl.n	80064e6 <__cvt+0xa6>
 8006498:	2f46      	cmp	r7, #70	; 0x46
 800649a:	eb08 0905 	add.w	r9, r8, r5
 800649e:	d111      	bne.n	80064c4 <__cvt+0x84>
 80064a0:	f898 3000 	ldrb.w	r3, [r8]
 80064a4:	2b30      	cmp	r3, #48	; 0x30
 80064a6:	d10a      	bne.n	80064be <__cvt+0x7e>
 80064a8:	2200      	movs	r2, #0
 80064aa:	2300      	movs	r3, #0
 80064ac:	4620      	mov	r0, r4
 80064ae:	4631      	mov	r1, r6
 80064b0:	f7fa fa94 	bl	80009dc <__aeabi_dcmpeq>
 80064b4:	b918      	cbnz	r0, 80064be <__cvt+0x7e>
 80064b6:	f1c5 0501 	rsb	r5, r5, #1
 80064ba:	f8ca 5000 	str.w	r5, [sl]
 80064be:	f8da 3000 	ldr.w	r3, [sl]
 80064c2:	4499      	add	r9, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	4620      	mov	r0, r4
 80064ca:	4631      	mov	r1, r6
 80064cc:	f7fa fa86 	bl	80009dc <__aeabi_dcmpeq>
 80064d0:	b938      	cbnz	r0, 80064e2 <__cvt+0xa2>
 80064d2:	2230      	movs	r2, #48	; 0x30
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	454b      	cmp	r3, r9
 80064d8:	d205      	bcs.n	80064e6 <__cvt+0xa6>
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	9107      	str	r1, [sp, #28]
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e7f8      	b.n	80064d4 <__cvt+0x94>
 80064e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80064e6:	4640      	mov	r0, r8
 80064e8:	9b07      	ldr	r3, [sp, #28]
 80064ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064ec:	eba3 0308 	sub.w	r3, r3, r8
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	b008      	add	sp, #32
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080064f8 <__exponent>:
 80064f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fa:	2900      	cmp	r1, #0
 80064fc:	bfb4      	ite	lt
 80064fe:	232d      	movlt	r3, #45	; 0x2d
 8006500:	232b      	movge	r3, #43	; 0x2b
 8006502:	4604      	mov	r4, r0
 8006504:	bfb8      	it	lt
 8006506:	4249      	neglt	r1, r1
 8006508:	2909      	cmp	r1, #9
 800650a:	f804 2b02 	strb.w	r2, [r4], #2
 800650e:	7043      	strb	r3, [r0, #1]
 8006510:	dd21      	ble.n	8006556 <__exponent+0x5e>
 8006512:	f10d 0307 	add.w	r3, sp, #7
 8006516:	461f      	mov	r7, r3
 8006518:	260a      	movs	r6, #10
 800651a:	fb91 f5f6 	sdiv	r5, r1, r6
 800651e:	fb06 1115 	mls	r1, r6, r5, r1
 8006522:	2d09      	cmp	r5, #9
 8006524:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006528:	f803 1c01 	strb.w	r1, [r3, #-1]
 800652c:	f103 32ff 	add.w	r2, r3, #4294967295
 8006530:	4629      	mov	r1, r5
 8006532:	dc09      	bgt.n	8006548 <__exponent+0x50>
 8006534:	3130      	adds	r1, #48	; 0x30
 8006536:	3b02      	subs	r3, #2
 8006538:	f802 1c01 	strb.w	r1, [r2, #-1]
 800653c:	42bb      	cmp	r3, r7
 800653e:	4622      	mov	r2, r4
 8006540:	d304      	bcc.n	800654c <__exponent+0x54>
 8006542:	1a10      	subs	r0, r2, r0
 8006544:	b003      	add	sp, #12
 8006546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006548:	4613      	mov	r3, r2
 800654a:	e7e6      	b.n	800651a <__exponent+0x22>
 800654c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006550:	f804 2b01 	strb.w	r2, [r4], #1
 8006554:	e7f2      	b.n	800653c <__exponent+0x44>
 8006556:	2330      	movs	r3, #48	; 0x30
 8006558:	4419      	add	r1, r3
 800655a:	7083      	strb	r3, [r0, #2]
 800655c:	1d02      	adds	r2, r0, #4
 800655e:	70c1      	strb	r1, [r0, #3]
 8006560:	e7ef      	b.n	8006542 <__exponent+0x4a>
	...

08006564 <_printf_float>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b091      	sub	sp, #68	; 0x44
 800656a:	460c      	mov	r4, r1
 800656c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800656e:	4693      	mov	fp, r2
 8006570:	461e      	mov	r6, r3
 8006572:	4605      	mov	r5, r0
 8006574:	f002 fee4 	bl	8009340 <_localeconv_r>
 8006578:	6803      	ldr	r3, [r0, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	9309      	str	r3, [sp, #36]	; 0x24
 800657e:	f7f9 fe01 	bl	8000184 <strlen>
 8006582:	2300      	movs	r3, #0
 8006584:	930e      	str	r3, [sp, #56]	; 0x38
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	900a      	str	r0, [sp, #40]	; 0x28
 800658a:	3307      	adds	r3, #7
 800658c:	f023 0307 	bic.w	r3, r3, #7
 8006590:	f103 0208 	add.w	r2, r3, #8
 8006594:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006598:	f8d4 a000 	ldr.w	sl, [r4]
 800659c:	603a      	str	r2, [r7, #0]
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065a6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80065aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	4ba6      	ldr	r3, [pc, #664]	; (8006850 <_printf_float+0x2ec>)
 80065b6:	4638      	mov	r0, r7
 80065b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ba:	f7fa fa41 	bl	8000a40 <__aeabi_dcmpun>
 80065be:	bb68      	cbnz	r0, 800661c <_printf_float+0xb8>
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	4ba2      	ldr	r3, [pc, #648]	; (8006850 <_printf_float+0x2ec>)
 80065c6:	4638      	mov	r0, r7
 80065c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ca:	f7fa fa1b 	bl	8000a04 <__aeabi_dcmple>
 80065ce:	bb28      	cbnz	r0, 800661c <_printf_float+0xb8>
 80065d0:	2200      	movs	r2, #0
 80065d2:	2300      	movs	r3, #0
 80065d4:	4638      	mov	r0, r7
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa fa0a 	bl	80009f0 <__aeabi_dcmplt>
 80065dc:	b110      	cbz	r0, 80065e4 <_printf_float+0x80>
 80065de:	232d      	movs	r3, #45	; 0x2d
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	4f9b      	ldr	r7, [pc, #620]	; (8006854 <_printf_float+0x2f0>)
 80065e6:	4b9c      	ldr	r3, [pc, #624]	; (8006858 <_printf_float+0x2f4>)
 80065e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065ec:	bf98      	it	ls
 80065ee:	461f      	movls	r7, r3
 80065f0:	2303      	movs	r3, #3
 80065f2:	f04f 0900 	mov.w	r9, #0
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	f02a 0304 	bic.w	r3, sl, #4
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	9600      	str	r6, [sp, #0]
 8006600:	465b      	mov	r3, fp
 8006602:	aa0f      	add	r2, sp, #60	; 0x3c
 8006604:	4621      	mov	r1, r4
 8006606:	4628      	mov	r0, r5
 8006608:	f000 f9e2 	bl	80069d0 <_printf_common>
 800660c:	3001      	adds	r0, #1
 800660e:	f040 8090 	bne.w	8006732 <_printf_float+0x1ce>
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	b011      	add	sp, #68	; 0x44
 8006618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661c:	463a      	mov	r2, r7
 800661e:	464b      	mov	r3, r9
 8006620:	4638      	mov	r0, r7
 8006622:	4649      	mov	r1, r9
 8006624:	f7fa fa0c 	bl	8000a40 <__aeabi_dcmpun>
 8006628:	b110      	cbz	r0, 8006630 <_printf_float+0xcc>
 800662a:	4f8c      	ldr	r7, [pc, #560]	; (800685c <_printf_float+0x2f8>)
 800662c:	4b8c      	ldr	r3, [pc, #560]	; (8006860 <_printf_float+0x2fc>)
 800662e:	e7db      	b.n	80065e8 <_printf_float+0x84>
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	a80d      	add	r0, sp, #52	; 0x34
 800663a:	a90e      	add	r1, sp, #56	; 0x38
 800663c:	d140      	bne.n	80066c0 <_printf_float+0x15c>
 800663e:	2306      	movs	r3, #6
 8006640:	6063      	str	r3, [r4, #4]
 8006642:	f04f 0c00 	mov.w	ip, #0
 8006646:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800664a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6022      	str	r2, [r4, #0]
 8006652:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	463a      	mov	r2, r7
 800665a:	464b      	mov	r3, r9
 800665c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff feed 	bl	8006440 <__cvt>
 8006666:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800666a:	2b47      	cmp	r3, #71	; 0x47
 800666c:	4607      	mov	r7, r0
 800666e:	d109      	bne.n	8006684 <_printf_float+0x120>
 8006670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006672:	1cd8      	adds	r0, r3, #3
 8006674:	db02      	blt.n	800667c <_printf_float+0x118>
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	4293      	cmp	r3, r2
 800667a:	dd47      	ble.n	800670c <_printf_float+0x1a8>
 800667c:	f1a8 0802 	sub.w	r8, r8, #2
 8006680:	fa5f f888 	uxtb.w	r8, r8
 8006684:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006688:	990d      	ldr	r1, [sp, #52]	; 0x34
 800668a:	d824      	bhi.n	80066d6 <_printf_float+0x172>
 800668c:	3901      	subs	r1, #1
 800668e:	4642      	mov	r2, r8
 8006690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006694:	910d      	str	r1, [sp, #52]	; 0x34
 8006696:	f7ff ff2f 	bl	80064f8 <__exponent>
 800669a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800669c:	4681      	mov	r9, r0
 800669e:	1813      	adds	r3, r2, r0
 80066a0:	2a01      	cmp	r2, #1
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	dc02      	bgt.n	80066ac <_printf_float+0x148>
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	07d1      	lsls	r1, r2, #31
 80066aa:	d501      	bpl.n	80066b0 <_printf_float+0x14c>
 80066ac:	3301      	adds	r3, #1
 80066ae:	6123      	str	r3, [r4, #16]
 80066b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0a2      	beq.n	80065fe <_printf_float+0x9a>
 80066b8:	232d      	movs	r3, #45	; 0x2d
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	e79e      	b.n	80065fe <_printf_float+0x9a>
 80066c0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80066c4:	f000 816e 	beq.w	80069a4 <_printf_float+0x440>
 80066c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80066cc:	d1b9      	bne.n	8006642 <_printf_float+0xde>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1b7      	bne.n	8006642 <_printf_float+0xde>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7b4      	b.n	8006640 <_printf_float+0xdc>
 80066d6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80066da:	d119      	bne.n	8006710 <_printf_float+0x1ac>
 80066dc:	2900      	cmp	r1, #0
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	dd0c      	ble.n	80066fc <_printf_float+0x198>
 80066e2:	6121      	str	r1, [r4, #16]
 80066e4:	b913      	cbnz	r3, 80066ec <_printf_float+0x188>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	07d2      	lsls	r2, r2, #31
 80066ea:	d502      	bpl.n	80066f2 <_printf_float+0x18e>
 80066ec:	3301      	adds	r3, #1
 80066ee:	440b      	add	r3, r1
 80066f0:	6123      	str	r3, [r4, #16]
 80066f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066f4:	f04f 0900 	mov.w	r9, #0
 80066f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80066fa:	e7d9      	b.n	80066b0 <_printf_float+0x14c>
 80066fc:	b913      	cbnz	r3, 8006704 <_printf_float+0x1a0>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d0      	lsls	r0, r2, #31
 8006702:	d501      	bpl.n	8006708 <_printf_float+0x1a4>
 8006704:	3302      	adds	r3, #2
 8006706:	e7f3      	b.n	80066f0 <_printf_float+0x18c>
 8006708:	2301      	movs	r3, #1
 800670a:	e7f1      	b.n	80066f0 <_printf_float+0x18c>
 800670c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006710:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006714:	4293      	cmp	r3, r2
 8006716:	db05      	blt.n	8006724 <_printf_float+0x1c0>
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	07d1      	lsls	r1, r2, #31
 800671e:	d5e8      	bpl.n	80066f2 <_printf_float+0x18e>
 8006720:	3301      	adds	r3, #1
 8006722:	e7e5      	b.n	80066f0 <_printf_float+0x18c>
 8006724:	2b00      	cmp	r3, #0
 8006726:	bfcc      	ite	gt
 8006728:	2301      	movgt	r3, #1
 800672a:	f1c3 0302 	rsble	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	e7de      	b.n	80066f0 <_printf_float+0x18c>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	055a      	lsls	r2, r3, #21
 8006736:	d407      	bmi.n	8006748 <_printf_float+0x1e4>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	463a      	mov	r2, r7
 800673c:	4659      	mov	r1, fp
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	3001      	adds	r0, #1
 8006744:	d129      	bne.n	800679a <_printf_float+0x236>
 8006746:	e764      	b.n	8006612 <_printf_float+0xae>
 8006748:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800674c:	f240 80d7 	bls.w	80068fe <_printf_float+0x39a>
 8006750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	f7fa f940 	bl	80009dc <__aeabi_dcmpeq>
 800675c:	b388      	cbz	r0, 80067c2 <_printf_float+0x25e>
 800675e:	2301      	movs	r3, #1
 8006760:	4a40      	ldr	r2, [pc, #256]	; (8006864 <_printf_float+0x300>)
 8006762:	4659      	mov	r1, fp
 8006764:	4628      	mov	r0, r5
 8006766:	47b0      	blx	r6
 8006768:	3001      	adds	r0, #1
 800676a:	f43f af52 	beq.w	8006612 <_printf_float+0xae>
 800676e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006772:	429a      	cmp	r2, r3
 8006774:	db02      	blt.n	800677c <_printf_float+0x218>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	07d8      	lsls	r0, r3, #31
 800677a:	d50e      	bpl.n	800679a <_printf_float+0x236>
 800677c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006780:	4659      	mov	r1, fp
 8006782:	4628      	mov	r0, r5
 8006784:	47b0      	blx	r6
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af43 	beq.w	8006612 <_printf_float+0xae>
 800678c:	2700      	movs	r7, #0
 800678e:	f104 081a 	add.w	r8, r4, #26
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	3b01      	subs	r3, #1
 8006796:	42bb      	cmp	r3, r7
 8006798:	dc09      	bgt.n	80067ae <_printf_float+0x24a>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	079f      	lsls	r7, r3, #30
 800679e:	f100 80fd 	bmi.w	800699c <_printf_float+0x438>
 80067a2:	68e0      	ldr	r0, [r4, #12]
 80067a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067a6:	4298      	cmp	r0, r3
 80067a8:	bfb8      	it	lt
 80067aa:	4618      	movlt	r0, r3
 80067ac:	e733      	b.n	8006616 <_printf_float+0xb2>
 80067ae:	2301      	movs	r3, #1
 80067b0:	4642      	mov	r2, r8
 80067b2:	4659      	mov	r1, fp
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b0      	blx	r6
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f af2a 	beq.w	8006612 <_printf_float+0xae>
 80067be:	3701      	adds	r7, #1
 80067c0:	e7e7      	b.n	8006792 <_printf_float+0x22e>
 80067c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dc2b      	bgt.n	8006820 <_printf_float+0x2bc>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4a26      	ldr	r2, [pc, #152]	; (8006864 <_printf_float+0x300>)
 80067cc:	4659      	mov	r1, fp
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b0      	blx	r6
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af1d 	beq.w	8006612 <_printf_float+0xae>
 80067d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067da:	b923      	cbnz	r3, 80067e6 <_printf_float+0x282>
 80067dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067de:	b913      	cbnz	r3, 80067e6 <_printf_float+0x282>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	07d9      	lsls	r1, r3, #31
 80067e4:	d5d9      	bpl.n	800679a <_printf_float+0x236>
 80067e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ea:	4659      	mov	r1, fp
 80067ec:	4628      	mov	r0, r5
 80067ee:	47b0      	blx	r6
 80067f0:	3001      	adds	r0, #1
 80067f2:	f43f af0e 	beq.w	8006612 <_printf_float+0xae>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 091a 	add.w	r9, r4, #26
 80067fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006800:	425b      	negs	r3, r3
 8006802:	4543      	cmp	r3, r8
 8006804:	dc01      	bgt.n	800680a <_printf_float+0x2a6>
 8006806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006808:	e797      	b.n	800673a <_printf_float+0x1d6>
 800680a:	2301      	movs	r3, #1
 800680c:	464a      	mov	r2, r9
 800680e:	4659      	mov	r1, fp
 8006810:	4628      	mov	r0, r5
 8006812:	47b0      	blx	r6
 8006814:	3001      	adds	r0, #1
 8006816:	f43f aefc 	beq.w	8006612 <_printf_float+0xae>
 800681a:	f108 0801 	add.w	r8, r8, #1
 800681e:	e7ee      	b.n	80067fe <_printf_float+0x29a>
 8006820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006824:	429a      	cmp	r2, r3
 8006826:	bfa8      	it	ge
 8006828:	461a      	movge	r2, r3
 800682a:	2a00      	cmp	r2, #0
 800682c:	4690      	mov	r8, r2
 800682e:	dd07      	ble.n	8006840 <_printf_float+0x2dc>
 8006830:	4613      	mov	r3, r2
 8006832:	4659      	mov	r1, fp
 8006834:	463a      	mov	r2, r7
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	3001      	adds	r0, #1
 800683c:	f43f aee9 	beq.w	8006612 <_printf_float+0xae>
 8006840:	f104 031a 	add.w	r3, r4, #26
 8006844:	f04f 0a00 	mov.w	sl, #0
 8006848:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800684c:	930b      	str	r3, [sp, #44]	; 0x2c
 800684e:	e015      	b.n	800687c <_printf_float+0x318>
 8006850:	7fefffff 	.word	0x7fefffff
 8006854:	0800b19a 	.word	0x0800b19a
 8006858:	0800b196 	.word	0x0800b196
 800685c:	0800b1a2 	.word	0x0800b1a2
 8006860:	0800b19e 	.word	0x0800b19e
 8006864:	0800b4ab 	.word	0x0800b4ab
 8006868:	2301      	movs	r3, #1
 800686a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800686c:	4659      	mov	r1, fp
 800686e:	4628      	mov	r0, r5
 8006870:	47b0      	blx	r6
 8006872:	3001      	adds	r0, #1
 8006874:	f43f aecd 	beq.w	8006612 <_printf_float+0xae>
 8006878:	f10a 0a01 	add.w	sl, sl, #1
 800687c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006880:	eba9 0308 	sub.w	r3, r9, r8
 8006884:	4553      	cmp	r3, sl
 8006886:	dcef      	bgt.n	8006868 <_printf_float+0x304>
 8006888:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800688c:	429a      	cmp	r2, r3
 800688e:	444f      	add	r7, r9
 8006890:	db14      	blt.n	80068bc <_printf_float+0x358>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	07da      	lsls	r2, r3, #31
 8006896:	d411      	bmi.n	80068bc <_printf_float+0x358>
 8006898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800689c:	eba3 0209 	sub.w	r2, r3, r9
 80068a0:	eba3 0901 	sub.w	r9, r3, r1
 80068a4:	4591      	cmp	r9, r2
 80068a6:	bfa8      	it	ge
 80068a8:	4691      	movge	r9, r2
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	dc0d      	bgt.n	80068cc <_printf_float+0x368>
 80068b0:	2700      	movs	r7, #0
 80068b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068b6:	f104 081a 	add.w	r8, r4, #26
 80068ba:	e018      	b.n	80068ee <_printf_float+0x38a>
 80068bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c0:	4659      	mov	r1, fp
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b0      	blx	r6
 80068c6:	3001      	adds	r0, #1
 80068c8:	d1e6      	bne.n	8006898 <_printf_float+0x334>
 80068ca:	e6a2      	b.n	8006612 <_printf_float+0xae>
 80068cc:	464b      	mov	r3, r9
 80068ce:	463a      	mov	r2, r7
 80068d0:	4659      	mov	r1, fp
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b0      	blx	r6
 80068d6:	3001      	adds	r0, #1
 80068d8:	d1ea      	bne.n	80068b0 <_printf_float+0x34c>
 80068da:	e69a      	b.n	8006612 <_printf_float+0xae>
 80068dc:	2301      	movs	r3, #1
 80068de:	4642      	mov	r2, r8
 80068e0:	4659      	mov	r1, fp
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b0      	blx	r6
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f ae93 	beq.w	8006612 <_printf_float+0xae>
 80068ec:	3701      	adds	r7, #1
 80068ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	eba3 0309 	sub.w	r3, r3, r9
 80068f8:	42bb      	cmp	r3, r7
 80068fa:	dcef      	bgt.n	80068dc <_printf_float+0x378>
 80068fc:	e74d      	b.n	800679a <_printf_float+0x236>
 80068fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006900:	2a01      	cmp	r2, #1
 8006902:	dc01      	bgt.n	8006908 <_printf_float+0x3a4>
 8006904:	07db      	lsls	r3, r3, #31
 8006906:	d538      	bpl.n	800697a <_printf_float+0x416>
 8006908:	2301      	movs	r3, #1
 800690a:	463a      	mov	r2, r7
 800690c:	4659      	mov	r1, fp
 800690e:	4628      	mov	r0, r5
 8006910:	47b0      	blx	r6
 8006912:	3001      	adds	r0, #1
 8006914:	f43f ae7d 	beq.w	8006612 <_printf_float+0xae>
 8006918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800691c:	4659      	mov	r1, fp
 800691e:	4628      	mov	r0, r5
 8006920:	47b0      	blx	r6
 8006922:	3001      	adds	r0, #1
 8006924:	f107 0701 	add.w	r7, r7, #1
 8006928:	f43f ae73 	beq.w	8006612 <_printf_float+0xae>
 800692c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006932:	2200      	movs	r2, #0
 8006934:	f103 38ff 	add.w	r8, r3, #4294967295
 8006938:	2300      	movs	r3, #0
 800693a:	f7fa f84f 	bl	80009dc <__aeabi_dcmpeq>
 800693e:	b9c0      	cbnz	r0, 8006972 <_printf_float+0x40e>
 8006940:	4643      	mov	r3, r8
 8006942:	463a      	mov	r2, r7
 8006944:	4659      	mov	r1, fp
 8006946:	4628      	mov	r0, r5
 8006948:	47b0      	blx	r6
 800694a:	3001      	adds	r0, #1
 800694c:	d10d      	bne.n	800696a <_printf_float+0x406>
 800694e:	e660      	b.n	8006612 <_printf_float+0xae>
 8006950:	2301      	movs	r3, #1
 8006952:	4642      	mov	r2, r8
 8006954:	4659      	mov	r1, fp
 8006956:	4628      	mov	r0, r5
 8006958:	47b0      	blx	r6
 800695a:	3001      	adds	r0, #1
 800695c:	f43f ae59 	beq.w	8006612 <_printf_float+0xae>
 8006960:	3701      	adds	r7, #1
 8006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006964:	3b01      	subs	r3, #1
 8006966:	42bb      	cmp	r3, r7
 8006968:	dcf2      	bgt.n	8006950 <_printf_float+0x3ec>
 800696a:	464b      	mov	r3, r9
 800696c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006970:	e6e4      	b.n	800673c <_printf_float+0x1d8>
 8006972:	2700      	movs	r7, #0
 8006974:	f104 081a 	add.w	r8, r4, #26
 8006978:	e7f3      	b.n	8006962 <_printf_float+0x3fe>
 800697a:	2301      	movs	r3, #1
 800697c:	e7e1      	b.n	8006942 <_printf_float+0x3de>
 800697e:	2301      	movs	r3, #1
 8006980:	4642      	mov	r2, r8
 8006982:	4659      	mov	r1, fp
 8006984:	4628      	mov	r0, r5
 8006986:	47b0      	blx	r6
 8006988:	3001      	adds	r0, #1
 800698a:	f43f ae42 	beq.w	8006612 <_printf_float+0xae>
 800698e:	3701      	adds	r7, #1
 8006990:	68e3      	ldr	r3, [r4, #12]
 8006992:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	42bb      	cmp	r3, r7
 8006998:	dcf1      	bgt.n	800697e <_printf_float+0x41a>
 800699a:	e702      	b.n	80067a2 <_printf_float+0x23e>
 800699c:	2700      	movs	r7, #0
 800699e:	f104 0819 	add.w	r8, r4, #25
 80069a2:	e7f5      	b.n	8006990 <_printf_float+0x42c>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f43f ae94 	beq.w	80066d2 <_printf_float+0x16e>
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80069b2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80069bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	463a      	mov	r2, r7
 80069c4:	464b      	mov	r3, r9
 80069c6:	4628      	mov	r0, r5
 80069c8:	f7ff fd3a 	bl	8006440 <__cvt>
 80069cc:	4607      	mov	r7, r0
 80069ce:	e64f      	b.n	8006670 <_printf_float+0x10c>

080069d0 <_printf_common>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	4691      	mov	r9, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	688a      	ldr	r2, [r1, #8]
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	4606      	mov	r6, r0
 80069de:	4293      	cmp	r3, r2
 80069e0:	bfb8      	it	lt
 80069e2:	4613      	movlt	r3, r2
 80069e4:	f8c9 3000 	str.w	r3, [r9]
 80069e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ec:	460c      	mov	r4, r1
 80069ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f2:	b112      	cbz	r2, 80069fa <_printf_common+0x2a>
 80069f4:	3301      	adds	r3, #1
 80069f6:	f8c9 3000 	str.w	r3, [r9]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	0699      	lsls	r1, r3, #26
 80069fe:	bf42      	ittt	mi
 8006a00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a04:	3302      	addmi	r3, #2
 8006a06:	f8c9 3000 	strmi.w	r3, [r9]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d107      	bne.n	8006a22 <_printf_common+0x52>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	f8d9 2000 	ldr.w	r2, [r9]
 8006a1c:	1a9b      	subs	r3, r3, r2
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	dc29      	bgt.n	8006a76 <_printf_common+0xa6>
 8006a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	3300      	adds	r3, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	0692      	lsls	r2, r2, #26
 8006a30:	d42e      	bmi.n	8006a90 <_printf_common+0xc0>
 8006a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a36:	4639      	mov	r1, r7
 8006a38:	4630      	mov	r0, r6
 8006a3a:	47c0      	blx	r8
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d021      	beq.n	8006a84 <_printf_common+0xb4>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	68e5      	ldr	r5, [r4, #12]
 8006a44:	f003 0306 	and.w	r3, r3, #6
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	bf18      	it	ne
 8006a4c:	2500      	movne	r5, #0
 8006a4e:	f8d9 2000 	ldr.w	r2, [r9]
 8006a52:	f04f 0900 	mov.w	r9, #0
 8006a56:	bf08      	it	eq
 8006a58:	1aad      	subeq	r5, r5, r2
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	bf08      	it	eq
 8006a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a64:	4293      	cmp	r3, r2
 8006a66:	bfc4      	itt	gt
 8006a68:	1a9b      	subgt	r3, r3, r2
 8006a6a:	18ed      	addgt	r5, r5, r3
 8006a6c:	341a      	adds	r4, #26
 8006a6e:	454d      	cmp	r5, r9
 8006a70:	d11a      	bne.n	8006aa8 <_printf_common+0xd8>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e008      	b.n	8006a88 <_printf_common+0xb8>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4652      	mov	r2, sl
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	47c0      	blx	r8
 8006a80:	3001      	adds	r0, #1
 8006a82:	d103      	bne.n	8006a8c <_printf_common+0xbc>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7c2      	b.n	8006a16 <_printf_common+0x46>
 8006a90:	2030      	movs	r0, #48	; 0x30
 8006a92:	18e1      	adds	r1, r4, r3
 8006a94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a9e:	4422      	add	r2, r4
 8006aa0:	3302      	adds	r3, #2
 8006aa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa6:	e7c4      	b.n	8006a32 <_printf_common+0x62>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4639      	mov	r1, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d0e6      	beq.n	8006a84 <_printf_common+0xb4>
 8006ab6:	f109 0901 	add.w	r9, r9, #1
 8006aba:	e7d8      	b.n	8006a6e <_printf_common+0x9e>

08006abc <_printf_i>:
 8006abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	7e09      	ldrb	r1, [r1, #24]
 8006ac8:	b085      	sub	sp, #20
 8006aca:	296e      	cmp	r1, #110	; 0x6e
 8006acc:	4617      	mov	r7, r2
 8006ace:	4606      	mov	r6, r0
 8006ad0:	4698      	mov	r8, r3
 8006ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ad4:	f000 80b3 	beq.w	8006c3e <_printf_i+0x182>
 8006ad8:	d822      	bhi.n	8006b20 <_printf_i+0x64>
 8006ada:	2963      	cmp	r1, #99	; 0x63
 8006adc:	d036      	beq.n	8006b4c <_printf_i+0x90>
 8006ade:	d80a      	bhi.n	8006af6 <_printf_i+0x3a>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	f000 80b9 	beq.w	8006c58 <_printf_i+0x19c>
 8006ae6:	2958      	cmp	r1, #88	; 0x58
 8006ae8:	f000 8083 	beq.w	8006bf2 <_printf_i+0x136>
 8006aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006af0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006af4:	e032      	b.n	8006b5c <_printf_i+0xa0>
 8006af6:	2964      	cmp	r1, #100	; 0x64
 8006af8:	d001      	beq.n	8006afe <_printf_i+0x42>
 8006afa:	2969      	cmp	r1, #105	; 0x69
 8006afc:	d1f6      	bne.n	8006aec <_printf_i+0x30>
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	6813      	ldr	r3, [r2, #0]
 8006b02:	0605      	lsls	r5, r0, #24
 8006b04:	f103 0104 	add.w	r1, r3, #4
 8006b08:	d52a      	bpl.n	8006b60 <_printf_i+0xa4>
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da03      	bge.n	8006b1a <_printf_i+0x5e>
 8006b12:	222d      	movs	r2, #45	; 0x2d
 8006b14:	425b      	negs	r3, r3
 8006b16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b1a:	486f      	ldr	r0, [pc, #444]	; (8006cd8 <_printf_i+0x21c>)
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	e039      	b.n	8006b94 <_printf_i+0xd8>
 8006b20:	2973      	cmp	r1, #115	; 0x73
 8006b22:	f000 809d 	beq.w	8006c60 <_printf_i+0x1a4>
 8006b26:	d808      	bhi.n	8006b3a <_printf_i+0x7e>
 8006b28:	296f      	cmp	r1, #111	; 0x6f
 8006b2a:	d020      	beq.n	8006b6e <_printf_i+0xb2>
 8006b2c:	2970      	cmp	r1, #112	; 0x70
 8006b2e:	d1dd      	bne.n	8006aec <_printf_i+0x30>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f043 0320 	orr.w	r3, r3, #32
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	e003      	b.n	8006b42 <_printf_i+0x86>
 8006b3a:	2975      	cmp	r1, #117	; 0x75
 8006b3c:	d017      	beq.n	8006b6e <_printf_i+0xb2>
 8006b3e:	2978      	cmp	r1, #120	; 0x78
 8006b40:	d1d4      	bne.n	8006aec <_printf_i+0x30>
 8006b42:	2378      	movs	r3, #120	; 0x78
 8006b44:	4865      	ldr	r0, [pc, #404]	; (8006cdc <_printf_i+0x220>)
 8006b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b4a:	e055      	b.n	8006bf8 <_printf_i+0x13c>
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b52:	1d19      	adds	r1, r3, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6011      	str	r1, [r2, #0]
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e08c      	b.n	8006c7a <_printf_i+0x1be>
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b66:	6011      	str	r1, [r2, #0]
 8006b68:	bf18      	it	ne
 8006b6a:	b21b      	sxthne	r3, r3
 8006b6c:	e7cf      	b.n	8006b0e <_printf_i+0x52>
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	1d18      	adds	r0, r3, #4
 8006b74:	6010      	str	r0, [r2, #0]
 8006b76:	0628      	lsls	r0, r5, #24
 8006b78:	d501      	bpl.n	8006b7e <_printf_i+0xc2>
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	e002      	b.n	8006b84 <_printf_i+0xc8>
 8006b7e:	0668      	lsls	r0, r5, #25
 8006b80:	d5fb      	bpl.n	8006b7a <_printf_i+0xbe>
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	296f      	cmp	r1, #111	; 0x6f
 8006b86:	bf14      	ite	ne
 8006b88:	220a      	movne	r2, #10
 8006b8a:	2208      	moveq	r2, #8
 8006b8c:	4852      	ldr	r0, [pc, #328]	; (8006cd8 <_printf_i+0x21c>)
 8006b8e:	2100      	movs	r1, #0
 8006b90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b94:	6865      	ldr	r5, [r4, #4]
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	60a5      	str	r5, [r4, #8]
 8006b9a:	f2c0 8095 	blt.w	8006cc8 <_printf_i+0x20c>
 8006b9e:	6821      	ldr	r1, [r4, #0]
 8006ba0:	f021 0104 	bic.w	r1, r1, #4
 8006ba4:	6021      	str	r1, [r4, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d13d      	bne.n	8006c26 <_printf_i+0x16a>
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	f040 808e 	bne.w	8006ccc <_printf_i+0x210>
 8006bb0:	4665      	mov	r5, ip
 8006bb2:	2a08      	cmp	r2, #8
 8006bb4:	d10b      	bne.n	8006bce <_printf_i+0x112>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	07db      	lsls	r3, r3, #31
 8006bba:	d508      	bpl.n	8006bce <_printf_i+0x112>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	bfde      	ittt	le
 8006bc4:	2330      	movle	r3, #48	; 0x30
 8006bc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bce:	ebac 0305 	sub.w	r3, ip, r5
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	f8cd 8000 	str.w	r8, [sp]
 8006bd8:	463b      	mov	r3, r7
 8006bda:	aa03      	add	r2, sp, #12
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff fef6 	bl	80069d0 <_printf_common>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d14d      	bne.n	8006c84 <_printf_i+0x1c8>
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	b005      	add	sp, #20
 8006bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf2:	4839      	ldr	r0, [pc, #228]	; (8006cd8 <_printf_i+0x21c>)
 8006bf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	6821      	ldr	r1, [r4, #0]
 8006bfc:	1d1d      	adds	r5, r3, #4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6015      	str	r5, [r2, #0]
 8006c02:	060a      	lsls	r2, r1, #24
 8006c04:	d50b      	bpl.n	8006c1e <_printf_i+0x162>
 8006c06:	07ca      	lsls	r2, r1, #31
 8006c08:	bf44      	itt	mi
 8006c0a:	f041 0120 	orrmi.w	r1, r1, #32
 8006c0e:	6021      	strmi	r1, [r4, #0]
 8006c10:	b91b      	cbnz	r3, 8006c1a <_printf_i+0x15e>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	f022 0220 	bic.w	r2, r2, #32
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	2210      	movs	r2, #16
 8006c1c:	e7b7      	b.n	8006b8e <_printf_i+0xd2>
 8006c1e:	064d      	lsls	r5, r1, #25
 8006c20:	bf48      	it	mi
 8006c22:	b29b      	uxthmi	r3, r3
 8006c24:	e7ef      	b.n	8006c06 <_printf_i+0x14a>
 8006c26:	4665      	mov	r5, ip
 8006c28:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c2c:	fb02 3311 	mls	r3, r2, r1, r3
 8006c30:	5cc3      	ldrb	r3, [r0, r3]
 8006c32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c36:	460b      	mov	r3, r1
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d1f5      	bne.n	8006c28 <_printf_i+0x16c>
 8006c3c:	e7b9      	b.n	8006bb2 <_printf_i+0xf6>
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	6825      	ldr	r5, [r4, #0]
 8006c42:	1d18      	adds	r0, r3, #4
 8006c44:	6961      	ldr	r1, [r4, #20]
 8006c46:	6010      	str	r0, [r2, #0]
 8006c48:	0628      	lsls	r0, r5, #24
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	d501      	bpl.n	8006c52 <_printf_i+0x196>
 8006c4e:	6019      	str	r1, [r3, #0]
 8006c50:	e002      	b.n	8006c58 <_printf_i+0x19c>
 8006c52:	066a      	lsls	r2, r5, #25
 8006c54:	d5fb      	bpl.n	8006c4e <_printf_i+0x192>
 8006c56:	8019      	strh	r1, [r3, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4665      	mov	r5, ip
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	e7b9      	b.n	8006bd4 <_printf_i+0x118>
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	1d19      	adds	r1, r3, #4
 8006c64:	6011      	str	r1, [r2, #0]
 8006c66:	681d      	ldr	r5, [r3, #0]
 8006c68:	6862      	ldr	r2, [r4, #4]
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f002 fbeb 	bl	8009448 <memchr>
 8006c72:	b108      	cbz	r0, 8006c78 <_printf_i+0x1bc>
 8006c74:	1b40      	subs	r0, r0, r5
 8006c76:	6060      	str	r0, [r4, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c82:	e7a7      	b.n	8006bd4 <_printf_i+0x118>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	462a      	mov	r2, r5
 8006c88:	4639      	mov	r1, r7
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	47c0      	blx	r8
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d0aa      	beq.n	8006be8 <_printf_i+0x12c>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	079b      	lsls	r3, r3, #30
 8006c96:	d413      	bmi.n	8006cc0 <_printf_i+0x204>
 8006c98:	68e0      	ldr	r0, [r4, #12]
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	bfb8      	it	lt
 8006ca0:	4618      	movlt	r0, r3
 8006ca2:	e7a3      	b.n	8006bec <_printf_i+0x130>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	464a      	mov	r2, r9
 8006ca8:	4639      	mov	r1, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d09a      	beq.n	8006be8 <_printf_i+0x12c>
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	68e3      	ldr	r3, [r4, #12]
 8006cb6:	9a03      	ldr	r2, [sp, #12]
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	42ab      	cmp	r3, r5
 8006cbc:	dcf2      	bgt.n	8006ca4 <_printf_i+0x1e8>
 8006cbe:	e7eb      	b.n	8006c98 <_printf_i+0x1dc>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	f104 0919 	add.w	r9, r4, #25
 8006cc6:	e7f5      	b.n	8006cb4 <_printf_i+0x1f8>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ac      	bne.n	8006c26 <_printf_i+0x16a>
 8006ccc:	7803      	ldrb	r3, [r0, #0]
 8006cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd6:	e76c      	b.n	8006bb2 <_printf_i+0xf6>
 8006cd8:	0800b1a6 	.word	0x0800b1a6
 8006cdc:	0800b1b7 	.word	0x0800b1b7

08006ce0 <_puts_r>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	460e      	mov	r6, r1
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	b118      	cbz	r0, 8006cf0 <_puts_r+0x10>
 8006ce8:	6983      	ldr	r3, [r0, #24]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <_puts_r+0x10>
 8006cec:	f001 ff74 	bl	8008bd8 <__sinit>
 8006cf0:	69ab      	ldr	r3, [r5, #24]
 8006cf2:	68ac      	ldr	r4, [r5, #8]
 8006cf4:	b913      	cbnz	r3, 8006cfc <_puts_r+0x1c>
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f001 ff6e 	bl	8008bd8 <__sinit>
 8006cfc:	4b23      	ldr	r3, [pc, #140]	; (8006d8c <_puts_r+0xac>)
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	d117      	bne.n	8006d32 <_puts_r+0x52>
 8006d02:	686c      	ldr	r4, [r5, #4]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	071b      	lsls	r3, r3, #28
 8006d08:	d51d      	bpl.n	8006d46 <_puts_r+0x66>
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	b1db      	cbz	r3, 8006d46 <_puts_r+0x66>
 8006d0e:	3e01      	subs	r6, #1
 8006d10:	68a3      	ldr	r3, [r4, #8]
 8006d12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d16:	3b01      	subs	r3, #1
 8006d18:	60a3      	str	r3, [r4, #8]
 8006d1a:	b9e9      	cbnz	r1, 8006d58 <_puts_r+0x78>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da2e      	bge.n	8006d7e <_puts_r+0x9e>
 8006d20:	4622      	mov	r2, r4
 8006d22:	210a      	movs	r1, #10
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 ff35 	bl	8007b94 <__swbuf_r>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d011      	beq.n	8006d52 <_puts_r+0x72>
 8006d2e:	200a      	movs	r0, #10
 8006d30:	e011      	b.n	8006d56 <_puts_r+0x76>
 8006d32:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <_puts_r+0xb0>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	d101      	bne.n	8006d3c <_puts_r+0x5c>
 8006d38:	68ac      	ldr	r4, [r5, #8]
 8006d3a:	e7e3      	b.n	8006d04 <_puts_r+0x24>
 8006d3c:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <_puts_r+0xb4>)
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	bf08      	it	eq
 8006d42:	68ec      	ldreq	r4, [r5, #12]
 8006d44:	e7de      	b.n	8006d04 <_puts_r+0x24>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 ff95 	bl	8007c78 <__swsetup_r>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d0dd      	beq.n	8006d0e <_puts_r+0x2e>
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da04      	bge.n	8006d66 <_puts_r+0x86>
 8006d5c:	69a2      	ldr	r2, [r4, #24]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	dc06      	bgt.n	8006d70 <_puts_r+0x90>
 8006d62:	290a      	cmp	r1, #10
 8006d64:	d004      	beq.n	8006d70 <_puts_r+0x90>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	6022      	str	r2, [r4, #0]
 8006d6c:	7019      	strb	r1, [r3, #0]
 8006d6e:	e7cf      	b.n	8006d10 <_puts_r+0x30>
 8006d70:	4622      	mov	r2, r4
 8006d72:	4628      	mov	r0, r5
 8006d74:	f000 ff0e 	bl	8007b94 <__swbuf_r>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d1c9      	bne.n	8006d10 <_puts_r+0x30>
 8006d7c:	e7e9      	b.n	8006d52 <_puts_r+0x72>
 8006d7e:	200a      	movs	r0, #10
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	7018      	strb	r0, [r3, #0]
 8006d88:	e7e5      	b.n	8006d56 <_puts_r+0x76>
 8006d8a:	bf00      	nop
 8006d8c:	0800b348 	.word	0x0800b348
 8006d90:	0800b368 	.word	0x0800b368
 8006d94:	0800b328 	.word	0x0800b328

08006d98 <puts>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <puts+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f7ff bf9f 	b.w	8006ce0 <_puts_r>
 8006da2:	bf00      	nop
 8006da4:	20000018 	.word	0x20000018

08006da8 <realloc>:
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <realloc+0xc>)
 8006daa:	460a      	mov	r2, r1
 8006dac:	4601      	mov	r1, r0
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	f002 bf7a 	b.w	8009ca8 <_realloc_r>
 8006db4:	20000018 	.word	0x20000018

08006db8 <_sbrk_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4c05      	ldr	r4, [pc, #20]	; (8006dd4 <_sbrk_r+0x1c>)
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	f7ff f9c4 	bl	8006150 <_sbrk>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_sbrk_r+0x1a>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_sbrk_r+0x1a>
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	2000344c 	.word	0x2000344c

08006dd8 <siprintf>:
 8006dd8:	b40e      	push	{r1, r2, r3}
 8006dda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dde:	b500      	push	{lr}
 8006de0:	b09c      	sub	sp, #112	; 0x70
 8006de2:	ab1d      	add	r3, sp, #116	; 0x74
 8006de4:	9002      	str	r0, [sp, #8]
 8006de6:	9006      	str	r0, [sp, #24]
 8006de8:	9107      	str	r1, [sp, #28]
 8006dea:	9104      	str	r1, [sp, #16]
 8006dec:	4808      	ldr	r0, [pc, #32]	; (8006e10 <siprintf+0x38>)
 8006dee:	4909      	ldr	r1, [pc, #36]	; (8006e14 <siprintf+0x3c>)
 8006df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	a902      	add	r1, sp, #8
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	f002 ffd4 	bl	8009da8 <_svfiprintf_r>
 8006e00:	2200      	movs	r2, #0
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	b01c      	add	sp, #112	; 0x70
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	20000018 	.word	0x20000018
 8006e14:	ffff0208 	.word	0xffff0208

08006e18 <siscanf>:
 8006e18:	b40e      	push	{r1, r2, r3}
 8006e1a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006e1e:	b530      	push	{r4, r5, lr}
 8006e20:	b09c      	sub	sp, #112	; 0x70
 8006e22:	ac1f      	add	r4, sp, #124	; 0x7c
 8006e24:	f854 5b04 	ldr.w	r5, [r4], #4
 8006e28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006e2c:	9002      	str	r0, [sp, #8]
 8006e2e:	9006      	str	r0, [sp, #24]
 8006e30:	f7f9 f9a8 	bl	8000184 <strlen>
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <siscanf+0x4c>)
 8006e36:	9003      	str	r0, [sp, #12]
 8006e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e44:	9007      	str	r0, [sp, #28]
 8006e46:	4808      	ldr	r0, [pc, #32]	; (8006e68 <siscanf+0x50>)
 8006e48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e4c:	462a      	mov	r2, r5
 8006e4e:	4623      	mov	r3, r4
 8006e50:	a902      	add	r1, sp, #8
 8006e52:	6800      	ldr	r0, [r0, #0]
 8006e54:	9401      	str	r4, [sp, #4]
 8006e56:	f003 f8f9 	bl	800a04c <__ssvfiscanf_r>
 8006e5a:	b01c      	add	sp, #112	; 0x70
 8006e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e60:	b003      	add	sp, #12
 8006e62:	4770      	bx	lr
 8006e64:	08006e8f 	.word	0x08006e8f
 8006e68:	20000018 	.word	0x20000018

08006e6c <__sread>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	460c      	mov	r4, r1
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	f003 fb92 	bl	800a59c <_read_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	bfab      	itete	ge
 8006e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e80:	181b      	addge	r3, r3, r0
 8006e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e86:	bfac      	ite	ge
 8006e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e8a:	81a3      	strhlt	r3, [r4, #12]
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <__seofread>:
 8006e8e:	2000      	movs	r0, #0
 8006e90:	4770      	bx	lr

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	05db      	lsls	r3, r3, #23
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	f002 fa56 	bl	800935c <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 bec5 	b.w	8007c54 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f002 fa43 	bl	800935c <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 bf2f 	b.w	8007d54 <_close_r>

08006ef6 <strcpy>:
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006efc:	f803 2b01 	strb.w	r2, [r3], #1
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	d1f9      	bne.n	8006ef8 <strcpy+0x2>
 8006f04:	4770      	bx	lr

08006f06 <strncmp>:
 8006f06:	b510      	push	{r4, lr}
 8006f08:	b16a      	cbz	r2, 8006f26 <strncmp+0x20>
 8006f0a:	3901      	subs	r1, #1
 8006f0c:	1884      	adds	r4, r0, r2
 8006f0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d103      	bne.n	8006f22 <strncmp+0x1c>
 8006f1a:	42a0      	cmp	r0, r4
 8006f1c:	d001      	beq.n	8006f22 <strncmp+0x1c>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f5      	bne.n	8006f0e <strncmp+0x8>
 8006f22:	1a98      	subs	r0, r3, r2
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	4610      	mov	r0, r2
 8006f28:	e7fc      	b.n	8006f24 <strncmp+0x1e>

08006f2a <sulp>:
 8006f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2e:	460f      	mov	r7, r1
 8006f30:	4690      	mov	r8, r2
 8006f32:	f002 fd7d 	bl	8009a30 <__ulp>
 8006f36:	4604      	mov	r4, r0
 8006f38:	460d      	mov	r5, r1
 8006f3a:	f1b8 0f00 	cmp.w	r8, #0
 8006f3e:	d011      	beq.n	8006f64 <sulp+0x3a>
 8006f40:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd0b      	ble.n	8006f64 <sulp+0x3a>
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	051b      	lsls	r3, r3, #20
 8006f50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f54:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f58:	4622      	mov	r2, r4
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	f7f9 fad6 	bl	800050c <__aeabi_dmul>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	4620      	mov	r0, r4
 8006f66:	4629      	mov	r1, r5
 8006f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6c:	0000      	movs	r0, r0
	...

08006f70 <_strtod_l>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	461f      	mov	r7, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	b0a1      	sub	sp, #132	; 0x84
 8006f7a:	4683      	mov	fp, r0
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	460e      	mov	r6, r1
 8006f80:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f82:	931c      	str	r3, [sp, #112]	; 0x70
 8006f84:	f002 f9da 	bl	800933c <__localeconv_l>
 8006f88:	4680      	mov	r8, r0
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	f7f9 f8fa 	bl	8000184 <strlen>
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	4604      	mov	r4, r0
 8006f96:	f04f 0a00 	mov.w	sl, #0
 8006f9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	2a0d      	cmp	r2, #13
 8006fa2:	d832      	bhi.n	800700a <_strtod_l+0x9a>
 8006fa4:	2a09      	cmp	r2, #9
 8006fa6:	d236      	bcs.n	8007016 <_strtod_l+0xa6>
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	d03e      	beq.n	800702a <_strtod_l+0xba>
 8006fac:	2300      	movs	r3, #0
 8006fae:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006fb2:	782b      	ldrb	r3, [r5, #0]
 8006fb4:	2b30      	cmp	r3, #48	; 0x30
 8006fb6:	f040 80ac 	bne.w	8007112 <_strtod_l+0x1a2>
 8006fba:	786b      	ldrb	r3, [r5, #1]
 8006fbc:	2b58      	cmp	r3, #88	; 0x58
 8006fbe:	d001      	beq.n	8006fc4 <_strtod_l+0x54>
 8006fc0:	2b78      	cmp	r3, #120	; 0x78
 8006fc2:	d167      	bne.n	8007094 <_strtod_l+0x124>
 8006fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc6:	9702      	str	r7, [sp, #8]
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	ab1c      	add	r3, sp, #112	; 0x70
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	4a89      	ldr	r2, [pc, #548]	; (80071f4 <_strtod_l+0x284>)
 8006fd0:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd2:	a91b      	add	r1, sp, #108	; 0x6c
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f001 fed9 	bl	8008d8c <__gethex>
 8006fda:	f010 0407 	ands.w	r4, r0, #7
 8006fde:	4606      	mov	r6, r0
 8006fe0:	d005      	beq.n	8006fee <_strtod_l+0x7e>
 8006fe2:	2c06      	cmp	r4, #6
 8006fe4:	d12b      	bne.n	800703e <_strtod_l+0xce>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	3501      	adds	r5, #1
 8006fea:	951b      	str	r5, [sp, #108]	; 0x6c
 8006fec:	930d      	str	r3, [sp, #52]	; 0x34
 8006fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f040 85a6 	bne.w	8007b42 <_strtod_l+0xbd2>
 8006ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff8:	b1e3      	cbz	r3, 8007034 <_strtod_l+0xc4>
 8006ffa:	464a      	mov	r2, r9
 8006ffc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	b021      	add	sp, #132	; 0x84
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	2a2b      	cmp	r2, #43	; 0x2b
 800700c:	d015      	beq.n	800703a <_strtod_l+0xca>
 800700e:	2a2d      	cmp	r2, #45	; 0x2d
 8007010:	d004      	beq.n	800701c <_strtod_l+0xac>
 8007012:	2a20      	cmp	r2, #32
 8007014:	d1ca      	bne.n	8006fac <_strtod_l+0x3c>
 8007016:	3301      	adds	r3, #1
 8007018:	931b      	str	r3, [sp, #108]	; 0x6c
 800701a:	e7bf      	b.n	8006f9c <_strtod_l+0x2c>
 800701c:	2201      	movs	r2, #1
 800701e:	920d      	str	r2, [sp, #52]	; 0x34
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	921b      	str	r2, [sp, #108]	; 0x6c
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1c2      	bne.n	8006fb0 <_strtod_l+0x40>
 800702a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702c:	961b      	str	r6, [sp, #108]	; 0x6c
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 8585 	bne.w	8007b3e <_strtod_l+0xbce>
 8007034:	464a      	mov	r2, r9
 8007036:	4653      	mov	r3, sl
 8007038:	e7e2      	b.n	8007000 <_strtod_l+0x90>
 800703a:	2200      	movs	r2, #0
 800703c:	e7ef      	b.n	800701e <_strtod_l+0xae>
 800703e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007040:	b13a      	cbz	r2, 8007052 <_strtod_l+0xe2>
 8007042:	2135      	movs	r1, #53	; 0x35
 8007044:	a81e      	add	r0, sp, #120	; 0x78
 8007046:	f002 fde6 	bl	8009c16 <__copybits>
 800704a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800704c:	4658      	mov	r0, fp
 800704e:	f002 fa58 	bl	8009502 <_Bfree>
 8007052:	3c01      	subs	r4, #1
 8007054:	2c04      	cmp	r4, #4
 8007056:	d806      	bhi.n	8007066 <_strtod_l+0xf6>
 8007058:	e8df f004 	tbb	[pc, r4]
 800705c:	1714030a 	.word	0x1714030a
 8007060:	0a          	.byte	0x0a
 8007061:	00          	.byte	0x00
 8007062:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007066:	0731      	lsls	r1, r6, #28
 8007068:	d5c1      	bpl.n	8006fee <_strtod_l+0x7e>
 800706a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800706e:	e7be      	b.n	8006fee <_strtod_l+0x7e>
 8007070:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007072:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007076:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800707a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800707e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007082:	e7f0      	b.n	8007066 <_strtod_l+0xf6>
 8007084:	f8df a170 	ldr.w	sl, [pc, #368]	; 80071f8 <_strtod_l+0x288>
 8007088:	e7ed      	b.n	8007066 <_strtod_l+0xf6>
 800708a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800708e:	f04f 39ff 	mov.w	r9, #4294967295
 8007092:	e7e8      	b.n	8007066 <_strtod_l+0xf6>
 8007094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	921b      	str	r2, [sp, #108]	; 0x6c
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b30      	cmp	r3, #48	; 0x30
 800709e:	d0f9      	beq.n	8007094 <_strtod_l+0x124>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0a4      	beq.n	8006fee <_strtod_l+0x7e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	2500      	movs	r5, #0
 80070a8:	220a      	movs	r2, #10
 80070aa:	9307      	str	r3, [sp, #28]
 80070ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070ae:	9506      	str	r5, [sp, #24]
 80070b0:	9308      	str	r3, [sp, #32]
 80070b2:	9504      	str	r5, [sp, #16]
 80070b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80070b6:	7807      	ldrb	r7, [r0, #0]
 80070b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80070bc:	b2d9      	uxtb	r1, r3
 80070be:	2909      	cmp	r1, #9
 80070c0:	d929      	bls.n	8007116 <_strtod_l+0x1a6>
 80070c2:	4622      	mov	r2, r4
 80070c4:	f8d8 1000 	ldr.w	r1, [r8]
 80070c8:	f7ff ff1d 	bl	8006f06 <strncmp>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d031      	beq.n	8007134 <_strtod_l+0x1c4>
 80070d0:	2000      	movs	r0, #0
 80070d2:	463b      	mov	r3, r7
 80070d4:	4602      	mov	r2, r0
 80070d6:	9c04      	ldr	r4, [sp, #16]
 80070d8:	9005      	str	r0, [sp, #20]
 80070da:	2b65      	cmp	r3, #101	; 0x65
 80070dc:	d001      	beq.n	80070e2 <_strtod_l+0x172>
 80070de:	2b45      	cmp	r3, #69	; 0x45
 80070e0:	d114      	bne.n	800710c <_strtod_l+0x19c>
 80070e2:	b924      	cbnz	r4, 80070ee <_strtod_l+0x17e>
 80070e4:	b910      	cbnz	r0, 80070ec <_strtod_l+0x17c>
 80070e6:	9b07      	ldr	r3, [sp, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d09e      	beq.n	800702a <_strtod_l+0xba>
 80070ec:	2400      	movs	r4, #0
 80070ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80070f0:	1c73      	adds	r3, r6, #1
 80070f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80070f4:	7873      	ldrb	r3, [r6, #1]
 80070f6:	2b2b      	cmp	r3, #43	; 0x2b
 80070f8:	d078      	beq.n	80071ec <_strtod_l+0x27c>
 80070fa:	2b2d      	cmp	r3, #45	; 0x2d
 80070fc:	d070      	beq.n	80071e0 <_strtod_l+0x270>
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007106:	2f09      	cmp	r7, #9
 8007108:	d97c      	bls.n	8007204 <_strtod_l+0x294>
 800710a:	961b      	str	r6, [sp, #108]	; 0x6c
 800710c:	f04f 0e00 	mov.w	lr, #0
 8007110:	e09a      	b.n	8007248 <_strtod_l+0x2d8>
 8007112:	2300      	movs	r3, #0
 8007114:	e7c7      	b.n	80070a6 <_strtod_l+0x136>
 8007116:	9904      	ldr	r1, [sp, #16]
 8007118:	3001      	adds	r0, #1
 800711a:	2908      	cmp	r1, #8
 800711c:	bfd7      	itett	le
 800711e:	9906      	ldrle	r1, [sp, #24]
 8007120:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007124:	fb02 3301 	mlale	r3, r2, r1, r3
 8007128:	9306      	strle	r3, [sp, #24]
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	901b      	str	r0, [sp, #108]	; 0x6c
 800712e:	3301      	adds	r3, #1
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	e7bf      	b.n	80070b4 <_strtod_l+0x144>
 8007134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007136:	191a      	adds	r2, r3, r4
 8007138:	921b      	str	r2, [sp, #108]	; 0x6c
 800713a:	9a04      	ldr	r2, [sp, #16]
 800713c:	5d1b      	ldrb	r3, [r3, r4]
 800713e:	2a00      	cmp	r2, #0
 8007140:	d037      	beq.n	80071b2 <_strtod_l+0x242>
 8007142:	4602      	mov	r2, r0
 8007144:	9c04      	ldr	r4, [sp, #16]
 8007146:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800714a:	2909      	cmp	r1, #9
 800714c:	d913      	bls.n	8007176 <_strtod_l+0x206>
 800714e:	2101      	movs	r1, #1
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	e7c2      	b.n	80070da <_strtod_l+0x16a>
 8007154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007156:	3001      	adds	r0, #1
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	921b      	str	r2, [sp, #108]	; 0x6c
 800715c:	785b      	ldrb	r3, [r3, #1]
 800715e:	2b30      	cmp	r3, #48	; 0x30
 8007160:	d0f8      	beq.n	8007154 <_strtod_l+0x1e4>
 8007162:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007166:	2a08      	cmp	r2, #8
 8007168:	f200 84f0 	bhi.w	8007b4c <_strtod_l+0xbdc>
 800716c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800716e:	9208      	str	r2, [sp, #32]
 8007170:	4602      	mov	r2, r0
 8007172:	2000      	movs	r0, #0
 8007174:	4604      	mov	r4, r0
 8007176:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800717a:	f100 0101 	add.w	r1, r0, #1
 800717e:	d012      	beq.n	80071a6 <_strtod_l+0x236>
 8007180:	440a      	add	r2, r1
 8007182:	270a      	movs	r7, #10
 8007184:	4621      	mov	r1, r4
 8007186:	eb00 0c04 	add.w	ip, r0, r4
 800718a:	458c      	cmp	ip, r1
 800718c:	d113      	bne.n	80071b6 <_strtod_l+0x246>
 800718e:	1821      	adds	r1, r4, r0
 8007190:	2908      	cmp	r1, #8
 8007192:	f104 0401 	add.w	r4, r4, #1
 8007196:	4404      	add	r4, r0
 8007198:	dc19      	bgt.n	80071ce <_strtod_l+0x25e>
 800719a:	210a      	movs	r1, #10
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	fb01 e303 	mla	r3, r1, r3, lr
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	2100      	movs	r1, #0
 80071a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071a8:	1c58      	adds	r0, r3, #1
 80071aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	4608      	mov	r0, r1
 80071b0:	e7c9      	b.n	8007146 <_strtod_l+0x1d6>
 80071b2:	9804      	ldr	r0, [sp, #16]
 80071b4:	e7d3      	b.n	800715e <_strtod_l+0x1ee>
 80071b6:	2908      	cmp	r1, #8
 80071b8:	f101 0101 	add.w	r1, r1, #1
 80071bc:	dc03      	bgt.n	80071c6 <_strtod_l+0x256>
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	437b      	muls	r3, r7
 80071c2:	9306      	str	r3, [sp, #24]
 80071c4:	e7e1      	b.n	800718a <_strtod_l+0x21a>
 80071c6:	2910      	cmp	r1, #16
 80071c8:	bfd8      	it	le
 80071ca:	437d      	mulle	r5, r7
 80071cc:	e7dd      	b.n	800718a <_strtod_l+0x21a>
 80071ce:	2c10      	cmp	r4, #16
 80071d0:	bfdc      	itt	le
 80071d2:	210a      	movle	r1, #10
 80071d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80071d8:	e7e4      	b.n	80071a4 <_strtod_l+0x234>
 80071da:	2301      	movs	r3, #1
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	e781      	b.n	80070e4 <_strtod_l+0x174>
 80071e0:	f04f 0c01 	mov.w	ip, #1
 80071e4:	1cb3      	adds	r3, r6, #2
 80071e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80071e8:	78b3      	ldrb	r3, [r6, #2]
 80071ea:	e78a      	b.n	8007102 <_strtod_l+0x192>
 80071ec:	f04f 0c00 	mov.w	ip, #0
 80071f0:	e7f8      	b.n	80071e4 <_strtod_l+0x274>
 80071f2:	bf00      	nop
 80071f4:	0800b1c8 	.word	0x0800b1c8
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fe:	1c5f      	adds	r7, r3, #1
 8007200:	971b      	str	r7, [sp, #108]	; 0x6c
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d0f9      	beq.n	80071fc <_strtod_l+0x28c>
 8007208:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800720c:	2f08      	cmp	r7, #8
 800720e:	f63f af7d 	bhi.w	800710c <_strtod_l+0x19c>
 8007212:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007216:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800721c:	1c5f      	adds	r7, r3, #1
 800721e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007226:	f1b8 0f09 	cmp.w	r8, #9
 800722a:	d937      	bls.n	800729c <_strtod_l+0x32c>
 800722c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800722e:	1a7f      	subs	r7, r7, r1
 8007230:	2f08      	cmp	r7, #8
 8007232:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007236:	dc37      	bgt.n	80072a8 <_strtod_l+0x338>
 8007238:	45be      	cmp	lr, r7
 800723a:	bfa8      	it	ge
 800723c:	46be      	movge	lr, r7
 800723e:	f1bc 0f00 	cmp.w	ip, #0
 8007242:	d001      	beq.n	8007248 <_strtod_l+0x2d8>
 8007244:	f1ce 0e00 	rsb	lr, lr, #0
 8007248:	2c00      	cmp	r4, #0
 800724a:	d151      	bne.n	80072f0 <_strtod_l+0x380>
 800724c:	2800      	cmp	r0, #0
 800724e:	f47f aece 	bne.w	8006fee <_strtod_l+0x7e>
 8007252:	9a07      	ldr	r2, [sp, #28]
 8007254:	2a00      	cmp	r2, #0
 8007256:	f47f aeca 	bne.w	8006fee <_strtod_l+0x7e>
 800725a:	9a05      	ldr	r2, [sp, #20]
 800725c:	2a00      	cmp	r2, #0
 800725e:	f47f aee4 	bne.w	800702a <_strtod_l+0xba>
 8007262:	2b4e      	cmp	r3, #78	; 0x4e
 8007264:	d027      	beq.n	80072b6 <_strtod_l+0x346>
 8007266:	dc21      	bgt.n	80072ac <_strtod_l+0x33c>
 8007268:	2b49      	cmp	r3, #73	; 0x49
 800726a:	f47f aede 	bne.w	800702a <_strtod_l+0xba>
 800726e:	49a4      	ldr	r1, [pc, #656]	; (8007500 <_strtod_l+0x590>)
 8007270:	a81b      	add	r0, sp, #108	; 0x6c
 8007272:	f001 ffbf 	bl	80091f4 <__match>
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f aed7 	beq.w	800702a <_strtod_l+0xba>
 800727c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727e:	49a1      	ldr	r1, [pc, #644]	; (8007504 <_strtod_l+0x594>)
 8007280:	3b01      	subs	r3, #1
 8007282:	a81b      	add	r0, sp, #108	; 0x6c
 8007284:	931b      	str	r3, [sp, #108]	; 0x6c
 8007286:	f001 ffb5 	bl	80091f4 <__match>
 800728a:	b910      	cbnz	r0, 8007292 <_strtod_l+0x322>
 800728c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800728e:	3301      	adds	r3, #1
 8007290:	931b      	str	r3, [sp, #108]	; 0x6c
 8007292:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007518 <_strtod_l+0x5a8>
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	e6a8      	b.n	8006fee <_strtod_l+0x7e>
 800729c:	210a      	movs	r1, #10
 800729e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80072a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80072a6:	e7b8      	b.n	800721a <_strtod_l+0x2aa>
 80072a8:	46be      	mov	lr, r7
 80072aa:	e7c8      	b.n	800723e <_strtod_l+0x2ce>
 80072ac:	2b69      	cmp	r3, #105	; 0x69
 80072ae:	d0de      	beq.n	800726e <_strtod_l+0x2fe>
 80072b0:	2b6e      	cmp	r3, #110	; 0x6e
 80072b2:	f47f aeba 	bne.w	800702a <_strtod_l+0xba>
 80072b6:	4994      	ldr	r1, [pc, #592]	; (8007508 <_strtod_l+0x598>)
 80072b8:	a81b      	add	r0, sp, #108	; 0x6c
 80072ba:	f001 ff9b 	bl	80091f4 <__match>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f aeb3 	beq.w	800702a <_strtod_l+0xba>
 80072c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b28      	cmp	r3, #40	; 0x28
 80072ca:	d10e      	bne.n	80072ea <_strtod_l+0x37a>
 80072cc:	aa1e      	add	r2, sp, #120	; 0x78
 80072ce:	498f      	ldr	r1, [pc, #572]	; (800750c <_strtod_l+0x59c>)
 80072d0:	a81b      	add	r0, sp, #108	; 0x6c
 80072d2:	f001 ffa3 	bl	800921c <__hexnan>
 80072d6:	2805      	cmp	r0, #5
 80072d8:	d107      	bne.n	80072ea <_strtod_l+0x37a>
 80072da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072dc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80072e0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80072e4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80072e8:	e681      	b.n	8006fee <_strtod_l+0x7e>
 80072ea:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007520 <_strtod_l+0x5b0>
 80072ee:	e7d2      	b.n	8007296 <_strtod_l+0x326>
 80072f0:	ebae 0302 	sub.w	r3, lr, r2
 80072f4:	9307      	str	r3, [sp, #28]
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	9806      	ldr	r0, [sp, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf08      	it	eq
 80072fe:	4623      	moveq	r3, r4
 8007300:	2c10      	cmp	r4, #16
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	46a0      	mov	r8, r4
 8007306:	bfa8      	it	ge
 8007308:	f04f 0810 	movge.w	r8, #16
 800730c:	f7f9 f884 	bl	8000418 <__aeabi_ui2d>
 8007310:	2c09      	cmp	r4, #9
 8007312:	4681      	mov	r9, r0
 8007314:	468a      	mov	sl, r1
 8007316:	dc13      	bgt.n	8007340 <_strtod_l+0x3d0>
 8007318:	9b07      	ldr	r3, [sp, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f43f ae67 	beq.w	8006fee <_strtod_l+0x7e>
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	dd7e      	ble.n	8007422 <_strtod_l+0x4b2>
 8007324:	2b16      	cmp	r3, #22
 8007326:	dc65      	bgt.n	80073f4 <_strtod_l+0x484>
 8007328:	4a79      	ldr	r2, [pc, #484]	; (8007510 <_strtod_l+0x5a0>)
 800732a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800732e:	464a      	mov	r2, r9
 8007330:	e9de 0100 	ldrd	r0, r1, [lr]
 8007334:	4653      	mov	r3, sl
 8007336:	f7f9 f8e9 	bl	800050c <__aeabi_dmul>
 800733a:	4681      	mov	r9, r0
 800733c:	468a      	mov	sl, r1
 800733e:	e656      	b.n	8006fee <_strtod_l+0x7e>
 8007340:	4b73      	ldr	r3, [pc, #460]	; (8007510 <_strtod_l+0x5a0>)
 8007342:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007346:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800734a:	f7f9 f8df 	bl	800050c <__aeabi_dmul>
 800734e:	4606      	mov	r6, r0
 8007350:	4628      	mov	r0, r5
 8007352:	460f      	mov	r7, r1
 8007354:	f7f9 f860 	bl	8000418 <__aeabi_ui2d>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f8 ff1e 	bl	80001a0 <__adddf3>
 8007364:	2c0f      	cmp	r4, #15
 8007366:	4681      	mov	r9, r0
 8007368:	468a      	mov	sl, r1
 800736a:	ddd5      	ble.n	8007318 <_strtod_l+0x3a8>
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	eba4 0808 	sub.w	r8, r4, r8
 8007372:	4498      	add	r8, r3
 8007374:	f1b8 0f00 	cmp.w	r8, #0
 8007378:	f340 809a 	ble.w	80074b0 <_strtod_l+0x540>
 800737c:	f018 030f 	ands.w	r3, r8, #15
 8007380:	d00a      	beq.n	8007398 <_strtod_l+0x428>
 8007382:	4963      	ldr	r1, [pc, #396]	; (8007510 <_strtod_l+0x5a0>)
 8007384:	464a      	mov	r2, r9
 8007386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800738a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738e:	4653      	mov	r3, sl
 8007390:	f7f9 f8bc 	bl	800050c <__aeabi_dmul>
 8007394:	4681      	mov	r9, r0
 8007396:	468a      	mov	sl, r1
 8007398:	f038 080f 	bics.w	r8, r8, #15
 800739c:	d077      	beq.n	800748e <_strtod_l+0x51e>
 800739e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80073a2:	dd4b      	ble.n	800743c <_strtod_l+0x4cc>
 80073a4:	f04f 0800 	mov.w	r8, #0
 80073a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80073ac:	f8cd 8020 	str.w	r8, [sp, #32]
 80073b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80073b4:	2322      	movs	r3, #34	; 0x22
 80073b6:	f04f 0900 	mov.w	r9, #0
 80073ba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007518 <_strtod_l+0x5a8>
 80073be:	f8cb 3000 	str.w	r3, [fp]
 80073c2:	9b08      	ldr	r3, [sp, #32]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f43f ae12 	beq.w	8006fee <_strtod_l+0x7e>
 80073ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80073cc:	4658      	mov	r0, fp
 80073ce:	f002 f898 	bl	8009502 <_Bfree>
 80073d2:	9906      	ldr	r1, [sp, #24]
 80073d4:	4658      	mov	r0, fp
 80073d6:	f002 f894 	bl	8009502 <_Bfree>
 80073da:	9904      	ldr	r1, [sp, #16]
 80073dc:	4658      	mov	r0, fp
 80073de:	f002 f890 	bl	8009502 <_Bfree>
 80073e2:	9908      	ldr	r1, [sp, #32]
 80073e4:	4658      	mov	r0, fp
 80073e6:	f002 f88c 	bl	8009502 <_Bfree>
 80073ea:	4641      	mov	r1, r8
 80073ec:	4658      	mov	r0, fp
 80073ee:	f002 f888 	bl	8009502 <_Bfree>
 80073f2:	e5fc      	b.n	8006fee <_strtod_l+0x7e>
 80073f4:	9a07      	ldr	r2, [sp, #28]
 80073f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80073fa:	4293      	cmp	r3, r2
 80073fc:	dbb6      	blt.n	800736c <_strtod_l+0x3fc>
 80073fe:	4d44      	ldr	r5, [pc, #272]	; (8007510 <_strtod_l+0x5a0>)
 8007400:	f1c4 040f 	rsb	r4, r4, #15
 8007404:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007408:	464a      	mov	r2, r9
 800740a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800740e:	4653      	mov	r3, sl
 8007410:	f7f9 f87c 	bl	800050c <__aeabi_dmul>
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	1b1c      	subs	r4, r3, r4
 8007418:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800741c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007420:	e789      	b.n	8007336 <_strtod_l+0x3c6>
 8007422:	f113 0f16 	cmn.w	r3, #22
 8007426:	dba1      	blt.n	800736c <_strtod_l+0x3fc>
 8007428:	4a39      	ldr	r2, [pc, #228]	; (8007510 <_strtod_l+0x5a0>)
 800742a:	4648      	mov	r0, r9
 800742c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007430:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007434:	4651      	mov	r1, sl
 8007436:	f7f9 f993 	bl	8000760 <__aeabi_ddiv>
 800743a:	e77e      	b.n	800733a <_strtod_l+0x3ca>
 800743c:	2300      	movs	r3, #0
 800743e:	4648      	mov	r0, r9
 8007440:	4651      	mov	r1, sl
 8007442:	461d      	mov	r5, r3
 8007444:	4e33      	ldr	r6, [pc, #204]	; (8007514 <_strtod_l+0x5a4>)
 8007446:	ea4f 1828 	mov.w	r8, r8, asr #4
 800744a:	f1b8 0f01 	cmp.w	r8, #1
 800744e:	dc21      	bgt.n	8007494 <_strtod_l+0x524>
 8007450:	b10b      	cbz	r3, 8007456 <_strtod_l+0x4e6>
 8007452:	4681      	mov	r9, r0
 8007454:	468a      	mov	sl, r1
 8007456:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <_strtod_l+0x5a4>)
 8007458:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800745c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007460:	464a      	mov	r2, r9
 8007462:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007466:	4653      	mov	r3, sl
 8007468:	f7f9 f850 	bl	800050c <__aeabi_dmul>
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <_strtod_l+0x5a8>)
 800746e:	460a      	mov	r2, r1
 8007470:	400b      	ands	r3, r1
 8007472:	492a      	ldr	r1, [pc, #168]	; (800751c <_strtod_l+0x5ac>)
 8007474:	4681      	mov	r9, r0
 8007476:	428b      	cmp	r3, r1
 8007478:	d894      	bhi.n	80073a4 <_strtod_l+0x434>
 800747a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800747e:	428b      	cmp	r3, r1
 8007480:	bf86      	itte	hi
 8007482:	f04f 39ff 	movhi.w	r9, #4294967295
 8007486:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007524 <_strtod_l+0x5b4>
 800748a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800748e:	2300      	movs	r3, #0
 8007490:	9305      	str	r3, [sp, #20]
 8007492:	e07b      	b.n	800758c <_strtod_l+0x61c>
 8007494:	f018 0f01 	tst.w	r8, #1
 8007498:	d006      	beq.n	80074a8 <_strtod_l+0x538>
 800749a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f9 f833 	bl	800050c <__aeabi_dmul>
 80074a6:	2301      	movs	r3, #1
 80074a8:	3501      	adds	r5, #1
 80074aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074ae:	e7cc      	b.n	800744a <_strtod_l+0x4da>
 80074b0:	d0ed      	beq.n	800748e <_strtod_l+0x51e>
 80074b2:	f1c8 0800 	rsb	r8, r8, #0
 80074b6:	f018 020f 	ands.w	r2, r8, #15
 80074ba:	d00a      	beq.n	80074d2 <_strtod_l+0x562>
 80074bc:	4b14      	ldr	r3, [pc, #80]	; (8007510 <_strtod_l+0x5a0>)
 80074be:	4648      	mov	r0, r9
 80074c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c4:	4651      	mov	r1, sl
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f9 f949 	bl	8000760 <__aeabi_ddiv>
 80074ce:	4681      	mov	r9, r0
 80074d0:	468a      	mov	sl, r1
 80074d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80074d6:	d0da      	beq.n	800748e <_strtod_l+0x51e>
 80074d8:	f1b8 0f1f 	cmp.w	r8, #31
 80074dc:	dd24      	ble.n	8007528 <_strtod_l+0x5b8>
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80074e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80074ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ee:	2322      	movs	r3, #34	; 0x22
 80074f0:	f04f 0900 	mov.w	r9, #0
 80074f4:	f04f 0a00 	mov.w	sl, #0
 80074f8:	f8cb 3000 	str.w	r3, [fp]
 80074fc:	e761      	b.n	80073c2 <_strtod_l+0x452>
 80074fe:	bf00      	nop
 8007500:	0800b19b 	.word	0x0800b19b
 8007504:	0800b31c 	.word	0x0800b31c
 8007508:	0800b1a3 	.word	0x0800b1a3
 800750c:	0800b1dc 	.word	0x0800b1dc
 8007510:	0800b3b0 	.word	0x0800b3b0
 8007514:	0800b388 	.word	0x0800b388
 8007518:	7ff00000 	.word	0x7ff00000
 800751c:	7ca00000 	.word	0x7ca00000
 8007520:	fff80000 	.word	0xfff80000
 8007524:	7fefffff 	.word	0x7fefffff
 8007528:	f018 0310 	ands.w	r3, r8, #16
 800752c:	bf18      	it	ne
 800752e:	236a      	movne	r3, #106	; 0x6a
 8007530:	4648      	mov	r0, r9
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	4651      	mov	r1, sl
 8007536:	2300      	movs	r3, #0
 8007538:	4da1      	ldr	r5, [pc, #644]	; (80077c0 <_strtod_l+0x850>)
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	f300 8113 	bgt.w	8007768 <_strtod_l+0x7f8>
 8007542:	b10b      	cbz	r3, 8007548 <_strtod_l+0x5d8>
 8007544:	4681      	mov	r9, r0
 8007546:	468a      	mov	sl, r1
 8007548:	9b05      	ldr	r3, [sp, #20]
 800754a:	b1bb      	cbz	r3, 800757c <_strtod_l+0x60c>
 800754c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007550:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007554:	2b00      	cmp	r3, #0
 8007556:	4651      	mov	r1, sl
 8007558:	dd10      	ble.n	800757c <_strtod_l+0x60c>
 800755a:	2b1f      	cmp	r3, #31
 800755c:	f340 8110 	ble.w	8007780 <_strtod_l+0x810>
 8007560:	2b34      	cmp	r3, #52	; 0x34
 8007562:	bfd8      	it	le
 8007564:	f04f 32ff 	movle.w	r2, #4294967295
 8007568:	f04f 0900 	mov.w	r9, #0
 800756c:	bfcf      	iteee	gt
 800756e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8007572:	3b20      	suble	r3, #32
 8007574:	fa02 f303 	lslle.w	r3, r2, r3
 8007578:	ea03 0a01 	andle.w	sl, r3, r1
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	4648      	mov	r0, r9
 8007582:	4651      	mov	r1, sl
 8007584:	f7f9 fa2a 	bl	80009dc <__aeabi_dcmpeq>
 8007588:	2800      	cmp	r0, #0
 800758a:	d1a8      	bne.n	80074de <_strtod_l+0x56e>
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	9908      	ldr	r1, [sp, #32]
 8007594:	4623      	mov	r3, r4
 8007596:	4658      	mov	r0, fp
 8007598:	f002 f805 	bl	80095a6 <__s2b>
 800759c:	9008      	str	r0, [sp, #32]
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f af00 	beq.w	80073a4 <_strtod_l+0x434>
 80075a4:	9a07      	ldr	r2, [sp, #28]
 80075a6:	9b07      	ldr	r3, [sp, #28]
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	f1c3 0300 	rsb	r3, r3, #0
 80075ae:	bfa8      	it	ge
 80075b0:	2300      	movge	r3, #0
 80075b2:	f04f 0800 	mov.w	r8, #0
 80075b6:	930e      	str	r3, [sp, #56]	; 0x38
 80075b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075bc:	9316      	str	r3, [sp, #88]	; 0x58
 80075be:	f8cd 8010 	str.w	r8, [sp, #16]
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	4658      	mov	r0, fp
 80075c6:	6859      	ldr	r1, [r3, #4]
 80075c8:	f001 ff67 	bl	800949a <_Balloc>
 80075cc:	9006      	str	r0, [sp, #24]
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f43f aef0 	beq.w	80073b4 <_strtod_l+0x444>
 80075d4:	9b08      	ldr	r3, [sp, #32]
 80075d6:	300c      	adds	r0, #12
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	f103 010c 	add.w	r1, r3, #12
 80075de:	3202      	adds	r2, #2
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	f7fe fe73 	bl	80062cc <memcpy>
 80075e6:	ab1e      	add	r3, sp, #120	; 0x78
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	ab1d      	add	r3, sp, #116	; 0x74
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	464a      	mov	r2, r9
 80075f0:	4653      	mov	r3, sl
 80075f2:	4658      	mov	r0, fp
 80075f4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80075f8:	f002 fa90 	bl	8009b1c <__d2b>
 80075fc:	901c      	str	r0, [sp, #112]	; 0x70
 80075fe:	2800      	cmp	r0, #0
 8007600:	f43f aed8 	beq.w	80073b4 <_strtod_l+0x444>
 8007604:	2101      	movs	r1, #1
 8007606:	4658      	mov	r0, fp
 8007608:	f002 f859 	bl	80096be <__i2b>
 800760c:	9004      	str	r0, [sp, #16]
 800760e:	4603      	mov	r3, r0
 8007610:	2800      	cmp	r0, #0
 8007612:	f43f aecf 	beq.w	80073b4 <_strtod_l+0x444>
 8007616:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007618:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800761a:	2d00      	cmp	r5, #0
 800761c:	bfab      	itete	ge
 800761e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007620:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007622:	18ee      	addge	r6, r5, r3
 8007624:	1b5c      	sublt	r4, r3, r5
 8007626:	9b05      	ldr	r3, [sp, #20]
 8007628:	bfa8      	it	ge
 800762a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800762c:	eba5 0503 	sub.w	r5, r5, r3
 8007630:	4415      	add	r5, r2
 8007632:	4b64      	ldr	r3, [pc, #400]	; (80077c4 <_strtod_l+0x854>)
 8007634:	f105 35ff 	add.w	r5, r5, #4294967295
 8007638:	bfb8      	it	lt
 800763a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800763c:	429d      	cmp	r5, r3
 800763e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007642:	f280 80af 	bge.w	80077a4 <_strtod_l+0x834>
 8007646:	1b5b      	subs	r3, r3, r5
 8007648:	2b1f      	cmp	r3, #31
 800764a:	eba2 0203 	sub.w	r2, r2, r3
 800764e:	f04f 0701 	mov.w	r7, #1
 8007652:	f300 809c 	bgt.w	800778e <_strtod_l+0x81e>
 8007656:	2500      	movs	r5, #0
 8007658:	fa07 f303 	lsl.w	r3, r7, r3
 800765c:	930f      	str	r3, [sp, #60]	; 0x3c
 800765e:	18b7      	adds	r7, r6, r2
 8007660:	9b05      	ldr	r3, [sp, #20]
 8007662:	42be      	cmp	r6, r7
 8007664:	4414      	add	r4, r2
 8007666:	441c      	add	r4, r3
 8007668:	4633      	mov	r3, r6
 800766a:	bfa8      	it	ge
 800766c:	463b      	movge	r3, r7
 800766e:	42a3      	cmp	r3, r4
 8007670:	bfa8      	it	ge
 8007672:	4623      	movge	r3, r4
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfc2      	ittt	gt
 8007678:	1aff      	subgt	r7, r7, r3
 800767a:	1ae4      	subgt	r4, r4, r3
 800767c:	1af6      	subgt	r6, r6, r3
 800767e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007680:	b1bb      	cbz	r3, 80076b2 <_strtod_l+0x742>
 8007682:	461a      	mov	r2, r3
 8007684:	9904      	ldr	r1, [sp, #16]
 8007686:	4658      	mov	r0, fp
 8007688:	f002 f8b8 	bl	80097fc <__pow5mult>
 800768c:	9004      	str	r0, [sp, #16]
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f ae90 	beq.w	80073b4 <_strtod_l+0x444>
 8007694:	4601      	mov	r1, r0
 8007696:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007698:	4658      	mov	r0, fp
 800769a:	f002 f819 	bl	80096d0 <__multiply>
 800769e:	9009      	str	r0, [sp, #36]	; 0x24
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f43f ae87 	beq.w	80073b4 <_strtod_l+0x444>
 80076a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076a8:	4658      	mov	r0, fp
 80076aa:	f001 ff2a 	bl	8009502 <_Bfree>
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	931c      	str	r3, [sp, #112]	; 0x70
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	dc7a      	bgt.n	80077ac <_strtod_l+0x83c>
 80076b6:	9b07      	ldr	r3, [sp, #28]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dd08      	ble.n	80076ce <_strtod_l+0x75e>
 80076bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076be:	9906      	ldr	r1, [sp, #24]
 80076c0:	4658      	mov	r0, fp
 80076c2:	f002 f89b 	bl	80097fc <__pow5mult>
 80076c6:	9006      	str	r0, [sp, #24]
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f43f ae73 	beq.w	80073b4 <_strtod_l+0x444>
 80076ce:	2c00      	cmp	r4, #0
 80076d0:	dd08      	ble.n	80076e4 <_strtod_l+0x774>
 80076d2:	4622      	mov	r2, r4
 80076d4:	9906      	ldr	r1, [sp, #24]
 80076d6:	4658      	mov	r0, fp
 80076d8:	f002 f8de 	bl	8009898 <__lshift>
 80076dc:	9006      	str	r0, [sp, #24]
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f ae68 	beq.w	80073b4 <_strtod_l+0x444>
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	dd08      	ble.n	80076fa <_strtod_l+0x78a>
 80076e8:	4632      	mov	r2, r6
 80076ea:	9904      	ldr	r1, [sp, #16]
 80076ec:	4658      	mov	r0, fp
 80076ee:	f002 f8d3 	bl	8009898 <__lshift>
 80076f2:	9004      	str	r0, [sp, #16]
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f43f ae5d 	beq.w	80073b4 <_strtod_l+0x444>
 80076fa:	9a06      	ldr	r2, [sp, #24]
 80076fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076fe:	4658      	mov	r0, fp
 8007700:	f002 f938 	bl	8009974 <__mdiff>
 8007704:	4680      	mov	r8, r0
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f ae54 	beq.w	80073b4 <_strtod_l+0x444>
 800770c:	2400      	movs	r4, #0
 800770e:	68c3      	ldr	r3, [r0, #12]
 8007710:	9904      	ldr	r1, [sp, #16]
 8007712:	60c4      	str	r4, [r0, #12]
 8007714:	930c      	str	r3, [sp, #48]	; 0x30
 8007716:	f002 f913 	bl	8009940 <__mcmp>
 800771a:	42a0      	cmp	r0, r4
 800771c:	da54      	bge.n	80077c8 <_strtod_l+0x858>
 800771e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007720:	b9f3      	cbnz	r3, 8007760 <_strtod_l+0x7f0>
 8007722:	f1b9 0f00 	cmp.w	r9, #0
 8007726:	d11b      	bne.n	8007760 <_strtod_l+0x7f0>
 8007728:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800772c:	b9c3      	cbnz	r3, 8007760 <_strtod_l+0x7f0>
 800772e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007732:	0d1b      	lsrs	r3, r3, #20
 8007734:	051b      	lsls	r3, r3, #20
 8007736:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800773a:	d911      	bls.n	8007760 <_strtod_l+0x7f0>
 800773c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007740:	b91b      	cbnz	r3, 800774a <_strtod_l+0x7da>
 8007742:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007746:	2b01      	cmp	r3, #1
 8007748:	dd0a      	ble.n	8007760 <_strtod_l+0x7f0>
 800774a:	4641      	mov	r1, r8
 800774c:	2201      	movs	r2, #1
 800774e:	4658      	mov	r0, fp
 8007750:	f002 f8a2 	bl	8009898 <__lshift>
 8007754:	9904      	ldr	r1, [sp, #16]
 8007756:	4680      	mov	r8, r0
 8007758:	f002 f8f2 	bl	8009940 <__mcmp>
 800775c:	2800      	cmp	r0, #0
 800775e:	dc68      	bgt.n	8007832 <_strtod_l+0x8c2>
 8007760:	9b05      	ldr	r3, [sp, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d172      	bne.n	800784c <_strtod_l+0x8dc>
 8007766:	e630      	b.n	80073ca <_strtod_l+0x45a>
 8007768:	f018 0f01 	tst.w	r8, #1
 800776c:	d004      	beq.n	8007778 <_strtod_l+0x808>
 800776e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007772:	f7f8 fecb 	bl	800050c <__aeabi_dmul>
 8007776:	2301      	movs	r3, #1
 8007778:	ea4f 0868 	mov.w	r8, r8, asr #1
 800777c:	3508      	adds	r5, #8
 800777e:	e6dc      	b.n	800753a <_strtod_l+0x5ca>
 8007780:	f04f 32ff 	mov.w	r2, #4294967295
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	ea03 0909 	and.w	r9, r3, r9
 800778c:	e6f6      	b.n	800757c <_strtod_l+0x60c>
 800778e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007792:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007796:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800779a:	35e2      	adds	r5, #226	; 0xe2
 800779c:	fa07 f505 	lsl.w	r5, r7, r5
 80077a0:	970f      	str	r7, [sp, #60]	; 0x3c
 80077a2:	e75c      	b.n	800765e <_strtod_l+0x6ee>
 80077a4:	2301      	movs	r3, #1
 80077a6:	2500      	movs	r5, #0
 80077a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077aa:	e758      	b.n	800765e <_strtod_l+0x6ee>
 80077ac:	463a      	mov	r2, r7
 80077ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077b0:	4658      	mov	r0, fp
 80077b2:	f002 f871 	bl	8009898 <__lshift>
 80077b6:	901c      	str	r0, [sp, #112]	; 0x70
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f47f af7c 	bne.w	80076b6 <_strtod_l+0x746>
 80077be:	e5f9      	b.n	80073b4 <_strtod_l+0x444>
 80077c0:	0800b1f0 	.word	0x0800b1f0
 80077c4:	fffffc02 	.word	0xfffffc02
 80077c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80077cc:	f040 8089 	bne.w	80078e2 <_strtod_l+0x972>
 80077d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80077d6:	b342      	cbz	r2, 800782a <_strtod_l+0x8ba>
 80077d8:	4aaf      	ldr	r2, [pc, #700]	; (8007a98 <_strtod_l+0xb28>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d156      	bne.n	800788c <_strtod_l+0x91c>
 80077de:	9b05      	ldr	r3, [sp, #20]
 80077e0:	4648      	mov	r0, r9
 80077e2:	b1eb      	cbz	r3, 8007820 <_strtod_l+0x8b0>
 80077e4:	4653      	mov	r3, sl
 80077e6:	4aad      	ldr	r2, [pc, #692]	; (8007a9c <_strtod_l+0xb2c>)
 80077e8:	f04f 31ff 	mov.w	r1, #4294967295
 80077ec:	401a      	ands	r2, r3
 80077ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80077f2:	d818      	bhi.n	8007826 <_strtod_l+0x8b6>
 80077f4:	0d12      	lsrs	r2, r2, #20
 80077f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	4298      	cmp	r0, r3
 8007800:	d144      	bne.n	800788c <_strtod_l+0x91c>
 8007802:	4ba7      	ldr	r3, [pc, #668]	; (8007aa0 <_strtod_l+0xb30>)
 8007804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007806:	429a      	cmp	r2, r3
 8007808:	d102      	bne.n	8007810 <_strtod_l+0x8a0>
 800780a:	3001      	adds	r0, #1
 800780c:	f43f add2 	beq.w	80073b4 <_strtod_l+0x444>
 8007810:	4ba2      	ldr	r3, [pc, #648]	; (8007a9c <_strtod_l+0xb2c>)
 8007812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007814:	f04f 0900 	mov.w	r9, #0
 8007818:	401a      	ands	r2, r3
 800781a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800781e:	e79f      	b.n	8007760 <_strtod_l+0x7f0>
 8007820:	f04f 33ff 	mov.w	r3, #4294967295
 8007824:	e7eb      	b.n	80077fe <_strtod_l+0x88e>
 8007826:	460b      	mov	r3, r1
 8007828:	e7e9      	b.n	80077fe <_strtod_l+0x88e>
 800782a:	bb7b      	cbnz	r3, 800788c <_strtod_l+0x91c>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	d12c      	bne.n	800788c <_strtod_l+0x91c>
 8007832:	9905      	ldr	r1, [sp, #20]
 8007834:	4653      	mov	r3, sl
 8007836:	4a99      	ldr	r2, [pc, #612]	; (8007a9c <_strtod_l+0xb2c>)
 8007838:	b1f1      	cbz	r1, 8007878 <_strtod_l+0x908>
 800783a:	ea02 010a 	and.w	r1, r2, sl
 800783e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007842:	dc19      	bgt.n	8007878 <_strtod_l+0x908>
 8007844:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007848:	f77f ae51 	ble.w	80074ee <_strtod_l+0x57e>
 800784c:	2300      	movs	r3, #0
 800784e:	4a95      	ldr	r2, [pc, #596]	; (8007aa4 <_strtod_l+0xb34>)
 8007850:	4648      	mov	r0, r9
 8007852:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007856:	4651      	mov	r1, sl
 8007858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800785c:	f7f8 fe56 	bl	800050c <__aeabi_dmul>
 8007860:	4681      	mov	r9, r0
 8007862:	468a      	mov	sl, r1
 8007864:	2900      	cmp	r1, #0
 8007866:	f47f adb0 	bne.w	80073ca <_strtod_l+0x45a>
 800786a:	2800      	cmp	r0, #0
 800786c:	f47f adad 	bne.w	80073ca <_strtod_l+0x45a>
 8007870:	2322      	movs	r3, #34	; 0x22
 8007872:	f8cb 3000 	str.w	r3, [fp]
 8007876:	e5a8      	b.n	80073ca <_strtod_l+0x45a>
 8007878:	4013      	ands	r3, r2
 800787a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800787e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007882:	f04f 39ff 	mov.w	r9, #4294967295
 8007886:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800788a:	e769      	b.n	8007760 <_strtod_l+0x7f0>
 800788c:	b19d      	cbz	r5, 80078b6 <_strtod_l+0x946>
 800788e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007890:	421d      	tst	r5, r3
 8007892:	f43f af65 	beq.w	8007760 <_strtod_l+0x7f0>
 8007896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007898:	9a05      	ldr	r2, [sp, #20]
 800789a:	4648      	mov	r0, r9
 800789c:	4651      	mov	r1, sl
 800789e:	b173      	cbz	r3, 80078be <_strtod_l+0x94e>
 80078a0:	f7ff fb43 	bl	8006f2a <sulp>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ac:	f7f8 fc78 	bl	80001a0 <__adddf3>
 80078b0:	4681      	mov	r9, r0
 80078b2:	468a      	mov	sl, r1
 80078b4:	e754      	b.n	8007760 <_strtod_l+0x7f0>
 80078b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b8:	ea13 0f09 	tst.w	r3, r9
 80078bc:	e7e9      	b.n	8007892 <_strtod_l+0x922>
 80078be:	f7ff fb34 	bl	8006f2a <sulp>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ca:	f7f8 fc67 	bl	800019c <__aeabi_dsub>
 80078ce:	2200      	movs	r2, #0
 80078d0:	2300      	movs	r3, #0
 80078d2:	4681      	mov	r9, r0
 80078d4:	468a      	mov	sl, r1
 80078d6:	f7f9 f881 	bl	80009dc <__aeabi_dcmpeq>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f47f ae07 	bne.w	80074ee <_strtod_l+0x57e>
 80078e0:	e73e      	b.n	8007760 <_strtod_l+0x7f0>
 80078e2:	9904      	ldr	r1, [sp, #16]
 80078e4:	4640      	mov	r0, r8
 80078e6:	f002 f968 	bl	8009bba <__ratio>
 80078ea:	2200      	movs	r2, #0
 80078ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078f0:	4606      	mov	r6, r0
 80078f2:	460f      	mov	r7, r1
 80078f4:	f7f9 f886 	bl	8000a04 <__aeabi_dcmple>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d075      	beq.n	80079e8 <_strtod_l+0xa78>
 80078fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d047      	beq.n	8007992 <_strtod_l+0xa22>
 8007902:	2600      	movs	r6, #0
 8007904:	4f68      	ldr	r7, [pc, #416]	; (8007aa8 <_strtod_l+0xb38>)
 8007906:	4d68      	ldr	r5, [pc, #416]	; (8007aa8 <_strtod_l+0xb38>)
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800790e:	0d1b      	lsrs	r3, r3, #20
 8007910:	051b      	lsls	r3, r3, #20
 8007912:	930f      	str	r3, [sp, #60]	; 0x3c
 8007914:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007916:	4b65      	ldr	r3, [pc, #404]	; (8007aac <_strtod_l+0xb3c>)
 8007918:	429a      	cmp	r2, r3
 800791a:	f040 80cf 	bne.w	8007abc <_strtod_l+0xb4c>
 800791e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007922:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	4648      	mov	r0, r9
 800792a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800792e:	4651      	mov	r1, sl
 8007930:	f002 f87e 	bl	8009a30 <__ulp>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f8 fde6 	bl	800050c <__aeabi_dmul>
 8007940:	464a      	mov	r2, r9
 8007942:	4653      	mov	r3, sl
 8007944:	f7f8 fc2c 	bl	80001a0 <__adddf3>
 8007948:	460b      	mov	r3, r1
 800794a:	4954      	ldr	r1, [pc, #336]	; (8007a9c <_strtod_l+0xb2c>)
 800794c:	4a58      	ldr	r2, [pc, #352]	; (8007ab0 <_strtod_l+0xb40>)
 800794e:	4019      	ands	r1, r3
 8007950:	4291      	cmp	r1, r2
 8007952:	4681      	mov	r9, r0
 8007954:	d95e      	bls.n	8007a14 <_strtod_l+0xaa4>
 8007956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007958:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800795c:	4293      	cmp	r3, r2
 800795e:	d103      	bne.n	8007968 <_strtod_l+0x9f8>
 8007960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007962:	3301      	adds	r3, #1
 8007964:	f43f ad26 	beq.w	80073b4 <_strtod_l+0x444>
 8007968:	f04f 39ff 	mov.w	r9, #4294967295
 800796c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007aa0 <_strtod_l+0xb30>
 8007970:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007972:	4658      	mov	r0, fp
 8007974:	f001 fdc5 	bl	8009502 <_Bfree>
 8007978:	9906      	ldr	r1, [sp, #24]
 800797a:	4658      	mov	r0, fp
 800797c:	f001 fdc1 	bl	8009502 <_Bfree>
 8007980:	9904      	ldr	r1, [sp, #16]
 8007982:	4658      	mov	r0, fp
 8007984:	f001 fdbd 	bl	8009502 <_Bfree>
 8007988:	4641      	mov	r1, r8
 800798a:	4658      	mov	r0, fp
 800798c:	f001 fdb9 	bl	8009502 <_Bfree>
 8007990:	e617      	b.n	80075c2 <_strtod_l+0x652>
 8007992:	f1b9 0f00 	cmp.w	r9, #0
 8007996:	d119      	bne.n	80079cc <_strtod_l+0xa5c>
 8007998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800799e:	b9e3      	cbnz	r3, 80079da <_strtod_l+0xa6a>
 80079a0:	2200      	movs	r2, #0
 80079a2:	4b41      	ldr	r3, [pc, #260]	; (8007aa8 <_strtod_l+0xb38>)
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f9 f822 	bl	80009f0 <__aeabi_dcmplt>
 80079ac:	b9c8      	cbnz	r0, 80079e2 <_strtod_l+0xa72>
 80079ae:	2200      	movs	r2, #0
 80079b0:	4b40      	ldr	r3, [pc, #256]	; (8007ab4 <_strtod_l+0xb44>)
 80079b2:	4630      	mov	r0, r6
 80079b4:	4639      	mov	r1, r7
 80079b6:	f7f8 fda9 	bl	800050c <__aeabi_dmul>
 80079ba:	4604      	mov	r4, r0
 80079bc:	460d      	mov	r5, r1
 80079be:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079c2:	9418      	str	r4, [sp, #96]	; 0x60
 80079c4:	9319      	str	r3, [sp, #100]	; 0x64
 80079c6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80079ca:	e79d      	b.n	8007908 <_strtod_l+0x998>
 80079cc:	f1b9 0f01 	cmp.w	r9, #1
 80079d0:	d103      	bne.n	80079da <_strtod_l+0xa6a>
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f43f ad8a 	beq.w	80074ee <_strtod_l+0x57e>
 80079da:	2600      	movs	r6, #0
 80079dc:	4f36      	ldr	r7, [pc, #216]	; (8007ab8 <_strtod_l+0xb48>)
 80079de:	2400      	movs	r4, #0
 80079e0:	e791      	b.n	8007906 <_strtod_l+0x996>
 80079e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80079e4:	4d33      	ldr	r5, [pc, #204]	; (8007ab4 <_strtod_l+0xb44>)
 80079e6:	e7ea      	b.n	80079be <_strtod_l+0xa4e>
 80079e8:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <_strtod_l+0xb44>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	4630      	mov	r0, r6
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 fd8c 	bl	800050c <__aeabi_dmul>
 80079f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	b933      	cbnz	r3, 8007a0a <_strtod_l+0xa9a>
 80079fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a00:	9010      	str	r0, [sp, #64]	; 0x40
 8007a02:	9311      	str	r3, [sp, #68]	; 0x44
 8007a04:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a08:	e77e      	b.n	8007908 <_strtod_l+0x998>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a12:	e7f7      	b.n	8007a04 <_strtod_l+0xa94>
 8007a14:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1a8      	bne.n	8007970 <_strtod_l+0xa00>
 8007a1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007a22:	0d1b      	lsrs	r3, r3, #20
 8007a24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a26:	051b      	lsls	r3, r3, #20
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	4656      	mov	r6, sl
 8007a2c:	d1a0      	bne.n	8007970 <_strtod_l+0xa00>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7f9 f81b 	bl	8000a6c <__aeabi_d2iz>
 8007a36:	f7f8 fcff 	bl	8000438 <__aeabi_i2d>
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7f8 fbab 	bl	800019c <__aeabi_dsub>
 8007a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	b933      	cbnz	r3, 8007a5c <_strtod_l+0xaec>
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	d103      	bne.n	8007a5c <_strtod_l+0xaec>
 8007a54:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	d06a      	beq.n	8007b32 <_strtod_l+0xbc2>
 8007a5c:	a30a      	add	r3, pc, #40	; (adr r3, 8007a88 <_strtod_l+0xb18>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	4620      	mov	r0, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	f7f8 ffc3 	bl	80009f0 <__aeabi_dcmplt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f47f acad 	bne.w	80073ca <_strtod_l+0x45a>
 8007a70:	a307      	add	r3, pc, #28	; (adr r3, 8007a90 <_strtod_l+0xb20>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f8 ffd7 	bl	8000a2c <__aeabi_dcmpgt>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	f43f af76 	beq.w	8007970 <_strtod_l+0xa00>
 8007a84:	e4a1      	b.n	80073ca <_strtod_l+0x45a>
 8007a86:	bf00      	nop
 8007a88:	94a03595 	.word	0x94a03595
 8007a8c:	3fdfffff 	.word	0x3fdfffff
 8007a90:	35afe535 	.word	0x35afe535
 8007a94:	3fe00000 	.word	0x3fe00000
 8007a98:	000fffff 	.word	0x000fffff
 8007a9c:	7ff00000 	.word	0x7ff00000
 8007aa0:	7fefffff 	.word	0x7fefffff
 8007aa4:	39500000 	.word	0x39500000
 8007aa8:	3ff00000 	.word	0x3ff00000
 8007aac:	7fe00000 	.word	0x7fe00000
 8007ab0:	7c9fffff 	.word	0x7c9fffff
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	bff00000 	.word	0xbff00000
 8007abc:	9b05      	ldr	r3, [sp, #20]
 8007abe:	b313      	cbz	r3, 8007b06 <_strtod_l+0xb96>
 8007ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ac2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ac6:	d81e      	bhi.n	8007b06 <_strtod_l+0xb96>
 8007ac8:	a325      	add	r3, pc, #148	; (adr r3, 8007b60 <_strtod_l+0xbf0>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 ff97 	bl	8000a04 <__aeabi_dcmple>
 8007ad6:	b190      	cbz	r0, 8007afe <_strtod_l+0xb8e>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7f8 ffee 	bl	8000abc <__aeabi_d2uiz>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	bf08      	it	eq
 8007ae4:	2001      	moveq	r0, #1
 8007ae6:	f7f8 fc97 	bl	8000418 <__aeabi_ui2d>
 8007aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aec:	4604      	mov	r4, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	b9d3      	cbnz	r3, 8007b28 <_strtod_l+0xbb8>
 8007af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007af6:	9012      	str	r0, [sp, #72]	; 0x48
 8007af8:	9313      	str	r3, [sp, #76]	; 0x4c
 8007afa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b00:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b04:	1a9f      	subs	r7, r3, r2
 8007b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b0a:	f001 ff91 	bl	8009a30 <__ulp>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7f8 fcf9 	bl	800050c <__aeabi_dmul>
 8007b1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b1e:	f7f8 fb3f 	bl	80001a0 <__adddf3>
 8007b22:	4681      	mov	r9, r0
 8007b24:	468a      	mov	sl, r1
 8007b26:	e777      	b.n	8007a18 <_strtod_l+0xaa8>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b30:	e7e3      	b.n	8007afa <_strtod_l+0xb8a>
 8007b32:	a30d      	add	r3, pc, #52	; (adr r3, 8007b68 <_strtod_l+0xbf8>)
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f7f8 ff5a 	bl	80009f0 <__aeabi_dcmplt>
 8007b3c:	e79f      	b.n	8007a7e <_strtod_l+0xb0e>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	930d      	str	r3, [sp, #52]	; 0x34
 8007b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	f7ff ba55 	b.w	8006ff6 <_strtod_l+0x86>
 8007b4c:	2b65      	cmp	r3, #101	; 0x65
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f43f ab42 	beq.w	80071da <_strtod_l+0x26a>
 8007b56:	2101      	movs	r1, #1
 8007b58:	4614      	mov	r4, r2
 8007b5a:	9105      	str	r1, [sp, #20]
 8007b5c:	f7ff babf 	b.w	80070de <_strtod_l+0x16e>
 8007b60:	ffc00000 	.word	0xffc00000
 8007b64:	41dfffff 	.word	0x41dfffff
 8007b68:	94a03595 	.word	0x94a03595
 8007b6c:	3fcfffff 	.word	0x3fcfffff

08007b70 <strtod>:
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <strtod+0x1c>)
 8007b72:	b410      	push	{r4}
 8007b74:	681c      	ldr	r4, [r3, #0]
 8007b76:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <strtod+0x20>)
 8007b78:	6a23      	ldr	r3, [r4, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf08      	it	eq
 8007b7e:	4613      	moveq	r3, r2
 8007b80:	460a      	mov	r2, r1
 8007b82:	4601      	mov	r1, r0
 8007b84:	4620      	mov	r0, r4
 8007b86:	bc10      	pop	{r4}
 8007b88:	f7ff b9f2 	b.w	8006f70 <_strtod_l>
 8007b8c:	20000018 	.word	0x20000018
 8007b90:	2000007c 	.word	0x2000007c

08007b94 <__swbuf_r>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4614      	mov	r4, r2
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b118      	cbz	r0, 8007ba6 <__swbuf_r+0x12>
 8007b9e:	6983      	ldr	r3, [r0, #24]
 8007ba0:	b90b      	cbnz	r3, 8007ba6 <__swbuf_r+0x12>
 8007ba2:	f001 f819 	bl	8008bd8 <__sinit>
 8007ba6:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <__swbuf_r+0x98>)
 8007ba8:	429c      	cmp	r4, r3
 8007baa:	d12a      	bne.n	8007c02 <__swbuf_r+0x6e>
 8007bac:	686c      	ldr	r4, [r5, #4]
 8007bae:	69a3      	ldr	r3, [r4, #24]
 8007bb0:	60a3      	str	r3, [r4, #8]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	071a      	lsls	r2, r3, #28
 8007bb6:	d52e      	bpl.n	8007c16 <__swbuf_r+0x82>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	b363      	cbz	r3, 8007c16 <__swbuf_r+0x82>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	b2f6      	uxtb	r6, r6
 8007bc2:	1ac0      	subs	r0, r0, r3
 8007bc4:	6963      	ldr	r3, [r4, #20]
 8007bc6:	4637      	mov	r7, r6
 8007bc8:	4283      	cmp	r3, r0
 8007bca:	dc04      	bgt.n	8007bd6 <__swbuf_r+0x42>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 ff98 	bl	8008b04 <_fflush_r>
 8007bd4:	bb28      	cbnz	r0, 8007c22 <__swbuf_r+0x8e>
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	3001      	adds	r0, #1
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	6022      	str	r2, [r4, #0]
 8007be4:	701e      	strb	r6, [r3, #0]
 8007be6:	6963      	ldr	r3, [r4, #20]
 8007be8:	4283      	cmp	r3, r0
 8007bea:	d004      	beq.n	8007bf6 <__swbuf_r+0x62>
 8007bec:	89a3      	ldrh	r3, [r4, #12]
 8007bee:	07db      	lsls	r3, r3, #31
 8007bf0:	d519      	bpl.n	8007c26 <__swbuf_r+0x92>
 8007bf2:	2e0a      	cmp	r6, #10
 8007bf4:	d117      	bne.n	8007c26 <__swbuf_r+0x92>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 ff83 	bl	8008b04 <_fflush_r>
 8007bfe:	b190      	cbz	r0, 8007c26 <__swbuf_r+0x92>
 8007c00:	e00f      	b.n	8007c22 <__swbuf_r+0x8e>
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <__swbuf_r+0x9c>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	d101      	bne.n	8007c0c <__swbuf_r+0x78>
 8007c08:	68ac      	ldr	r4, [r5, #8]
 8007c0a:	e7d0      	b.n	8007bae <__swbuf_r+0x1a>
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <__swbuf_r+0xa0>)
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	bf08      	it	eq
 8007c12:	68ec      	ldreq	r4, [r5, #12]
 8007c14:	e7cb      	b.n	8007bae <__swbuf_r+0x1a>
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 f82d 	bl	8007c78 <__swsetup_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d0cc      	beq.n	8007bbc <__swbuf_r+0x28>
 8007c22:	f04f 37ff 	mov.w	r7, #4294967295
 8007c26:	4638      	mov	r0, r7
 8007c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	0800b348 	.word	0x0800b348
 8007c30:	0800b368 	.word	0x0800b368
 8007c34:	0800b328 	.word	0x0800b328

08007c38 <__ascii_wctomb>:
 8007c38:	b149      	cbz	r1, 8007c4e <__ascii_wctomb+0x16>
 8007c3a:	2aff      	cmp	r2, #255	; 0xff
 8007c3c:	bf8b      	itete	hi
 8007c3e:	238a      	movhi	r3, #138	; 0x8a
 8007c40:	700a      	strbls	r2, [r1, #0]
 8007c42:	6003      	strhi	r3, [r0, #0]
 8007c44:	2001      	movls	r0, #1
 8007c46:	bf88      	it	hi
 8007c48:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c4c:	4770      	bx	lr
 8007c4e:	4608      	mov	r0, r1
 8007c50:	4770      	bx	lr
	...

08007c54 <_write_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4605      	mov	r5, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4c05      	ldr	r4, [pc, #20]	; (8007c74 <_write_r+0x20>)
 8007c60:	6022      	str	r2, [r4, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f7fe fa27 	bl	80060b6 <_write>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_write_r+0x1e>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_write_r+0x1e>
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	2000344c 	.word	0x2000344c

08007c78 <__swsetup_r>:
 8007c78:	4b32      	ldr	r3, [pc, #200]	; (8007d44 <__swsetup_r+0xcc>)
 8007c7a:	b570      	push	{r4, r5, r6, lr}
 8007c7c:	681d      	ldr	r5, [r3, #0]
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	b125      	cbz	r5, 8007c8e <__swsetup_r+0x16>
 8007c84:	69ab      	ldr	r3, [r5, #24]
 8007c86:	b913      	cbnz	r3, 8007c8e <__swsetup_r+0x16>
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 ffa5 	bl	8008bd8 <__sinit>
 8007c8e:	4b2e      	ldr	r3, [pc, #184]	; (8007d48 <__swsetup_r+0xd0>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	d10f      	bne.n	8007cb4 <__swsetup_r+0x3c>
 8007c94:	686c      	ldr	r4, [r5, #4]
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	0715      	lsls	r5, r2, #28
 8007c9e:	d42c      	bmi.n	8007cfa <__swsetup_r+0x82>
 8007ca0:	06d0      	lsls	r0, r2, #27
 8007ca2:	d411      	bmi.n	8007cc8 <__swsetup_r+0x50>
 8007ca4:	2209      	movs	r2, #9
 8007ca6:	6032      	str	r2, [r6, #0]
 8007ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb2:	e03e      	b.n	8007d32 <__swsetup_r+0xba>
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <__swsetup_r+0xd4>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d101      	bne.n	8007cbe <__swsetup_r+0x46>
 8007cba:	68ac      	ldr	r4, [r5, #8]
 8007cbc:	e7eb      	b.n	8007c96 <__swsetup_r+0x1e>
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <__swsetup_r+0xd8>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	bf08      	it	eq
 8007cc4:	68ec      	ldreq	r4, [r5, #12]
 8007cc6:	e7e6      	b.n	8007c96 <__swsetup_r+0x1e>
 8007cc8:	0751      	lsls	r1, r2, #29
 8007cca:	d512      	bpl.n	8007cf2 <__swsetup_r+0x7a>
 8007ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cce:	b141      	cbz	r1, 8007ce2 <__swsetup_r+0x6a>
 8007cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd4:	4299      	cmp	r1, r3
 8007cd6:	d002      	beq.n	8007cde <__swsetup_r+0x66>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7fe fb0b 	bl	80062f4 <_free_r>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	2300      	movs	r3, #0
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	b94b      	cbnz	r3, 8007d12 <__swsetup_r+0x9a>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d003      	beq.n	8007d12 <__swsetup_r+0x9a>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f001 fb5b 	bl	80093c8 <__smakebuf_r>
 8007d12:	89a2      	ldrh	r2, [r4, #12]
 8007d14:	f012 0301 	ands.w	r3, r2, #1
 8007d18:	d00c      	beq.n	8007d34 <__swsetup_r+0xbc>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	425b      	negs	r3, r3
 8007d22:	61a3      	str	r3, [r4, #24]
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	b953      	cbnz	r3, 8007d3e <__swsetup_r+0xc6>
 8007d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d30:	d1ba      	bne.n	8007ca8 <__swsetup_r+0x30>
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	0792      	lsls	r2, r2, #30
 8007d36:	bf58      	it	pl
 8007d38:	6963      	ldrpl	r3, [r4, #20]
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	e7f2      	b.n	8007d24 <__swsetup_r+0xac>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e7f7      	b.n	8007d32 <__swsetup_r+0xba>
 8007d42:	bf00      	nop
 8007d44:	20000018 	.word	0x20000018
 8007d48:	0800b348 	.word	0x0800b348
 8007d4c:	0800b368 	.word	0x0800b368
 8007d50:	0800b328 	.word	0x0800b328

08007d54 <_close_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	2300      	movs	r3, #0
 8007d58:	4c05      	ldr	r4, [pc, #20]	; (8007d70 <_close_r+0x1c>)
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	6023      	str	r3, [r4, #0]
 8007d60:	f7fe f9c5 	bl	80060ee <_close>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_close_r+0x1a>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_close_r+0x1a>
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	2000344c 	.word	0x2000344c

08007d74 <quorem>:
 8007d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d78:	6903      	ldr	r3, [r0, #16]
 8007d7a:	690c      	ldr	r4, [r1, #16]
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	f2c0 8084 	blt.w	8007e8c <quorem+0x118>
 8007d84:	3c01      	subs	r4, #1
 8007d86:	f101 0714 	add.w	r7, r1, #20
 8007d8a:	f100 0614 	add.w	r6, r0, #20
 8007d8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d96:	3501      	adds	r5, #1
 8007d98:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007da0:	eb06 030c 	add.w	r3, r6, ip
 8007da4:	eb07 090c 	add.w	r9, r7, ip
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	b39d      	cbz	r5, 8007e14 <quorem+0xa0>
 8007dac:	f04f 0a00 	mov.w	sl, #0
 8007db0:	4638      	mov	r0, r7
 8007db2:	46b6      	mov	lr, r6
 8007db4:	46d3      	mov	fp, sl
 8007db6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dba:	b293      	uxth	r3, r2
 8007dbc:	fb05 a303 	mla	r3, r5, r3, sl
 8007dc0:	0c12      	lsrs	r2, r2, #16
 8007dc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dc6:	fb05 a202 	mla	r2, r5, r2, sl
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ebab 0303 	sub.w	r3, fp, r3
 8007dd0:	f8de b000 	ldr.w	fp, [lr]
 8007dd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007dd8:	fa1f fb8b 	uxth.w	fp, fp
 8007ddc:	445b      	add	r3, fp
 8007dde:	fa1f fb82 	uxth.w	fp, r2
 8007de2:	f8de 2000 	ldr.w	r2, [lr]
 8007de6:	4581      	cmp	r9, r0
 8007de8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007dec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007df6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007dfa:	f84e 3b04 	str.w	r3, [lr], #4
 8007dfe:	d2da      	bcs.n	8007db6 <quorem+0x42>
 8007e00:	f856 300c 	ldr.w	r3, [r6, ip]
 8007e04:	b933      	cbnz	r3, 8007e14 <quorem+0xa0>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	3b04      	subs	r3, #4
 8007e0a:	429e      	cmp	r6, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	d331      	bcc.n	8007e74 <quorem+0x100>
 8007e10:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e14:	4640      	mov	r0, r8
 8007e16:	f001 fd93 	bl	8009940 <__mcmp>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	db26      	blt.n	8007e6c <quorem+0xf8>
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f04f 0c00 	mov.w	ip, #0
 8007e24:	3501      	adds	r5, #1
 8007e26:	f857 1b04 	ldr.w	r1, [r7], #4
 8007e2a:	f8d0 e000 	ldr.w	lr, [r0]
 8007e2e:	b28b      	uxth	r3, r1
 8007e30:	ebac 0303 	sub.w	r3, ip, r3
 8007e34:	fa1f f28e 	uxth.w	r2, lr
 8007e38:	4413      	add	r3, r2
 8007e3a:	0c0a      	lsrs	r2, r1, #16
 8007e3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e4a:	45b9      	cmp	r9, r7
 8007e4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e50:	f840 3b04 	str.w	r3, [r0], #4
 8007e54:	d2e7      	bcs.n	8007e26 <quorem+0xb2>
 8007e56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007e5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007e5e:	b92a      	cbnz	r2, 8007e6c <quorem+0xf8>
 8007e60:	3b04      	subs	r3, #4
 8007e62:	429e      	cmp	r6, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	d30b      	bcc.n	8007e80 <quorem+0x10c>
 8007e68:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	b003      	add	sp, #12
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d1c9      	bne.n	8007e10 <quorem+0x9c>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	e7c4      	b.n	8007e0a <quorem+0x96>
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	3b04      	subs	r3, #4
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	d1ef      	bne.n	8007e68 <quorem+0xf4>
 8007e88:	3c01      	subs	r4, #1
 8007e8a:	e7ea      	b.n	8007e62 <quorem+0xee>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e7ee      	b.n	8007e6e <quorem+0xfa>

08007e90 <_dtoa_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4616      	mov	r6, r2
 8007e96:	461f      	mov	r7, r3
 8007e98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e9a:	b095      	sub	sp, #84	; 0x54
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007ea2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ea6:	b93d      	cbnz	r5, 8007eb8 <_dtoa_r+0x28>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	f7fe f9ed 	bl	8006288 <malloc>
 8007eae:	6260      	str	r0, [r4, #36]	; 0x24
 8007eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007eb4:	6005      	str	r5, [r0, #0]
 8007eb6:	60c5      	str	r5, [r0, #12]
 8007eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eba:	6819      	ldr	r1, [r3, #0]
 8007ebc:	b151      	cbz	r1, 8007ed4 <_dtoa_r+0x44>
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4093      	lsls	r3, r2
 8007ec4:	604a      	str	r2, [r1, #4]
 8007ec6:	608b      	str	r3, [r1, #8]
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fb1a 	bl	8009502 <_Bfree>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	1e3b      	subs	r3, r7, #0
 8007ed6:	bfaf      	iteee	ge
 8007ed8:	2300      	movge	r3, #0
 8007eda:	2201      	movlt	r2, #1
 8007edc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ee0:	9303      	strlt	r3, [sp, #12]
 8007ee2:	bfac      	ite	ge
 8007ee4:	f8c8 3000 	strge.w	r3, [r8]
 8007ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8007eec:	4bae      	ldr	r3, [pc, #696]	; (80081a8 <_dtoa_r+0x318>)
 8007eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ef2:	ea33 0308 	bics.w	r3, r3, r8
 8007ef6:	d11b      	bne.n	8007f30 <_dtoa_r+0xa0>
 8007ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	b923      	cbnz	r3, 8007f0e <_dtoa_r+0x7e>
 8007f04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f000 8545 	beq.w	8008998 <_dtoa_r+0xb08>
 8007f0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f10:	b953      	cbnz	r3, 8007f28 <_dtoa_r+0x98>
 8007f12:	4ba6      	ldr	r3, [pc, #664]	; (80081ac <_dtoa_r+0x31c>)
 8007f14:	e021      	b.n	8007f5a <_dtoa_r+0xca>
 8007f16:	4ba6      	ldr	r3, [pc, #664]	; (80081b0 <_dtoa_r+0x320>)
 8007f18:	9306      	str	r3, [sp, #24]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	9806      	ldr	r0, [sp, #24]
 8007f22:	b015      	add	sp, #84	; 0x54
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	4ba0      	ldr	r3, [pc, #640]	; (80081ac <_dtoa_r+0x31c>)
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	3303      	adds	r3, #3
 8007f2e:	e7f5      	b.n	8007f1c <_dtoa_r+0x8c>
 8007f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4630      	mov	r0, r6
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	f7f8 fd4e 	bl	80009dc <__aeabi_dcmpeq>
 8007f40:	4682      	mov	sl, r0
 8007f42:	b160      	cbz	r0, 8007f5e <_dtoa_r+0xce>
 8007f44:	2301      	movs	r3, #1
 8007f46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8520 	beq.w	8008992 <_dtoa_r+0xb02>
 8007f52:	4b98      	ldr	r3, [pc, #608]	; (80081b4 <_dtoa_r+0x324>)
 8007f54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	9306      	str	r3, [sp, #24]
 8007f5c:	e7e0      	b.n	8007f20 <_dtoa_r+0x90>
 8007f5e:	ab12      	add	r3, sp, #72	; 0x48
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	ab13      	add	r3, sp, #76	; 0x4c
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f001 fdd6 	bl	8009b1c <__d2b>
 8007f70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f74:	4683      	mov	fp, r0
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	d07d      	beq.n	8008076 <_dtoa_r+0x1e6>
 8007f7a:	46b0      	mov	r8, r6
 8007f7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007f84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007f88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007f90:	2200      	movs	r2, #0
 8007f92:	4b89      	ldr	r3, [pc, #548]	; (80081b8 <_dtoa_r+0x328>)
 8007f94:	4640      	mov	r0, r8
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 f900 	bl	800019c <__aeabi_dsub>
 8007f9c:	a37c      	add	r3, pc, #496	; (adr r3, 8008190 <_dtoa_r+0x300>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 fab3 	bl	800050c <__aeabi_dmul>
 8007fa6:	a37c      	add	r3, pc, #496	; (adr r3, 8008198 <_dtoa_r+0x308>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f8f8 	bl	80001a0 <__adddf3>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 fa3f 	bl	8000438 <__aeabi_i2d>
 8007fba:	a379      	add	r3, pc, #484	; (adr r3, 80081a0 <_dtoa_r+0x310>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 faa4 	bl	800050c <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 f8e8 	bl	80001a0 <__adddf3>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460f      	mov	r7, r1
 8007fd4:	f7f8 fd4a 	bl	8000a6c <__aeabi_d2iz>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4682      	mov	sl, r0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	f7f8 fd05 	bl	80009f0 <__aeabi_dcmplt>
 8007fe6:	b148      	cbz	r0, 8007ffc <_dtoa_r+0x16c>
 8007fe8:	4650      	mov	r0, sl
 8007fea:	f7f8 fa25 	bl	8000438 <__aeabi_i2d>
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 fcf3 	bl	80009dc <__aeabi_dcmpeq>
 8007ff6:	b908      	cbnz	r0, 8007ffc <_dtoa_r+0x16c>
 8007ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffc:	f1ba 0f16 	cmp.w	sl, #22
 8008000:	d85a      	bhi.n	80080b8 <_dtoa_r+0x228>
 8008002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008006:	496d      	ldr	r1, [pc, #436]	; (80081bc <_dtoa_r+0x32c>)
 8008008:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800800c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008010:	f7f8 fd0c 	bl	8000a2c <__aeabi_dcmpgt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d051      	beq.n	80080bc <_dtoa_r+0x22c>
 8008018:	2300      	movs	r3, #0
 800801a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801e:	930d      	str	r3, [sp, #52]	; 0x34
 8008020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008022:	1b5d      	subs	r5, r3, r5
 8008024:	1e6b      	subs	r3, r5, #1
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	bf43      	ittte	mi
 800802a:	2300      	movmi	r3, #0
 800802c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008030:	9307      	strmi	r3, [sp, #28]
 8008032:	f04f 0900 	movpl.w	r9, #0
 8008036:	f1ba 0f00 	cmp.w	sl, #0
 800803a:	db41      	blt.n	80080c0 <_dtoa_r+0x230>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008042:	4453      	add	r3, sl
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	2300      	movs	r3, #0
 8008048:	9308      	str	r3, [sp, #32]
 800804a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800804c:	2b09      	cmp	r3, #9
 800804e:	f200 808f 	bhi.w	8008170 <_dtoa_r+0x2e0>
 8008052:	2b05      	cmp	r3, #5
 8008054:	bfc4      	itt	gt
 8008056:	3b04      	subgt	r3, #4
 8008058:	931e      	strgt	r3, [sp, #120]	; 0x78
 800805a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800805c:	bfc8      	it	gt
 800805e:	2500      	movgt	r5, #0
 8008060:	f1a3 0302 	sub.w	r3, r3, #2
 8008064:	bfd8      	it	le
 8008066:	2501      	movle	r5, #1
 8008068:	2b03      	cmp	r3, #3
 800806a:	f200 808d 	bhi.w	8008188 <_dtoa_r+0x2f8>
 800806e:	e8df f003 	tbb	[pc, r3]
 8008072:	7d7b      	.short	0x7d7b
 8008074:	6f2f      	.short	0x6f2f
 8008076:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800807a:	441d      	add	r5, r3
 800807c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008080:	2820      	cmp	r0, #32
 8008082:	dd13      	ble.n	80080ac <_dtoa_r+0x21c>
 8008084:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	fa08 f800 	lsl.w	r8, r8, r0
 800808e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008092:	fa23 f000 	lsr.w	r0, r3, r0
 8008096:	ea48 0000 	orr.w	r0, r8, r0
 800809a:	f7f8 f9bd 	bl	8000418 <__aeabi_ui2d>
 800809e:	2301      	movs	r3, #1
 80080a0:	4680      	mov	r8, r0
 80080a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80080a6:	3d01      	subs	r5, #1
 80080a8:	9310      	str	r3, [sp, #64]	; 0x40
 80080aa:	e771      	b.n	8007f90 <_dtoa_r+0x100>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	f1c0 0020 	rsb	r0, r0, #32
 80080b2:	fa03 f000 	lsl.w	r0, r3, r0
 80080b6:	e7f0      	b.n	800809a <_dtoa_r+0x20a>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e7b0      	b.n	800801e <_dtoa_r+0x18e>
 80080bc:	900d      	str	r0, [sp, #52]	; 0x34
 80080be:	e7af      	b.n	8008020 <_dtoa_r+0x190>
 80080c0:	f1ca 0300 	rsb	r3, sl, #0
 80080c4:	9308      	str	r3, [sp, #32]
 80080c6:	2300      	movs	r3, #0
 80080c8:	eba9 090a 	sub.w	r9, r9, sl
 80080cc:	930c      	str	r3, [sp, #48]	; 0x30
 80080ce:	e7bc      	b.n	800804a <_dtoa_r+0x1ba>
 80080d0:	2301      	movs	r3, #1
 80080d2:	9309      	str	r3, [sp, #36]	; 0x24
 80080d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd74      	ble.n	80081c4 <_dtoa_r+0x334>
 80080da:	4698      	mov	r8, r3
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	2200      	movs	r2, #0
 80080e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080e2:	6072      	str	r2, [r6, #4]
 80080e4:	2204      	movs	r2, #4
 80080e6:	f102 0014 	add.w	r0, r2, #20
 80080ea:	4298      	cmp	r0, r3
 80080ec:	6871      	ldr	r1, [r6, #4]
 80080ee:	d96e      	bls.n	80081ce <_dtoa_r+0x33e>
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 f9d2 	bl	800949a <_Balloc>
 80080f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f8:	6030      	str	r0, [r6, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f1b8 0f0e 	cmp.w	r8, #14
 8008100:	9306      	str	r3, [sp, #24]
 8008102:	f200 80ed 	bhi.w	80082e0 <_dtoa_r+0x450>
 8008106:	2d00      	cmp	r5, #0
 8008108:	f000 80ea 	beq.w	80082e0 <_dtoa_r+0x450>
 800810c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008110:	f1ba 0f00 	cmp.w	sl, #0
 8008114:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008118:	dd77      	ble.n	800820a <_dtoa_r+0x37a>
 800811a:	4a28      	ldr	r2, [pc, #160]	; (80081bc <_dtoa_r+0x32c>)
 800811c:	f00a 030f 	and.w	r3, sl, #15
 8008120:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008124:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008128:	06f0      	lsls	r0, r6, #27
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008132:	d568      	bpl.n	8008206 <_dtoa_r+0x376>
 8008134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008138:	4b21      	ldr	r3, [pc, #132]	; (80081c0 <_dtoa_r+0x330>)
 800813a:	2503      	movs	r5, #3
 800813c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008140:	f7f8 fb0e 	bl	8000760 <__aeabi_ddiv>
 8008144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008148:	f006 060f 	and.w	r6, r6, #15
 800814c:	4f1c      	ldr	r7, [pc, #112]	; (80081c0 <_dtoa_r+0x330>)
 800814e:	e04f      	b.n	80081f0 <_dtoa_r+0x360>
 8008150:	2301      	movs	r3, #1
 8008152:	9309      	str	r3, [sp, #36]	; 0x24
 8008154:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008156:	4453      	add	r3, sl
 8008158:	f103 0801 	add.w	r8, r3, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	4643      	mov	r3, r8
 8008160:	2b01      	cmp	r3, #1
 8008162:	bfb8      	it	lt
 8008164:	2301      	movlt	r3, #1
 8008166:	e7ba      	b.n	80080de <_dtoa_r+0x24e>
 8008168:	2300      	movs	r3, #0
 800816a:	e7b2      	b.n	80080d2 <_dtoa_r+0x242>
 800816c:	2300      	movs	r3, #0
 800816e:	e7f0      	b.n	8008152 <_dtoa_r+0x2c2>
 8008170:	2501      	movs	r5, #1
 8008172:	2300      	movs	r3, #0
 8008174:	9509      	str	r5, [sp, #36]	; 0x24
 8008176:	931e      	str	r3, [sp, #120]	; 0x78
 8008178:	f04f 33ff 	mov.w	r3, #4294967295
 800817c:	2200      	movs	r2, #0
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	4698      	mov	r8, r3
 8008182:	2312      	movs	r3, #18
 8008184:	921f      	str	r2, [sp, #124]	; 0x7c
 8008186:	e7aa      	b.n	80080de <_dtoa_r+0x24e>
 8008188:	2301      	movs	r3, #1
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	e7f4      	b.n	8008178 <_dtoa_r+0x2e8>
 800818e:	bf00      	nop
 8008190:	636f4361 	.word	0x636f4361
 8008194:	3fd287a7 	.word	0x3fd287a7
 8008198:	8b60c8b3 	.word	0x8b60c8b3
 800819c:	3fc68a28 	.word	0x3fc68a28
 80081a0:	509f79fb 	.word	0x509f79fb
 80081a4:	3fd34413 	.word	0x3fd34413
 80081a8:	7ff00000 	.word	0x7ff00000
 80081ac:	0800b322 	.word	0x0800b322
 80081b0:	0800b319 	.word	0x0800b319
 80081b4:	0800b4ac 	.word	0x0800b4ac
 80081b8:	3ff80000 	.word	0x3ff80000
 80081bc:	0800b3b0 	.word	0x0800b3b0
 80081c0:	0800b388 	.word	0x0800b388
 80081c4:	2301      	movs	r3, #1
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	4698      	mov	r8, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	e7da      	b.n	8008184 <_dtoa_r+0x2f4>
 80081ce:	3101      	adds	r1, #1
 80081d0:	6071      	str	r1, [r6, #4]
 80081d2:	0052      	lsls	r2, r2, #1
 80081d4:	e787      	b.n	80080e6 <_dtoa_r+0x256>
 80081d6:	07f1      	lsls	r1, r6, #31
 80081d8:	d508      	bpl.n	80081ec <_dtoa_r+0x35c>
 80081da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e2:	f7f8 f993 	bl	800050c <__aeabi_dmul>
 80081e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081ea:	3501      	adds	r5, #1
 80081ec:	1076      	asrs	r6, r6, #1
 80081ee:	3708      	adds	r7, #8
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	d1f0      	bne.n	80081d6 <_dtoa_r+0x346>
 80081f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fc:	f7f8 fab0 	bl	8000760 <__aeabi_ddiv>
 8008200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008204:	e01b      	b.n	800823e <_dtoa_r+0x3ae>
 8008206:	2502      	movs	r5, #2
 8008208:	e7a0      	b.n	800814c <_dtoa_r+0x2bc>
 800820a:	f000 80a4 	beq.w	8008356 <_dtoa_r+0x4c6>
 800820e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008212:	f1ca 0600 	rsb	r6, sl, #0
 8008216:	4ba0      	ldr	r3, [pc, #640]	; (8008498 <_dtoa_r+0x608>)
 8008218:	f006 020f 	and.w	r2, r6, #15
 800821c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f972 	bl	800050c <__aeabi_dmul>
 8008228:	2502      	movs	r5, #2
 800822a:	2300      	movs	r3, #0
 800822c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008230:	4f9a      	ldr	r7, [pc, #616]	; (800849c <_dtoa_r+0x60c>)
 8008232:	1136      	asrs	r6, r6, #4
 8008234:	2e00      	cmp	r6, #0
 8008236:	f040 8083 	bne.w	8008340 <_dtoa_r+0x4b0>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e0      	bne.n	8008200 <_dtoa_r+0x370>
 800823e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 808a 	beq.w	800835a <_dtoa_r+0x4ca>
 8008246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800824a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800824e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008252:	2200      	movs	r2, #0
 8008254:	4b92      	ldr	r3, [pc, #584]	; (80084a0 <_dtoa_r+0x610>)
 8008256:	f7f8 fbcb 	bl	80009f0 <__aeabi_dcmplt>
 800825a:	2800      	cmp	r0, #0
 800825c:	d07d      	beq.n	800835a <_dtoa_r+0x4ca>
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	d07a      	beq.n	800835a <_dtoa_r+0x4ca>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd36      	ble.n	80082d8 <_dtoa_r+0x448>
 800826a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800826e:	2200      	movs	r2, #0
 8008270:	4b8c      	ldr	r3, [pc, #560]	; (80084a4 <_dtoa_r+0x614>)
 8008272:	f7f8 f94b 	bl	800050c <__aeabi_dmul>
 8008276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800827a:	9e04      	ldr	r6, [sp, #16]
 800827c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008280:	3501      	adds	r5, #1
 8008282:	4628      	mov	r0, r5
 8008284:	f7f8 f8d8 	bl	8000438 <__aeabi_i2d>
 8008288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800828c:	f7f8 f93e 	bl	800050c <__aeabi_dmul>
 8008290:	2200      	movs	r2, #0
 8008292:	4b85      	ldr	r3, [pc, #532]	; (80084a8 <_dtoa_r+0x618>)
 8008294:	f7f7 ff84 	bl	80001a0 <__adddf3>
 8008298:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800829c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80082a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d15c      	bne.n	8008360 <_dtoa_r+0x4d0>
 80082a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	4b7f      	ldr	r3, [pc, #508]	; (80084ac <_dtoa_r+0x61c>)
 80082ae:	f7f7 ff75 	bl	800019c <__aeabi_dsub>
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	462b      	mov	r3, r5
 80082b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ba:	f7f8 fbb7 	bl	8000a2c <__aeabi_dcmpgt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8281 	bne.w	80087c6 <_dtoa_r+0x936>
 80082c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80082ce:	f7f8 fb8f 	bl	80009f0 <__aeabi_dcmplt>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	f040 8275 	bne.w	80087c2 <_dtoa_r+0x932>
 80082d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80082dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f2c0 814b 	blt.w	800857e <_dtoa_r+0x6ee>
 80082e8:	f1ba 0f0e 	cmp.w	sl, #14
 80082ec:	f300 8147 	bgt.w	800857e <_dtoa_r+0x6ee>
 80082f0:	4b69      	ldr	r3, [pc, #420]	; (8008498 <_dtoa_r+0x608>)
 80082f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008300:	2b00      	cmp	r3, #0
 8008302:	f280 80d7 	bge.w	80084b4 <_dtoa_r+0x624>
 8008306:	f1b8 0f00 	cmp.w	r8, #0
 800830a:	f300 80d3 	bgt.w	80084b4 <_dtoa_r+0x624>
 800830e:	f040 8257 	bne.w	80087c0 <_dtoa_r+0x930>
 8008312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008316:	2200      	movs	r2, #0
 8008318:	4b64      	ldr	r3, [pc, #400]	; (80084ac <_dtoa_r+0x61c>)
 800831a:	f7f8 f8f7 	bl	800050c <__aeabi_dmul>
 800831e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008322:	f7f8 fb79 	bl	8000a18 <__aeabi_dcmpge>
 8008326:	4646      	mov	r6, r8
 8008328:	4647      	mov	r7, r8
 800832a:	2800      	cmp	r0, #0
 800832c:	f040 822d 	bne.w	800878a <_dtoa_r+0x8fa>
 8008330:	9b06      	ldr	r3, [sp, #24]
 8008332:	9a06      	ldr	r2, [sp, #24]
 8008334:	1c5d      	adds	r5, r3, #1
 8008336:	2331      	movs	r3, #49	; 0x31
 8008338:	f10a 0a01 	add.w	sl, sl, #1
 800833c:	7013      	strb	r3, [r2, #0]
 800833e:	e228      	b.n	8008792 <_dtoa_r+0x902>
 8008340:	07f2      	lsls	r2, r6, #31
 8008342:	d505      	bpl.n	8008350 <_dtoa_r+0x4c0>
 8008344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008348:	f7f8 f8e0 	bl	800050c <__aeabi_dmul>
 800834c:	2301      	movs	r3, #1
 800834e:	3501      	adds	r5, #1
 8008350:	1076      	asrs	r6, r6, #1
 8008352:	3708      	adds	r7, #8
 8008354:	e76e      	b.n	8008234 <_dtoa_r+0x3a4>
 8008356:	2502      	movs	r5, #2
 8008358:	e771      	b.n	800823e <_dtoa_r+0x3ae>
 800835a:	4657      	mov	r7, sl
 800835c:	4646      	mov	r6, r8
 800835e:	e790      	b.n	8008282 <_dtoa_r+0x3f2>
 8008360:	4b4d      	ldr	r3, [pc, #308]	; (8008498 <_dtoa_r+0x608>)
 8008362:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008366:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d048      	beq.n	8008402 <_dtoa_r+0x572>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	2000      	movs	r0, #0
 8008376:	494e      	ldr	r1, [pc, #312]	; (80084b0 <_dtoa_r+0x620>)
 8008378:	f7f8 f9f2 	bl	8000760 <__aeabi_ddiv>
 800837c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008380:	f7f7 ff0c 	bl	800019c <__aeabi_dsub>
 8008384:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008388:	9d06      	ldr	r5, [sp, #24]
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f8 fb6d 	bl	8000a6c <__aeabi_d2iz>
 8008392:	9011      	str	r0, [sp, #68]	; 0x44
 8008394:	f7f8 f850 	bl	8000438 <__aeabi_i2d>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a0:	f7f7 fefc 	bl	800019c <__aeabi_dsub>
 80083a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083aa:	3330      	adds	r3, #48	; 0x30
 80083ac:	f805 3b01 	strb.w	r3, [r5], #1
 80083b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083b4:	f7f8 fb1c 	bl	80009f0 <__aeabi_dcmplt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d163      	bne.n	8008484 <_dtoa_r+0x5f4>
 80083bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c0:	2000      	movs	r0, #0
 80083c2:	4937      	ldr	r1, [pc, #220]	; (80084a0 <_dtoa_r+0x610>)
 80083c4:	f7f7 feea 	bl	800019c <__aeabi_dsub>
 80083c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083cc:	f7f8 fb10 	bl	80009f0 <__aeabi_dcmplt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f040 80b5 	bne.w	8008540 <_dtoa_r+0x6b0>
 80083d6:	9b06      	ldr	r3, [sp, #24]
 80083d8:	1aeb      	subs	r3, r5, r3
 80083da:	429e      	cmp	r6, r3
 80083dc:	f77f af7c 	ble.w	80082d8 <_dtoa_r+0x448>
 80083e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083e4:	2200      	movs	r2, #0
 80083e6:	4b2f      	ldr	r3, [pc, #188]	; (80084a4 <_dtoa_r+0x614>)
 80083e8:	f7f8 f890 	bl	800050c <__aeabi_dmul>
 80083ec:	2200      	movs	r2, #0
 80083ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80083f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f6:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <_dtoa_r+0x614>)
 80083f8:	f7f8 f888 	bl	800050c <__aeabi_dmul>
 80083fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008400:	e7c3      	b.n	800838a <_dtoa_r+0x4fa>
 8008402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008406:	f7f8 f881 	bl	800050c <__aeabi_dmul>
 800840a:	9b06      	ldr	r3, [sp, #24]
 800840c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008410:	199d      	adds	r5, r3, r6
 8008412:	461e      	mov	r6, r3
 8008414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008418:	f7f8 fb28 	bl	8000a6c <__aeabi_d2iz>
 800841c:	9011      	str	r0, [sp, #68]	; 0x44
 800841e:	f7f8 f80b 	bl	8000438 <__aeabi_i2d>
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842a:	f7f7 feb7 	bl	800019c <__aeabi_dsub>
 800842e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008434:	3330      	adds	r3, #48	; 0x30
 8008436:	f806 3b01 	strb.w	r3, [r6], #1
 800843a:	42ae      	cmp	r6, r5
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	d124      	bne.n	800848c <_dtoa_r+0x5fc>
 8008442:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008446:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <_dtoa_r+0x620>)
 8008448:	f7f7 feaa 	bl	80001a0 <__adddf3>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008454:	f7f8 faea 	bl	8000a2c <__aeabi_dcmpgt>
 8008458:	2800      	cmp	r0, #0
 800845a:	d171      	bne.n	8008540 <_dtoa_r+0x6b0>
 800845c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008460:	2000      	movs	r0, #0
 8008462:	4913      	ldr	r1, [pc, #76]	; (80084b0 <_dtoa_r+0x620>)
 8008464:	f7f7 fe9a 	bl	800019c <__aeabi_dsub>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008470:	f7f8 fabe 	bl	80009f0 <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	f43f af2f 	beq.w	80082d8 <_dtoa_r+0x448>
 800847a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800847e:	1e6a      	subs	r2, r5, #1
 8008480:	2b30      	cmp	r3, #48	; 0x30
 8008482:	d001      	beq.n	8008488 <_dtoa_r+0x5f8>
 8008484:	46ba      	mov	sl, r7
 8008486:	e04a      	b.n	800851e <_dtoa_r+0x68e>
 8008488:	4615      	mov	r5, r2
 800848a:	e7f6      	b.n	800847a <_dtoa_r+0x5ea>
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <_dtoa_r+0x614>)
 800848e:	f7f8 f83d 	bl	800050c <__aeabi_dmul>
 8008492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008496:	e7bd      	b.n	8008414 <_dtoa_r+0x584>
 8008498:	0800b3b0 	.word	0x0800b3b0
 800849c:	0800b388 	.word	0x0800b388
 80084a0:	3ff00000 	.word	0x3ff00000
 80084a4:	40240000 	.word	0x40240000
 80084a8:	401c0000 	.word	0x401c0000
 80084ac:	40140000 	.word	0x40140000
 80084b0:	3fe00000 	.word	0x3fe00000
 80084b4:	9d06      	ldr	r5, [sp, #24]
 80084b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 f94d 	bl	8000760 <__aeabi_ddiv>
 80084c6:	f7f8 fad1 	bl	8000a6c <__aeabi_d2iz>
 80084ca:	4681      	mov	r9, r0
 80084cc:	f7f7 ffb4 	bl	8000438 <__aeabi_i2d>
 80084d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d4:	f7f8 f81a 	bl	800050c <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f7 fe5c 	bl	800019c <__aeabi_dsub>
 80084e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80084e8:	f805 6b01 	strb.w	r6, [r5], #1
 80084ec:	9e06      	ldr	r6, [sp, #24]
 80084ee:	4602      	mov	r2, r0
 80084f0:	1bae      	subs	r6, r5, r6
 80084f2:	45b0      	cmp	r8, r6
 80084f4:	460b      	mov	r3, r1
 80084f6:	d135      	bne.n	8008564 <_dtoa_r+0x6d4>
 80084f8:	f7f7 fe52 	bl	80001a0 <__adddf3>
 80084fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	f7f8 fa92 	bl	8000a2c <__aeabi_dcmpgt>
 8008508:	b9c8      	cbnz	r0, 800853e <_dtoa_r+0x6ae>
 800850a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f8 fa63 	bl	80009dc <__aeabi_dcmpeq>
 8008516:	b110      	cbz	r0, 800851e <_dtoa_r+0x68e>
 8008518:	f019 0f01 	tst.w	r9, #1
 800851c:	d10f      	bne.n	800853e <_dtoa_r+0x6ae>
 800851e:	4659      	mov	r1, fp
 8008520:	4620      	mov	r0, r4
 8008522:	f000 ffee 	bl	8009502 <_Bfree>
 8008526:	2300      	movs	r3, #0
 8008528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800852a:	702b      	strb	r3, [r5, #0]
 800852c:	f10a 0301 	add.w	r3, sl, #1
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008534:	2b00      	cmp	r3, #0
 8008536:	f43f acf3 	beq.w	8007f20 <_dtoa_r+0x90>
 800853a:	601d      	str	r5, [r3, #0]
 800853c:	e4f0      	b.n	8007f20 <_dtoa_r+0x90>
 800853e:	4657      	mov	r7, sl
 8008540:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008544:	1e6b      	subs	r3, r5, #1
 8008546:	2a39      	cmp	r2, #57	; 0x39
 8008548:	d106      	bne.n	8008558 <_dtoa_r+0x6c8>
 800854a:	9a06      	ldr	r2, [sp, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d107      	bne.n	8008560 <_dtoa_r+0x6d0>
 8008550:	2330      	movs	r3, #48	; 0x30
 8008552:	7013      	strb	r3, [r2, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	3701      	adds	r7, #1
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e791      	b.n	8008484 <_dtoa_r+0x5f4>
 8008560:	461d      	mov	r5, r3
 8008562:	e7ed      	b.n	8008540 <_dtoa_r+0x6b0>
 8008564:	2200      	movs	r2, #0
 8008566:	4b99      	ldr	r3, [pc, #612]	; (80087cc <_dtoa_r+0x93c>)
 8008568:	f7f7 ffd0 	bl	800050c <__aeabi_dmul>
 800856c:	2200      	movs	r2, #0
 800856e:	2300      	movs	r3, #0
 8008570:	4606      	mov	r6, r0
 8008572:	460f      	mov	r7, r1
 8008574:	f7f8 fa32 	bl	80009dc <__aeabi_dcmpeq>
 8008578:	2800      	cmp	r0, #0
 800857a:	d09e      	beq.n	80084ba <_dtoa_r+0x62a>
 800857c:	e7cf      	b.n	800851e <_dtoa_r+0x68e>
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	2a00      	cmp	r2, #0
 8008582:	f000 8088 	beq.w	8008696 <_dtoa_r+0x806>
 8008586:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008588:	2a01      	cmp	r2, #1
 800858a:	dc6d      	bgt.n	8008668 <_dtoa_r+0x7d8>
 800858c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800858e:	2a00      	cmp	r2, #0
 8008590:	d066      	beq.n	8008660 <_dtoa_r+0x7d0>
 8008592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008596:	464d      	mov	r5, r9
 8008598:	9e08      	ldr	r6, [sp, #32]
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	2101      	movs	r1, #1
 800859e:	441a      	add	r2, r3
 80085a0:	4620      	mov	r0, r4
 80085a2:	4499      	add	r9, r3
 80085a4:	9207      	str	r2, [sp, #28]
 80085a6:	f001 f88a 	bl	80096be <__i2b>
 80085aa:	4607      	mov	r7, r0
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	dd0b      	ble.n	80085c8 <_dtoa_r+0x738>
 80085b0:	9b07      	ldr	r3, [sp, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd08      	ble.n	80085c8 <_dtoa_r+0x738>
 80085b6:	42ab      	cmp	r3, r5
 80085b8:	bfa8      	it	ge
 80085ba:	462b      	movge	r3, r5
 80085bc:	9a07      	ldr	r2, [sp, #28]
 80085be:	eba9 0903 	sub.w	r9, r9, r3
 80085c2:	1aed      	subs	r5, r5, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	9b08      	ldr	r3, [sp, #32]
 80085ca:	b1eb      	cbz	r3, 8008608 <_dtoa_r+0x778>
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d065      	beq.n	800869e <_dtoa_r+0x80e>
 80085d2:	b18e      	cbz	r6, 80085f8 <_dtoa_r+0x768>
 80085d4:	4639      	mov	r1, r7
 80085d6:	4632      	mov	r2, r6
 80085d8:	4620      	mov	r0, r4
 80085da:	f001 f90f 	bl	80097fc <__pow5mult>
 80085de:	465a      	mov	r2, fp
 80085e0:	4601      	mov	r1, r0
 80085e2:	4607      	mov	r7, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	f001 f873 	bl	80096d0 <__multiply>
 80085ea:	4659      	mov	r1, fp
 80085ec:	900a      	str	r0, [sp, #40]	; 0x28
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 ff87 	bl	8009502 <_Bfree>
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	469b      	mov	fp, r3
 80085f8:	9b08      	ldr	r3, [sp, #32]
 80085fa:	1b9a      	subs	r2, r3, r6
 80085fc:	d004      	beq.n	8008608 <_dtoa_r+0x778>
 80085fe:	4659      	mov	r1, fp
 8008600:	4620      	mov	r0, r4
 8008602:	f001 f8fb 	bl	80097fc <__pow5mult>
 8008606:	4683      	mov	fp, r0
 8008608:	2101      	movs	r1, #1
 800860a:	4620      	mov	r0, r4
 800860c:	f001 f857 	bl	80096be <__i2b>
 8008610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008612:	4606      	mov	r6, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 81c6 	beq.w	80089a6 <_dtoa_r+0xb16>
 800861a:	461a      	mov	r2, r3
 800861c:	4601      	mov	r1, r0
 800861e:	4620      	mov	r0, r4
 8008620:	f001 f8ec 	bl	80097fc <__pow5mult>
 8008624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008626:	4606      	mov	r6, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	dc3e      	bgt.n	80086aa <_dtoa_r+0x81a>
 800862c:	9b02      	ldr	r3, [sp, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d137      	bne.n	80086a2 <_dtoa_r+0x812>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008638:	2b00      	cmp	r3, #0
 800863a:	d134      	bne.n	80086a6 <_dtoa_r+0x816>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008642:	0d1b      	lsrs	r3, r3, #20
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	b12b      	cbz	r3, 8008654 <_dtoa_r+0x7c4>
 8008648:	9b07      	ldr	r3, [sp, #28]
 800864a:	f109 0901 	add.w	r9, r9, #1
 800864e:	3301      	adds	r3, #1
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	2301      	movs	r3, #1
 8008654:	9308      	str	r3, [sp, #32]
 8008656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d128      	bne.n	80086ae <_dtoa_r+0x81e>
 800865c:	2001      	movs	r0, #1
 800865e:	e02e      	b.n	80086be <_dtoa_r+0x82e>
 8008660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008662:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008666:	e796      	b.n	8008596 <_dtoa_r+0x706>
 8008668:	9b08      	ldr	r3, [sp, #32]
 800866a:	f108 36ff 	add.w	r6, r8, #4294967295
 800866e:	42b3      	cmp	r3, r6
 8008670:	bfb7      	itett	lt
 8008672:	9b08      	ldrlt	r3, [sp, #32]
 8008674:	1b9e      	subge	r6, r3, r6
 8008676:	1af2      	sublt	r2, r6, r3
 8008678:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800867a:	bfbf      	itttt	lt
 800867c:	9608      	strlt	r6, [sp, #32]
 800867e:	189b      	addlt	r3, r3, r2
 8008680:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008682:	2600      	movlt	r6, #0
 8008684:	f1b8 0f00 	cmp.w	r8, #0
 8008688:	bfb9      	ittee	lt
 800868a:	eba9 0508 	sublt.w	r5, r9, r8
 800868e:	2300      	movlt	r3, #0
 8008690:	464d      	movge	r5, r9
 8008692:	4643      	movge	r3, r8
 8008694:	e781      	b.n	800859a <_dtoa_r+0x70a>
 8008696:	9e08      	ldr	r6, [sp, #32]
 8008698:	464d      	mov	r5, r9
 800869a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800869c:	e786      	b.n	80085ac <_dtoa_r+0x71c>
 800869e:	9a08      	ldr	r2, [sp, #32]
 80086a0:	e7ad      	b.n	80085fe <_dtoa_r+0x76e>
 80086a2:	2300      	movs	r3, #0
 80086a4:	e7d6      	b.n	8008654 <_dtoa_r+0x7c4>
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	e7d4      	b.n	8008654 <_dtoa_r+0x7c4>
 80086aa:	2300      	movs	r3, #0
 80086ac:	9308      	str	r3, [sp, #32]
 80086ae:	6933      	ldr	r3, [r6, #16]
 80086b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086b4:	6918      	ldr	r0, [r3, #16]
 80086b6:	f000 ffb4 	bl	8009622 <__hi0bits>
 80086ba:	f1c0 0020 	rsb	r0, r0, #32
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	4418      	add	r0, r3
 80086c2:	f010 001f 	ands.w	r0, r0, #31
 80086c6:	d047      	beq.n	8008758 <_dtoa_r+0x8c8>
 80086c8:	f1c0 0320 	rsb	r3, r0, #32
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	dd3b      	ble.n	8008748 <_dtoa_r+0x8b8>
 80086d0:	9b07      	ldr	r3, [sp, #28]
 80086d2:	f1c0 001c 	rsb	r0, r0, #28
 80086d6:	4481      	add	r9, r0
 80086d8:	4405      	add	r5, r0
 80086da:	4403      	add	r3, r0
 80086dc:	9307      	str	r3, [sp, #28]
 80086de:	f1b9 0f00 	cmp.w	r9, #0
 80086e2:	dd05      	ble.n	80086f0 <_dtoa_r+0x860>
 80086e4:	4659      	mov	r1, fp
 80086e6:	464a      	mov	r2, r9
 80086e8:	4620      	mov	r0, r4
 80086ea:	f001 f8d5 	bl	8009898 <__lshift>
 80086ee:	4683      	mov	fp, r0
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd05      	ble.n	8008702 <_dtoa_r+0x872>
 80086f6:	4631      	mov	r1, r6
 80086f8:	461a      	mov	r2, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f001 f8cc 	bl	8009898 <__lshift>
 8008700:	4606      	mov	r6, r0
 8008702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008704:	b353      	cbz	r3, 800875c <_dtoa_r+0x8cc>
 8008706:	4631      	mov	r1, r6
 8008708:	4658      	mov	r0, fp
 800870a:	f001 f919 	bl	8009940 <__mcmp>
 800870e:	2800      	cmp	r0, #0
 8008710:	da24      	bge.n	800875c <_dtoa_r+0x8cc>
 8008712:	2300      	movs	r3, #0
 8008714:	4659      	mov	r1, fp
 8008716:	220a      	movs	r2, #10
 8008718:	4620      	mov	r0, r4
 800871a:	f000 ff09 	bl	8009530 <__multadd>
 800871e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008720:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008724:	4683      	mov	fp, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 8144 	beq.w	80089b4 <_dtoa_r+0xb24>
 800872c:	2300      	movs	r3, #0
 800872e:	4639      	mov	r1, r7
 8008730:	220a      	movs	r2, #10
 8008732:	4620      	mov	r0, r4
 8008734:	f000 fefc 	bl	8009530 <__multadd>
 8008738:	9b04      	ldr	r3, [sp, #16]
 800873a:	4607      	mov	r7, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	dc4d      	bgt.n	80087dc <_dtoa_r+0x94c>
 8008740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008742:	2b02      	cmp	r3, #2
 8008744:	dd4a      	ble.n	80087dc <_dtoa_r+0x94c>
 8008746:	e011      	b.n	800876c <_dtoa_r+0x8dc>
 8008748:	d0c9      	beq.n	80086de <_dtoa_r+0x84e>
 800874a:	9a07      	ldr	r2, [sp, #28]
 800874c:	331c      	adds	r3, #28
 800874e:	441a      	add	r2, r3
 8008750:	4499      	add	r9, r3
 8008752:	441d      	add	r5, r3
 8008754:	4613      	mov	r3, r2
 8008756:	e7c1      	b.n	80086dc <_dtoa_r+0x84c>
 8008758:	4603      	mov	r3, r0
 800875a:	e7f6      	b.n	800874a <_dtoa_r+0x8ba>
 800875c:	f1b8 0f00 	cmp.w	r8, #0
 8008760:	dc36      	bgt.n	80087d0 <_dtoa_r+0x940>
 8008762:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008764:	2b02      	cmp	r3, #2
 8008766:	dd33      	ble.n	80087d0 <_dtoa_r+0x940>
 8008768:	f8cd 8010 	str.w	r8, [sp, #16]
 800876c:	9b04      	ldr	r3, [sp, #16]
 800876e:	b963      	cbnz	r3, 800878a <_dtoa_r+0x8fa>
 8008770:	4631      	mov	r1, r6
 8008772:	2205      	movs	r2, #5
 8008774:	4620      	mov	r0, r4
 8008776:	f000 fedb 	bl	8009530 <__multadd>
 800877a:	4601      	mov	r1, r0
 800877c:	4606      	mov	r6, r0
 800877e:	4658      	mov	r0, fp
 8008780:	f001 f8de 	bl	8009940 <__mcmp>
 8008784:	2800      	cmp	r0, #0
 8008786:	f73f add3 	bgt.w	8008330 <_dtoa_r+0x4a0>
 800878a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800878c:	9d06      	ldr	r5, [sp, #24]
 800878e:	ea6f 0a03 	mvn.w	sl, r3
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	4631      	mov	r1, r6
 8008798:	4620      	mov	r0, r4
 800879a:	f000 feb2 	bl	8009502 <_Bfree>
 800879e:	2f00      	cmp	r7, #0
 80087a0:	f43f aebd 	beq.w	800851e <_dtoa_r+0x68e>
 80087a4:	f1b9 0f00 	cmp.w	r9, #0
 80087a8:	d005      	beq.n	80087b6 <_dtoa_r+0x926>
 80087aa:	45b9      	cmp	r9, r7
 80087ac:	d003      	beq.n	80087b6 <_dtoa_r+0x926>
 80087ae:	4649      	mov	r1, r9
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fea6 	bl	8009502 <_Bfree>
 80087b6:	4639      	mov	r1, r7
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fea2 	bl	8009502 <_Bfree>
 80087be:	e6ae      	b.n	800851e <_dtoa_r+0x68e>
 80087c0:	2600      	movs	r6, #0
 80087c2:	4637      	mov	r7, r6
 80087c4:	e7e1      	b.n	800878a <_dtoa_r+0x8fa>
 80087c6:	46ba      	mov	sl, r7
 80087c8:	4637      	mov	r7, r6
 80087ca:	e5b1      	b.n	8008330 <_dtoa_r+0x4a0>
 80087cc:	40240000 	.word	0x40240000
 80087d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80f3 	beq.w	80089c2 <_dtoa_r+0xb32>
 80087dc:	2d00      	cmp	r5, #0
 80087de:	dd05      	ble.n	80087ec <_dtoa_r+0x95c>
 80087e0:	4639      	mov	r1, r7
 80087e2:	462a      	mov	r2, r5
 80087e4:	4620      	mov	r0, r4
 80087e6:	f001 f857 	bl	8009898 <__lshift>
 80087ea:	4607      	mov	r7, r0
 80087ec:	9b08      	ldr	r3, [sp, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d04c      	beq.n	800888c <_dtoa_r+0x9fc>
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fe50 	bl	800949a <_Balloc>
 80087fa:	4605      	mov	r5, r0
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	f107 010c 	add.w	r1, r7, #12
 8008802:	3202      	adds	r2, #2
 8008804:	0092      	lsls	r2, r2, #2
 8008806:	300c      	adds	r0, #12
 8008808:	f7fd fd60 	bl	80062cc <memcpy>
 800880c:	2201      	movs	r2, #1
 800880e:	4629      	mov	r1, r5
 8008810:	4620      	mov	r0, r4
 8008812:	f001 f841 	bl	8009898 <__lshift>
 8008816:	46b9      	mov	r9, r7
 8008818:	4607      	mov	r7, r0
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	9308      	str	r3, [sp, #32]
 8008826:	4631      	mov	r1, r6
 8008828:	4658      	mov	r0, fp
 800882a:	f7ff faa3 	bl	8007d74 <quorem>
 800882e:	4649      	mov	r1, r9
 8008830:	4605      	mov	r5, r0
 8008832:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008836:	4658      	mov	r0, fp
 8008838:	f001 f882 	bl	8009940 <__mcmp>
 800883c:	463a      	mov	r2, r7
 800883e:	9002      	str	r0, [sp, #8]
 8008840:	4631      	mov	r1, r6
 8008842:	4620      	mov	r0, r4
 8008844:	f001 f896 	bl	8009974 <__mdiff>
 8008848:	68c3      	ldr	r3, [r0, #12]
 800884a:	4602      	mov	r2, r0
 800884c:	bb03      	cbnz	r3, 8008890 <_dtoa_r+0xa00>
 800884e:	4601      	mov	r1, r0
 8008850:	9009      	str	r0, [sp, #36]	; 0x24
 8008852:	4658      	mov	r0, fp
 8008854:	f001 f874 	bl	8009940 <__mcmp>
 8008858:	4603      	mov	r3, r0
 800885a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800885c:	4611      	mov	r1, r2
 800885e:	4620      	mov	r0, r4
 8008860:	9309      	str	r3, [sp, #36]	; 0x24
 8008862:	f000 fe4e 	bl	8009502 <_Bfree>
 8008866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008868:	b9a3      	cbnz	r3, 8008894 <_dtoa_r+0xa04>
 800886a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800886c:	b992      	cbnz	r2, 8008894 <_dtoa_r+0xa04>
 800886e:	9a08      	ldr	r2, [sp, #32]
 8008870:	b982      	cbnz	r2, 8008894 <_dtoa_r+0xa04>
 8008872:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008876:	d029      	beq.n	80088cc <_dtoa_r+0xa3c>
 8008878:	9b02      	ldr	r3, [sp, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dd01      	ble.n	8008882 <_dtoa_r+0x9f2>
 800887e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	1c5d      	adds	r5, r3, #1
 8008886:	f883 8000 	strb.w	r8, [r3]
 800888a:	e784      	b.n	8008796 <_dtoa_r+0x906>
 800888c:	4638      	mov	r0, r7
 800888e:	e7c2      	b.n	8008816 <_dtoa_r+0x986>
 8008890:	2301      	movs	r3, #1
 8008892:	e7e3      	b.n	800885c <_dtoa_r+0x9cc>
 8008894:	9a02      	ldr	r2, [sp, #8]
 8008896:	2a00      	cmp	r2, #0
 8008898:	db04      	blt.n	80088a4 <_dtoa_r+0xa14>
 800889a:	d123      	bne.n	80088e4 <_dtoa_r+0xa54>
 800889c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800889e:	bb0a      	cbnz	r2, 80088e4 <_dtoa_r+0xa54>
 80088a0:	9a08      	ldr	r2, [sp, #32]
 80088a2:	b9fa      	cbnz	r2, 80088e4 <_dtoa_r+0xa54>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	ddec      	ble.n	8008882 <_dtoa_r+0x9f2>
 80088a8:	4659      	mov	r1, fp
 80088aa:	2201      	movs	r2, #1
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fff3 	bl	8009898 <__lshift>
 80088b2:	4631      	mov	r1, r6
 80088b4:	4683      	mov	fp, r0
 80088b6:	f001 f843 	bl	8009940 <__mcmp>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	dc03      	bgt.n	80088c6 <_dtoa_r+0xa36>
 80088be:	d1e0      	bne.n	8008882 <_dtoa_r+0x9f2>
 80088c0:	f018 0f01 	tst.w	r8, #1
 80088c4:	d0dd      	beq.n	8008882 <_dtoa_r+0x9f2>
 80088c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088ca:	d1d8      	bne.n	800887e <_dtoa_r+0x9ee>
 80088cc:	9b07      	ldr	r3, [sp, #28]
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	1c5d      	adds	r5, r3, #1
 80088d2:	2339      	movs	r3, #57	; 0x39
 80088d4:	7013      	strb	r3, [r2, #0]
 80088d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088da:	1e6a      	subs	r2, r5, #1
 80088dc:	2b39      	cmp	r3, #57	; 0x39
 80088de:	d04d      	beq.n	800897c <_dtoa_r+0xaec>
 80088e0:	3301      	adds	r3, #1
 80088e2:	e052      	b.n	800898a <_dtoa_r+0xafa>
 80088e4:	9a07      	ldr	r2, [sp, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f102 0501 	add.w	r5, r2, #1
 80088ec:	dd06      	ble.n	80088fc <_dtoa_r+0xa6c>
 80088ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80088f2:	d0eb      	beq.n	80088cc <_dtoa_r+0xa3c>
 80088f4:	f108 0801 	add.w	r8, r8, #1
 80088f8:	9b07      	ldr	r3, [sp, #28]
 80088fa:	e7c4      	b.n	8008886 <_dtoa_r+0x9f6>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	9a04      	ldr	r2, [sp, #16]
 8008900:	1aeb      	subs	r3, r5, r3
 8008902:	4293      	cmp	r3, r2
 8008904:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008908:	d021      	beq.n	800894e <_dtoa_r+0xabe>
 800890a:	4659      	mov	r1, fp
 800890c:	2300      	movs	r3, #0
 800890e:	220a      	movs	r2, #10
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fe0d 	bl	8009530 <__multadd>
 8008916:	45b9      	cmp	r9, r7
 8008918:	4683      	mov	fp, r0
 800891a:	f04f 0300 	mov.w	r3, #0
 800891e:	f04f 020a 	mov.w	r2, #10
 8008922:	4649      	mov	r1, r9
 8008924:	4620      	mov	r0, r4
 8008926:	d105      	bne.n	8008934 <_dtoa_r+0xaa4>
 8008928:	f000 fe02 	bl	8009530 <__multadd>
 800892c:	4681      	mov	r9, r0
 800892e:	4607      	mov	r7, r0
 8008930:	9507      	str	r5, [sp, #28]
 8008932:	e778      	b.n	8008826 <_dtoa_r+0x996>
 8008934:	f000 fdfc 	bl	8009530 <__multadd>
 8008938:	4639      	mov	r1, r7
 800893a:	4681      	mov	r9, r0
 800893c:	2300      	movs	r3, #0
 800893e:	220a      	movs	r2, #10
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fdf5 	bl	8009530 <__multadd>
 8008946:	4607      	mov	r7, r0
 8008948:	e7f2      	b.n	8008930 <_dtoa_r+0xaa0>
 800894a:	f04f 0900 	mov.w	r9, #0
 800894e:	4659      	mov	r1, fp
 8008950:	2201      	movs	r2, #1
 8008952:	4620      	mov	r0, r4
 8008954:	f000 ffa0 	bl	8009898 <__lshift>
 8008958:	4631      	mov	r1, r6
 800895a:	4683      	mov	fp, r0
 800895c:	f000 fff0 	bl	8009940 <__mcmp>
 8008960:	2800      	cmp	r0, #0
 8008962:	dcb8      	bgt.n	80088d6 <_dtoa_r+0xa46>
 8008964:	d102      	bne.n	800896c <_dtoa_r+0xadc>
 8008966:	f018 0f01 	tst.w	r8, #1
 800896a:	d1b4      	bne.n	80088d6 <_dtoa_r+0xa46>
 800896c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008970:	1e6a      	subs	r2, r5, #1
 8008972:	2b30      	cmp	r3, #48	; 0x30
 8008974:	f47f af0f 	bne.w	8008796 <_dtoa_r+0x906>
 8008978:	4615      	mov	r5, r2
 800897a:	e7f7      	b.n	800896c <_dtoa_r+0xadc>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	4293      	cmp	r3, r2
 8008980:	d105      	bne.n	800898e <_dtoa_r+0xafe>
 8008982:	2331      	movs	r3, #49	; 0x31
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	f10a 0a01 	add.w	sl, sl, #1
 800898a:	7013      	strb	r3, [r2, #0]
 800898c:	e703      	b.n	8008796 <_dtoa_r+0x906>
 800898e:	4615      	mov	r5, r2
 8008990:	e7a1      	b.n	80088d6 <_dtoa_r+0xa46>
 8008992:	4b17      	ldr	r3, [pc, #92]	; (80089f0 <_dtoa_r+0xb60>)
 8008994:	f7ff bae1 	b.w	8007f5a <_dtoa_r+0xca>
 8008998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800899a:	2b00      	cmp	r3, #0
 800899c:	f47f aabb 	bne.w	8007f16 <_dtoa_r+0x86>
 80089a0:	4b14      	ldr	r3, [pc, #80]	; (80089f4 <_dtoa_r+0xb64>)
 80089a2:	f7ff bada 	b.w	8007f5a <_dtoa_r+0xca>
 80089a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	f77f ae3f 	ble.w	800862c <_dtoa_r+0x79c>
 80089ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	e653      	b.n	800865c <_dtoa_r+0x7cc>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc03      	bgt.n	80089c2 <_dtoa_r+0xb32>
 80089ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089bc:	2b02      	cmp	r3, #2
 80089be:	f73f aed5 	bgt.w	800876c <_dtoa_r+0x8dc>
 80089c2:	9d06      	ldr	r5, [sp, #24]
 80089c4:	4631      	mov	r1, r6
 80089c6:	4658      	mov	r0, fp
 80089c8:	f7ff f9d4 	bl	8007d74 <quorem>
 80089cc:	9b06      	ldr	r3, [sp, #24]
 80089ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089d2:	f805 8b01 	strb.w	r8, [r5], #1
 80089d6:	9a04      	ldr	r2, [sp, #16]
 80089d8:	1aeb      	subs	r3, r5, r3
 80089da:	429a      	cmp	r2, r3
 80089dc:	ddb5      	ble.n	800894a <_dtoa_r+0xaba>
 80089de:	4659      	mov	r1, fp
 80089e0:	2300      	movs	r3, #0
 80089e2:	220a      	movs	r2, #10
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fda3 	bl	8009530 <__multadd>
 80089ea:	4683      	mov	fp, r0
 80089ec:	e7ea      	b.n	80089c4 <_dtoa_r+0xb34>
 80089ee:	bf00      	nop
 80089f0:	0800b4ab 	.word	0x0800b4ab
 80089f4:	0800b319 	.word	0x0800b319

080089f8 <__sflush_r>:
 80089f8:	898a      	ldrh	r2, [r1, #12]
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	4605      	mov	r5, r0
 8008a00:	0710      	lsls	r0, r2, #28
 8008a02:	460c      	mov	r4, r1
 8008a04:	d458      	bmi.n	8008ab8 <__sflush_r+0xc0>
 8008a06:	684b      	ldr	r3, [r1, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc05      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc02      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d0f9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a24:	682f      	ldr	r7, [r5, #0]
 8008a26:	6a21      	ldr	r1, [r4, #32]
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	d032      	beq.n	8008a92 <__sflush_r+0x9a>
 8008a2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	075a      	lsls	r2, r3, #29
 8008a32:	d505      	bpl.n	8008a40 <__sflush_r+0x48>
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	1ac0      	subs	r0, r0, r3
 8008a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a3a:	b10b      	cbz	r3, 8008a40 <__sflush_r+0x48>
 8008a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a3e:	1ac0      	subs	r0, r0, r3
 8008a40:	2300      	movs	r3, #0
 8008a42:	4602      	mov	r2, r0
 8008a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a46:	6a21      	ldr	r1, [r4, #32]
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b0      	blx	r6
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	d106      	bne.n	8008a60 <__sflush_r+0x68>
 8008a52:	6829      	ldr	r1, [r5, #0]
 8008a54:	291d      	cmp	r1, #29
 8008a56:	d848      	bhi.n	8008aea <__sflush_r+0xf2>
 8008a58:	4a29      	ldr	r2, [pc, #164]	; (8008b00 <__sflush_r+0x108>)
 8008a5a:	40ca      	lsrs	r2, r1
 8008a5c:	07d6      	lsls	r6, r2, #31
 8008a5e:	d544      	bpl.n	8008aea <__sflush_r+0xf2>
 8008a60:	2200      	movs	r2, #0
 8008a62:	6062      	str	r2, [r4, #4]
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	04d9      	lsls	r1, r3, #19
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	d504      	bpl.n	8008a76 <__sflush_r+0x7e>
 8008a6c:	1c42      	adds	r2, r0, #1
 8008a6e:	d101      	bne.n	8008a74 <__sflush_r+0x7c>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b903      	cbnz	r3, 8008a76 <__sflush_r+0x7e>
 8008a74:	6560      	str	r0, [r4, #84]	; 0x54
 8008a76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a78:	602f      	str	r7, [r5, #0]
 8008a7a:	2900      	cmp	r1, #0
 8008a7c:	d0c9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a82:	4299      	cmp	r1, r3
 8008a84:	d002      	beq.n	8008a8c <__sflush_r+0x94>
 8008a86:	4628      	mov	r0, r5
 8008a88:	f7fd fc34 	bl	80062f4 <_free_r>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	6360      	str	r0, [r4, #52]	; 0x34
 8008a90:	e7c0      	b.n	8008a14 <__sflush_r+0x1c>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b0      	blx	r6
 8008a98:	1c41      	adds	r1, r0, #1
 8008a9a:	d1c8      	bne.n	8008a2e <__sflush_r+0x36>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c5      	beq.n	8008a2e <__sflush_r+0x36>
 8008aa2:	2b1d      	cmp	r3, #29
 8008aa4:	d001      	beq.n	8008aaa <__sflush_r+0xb2>
 8008aa6:	2b16      	cmp	r3, #22
 8008aa8:	d101      	bne.n	8008aae <__sflush_r+0xb6>
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	e7b1      	b.n	8008a12 <__sflush_r+0x1a>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	e7ad      	b.n	8008a14 <__sflush_r+0x1c>
 8008ab8:	690f      	ldr	r7, [r1, #16]
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d0a9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008abe:	0793      	lsls	r3, r2, #30
 8008ac0:	bf18      	it	ne
 8008ac2:	2300      	movne	r3, #0
 8008ac4:	680e      	ldr	r6, [r1, #0]
 8008ac6:	bf08      	it	eq
 8008ac8:	694b      	ldreq	r3, [r1, #20]
 8008aca:	eba6 0807 	sub.w	r8, r6, r7
 8008ace:	600f      	str	r7, [r1, #0]
 8008ad0:	608b      	str	r3, [r1, #8]
 8008ad2:	f1b8 0f00 	cmp.w	r8, #0
 8008ad6:	dd9c      	ble.n	8008a12 <__sflush_r+0x1a>
 8008ad8:	4643      	mov	r3, r8
 8008ada:	463a      	mov	r2, r7
 8008adc:	6a21      	ldr	r1, [r4, #32]
 8008ade:	4628      	mov	r0, r5
 8008ae0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ae2:	47b0      	blx	r6
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	dc06      	bgt.n	8008af6 <__sflush_r+0xfe>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e78e      	b.n	8008a14 <__sflush_r+0x1c>
 8008af6:	4407      	add	r7, r0
 8008af8:	eba8 0800 	sub.w	r8, r8, r0
 8008afc:	e7e9      	b.n	8008ad2 <__sflush_r+0xda>
 8008afe:	bf00      	nop
 8008b00:	20400001 	.word	0x20400001

08008b04 <_fflush_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	b1db      	cbz	r3, 8008b46 <_fflush_r+0x42>
 8008b0e:	b118      	cbz	r0, 8008b18 <_fflush_r+0x14>
 8008b10:	6983      	ldr	r3, [r0, #24]
 8008b12:	b90b      	cbnz	r3, 8008b18 <_fflush_r+0x14>
 8008b14:	f000 f860 	bl	8008bd8 <__sinit>
 8008b18:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <_fflush_r+0x48>)
 8008b1a:	429c      	cmp	r4, r3
 8008b1c:	d109      	bne.n	8008b32 <_fflush_r+0x2e>
 8008b1e:	686c      	ldr	r4, [r5, #4]
 8008b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b24:	b17b      	cbz	r3, 8008b46 <_fflush_r+0x42>
 8008b26:	4621      	mov	r1, r4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b2e:	f7ff bf63 	b.w	80089f8 <__sflush_r>
 8008b32:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <_fflush_r+0x4c>)
 8008b34:	429c      	cmp	r4, r3
 8008b36:	d101      	bne.n	8008b3c <_fflush_r+0x38>
 8008b38:	68ac      	ldr	r4, [r5, #8]
 8008b3a:	e7f1      	b.n	8008b20 <_fflush_r+0x1c>
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <_fflush_r+0x50>)
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	bf08      	it	eq
 8008b42:	68ec      	ldreq	r4, [r5, #12]
 8008b44:	e7ec      	b.n	8008b20 <_fflush_r+0x1c>
 8008b46:	2000      	movs	r0, #0
 8008b48:	bd38      	pop	{r3, r4, r5, pc}
 8008b4a:	bf00      	nop
 8008b4c:	0800b348 	.word	0x0800b348
 8008b50:	0800b368 	.word	0x0800b368
 8008b54:	0800b328 	.word	0x0800b328

08008b58 <std>:
 8008b58:	2300      	movs	r3, #0
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b62:	6083      	str	r3, [r0, #8]
 8008b64:	8181      	strh	r1, [r0, #12]
 8008b66:	6643      	str	r3, [r0, #100]	; 0x64
 8008b68:	81c2      	strh	r2, [r0, #14]
 8008b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b6e:	6183      	str	r3, [r0, #24]
 8008b70:	4619      	mov	r1, r3
 8008b72:	2208      	movs	r2, #8
 8008b74:	305c      	adds	r0, #92	; 0x5c
 8008b76:	f7fd fbb4 	bl	80062e2 <memset>
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <std+0x38>)
 8008b7c:	6224      	str	r4, [r4, #32]
 8008b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <std+0x3c>)
 8008b82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <std+0x40>)
 8008b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <std+0x44>)
 8008b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	bf00      	nop
 8008b90:	08006e6d 	.word	0x08006e6d
 8008b94:	08006e93 	.word	0x08006e93
 8008b98:	08006ecb 	.word	0x08006ecb
 8008b9c:	08006eef 	.word	0x08006eef

08008ba0 <_cleanup_r>:
 8008ba0:	4901      	ldr	r1, [pc, #4]	; (8008ba8 <_cleanup_r+0x8>)
 8008ba2:	f000 b885 	b.w	8008cb0 <_fwalk_reent>
 8008ba6:	bf00      	nop
 8008ba8:	08008b05 	.word	0x08008b05

08008bac <__sfmoreglue>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	2568      	movs	r5, #104	; 0x68
 8008bb0:	1e4a      	subs	r2, r1, #1
 8008bb2:	4355      	muls	r5, r2
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bba:	f7fd fbe7 	bl	800638c <_malloc_r>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	b140      	cbz	r0, 8008bd4 <__sfmoreglue+0x28>
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008bc8:	300c      	adds	r0, #12
 8008bca:	60a0      	str	r0, [r4, #8]
 8008bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bd0:	f7fd fb87 	bl	80062e2 <memset>
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}

08008bd8 <__sinit>:
 8008bd8:	6983      	ldr	r3, [r0, #24]
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	bb33      	cbnz	r3, 8008c2e <__sinit+0x56>
 8008be0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008be4:	6503      	str	r3, [r0, #80]	; 0x50
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <__sinit+0x58>)
 8008be8:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <__sinit+0x5c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6282      	str	r2, [r0, #40]	; 0x28
 8008bee:	4298      	cmp	r0, r3
 8008bf0:	bf04      	itt	eq
 8008bf2:	2301      	moveq	r3, #1
 8008bf4:	6183      	streq	r3, [r0, #24]
 8008bf6:	f000 f81f 	bl	8008c38 <__sfp>
 8008bfa:	6060      	str	r0, [r4, #4]
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f81b 	bl	8008c38 <__sfp>
 8008c02:	60a0      	str	r0, [r4, #8]
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 f817 	bl	8008c38 <__sfp>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	60e0      	str	r0, [r4, #12]
 8008c0e:	2104      	movs	r1, #4
 8008c10:	6860      	ldr	r0, [r4, #4]
 8008c12:	f7ff ffa1 	bl	8008b58 <std>
 8008c16:	2201      	movs	r2, #1
 8008c18:	2109      	movs	r1, #9
 8008c1a:	68a0      	ldr	r0, [r4, #8]
 8008c1c:	f7ff ff9c 	bl	8008b58 <std>
 8008c20:	2202      	movs	r2, #2
 8008c22:	2112      	movs	r1, #18
 8008c24:	68e0      	ldr	r0, [r4, #12]
 8008c26:	f7ff ff97 	bl	8008b58 <std>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	61a3      	str	r3, [r4, #24]
 8008c2e:	bd10      	pop	{r4, pc}
 8008c30:	0800b188 	.word	0x0800b188
 8008c34:	08008ba1 	.word	0x08008ba1

08008c38 <__sfp>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <__sfp+0x70>)
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	681e      	ldr	r6, [r3, #0]
 8008c40:	69b3      	ldr	r3, [r6, #24]
 8008c42:	b913      	cbnz	r3, 8008c4a <__sfp+0x12>
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ffc7 	bl	8008bd8 <__sinit>
 8008c4a:	3648      	adds	r6, #72	; 0x48
 8008c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	d503      	bpl.n	8008c5c <__sfp+0x24>
 8008c54:	6833      	ldr	r3, [r6, #0]
 8008c56:	b133      	cbz	r3, 8008c66 <__sfp+0x2e>
 8008c58:	6836      	ldr	r6, [r6, #0]
 8008c5a:	e7f7      	b.n	8008c4c <__sfp+0x14>
 8008c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c60:	b16d      	cbz	r5, 8008c7e <__sfp+0x46>
 8008c62:	3468      	adds	r4, #104	; 0x68
 8008c64:	e7f4      	b.n	8008c50 <__sfp+0x18>
 8008c66:	2104      	movs	r1, #4
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff9f 	bl	8008bac <__sfmoreglue>
 8008c6e:	6030      	str	r0, [r6, #0]
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d1f1      	bne.n	8008c58 <__sfp+0x20>
 8008c74:	230c      	movs	r3, #12
 8008c76:	4604      	mov	r4, r0
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <__sfp+0x74>)
 8008c80:	6665      	str	r5, [r4, #100]	; 0x64
 8008c82:	e9c4 5500 	strd	r5, r5, [r4]
 8008c86:	60a5      	str	r5, [r4, #8]
 8008c88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008c8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008c90:	2208      	movs	r2, #8
 8008c92:	4629      	mov	r1, r5
 8008c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c98:	f7fd fb23 	bl	80062e2 <memset>
 8008c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ca4:	e7e9      	b.n	8008c7a <__sfp+0x42>
 8008ca6:	bf00      	nop
 8008ca8:	0800b188 	.word	0x0800b188
 8008cac:	ffff0001 	.word	0xffff0001

08008cb0 <_fwalk_reent>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4689      	mov	r9, r1
 8008cb8:	2600      	movs	r6, #0
 8008cba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cbe:	b914      	cbnz	r4, 8008cc6 <_fwalk_reent+0x16>
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008cca:	3f01      	subs	r7, #1
 8008ccc:	d501      	bpl.n	8008cd2 <_fwalk_reent+0x22>
 8008cce:	6824      	ldr	r4, [r4, #0]
 8008cd0:	e7f5      	b.n	8008cbe <_fwalk_reent+0xe>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d907      	bls.n	8008ce8 <_fwalk_reent+0x38>
 8008cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	d003      	beq.n	8008ce8 <_fwalk_reent+0x38>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	47c8      	blx	r9
 8008ce6:	4306      	orrs	r6, r0
 8008ce8:	3568      	adds	r5, #104	; 0x68
 8008cea:	e7ee      	b.n	8008cca <_fwalk_reent+0x1a>

08008cec <rshift>:
 8008cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cee:	6906      	ldr	r6, [r0, #16]
 8008cf0:	114b      	asrs	r3, r1, #5
 8008cf2:	429e      	cmp	r6, r3
 8008cf4:	f100 0414 	add.w	r4, r0, #20
 8008cf8:	dd31      	ble.n	8008d5e <rshift+0x72>
 8008cfa:	f011 011f 	ands.w	r1, r1, #31
 8008cfe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008d02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008d06:	d108      	bne.n	8008d1a <rshift+0x2e>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	42b2      	cmp	r2, r6
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	d211      	bcs.n	8008d34 <rshift+0x48>
 8008d10:	f852 3b04 	ldr.w	r3, [r2], #4
 8008d14:	f841 3b04 	str.w	r3, [r1], #4
 8008d18:	e7f7      	b.n	8008d0a <rshift+0x1e>
 8008d1a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008d1e:	4623      	mov	r3, r4
 8008d20:	f1c1 0c20 	rsb	ip, r1, #32
 8008d24:	40cd      	lsrs	r5, r1
 8008d26:	3204      	adds	r2, #4
 8008d28:	42b2      	cmp	r2, r6
 8008d2a:	4617      	mov	r7, r2
 8008d2c:	d30d      	bcc.n	8008d4a <rshift+0x5e>
 8008d2e:	601d      	str	r5, [r3, #0]
 8008d30:	b105      	cbz	r5, 8008d34 <rshift+0x48>
 8008d32:	3304      	adds	r3, #4
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	eba3 0204 	sub.w	r2, r3, r4
 8008d3a:	bf08      	it	eq
 8008d3c:	2300      	moveq	r3, #0
 8008d3e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d42:	6102      	str	r2, [r0, #16]
 8008d44:	bf08      	it	eq
 8008d46:	6143      	streq	r3, [r0, #20]
 8008d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d4a:	683f      	ldr	r7, [r7, #0]
 8008d4c:	fa07 f70c 	lsl.w	r7, r7, ip
 8008d50:	433d      	orrs	r5, r7
 8008d52:	f843 5b04 	str.w	r5, [r3], #4
 8008d56:	f852 5b04 	ldr.w	r5, [r2], #4
 8008d5a:	40cd      	lsrs	r5, r1
 8008d5c:	e7e4      	b.n	8008d28 <rshift+0x3c>
 8008d5e:	4623      	mov	r3, r4
 8008d60:	e7e8      	b.n	8008d34 <rshift+0x48>

08008d62 <__hexdig_fun>:
 8008d62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d66:	2b09      	cmp	r3, #9
 8008d68:	d802      	bhi.n	8008d70 <__hexdig_fun+0xe>
 8008d6a:	3820      	subs	r0, #32
 8008d6c:	b2c0      	uxtb	r0, r0
 8008d6e:	4770      	bx	lr
 8008d70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d801      	bhi.n	8008d7c <__hexdig_fun+0x1a>
 8008d78:	3847      	subs	r0, #71	; 0x47
 8008d7a:	e7f7      	b.n	8008d6c <__hexdig_fun+0xa>
 8008d7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d80:	2b05      	cmp	r3, #5
 8008d82:	d801      	bhi.n	8008d88 <__hexdig_fun+0x26>
 8008d84:	3827      	subs	r0, #39	; 0x27
 8008d86:	e7f1      	b.n	8008d6c <__hexdig_fun+0xa>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4770      	bx	lr

08008d8c <__gethex>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	b08b      	sub	sp, #44	; 0x2c
 8008d92:	9002      	str	r0, [sp, #8]
 8008d94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008d96:	468a      	mov	sl, r1
 8008d98:	4690      	mov	r8, r2
 8008d9a:	9306      	str	r3, [sp, #24]
 8008d9c:	f000 face 	bl	800933c <__localeconv_l>
 8008da0:	6803      	ldr	r3, [r0, #0]
 8008da2:	f04f 0b00 	mov.w	fp, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	f7f7 f9eb 	bl	8000184 <strlen>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	9001      	str	r0, [sp, #4]
 8008db2:	4403      	add	r3, r0
 8008db4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008db8:	9307      	str	r3, [sp, #28]
 8008dba:	f8da 3000 	ldr.w	r3, [sl]
 8008dbe:	3302      	adds	r3, #2
 8008dc0:	461f      	mov	r7, r3
 8008dc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008dc6:	2830      	cmp	r0, #48	; 0x30
 8008dc8:	d06c      	beq.n	8008ea4 <__gethex+0x118>
 8008dca:	f7ff ffca 	bl	8008d62 <__hexdig_fun>
 8008dce:	4604      	mov	r4, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d16a      	bne.n	8008eaa <__gethex+0x11e>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	9903      	ldr	r1, [sp, #12]
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7fe f894 	bl	8006f06 <strncmp>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d166      	bne.n	8008eb0 <__gethex+0x124>
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	5cf8      	ldrb	r0, [r7, r3]
 8008de6:	18fe      	adds	r6, r7, r3
 8008de8:	f7ff ffbb 	bl	8008d62 <__hexdig_fun>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d062      	beq.n	8008eb6 <__gethex+0x12a>
 8008df0:	4633      	mov	r3, r6
 8008df2:	7818      	ldrb	r0, [r3, #0]
 8008df4:	461f      	mov	r7, r3
 8008df6:	2830      	cmp	r0, #48	; 0x30
 8008df8:	f103 0301 	add.w	r3, r3, #1
 8008dfc:	d0f9      	beq.n	8008df2 <__gethex+0x66>
 8008dfe:	f7ff ffb0 	bl	8008d62 <__hexdig_fun>
 8008e02:	fab0 f580 	clz	r5, r0
 8008e06:	4634      	mov	r4, r6
 8008e08:	f04f 0b01 	mov.w	fp, #1
 8008e0c:	096d      	lsrs	r5, r5, #5
 8008e0e:	463a      	mov	r2, r7
 8008e10:	4616      	mov	r6, r2
 8008e12:	7830      	ldrb	r0, [r6, #0]
 8008e14:	3201      	adds	r2, #1
 8008e16:	f7ff ffa4 	bl	8008d62 <__hexdig_fun>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d1f8      	bne.n	8008e10 <__gethex+0x84>
 8008e1e:	9a01      	ldr	r2, [sp, #4]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7fe f86f 	bl	8006f06 <strncmp>
 8008e28:	b950      	cbnz	r0, 8008e40 <__gethex+0xb4>
 8008e2a:	b954      	cbnz	r4, 8008e42 <__gethex+0xb6>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	18f4      	adds	r4, r6, r3
 8008e30:	4622      	mov	r2, r4
 8008e32:	4616      	mov	r6, r2
 8008e34:	7830      	ldrb	r0, [r6, #0]
 8008e36:	3201      	adds	r2, #1
 8008e38:	f7ff ff93 	bl	8008d62 <__hexdig_fun>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1f8      	bne.n	8008e32 <__gethex+0xa6>
 8008e40:	b10c      	cbz	r4, 8008e46 <__gethex+0xba>
 8008e42:	1ba4      	subs	r4, r4, r6
 8008e44:	00a4      	lsls	r4, r4, #2
 8008e46:	7833      	ldrb	r3, [r6, #0]
 8008e48:	2b50      	cmp	r3, #80	; 0x50
 8008e4a:	d001      	beq.n	8008e50 <__gethex+0xc4>
 8008e4c:	2b70      	cmp	r3, #112	; 0x70
 8008e4e:	d140      	bne.n	8008ed2 <__gethex+0x146>
 8008e50:	7873      	ldrb	r3, [r6, #1]
 8008e52:	2b2b      	cmp	r3, #43	; 0x2b
 8008e54:	d031      	beq.n	8008eba <__gethex+0x12e>
 8008e56:	2b2d      	cmp	r3, #45	; 0x2d
 8008e58:	d033      	beq.n	8008ec2 <__gethex+0x136>
 8008e5a:	f04f 0900 	mov.w	r9, #0
 8008e5e:	1c71      	adds	r1, r6, #1
 8008e60:	7808      	ldrb	r0, [r1, #0]
 8008e62:	f7ff ff7e 	bl	8008d62 <__hexdig_fun>
 8008e66:	1e43      	subs	r3, r0, #1
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b18      	cmp	r3, #24
 8008e6c:	d831      	bhi.n	8008ed2 <__gethex+0x146>
 8008e6e:	f1a0 0210 	sub.w	r2, r0, #16
 8008e72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e76:	f7ff ff74 	bl	8008d62 <__hexdig_fun>
 8008e7a:	1e43      	subs	r3, r0, #1
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b18      	cmp	r3, #24
 8008e80:	d922      	bls.n	8008ec8 <__gethex+0x13c>
 8008e82:	f1b9 0f00 	cmp.w	r9, #0
 8008e86:	d000      	beq.n	8008e8a <__gethex+0xfe>
 8008e88:	4252      	negs	r2, r2
 8008e8a:	4414      	add	r4, r2
 8008e8c:	f8ca 1000 	str.w	r1, [sl]
 8008e90:	b30d      	cbz	r5, 8008ed6 <__gethex+0x14a>
 8008e92:	f1bb 0f00 	cmp.w	fp, #0
 8008e96:	bf0c      	ite	eq
 8008e98:	2706      	moveq	r7, #6
 8008e9a:	2700      	movne	r7, #0
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	b00b      	add	sp, #44	; 0x2c
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	f10b 0b01 	add.w	fp, fp, #1
 8008ea8:	e78a      	b.n	8008dc0 <__gethex+0x34>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	462c      	mov	r4, r5
 8008eae:	e7ae      	b.n	8008e0e <__gethex+0x82>
 8008eb0:	463e      	mov	r6, r7
 8008eb2:	2501      	movs	r5, #1
 8008eb4:	e7c7      	b.n	8008e46 <__gethex+0xba>
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	e7fb      	b.n	8008eb2 <__gethex+0x126>
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	1cb1      	adds	r1, r6, #2
 8008ec0:	e7ce      	b.n	8008e60 <__gethex+0xd4>
 8008ec2:	f04f 0901 	mov.w	r9, #1
 8008ec6:	e7fa      	b.n	8008ebe <__gethex+0x132>
 8008ec8:	230a      	movs	r3, #10
 8008eca:	fb03 0202 	mla	r2, r3, r2, r0
 8008ece:	3a10      	subs	r2, #16
 8008ed0:	e7cf      	b.n	8008e72 <__gethex+0xe6>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	e7da      	b.n	8008e8c <__gethex+0x100>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	1bf3      	subs	r3, r6, r7
 8008eda:	3b01      	subs	r3, #1
 8008edc:	2b07      	cmp	r3, #7
 8008ede:	dc49      	bgt.n	8008f74 <__gethex+0x1e8>
 8008ee0:	9802      	ldr	r0, [sp, #8]
 8008ee2:	f000 fada 	bl	800949a <_Balloc>
 8008ee6:	f04f 0b00 	mov.w	fp, #0
 8008eea:	4605      	mov	r5, r0
 8008eec:	46da      	mov	sl, fp
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	f100 0914 	add.w	r9, r0, #20
 8008ef4:	f1c3 0301 	rsb	r3, r3, #1
 8008ef8:	f8cd 9010 	str.w	r9, [sp, #16]
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	42b7      	cmp	r7, r6
 8008f00:	d33b      	bcc.n	8008f7a <__gethex+0x1ee>
 8008f02:	9804      	ldr	r0, [sp, #16]
 8008f04:	f840 ab04 	str.w	sl, [r0], #4
 8008f08:	eba0 0009 	sub.w	r0, r0, r9
 8008f0c:	1080      	asrs	r0, r0, #2
 8008f0e:	6128      	str	r0, [r5, #16]
 8008f10:	0147      	lsls	r7, r0, #5
 8008f12:	4650      	mov	r0, sl
 8008f14:	f000 fb85 	bl	8009622 <__hi0bits>
 8008f18:	f8d8 6000 	ldr.w	r6, [r8]
 8008f1c:	1a3f      	subs	r7, r7, r0
 8008f1e:	42b7      	cmp	r7, r6
 8008f20:	dd64      	ble.n	8008fec <__gethex+0x260>
 8008f22:	1bbf      	subs	r7, r7, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 fe8f 	bl	8009c4a <__any_on>
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	b178      	cbz	r0, 8008f50 <__gethex+0x1c4>
 8008f30:	f04f 0a01 	mov.w	sl, #1
 8008f34:	1e7b      	subs	r3, r7, #1
 8008f36:	1159      	asrs	r1, r3, #5
 8008f38:	f003 021f 	and.w	r2, r3, #31
 8008f3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f40:	fa0a f202 	lsl.w	r2, sl, r2
 8008f44:	420a      	tst	r2, r1
 8008f46:	d003      	beq.n	8008f50 <__gethex+0x1c4>
 8008f48:	4553      	cmp	r3, sl
 8008f4a:	dc46      	bgt.n	8008fda <__gethex+0x24e>
 8008f4c:	f04f 0a02 	mov.w	sl, #2
 8008f50:	4639      	mov	r1, r7
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7ff feca 	bl	8008cec <rshift>
 8008f58:	443c      	add	r4, r7
 8008f5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	da52      	bge.n	8009008 <__gethex+0x27c>
 8008f62:	4629      	mov	r1, r5
 8008f64:	9802      	ldr	r0, [sp, #8]
 8008f66:	f000 facc 	bl	8009502 <_Bfree>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f6e:	27a3      	movs	r7, #163	; 0xa3
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	e793      	b.n	8008e9c <__gethex+0x110>
 8008f74:	3101      	adds	r1, #1
 8008f76:	105b      	asrs	r3, r3, #1
 8008f78:	e7b0      	b.n	8008edc <__gethex+0x150>
 8008f7a:	1e73      	subs	r3, r6, #1
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	9a07      	ldr	r2, [sp, #28]
 8008f80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d018      	beq.n	8008fba <__gethex+0x22e>
 8008f88:	f1bb 0f20 	cmp.w	fp, #32
 8008f8c:	d107      	bne.n	8008f9e <__gethex+0x212>
 8008f8e:	9b04      	ldr	r3, [sp, #16]
 8008f90:	f8c3 a000 	str.w	sl, [r3]
 8008f94:	f04f 0a00 	mov.w	sl, #0
 8008f98:	46d3      	mov	fp, sl
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fa2:	f7ff fede 	bl	8008d62 <__hexdig_fun>
 8008fa6:	f000 000f 	and.w	r0, r0, #15
 8008faa:	fa00 f00b 	lsl.w	r0, r0, fp
 8008fae:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fb2:	f10b 0b04 	add.w	fp, fp, #4
 8008fb6:	9b05      	ldr	r3, [sp, #20]
 8008fb8:	e00d      	b.n	8008fd6 <__gethex+0x24a>
 8008fba:	9b05      	ldr	r3, [sp, #20]
 8008fbc:	9a08      	ldr	r2, [sp, #32]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	42bb      	cmp	r3, r7
 8008fc2:	d3e1      	bcc.n	8008f88 <__gethex+0x1fc>
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	9a01      	ldr	r2, [sp, #4]
 8008fc8:	9903      	ldr	r1, [sp, #12]
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	f7fd ff9b 	bl	8006f06 <strncmp>
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d1d8      	bne.n	8008f88 <__gethex+0x1fc>
 8008fd6:	461e      	mov	r6, r3
 8008fd8:	e791      	b.n	8008efe <__gethex+0x172>
 8008fda:	1eb9      	subs	r1, r7, #2
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fe34 	bl	8009c4a <__any_on>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d0b2      	beq.n	8008f4c <__gethex+0x1c0>
 8008fe6:	f04f 0a03 	mov.w	sl, #3
 8008fea:	e7b1      	b.n	8008f50 <__gethex+0x1c4>
 8008fec:	da09      	bge.n	8009002 <__gethex+0x276>
 8008fee:	1bf7      	subs	r7, r6, r7
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	463a      	mov	r2, r7
 8008ff4:	9802      	ldr	r0, [sp, #8]
 8008ff6:	f000 fc4f 	bl	8009898 <__lshift>
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	1be4      	subs	r4, r4, r7
 8008ffe:	f100 0914 	add.w	r9, r0, #20
 8009002:	f04f 0a00 	mov.w	sl, #0
 8009006:	e7a8      	b.n	8008f5a <__gethex+0x1ce>
 8009008:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800900c:	42a0      	cmp	r0, r4
 800900e:	dd6b      	ble.n	80090e8 <__gethex+0x35c>
 8009010:	1b04      	subs	r4, r0, r4
 8009012:	42a6      	cmp	r6, r4
 8009014:	dc2e      	bgt.n	8009074 <__gethex+0x2e8>
 8009016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d022      	beq.n	8009064 <__gethex+0x2d8>
 800901e:	2b03      	cmp	r3, #3
 8009020:	d024      	beq.n	800906c <__gethex+0x2e0>
 8009022:	2b01      	cmp	r3, #1
 8009024:	d115      	bne.n	8009052 <__gethex+0x2c6>
 8009026:	42a6      	cmp	r6, r4
 8009028:	d113      	bne.n	8009052 <__gethex+0x2c6>
 800902a:	2e01      	cmp	r6, #1
 800902c:	dc0b      	bgt.n	8009046 <__gethex+0x2ba>
 800902e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009032:	9a06      	ldr	r2, [sp, #24]
 8009034:	2762      	movs	r7, #98	; 0x62
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	2301      	movs	r3, #1
 800903a:	612b      	str	r3, [r5, #16]
 800903c:	f8c9 3000 	str.w	r3, [r9]
 8009040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009042:	601d      	str	r5, [r3, #0]
 8009044:	e72a      	b.n	8008e9c <__gethex+0x110>
 8009046:	1e71      	subs	r1, r6, #1
 8009048:	4628      	mov	r0, r5
 800904a:	f000 fdfe 	bl	8009c4a <__any_on>
 800904e:	2800      	cmp	r0, #0
 8009050:	d1ed      	bne.n	800902e <__gethex+0x2a2>
 8009052:	4629      	mov	r1, r5
 8009054:	9802      	ldr	r0, [sp, #8]
 8009056:	f000 fa54 	bl	8009502 <_Bfree>
 800905a:	2300      	movs	r3, #0
 800905c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800905e:	2750      	movs	r7, #80	; 0x50
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	e71b      	b.n	8008e9c <__gethex+0x110>
 8009064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0e1      	beq.n	800902e <__gethex+0x2a2>
 800906a:	e7f2      	b.n	8009052 <__gethex+0x2c6>
 800906c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1dd      	bne.n	800902e <__gethex+0x2a2>
 8009072:	e7ee      	b.n	8009052 <__gethex+0x2c6>
 8009074:	1e67      	subs	r7, r4, #1
 8009076:	f1ba 0f00 	cmp.w	sl, #0
 800907a:	d132      	bne.n	80090e2 <__gethex+0x356>
 800907c:	b127      	cbz	r7, 8009088 <__gethex+0x2fc>
 800907e:	4639      	mov	r1, r7
 8009080:	4628      	mov	r0, r5
 8009082:	f000 fde2 	bl	8009c4a <__any_on>
 8009086:	4682      	mov	sl, r0
 8009088:	2301      	movs	r3, #1
 800908a:	117a      	asrs	r2, r7, #5
 800908c:	f007 071f 	and.w	r7, r7, #31
 8009090:	fa03 f707 	lsl.w	r7, r3, r7
 8009094:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009098:	4621      	mov	r1, r4
 800909a:	421f      	tst	r7, r3
 800909c:	f04f 0702 	mov.w	r7, #2
 80090a0:	4628      	mov	r0, r5
 80090a2:	bf18      	it	ne
 80090a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80090a8:	1b36      	subs	r6, r6, r4
 80090aa:	f7ff fe1f 	bl	8008cec <rshift>
 80090ae:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80090b2:	f1ba 0f00 	cmp.w	sl, #0
 80090b6:	d048      	beq.n	800914a <__gethex+0x3be>
 80090b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d015      	beq.n	80090ec <__gethex+0x360>
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d017      	beq.n	80090f4 <__gethex+0x368>
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d109      	bne.n	80090dc <__gethex+0x350>
 80090c8:	f01a 0f02 	tst.w	sl, #2
 80090cc:	d006      	beq.n	80090dc <__gethex+0x350>
 80090ce:	f8d9 3000 	ldr.w	r3, [r9]
 80090d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80090d6:	f01a 0f01 	tst.w	sl, #1
 80090da:	d10e      	bne.n	80090fa <__gethex+0x36e>
 80090dc:	f047 0710 	orr.w	r7, r7, #16
 80090e0:	e033      	b.n	800914a <__gethex+0x3be>
 80090e2:	f04f 0a01 	mov.w	sl, #1
 80090e6:	e7cf      	b.n	8009088 <__gethex+0x2fc>
 80090e8:	2701      	movs	r7, #1
 80090ea:	e7e2      	b.n	80090b2 <__gethex+0x326>
 80090ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ee:	f1c3 0301 	rsb	r3, r3, #1
 80090f2:	9315      	str	r3, [sp, #84]	; 0x54
 80090f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f0      	beq.n	80090dc <__gethex+0x350>
 80090fa:	f04f 0c00 	mov.w	ip, #0
 80090fe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009102:	f105 0314 	add.w	r3, r5, #20
 8009106:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800910a:	eb03 010a 	add.w	r1, r3, sl
 800910e:	4618      	mov	r0, r3
 8009110:	f853 2b04 	ldr.w	r2, [r3], #4
 8009114:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009118:	d01c      	beq.n	8009154 <__gethex+0x3c8>
 800911a:	3201      	adds	r2, #1
 800911c:	6002      	str	r2, [r0, #0]
 800911e:	2f02      	cmp	r7, #2
 8009120:	f105 0314 	add.w	r3, r5, #20
 8009124:	d138      	bne.n	8009198 <__gethex+0x40c>
 8009126:	f8d8 2000 	ldr.w	r2, [r8]
 800912a:	3a01      	subs	r2, #1
 800912c:	42b2      	cmp	r2, r6
 800912e:	d10a      	bne.n	8009146 <__gethex+0x3ba>
 8009130:	2201      	movs	r2, #1
 8009132:	1171      	asrs	r1, r6, #5
 8009134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009138:	f006 061f 	and.w	r6, r6, #31
 800913c:	fa02 f606 	lsl.w	r6, r2, r6
 8009140:	421e      	tst	r6, r3
 8009142:	bf18      	it	ne
 8009144:	4617      	movne	r7, r2
 8009146:	f047 0720 	orr.w	r7, r7, #32
 800914a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800914c:	601d      	str	r5, [r3, #0]
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	601c      	str	r4, [r3, #0]
 8009152:	e6a3      	b.n	8008e9c <__gethex+0x110>
 8009154:	4299      	cmp	r1, r3
 8009156:	f843 cc04 	str.w	ip, [r3, #-4]
 800915a:	d8d8      	bhi.n	800910e <__gethex+0x382>
 800915c:	68ab      	ldr	r3, [r5, #8]
 800915e:	4599      	cmp	r9, r3
 8009160:	db12      	blt.n	8009188 <__gethex+0x3fc>
 8009162:	6869      	ldr	r1, [r5, #4]
 8009164:	9802      	ldr	r0, [sp, #8]
 8009166:	3101      	adds	r1, #1
 8009168:	f000 f997 	bl	800949a <_Balloc>
 800916c:	4683      	mov	fp, r0
 800916e:	692a      	ldr	r2, [r5, #16]
 8009170:	f105 010c 	add.w	r1, r5, #12
 8009174:	3202      	adds	r2, #2
 8009176:	0092      	lsls	r2, r2, #2
 8009178:	300c      	adds	r0, #12
 800917a:	f7fd f8a7 	bl	80062cc <memcpy>
 800917e:	4629      	mov	r1, r5
 8009180:	9802      	ldr	r0, [sp, #8]
 8009182:	f000 f9be 	bl	8009502 <_Bfree>
 8009186:	465d      	mov	r5, fp
 8009188:	692b      	ldr	r3, [r5, #16]
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	612a      	str	r2, [r5, #16]
 800918e:	2201      	movs	r2, #1
 8009190:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009194:	615a      	str	r2, [r3, #20]
 8009196:	e7c2      	b.n	800911e <__gethex+0x392>
 8009198:	692a      	ldr	r2, [r5, #16]
 800919a:	454a      	cmp	r2, r9
 800919c:	dd0b      	ble.n	80091b6 <__gethex+0x42a>
 800919e:	2101      	movs	r1, #1
 80091a0:	4628      	mov	r0, r5
 80091a2:	f7ff fda3 	bl	8008cec <rshift>
 80091a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091aa:	3401      	adds	r4, #1
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	f6ff aed8 	blt.w	8008f62 <__gethex+0x1d6>
 80091b2:	2701      	movs	r7, #1
 80091b4:	e7c7      	b.n	8009146 <__gethex+0x3ba>
 80091b6:	f016 061f 	ands.w	r6, r6, #31
 80091ba:	d0fa      	beq.n	80091b2 <__gethex+0x426>
 80091bc:	449a      	add	sl, r3
 80091be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80091c2:	f000 fa2e 	bl	8009622 <__hi0bits>
 80091c6:	f1c6 0620 	rsb	r6, r6, #32
 80091ca:	42b0      	cmp	r0, r6
 80091cc:	dbe7      	blt.n	800919e <__gethex+0x412>
 80091ce:	e7f0      	b.n	80091b2 <__gethex+0x426>

080091d0 <L_shift>:
 80091d0:	f1c2 0208 	rsb	r2, r2, #8
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	b570      	push	{r4, r5, r6, lr}
 80091d8:	f1c2 0620 	rsb	r6, r2, #32
 80091dc:	6843      	ldr	r3, [r0, #4]
 80091de:	6804      	ldr	r4, [r0, #0]
 80091e0:	fa03 f506 	lsl.w	r5, r3, r6
 80091e4:	432c      	orrs	r4, r5
 80091e6:	40d3      	lsrs	r3, r2
 80091e8:	6004      	str	r4, [r0, #0]
 80091ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80091ee:	4288      	cmp	r0, r1
 80091f0:	d3f4      	bcc.n	80091dc <L_shift+0xc>
 80091f2:	bd70      	pop	{r4, r5, r6, pc}

080091f4 <__match>:
 80091f4:	b530      	push	{r4, r5, lr}
 80091f6:	6803      	ldr	r3, [r0, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fe:	b914      	cbnz	r4, 8009206 <__match+0x12>
 8009200:	6003      	str	r3, [r0, #0]
 8009202:	2001      	movs	r0, #1
 8009204:	bd30      	pop	{r4, r5, pc}
 8009206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800920a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800920e:	2d19      	cmp	r5, #25
 8009210:	bf98      	it	ls
 8009212:	3220      	addls	r2, #32
 8009214:	42a2      	cmp	r2, r4
 8009216:	d0f0      	beq.n	80091fa <__match+0x6>
 8009218:	2000      	movs	r0, #0
 800921a:	e7f3      	b.n	8009204 <__match+0x10>

0800921c <__hexnan>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	2500      	movs	r5, #0
 8009222:	680b      	ldr	r3, [r1, #0]
 8009224:	4682      	mov	sl, r0
 8009226:	115f      	asrs	r7, r3, #5
 8009228:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800922c:	f013 031f 	ands.w	r3, r3, #31
 8009230:	bf18      	it	ne
 8009232:	3704      	addne	r7, #4
 8009234:	1f3e      	subs	r6, r7, #4
 8009236:	4690      	mov	r8, r2
 8009238:	46b1      	mov	r9, r6
 800923a:	4634      	mov	r4, r6
 800923c:	46ab      	mov	fp, r5
 800923e:	b087      	sub	sp, #28
 8009240:	6801      	ldr	r1, [r0, #0]
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	f847 5c04 	str.w	r5, [r7, #-4]
 8009248:	9502      	str	r5, [sp, #8]
 800924a:	784a      	ldrb	r2, [r1, #1]
 800924c:	1c4b      	adds	r3, r1, #1
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	b342      	cbz	r2, 80092a4 <__hexnan+0x88>
 8009252:	4610      	mov	r0, r2
 8009254:	9105      	str	r1, [sp, #20]
 8009256:	9204      	str	r2, [sp, #16]
 8009258:	f7ff fd83 	bl	8008d62 <__hexdig_fun>
 800925c:	2800      	cmp	r0, #0
 800925e:	d143      	bne.n	80092e8 <__hexnan+0xcc>
 8009260:	9a04      	ldr	r2, [sp, #16]
 8009262:	9905      	ldr	r1, [sp, #20]
 8009264:	2a20      	cmp	r2, #32
 8009266:	d818      	bhi.n	800929a <__hexnan+0x7e>
 8009268:	9b02      	ldr	r3, [sp, #8]
 800926a:	459b      	cmp	fp, r3
 800926c:	dd13      	ble.n	8009296 <__hexnan+0x7a>
 800926e:	454c      	cmp	r4, r9
 8009270:	d206      	bcs.n	8009280 <__hexnan+0x64>
 8009272:	2d07      	cmp	r5, #7
 8009274:	dc04      	bgt.n	8009280 <__hexnan+0x64>
 8009276:	462a      	mov	r2, r5
 8009278:	4649      	mov	r1, r9
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff ffa8 	bl	80091d0 <L_shift>
 8009280:	4544      	cmp	r4, r8
 8009282:	d944      	bls.n	800930e <__hexnan+0xf2>
 8009284:	2300      	movs	r3, #0
 8009286:	f1a4 0904 	sub.w	r9, r4, #4
 800928a:	f844 3c04 	str.w	r3, [r4, #-4]
 800928e:	461d      	mov	r5, r3
 8009290:	464c      	mov	r4, r9
 8009292:	f8cd b008 	str.w	fp, [sp, #8]
 8009296:	9903      	ldr	r1, [sp, #12]
 8009298:	e7d7      	b.n	800924a <__hexnan+0x2e>
 800929a:	2a29      	cmp	r2, #41	; 0x29
 800929c:	d14a      	bne.n	8009334 <__hexnan+0x118>
 800929e:	3102      	adds	r1, #2
 80092a0:	f8ca 1000 	str.w	r1, [sl]
 80092a4:	f1bb 0f00 	cmp.w	fp, #0
 80092a8:	d044      	beq.n	8009334 <__hexnan+0x118>
 80092aa:	454c      	cmp	r4, r9
 80092ac:	d206      	bcs.n	80092bc <__hexnan+0xa0>
 80092ae:	2d07      	cmp	r5, #7
 80092b0:	dc04      	bgt.n	80092bc <__hexnan+0xa0>
 80092b2:	462a      	mov	r2, r5
 80092b4:	4649      	mov	r1, r9
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7ff ff8a 	bl	80091d0 <L_shift>
 80092bc:	4544      	cmp	r4, r8
 80092be:	d928      	bls.n	8009312 <__hexnan+0xf6>
 80092c0:	4643      	mov	r3, r8
 80092c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	f843 2b04 	str.w	r2, [r3], #4
 80092cc:	d2f9      	bcs.n	80092c2 <__hexnan+0xa6>
 80092ce:	2200      	movs	r2, #0
 80092d0:	f843 2b04 	str.w	r2, [r3], #4
 80092d4:	429e      	cmp	r6, r3
 80092d6:	d2fb      	bcs.n	80092d0 <__hexnan+0xb4>
 80092d8:	6833      	ldr	r3, [r6, #0]
 80092da:	b91b      	cbnz	r3, 80092e4 <__hexnan+0xc8>
 80092dc:	4546      	cmp	r6, r8
 80092de:	d127      	bne.n	8009330 <__hexnan+0x114>
 80092e0:	2301      	movs	r3, #1
 80092e2:	6033      	str	r3, [r6, #0]
 80092e4:	2005      	movs	r0, #5
 80092e6:	e026      	b.n	8009336 <__hexnan+0x11a>
 80092e8:	3501      	adds	r5, #1
 80092ea:	2d08      	cmp	r5, #8
 80092ec:	f10b 0b01 	add.w	fp, fp, #1
 80092f0:	dd06      	ble.n	8009300 <__hexnan+0xe4>
 80092f2:	4544      	cmp	r4, r8
 80092f4:	d9cf      	bls.n	8009296 <__hexnan+0x7a>
 80092f6:	2300      	movs	r3, #0
 80092f8:	2501      	movs	r5, #1
 80092fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80092fe:	3c04      	subs	r4, #4
 8009300:	6822      	ldr	r2, [r4, #0]
 8009302:	f000 000f 	and.w	r0, r0, #15
 8009306:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	e7c3      	b.n	8009296 <__hexnan+0x7a>
 800930e:	2508      	movs	r5, #8
 8009310:	e7c1      	b.n	8009296 <__hexnan+0x7a>
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0df      	beq.n	80092d8 <__hexnan+0xbc>
 8009318:	f04f 32ff 	mov.w	r2, #4294967295
 800931c:	f1c3 0320 	rsb	r3, r3, #32
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
 8009324:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009328:	401a      	ands	r2, r3
 800932a:	f847 2c04 	str.w	r2, [r7, #-4]
 800932e:	e7d3      	b.n	80092d8 <__hexnan+0xbc>
 8009330:	3e04      	subs	r6, #4
 8009332:	e7d1      	b.n	80092d8 <__hexnan+0xbc>
 8009334:	2004      	movs	r0, #4
 8009336:	b007      	add	sp, #28
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800933c <__localeconv_l>:
 800933c:	30f0      	adds	r0, #240	; 0xf0
 800933e:	4770      	bx	lr

08009340 <_localeconv_r>:
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <_localeconv_r+0x14>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a18      	ldr	r0, [r3, #32]
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <_localeconv_r+0x18>)
 8009348:	2800      	cmp	r0, #0
 800934a:	bf08      	it	eq
 800934c:	4618      	moveq	r0, r3
 800934e:	30f0      	adds	r0, #240	; 0xf0
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000018 	.word	0x20000018
 8009358:	2000007c 	.word	0x2000007c

0800935c <_lseek_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	2200      	movs	r2, #0
 8009366:	4c05      	ldr	r4, [pc, #20]	; (800937c <_lseek_r+0x20>)
 8009368:	6022      	str	r2, [r4, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	f7fc fee3 	bl	8006136 <_lseek>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_lseek_r+0x1e>
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	b103      	cbz	r3, 800937a <_lseek_r+0x1e>
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	2000344c 	.word	0x2000344c

08009380 <__swhatbuf_r>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	460e      	mov	r6, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	b096      	sub	sp, #88	; 0x58
 800938a:	2900      	cmp	r1, #0
 800938c:	4614      	mov	r4, r2
 800938e:	461d      	mov	r5, r3
 8009390:	da07      	bge.n	80093a2 <__swhatbuf_r+0x22>
 8009392:	2300      	movs	r3, #0
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	89b3      	ldrh	r3, [r6, #12]
 8009398:	061a      	lsls	r2, r3, #24
 800939a:	d410      	bmi.n	80093be <__swhatbuf_r+0x3e>
 800939c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a0:	e00e      	b.n	80093c0 <__swhatbuf_r+0x40>
 80093a2:	466a      	mov	r2, sp
 80093a4:	f001 fa8e 	bl	800a8c4 <_fstat_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	dbf2      	blt.n	8009392 <__swhatbuf_r+0x12>
 80093ac:	9a01      	ldr	r2, [sp, #4]
 80093ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093b6:	425a      	negs	r2, r3
 80093b8:	415a      	adcs	r2, r3
 80093ba:	602a      	str	r2, [r5, #0]
 80093bc:	e7ee      	b.n	800939c <__swhatbuf_r+0x1c>
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	2000      	movs	r0, #0
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	b016      	add	sp, #88	; 0x58
 80093c6:	bd70      	pop	{r4, r5, r6, pc}

080093c8 <__smakebuf_r>:
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093cc:	079d      	lsls	r5, r3, #30
 80093ce:	4606      	mov	r6, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	d507      	bpl.n	80093e4 <__smakebuf_r+0x1c>
 80093d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	2301      	movs	r3, #1
 80093de:	6163      	str	r3, [r4, #20]
 80093e0:	b002      	add	sp, #8
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	ab01      	add	r3, sp, #4
 80093e6:	466a      	mov	r2, sp
 80093e8:	f7ff ffca 	bl	8009380 <__swhatbuf_r>
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7fc ffcb 	bl	800638c <_malloc_r>
 80093f6:	b948      	cbnz	r0, 800940c <__smakebuf_r+0x44>
 80093f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fc:	059a      	lsls	r2, r3, #22
 80093fe:	d4ef      	bmi.n	80093e0 <__smakebuf_r+0x18>
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	e7e3      	b.n	80093d4 <__smakebuf_r+0xc>
 800940c:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <__smakebuf_r+0x7c>)
 800940e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	6020      	str	r0, [r4, #0]
 8009414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	9b00      	ldr	r3, [sp, #0]
 800941c:	6120      	str	r0, [r4, #16]
 800941e:	6163      	str	r3, [r4, #20]
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	b15b      	cbz	r3, 800943c <__smakebuf_r+0x74>
 8009424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009428:	4630      	mov	r0, r6
 800942a:	f001 fa5d 	bl	800a8e8 <_isatty_r>
 800942e:	b128      	cbz	r0, 800943c <__smakebuf_r+0x74>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	81a3      	strh	r3, [r4, #12]
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	431d      	orrs	r5, r3
 8009440:	81a5      	strh	r5, [r4, #12]
 8009442:	e7cd      	b.n	80093e0 <__smakebuf_r+0x18>
 8009444:	08008ba1 	.word	0x08008ba1

08009448 <memchr>:
 8009448:	b510      	push	{r4, lr}
 800944a:	b2c9      	uxtb	r1, r1
 800944c:	4402      	add	r2, r0
 800944e:	4290      	cmp	r0, r2
 8009450:	4603      	mov	r3, r0
 8009452:	d101      	bne.n	8009458 <memchr+0x10>
 8009454:	2300      	movs	r3, #0
 8009456:	e003      	b.n	8009460 <memchr+0x18>
 8009458:	781c      	ldrb	r4, [r3, #0]
 800945a:	3001      	adds	r0, #1
 800945c:	428c      	cmp	r4, r1
 800945e:	d1f6      	bne.n	800944e <memchr+0x6>
 8009460:	4618      	mov	r0, r3
 8009462:	bd10      	pop	{r4, pc}

08009464 <memmove>:
 8009464:	4288      	cmp	r0, r1
 8009466:	b510      	push	{r4, lr}
 8009468:	eb01 0302 	add.w	r3, r1, r2
 800946c:	d807      	bhi.n	800947e <memmove+0x1a>
 800946e:	1e42      	subs	r2, r0, #1
 8009470:	4299      	cmp	r1, r3
 8009472:	d00a      	beq.n	800948a <memmove+0x26>
 8009474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009478:	f802 4f01 	strb.w	r4, [r2, #1]!
 800947c:	e7f8      	b.n	8009470 <memmove+0xc>
 800947e:	4283      	cmp	r3, r0
 8009480:	d9f5      	bls.n	800946e <memmove+0xa>
 8009482:	1881      	adds	r1, r0, r2
 8009484:	1ad2      	subs	r2, r2, r3
 8009486:	42d3      	cmn	r3, r2
 8009488:	d100      	bne.n	800948c <memmove+0x28>
 800948a:	bd10      	pop	{r4, pc}
 800948c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009490:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009494:	e7f7      	b.n	8009486 <memmove+0x22>

08009496 <__malloc_lock>:
 8009496:	4770      	bx	lr

08009498 <__malloc_unlock>:
 8009498:	4770      	bx	lr

0800949a <_Balloc>:
 800949a:	b570      	push	{r4, r5, r6, lr}
 800949c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800949e:	4604      	mov	r4, r0
 80094a0:	460e      	mov	r6, r1
 80094a2:	b93d      	cbnz	r5, 80094b4 <_Balloc+0x1a>
 80094a4:	2010      	movs	r0, #16
 80094a6:	f7fc feef 	bl	8006288 <malloc>
 80094aa:	6260      	str	r0, [r4, #36]	; 0x24
 80094ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094b0:	6005      	str	r5, [r0, #0]
 80094b2:	60c5      	str	r5, [r0, #12]
 80094b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80094b6:	68eb      	ldr	r3, [r5, #12]
 80094b8:	b183      	cbz	r3, 80094dc <_Balloc+0x42>
 80094ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80094c2:	b9b8      	cbnz	r0, 80094f4 <_Balloc+0x5a>
 80094c4:	2101      	movs	r1, #1
 80094c6:	fa01 f506 	lsl.w	r5, r1, r6
 80094ca:	1d6a      	adds	r2, r5, #5
 80094cc:	0092      	lsls	r2, r2, #2
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fbdc 	bl	8009c8c <_calloc_r>
 80094d4:	b160      	cbz	r0, 80094f0 <_Balloc+0x56>
 80094d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80094da:	e00e      	b.n	80094fa <_Balloc+0x60>
 80094dc:	2221      	movs	r2, #33	; 0x21
 80094de:	2104      	movs	r1, #4
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fbd3 	bl	8009c8c <_calloc_r>
 80094e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094e8:	60e8      	str	r0, [r5, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e4      	bne.n	80094ba <_Balloc+0x20>
 80094f0:	2000      	movs	r0, #0
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	6802      	ldr	r2, [r0, #0]
 80094f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80094fa:	2300      	movs	r3, #0
 80094fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009500:	e7f7      	b.n	80094f2 <_Balloc+0x58>

08009502 <_Bfree>:
 8009502:	b570      	push	{r4, r5, r6, lr}
 8009504:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009506:	4606      	mov	r6, r0
 8009508:	460d      	mov	r5, r1
 800950a:	b93c      	cbnz	r4, 800951c <_Bfree+0x1a>
 800950c:	2010      	movs	r0, #16
 800950e:	f7fc febb 	bl	8006288 <malloc>
 8009512:	6270      	str	r0, [r6, #36]	; 0x24
 8009514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009518:	6004      	str	r4, [r0, #0]
 800951a:	60c4      	str	r4, [r0, #12]
 800951c:	b13d      	cbz	r5, 800952e <_Bfree+0x2c>
 800951e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009520:	686a      	ldr	r2, [r5, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009528:	6029      	str	r1, [r5, #0]
 800952a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800952e:	bd70      	pop	{r4, r5, r6, pc}

08009530 <__multadd>:
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	461f      	mov	r7, r3
 8009536:	4606      	mov	r6, r0
 8009538:	460c      	mov	r4, r1
 800953a:	2300      	movs	r3, #0
 800953c:	690d      	ldr	r5, [r1, #16]
 800953e:	f101 0c14 	add.w	ip, r1, #20
 8009542:	f8dc 0000 	ldr.w	r0, [ip]
 8009546:	3301      	adds	r3, #1
 8009548:	b281      	uxth	r1, r0
 800954a:	fb02 7101 	mla	r1, r2, r1, r7
 800954e:	0c00      	lsrs	r0, r0, #16
 8009550:	0c0f      	lsrs	r7, r1, #16
 8009552:	fb02 7000 	mla	r0, r2, r0, r7
 8009556:	b289      	uxth	r1, r1
 8009558:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800955c:	429d      	cmp	r5, r3
 800955e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009562:	f84c 1b04 	str.w	r1, [ip], #4
 8009566:	dcec      	bgt.n	8009542 <__multadd+0x12>
 8009568:	b1d7      	cbz	r7, 80095a0 <__multadd+0x70>
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	42ab      	cmp	r3, r5
 800956e:	dc12      	bgt.n	8009596 <__multadd+0x66>
 8009570:	6861      	ldr	r1, [r4, #4]
 8009572:	4630      	mov	r0, r6
 8009574:	3101      	adds	r1, #1
 8009576:	f7ff ff90 	bl	800949a <_Balloc>
 800957a:	4680      	mov	r8, r0
 800957c:	6922      	ldr	r2, [r4, #16]
 800957e:	f104 010c 	add.w	r1, r4, #12
 8009582:	3202      	adds	r2, #2
 8009584:	0092      	lsls	r2, r2, #2
 8009586:	300c      	adds	r0, #12
 8009588:	f7fc fea0 	bl	80062cc <memcpy>
 800958c:	4621      	mov	r1, r4
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff ffb7 	bl	8009502 <_Bfree>
 8009594:	4644      	mov	r4, r8
 8009596:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800959a:	3501      	adds	r5, #1
 800959c:	615f      	str	r7, [r3, #20]
 800959e:	6125      	str	r5, [r4, #16]
 80095a0:	4620      	mov	r0, r4
 80095a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095a6 <__s2b>:
 80095a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095aa:	4615      	mov	r5, r2
 80095ac:	2209      	movs	r2, #9
 80095ae:	461f      	mov	r7, r3
 80095b0:	3308      	adds	r3, #8
 80095b2:	460c      	mov	r4, r1
 80095b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80095b8:	4606      	mov	r6, r0
 80095ba:	2201      	movs	r2, #1
 80095bc:	2100      	movs	r1, #0
 80095be:	429a      	cmp	r2, r3
 80095c0:	db20      	blt.n	8009604 <__s2b+0x5e>
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7ff ff69 	bl	800949a <_Balloc>
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	2d09      	cmp	r5, #9
 80095cc:	6143      	str	r3, [r0, #20]
 80095ce:	f04f 0301 	mov.w	r3, #1
 80095d2:	6103      	str	r3, [r0, #16]
 80095d4:	dd19      	ble.n	800960a <__s2b+0x64>
 80095d6:	f104 0809 	add.w	r8, r4, #9
 80095da:	46c1      	mov	r9, r8
 80095dc:	442c      	add	r4, r5
 80095de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80095e2:	4601      	mov	r1, r0
 80095e4:	3b30      	subs	r3, #48	; 0x30
 80095e6:	220a      	movs	r2, #10
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7ff ffa1 	bl	8009530 <__multadd>
 80095ee:	45a1      	cmp	r9, r4
 80095f0:	d1f5      	bne.n	80095de <__s2b+0x38>
 80095f2:	eb08 0405 	add.w	r4, r8, r5
 80095f6:	3c08      	subs	r4, #8
 80095f8:	1b2d      	subs	r5, r5, r4
 80095fa:	1963      	adds	r3, r4, r5
 80095fc:	42bb      	cmp	r3, r7
 80095fe:	db07      	blt.n	8009610 <__s2b+0x6a>
 8009600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009604:	0052      	lsls	r2, r2, #1
 8009606:	3101      	adds	r1, #1
 8009608:	e7d9      	b.n	80095be <__s2b+0x18>
 800960a:	340a      	adds	r4, #10
 800960c:	2509      	movs	r5, #9
 800960e:	e7f3      	b.n	80095f8 <__s2b+0x52>
 8009610:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009614:	4601      	mov	r1, r0
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	220a      	movs	r2, #10
 800961a:	4630      	mov	r0, r6
 800961c:	f7ff ff88 	bl	8009530 <__multadd>
 8009620:	e7eb      	b.n	80095fa <__s2b+0x54>

08009622 <__hi0bits>:
 8009622:	0c02      	lsrs	r2, r0, #16
 8009624:	0412      	lsls	r2, r2, #16
 8009626:	4603      	mov	r3, r0
 8009628:	b9b2      	cbnz	r2, 8009658 <__hi0bits+0x36>
 800962a:	0403      	lsls	r3, r0, #16
 800962c:	2010      	movs	r0, #16
 800962e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009632:	bf04      	itt	eq
 8009634:	021b      	lsleq	r3, r3, #8
 8009636:	3008      	addeq	r0, #8
 8009638:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800963c:	bf04      	itt	eq
 800963e:	011b      	lsleq	r3, r3, #4
 8009640:	3004      	addeq	r0, #4
 8009642:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009646:	bf04      	itt	eq
 8009648:	009b      	lsleq	r3, r3, #2
 800964a:	3002      	addeq	r0, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	db06      	blt.n	800965e <__hi0bits+0x3c>
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	d503      	bpl.n	800965c <__hi0bits+0x3a>
 8009654:	3001      	adds	r0, #1
 8009656:	4770      	bx	lr
 8009658:	2000      	movs	r0, #0
 800965a:	e7e8      	b.n	800962e <__hi0bits+0xc>
 800965c:	2020      	movs	r0, #32
 800965e:	4770      	bx	lr

08009660 <__lo0bits>:
 8009660:	6803      	ldr	r3, [r0, #0]
 8009662:	4601      	mov	r1, r0
 8009664:	f013 0207 	ands.w	r2, r3, #7
 8009668:	d00b      	beq.n	8009682 <__lo0bits+0x22>
 800966a:	07da      	lsls	r2, r3, #31
 800966c:	d423      	bmi.n	80096b6 <__lo0bits+0x56>
 800966e:	0798      	lsls	r0, r3, #30
 8009670:	bf49      	itett	mi
 8009672:	085b      	lsrmi	r3, r3, #1
 8009674:	089b      	lsrpl	r3, r3, #2
 8009676:	2001      	movmi	r0, #1
 8009678:	600b      	strmi	r3, [r1, #0]
 800967a:	bf5c      	itt	pl
 800967c:	600b      	strpl	r3, [r1, #0]
 800967e:	2002      	movpl	r0, #2
 8009680:	4770      	bx	lr
 8009682:	b298      	uxth	r0, r3
 8009684:	b9a8      	cbnz	r0, 80096b2 <__lo0bits+0x52>
 8009686:	2010      	movs	r0, #16
 8009688:	0c1b      	lsrs	r3, r3, #16
 800968a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800968e:	bf04      	itt	eq
 8009690:	0a1b      	lsreq	r3, r3, #8
 8009692:	3008      	addeq	r0, #8
 8009694:	071a      	lsls	r2, r3, #28
 8009696:	bf04      	itt	eq
 8009698:	091b      	lsreq	r3, r3, #4
 800969a:	3004      	addeq	r0, #4
 800969c:	079a      	lsls	r2, r3, #30
 800969e:	bf04      	itt	eq
 80096a0:	089b      	lsreq	r3, r3, #2
 80096a2:	3002      	addeq	r0, #2
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	d402      	bmi.n	80096ae <__lo0bits+0x4e>
 80096a8:	085b      	lsrs	r3, r3, #1
 80096aa:	d006      	beq.n	80096ba <__lo0bits+0x5a>
 80096ac:	3001      	adds	r0, #1
 80096ae:	600b      	str	r3, [r1, #0]
 80096b0:	4770      	bx	lr
 80096b2:	4610      	mov	r0, r2
 80096b4:	e7e9      	b.n	800968a <__lo0bits+0x2a>
 80096b6:	2000      	movs	r0, #0
 80096b8:	4770      	bx	lr
 80096ba:	2020      	movs	r0, #32
 80096bc:	4770      	bx	lr

080096be <__i2b>:
 80096be:	b510      	push	{r4, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	2101      	movs	r1, #1
 80096c4:	f7ff fee9 	bl	800949a <_Balloc>
 80096c8:	2201      	movs	r2, #1
 80096ca:	6144      	str	r4, [r0, #20]
 80096cc:	6102      	str	r2, [r0, #16]
 80096ce:	bd10      	pop	{r4, pc}

080096d0 <__multiply>:
 80096d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	4614      	mov	r4, r2
 80096d6:	690a      	ldr	r2, [r1, #16]
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	4688      	mov	r8, r1
 80096dc:	429a      	cmp	r2, r3
 80096de:	bfbe      	ittt	lt
 80096e0:	460b      	movlt	r3, r1
 80096e2:	46a0      	movlt	r8, r4
 80096e4:	461c      	movlt	r4, r3
 80096e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80096ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096f6:	eb07 0609 	add.w	r6, r7, r9
 80096fa:	42b3      	cmp	r3, r6
 80096fc:	bfb8      	it	lt
 80096fe:	3101      	addlt	r1, #1
 8009700:	f7ff fecb 	bl	800949a <_Balloc>
 8009704:	f100 0514 	add.w	r5, r0, #20
 8009708:	462b      	mov	r3, r5
 800970a:	2200      	movs	r2, #0
 800970c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009710:	4573      	cmp	r3, lr
 8009712:	d316      	bcc.n	8009742 <__multiply+0x72>
 8009714:	f104 0214 	add.w	r2, r4, #20
 8009718:	f108 0114 	add.w	r1, r8, #20
 800971c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009720:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	9201      	str	r2, [sp, #4]
 800972a:	4293      	cmp	r3, r2
 800972c:	d80c      	bhi.n	8009748 <__multiply+0x78>
 800972e:	2e00      	cmp	r6, #0
 8009730:	dd03      	ble.n	800973a <__multiply+0x6a>
 8009732:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009736:	2b00      	cmp	r3, #0
 8009738:	d05d      	beq.n	80097f6 <__multiply+0x126>
 800973a:	6106      	str	r6, [r0, #16]
 800973c:	b003      	add	sp, #12
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	f843 2b04 	str.w	r2, [r3], #4
 8009746:	e7e3      	b.n	8009710 <__multiply+0x40>
 8009748:	f8b2 b000 	ldrh.w	fp, [r2]
 800974c:	f1bb 0f00 	cmp.w	fp, #0
 8009750:	d023      	beq.n	800979a <__multiply+0xca>
 8009752:	4689      	mov	r9, r1
 8009754:	46ac      	mov	ip, r5
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	f859 4b04 	ldr.w	r4, [r9], #4
 800975e:	f8dc a000 	ldr.w	sl, [ip]
 8009762:	b2a3      	uxth	r3, r4
 8009764:	fa1f fa8a 	uxth.w	sl, sl
 8009768:	fb0b a303 	mla	r3, fp, r3, sl
 800976c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009770:	f8dc 4000 	ldr.w	r4, [ip]
 8009774:	4443      	add	r3, r8
 8009776:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800977a:	fb0b 840a 	mla	r4, fp, sl, r8
 800977e:	46e2      	mov	sl, ip
 8009780:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009784:	b29b      	uxth	r3, r3
 8009786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800978a:	454f      	cmp	r7, r9
 800978c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009790:	f84a 3b04 	str.w	r3, [sl], #4
 8009794:	d82b      	bhi.n	80097ee <__multiply+0x11e>
 8009796:	f8cc 8004 	str.w	r8, [ip, #4]
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	3204      	adds	r2, #4
 800979e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	d020      	beq.n	80097ea <__multiply+0x11a>
 80097a8:	4689      	mov	r9, r1
 80097aa:	46a8      	mov	r8, r5
 80097ac:	f04f 0b00 	mov.w	fp, #0
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	f8b9 c000 	ldrh.w	ip, [r9]
 80097b6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80097c0:	46c4      	mov	ip, r8
 80097c2:	445c      	add	r4, fp
 80097c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80097c8:	f84c 3b04 	str.w	r3, [ip], #4
 80097cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80097d0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	fb0a b303 	mla	r3, sl, r3, fp
 80097da:	454f      	cmp	r7, r9
 80097dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80097e0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80097e4:	d805      	bhi.n	80097f2 <__multiply+0x122>
 80097e6:	f8c8 3004 	str.w	r3, [r8, #4]
 80097ea:	3504      	adds	r5, #4
 80097ec:	e79b      	b.n	8009726 <__multiply+0x56>
 80097ee:	46d4      	mov	ip, sl
 80097f0:	e7b3      	b.n	800975a <__multiply+0x8a>
 80097f2:	46e0      	mov	r8, ip
 80097f4:	e7dd      	b.n	80097b2 <__multiply+0xe2>
 80097f6:	3e01      	subs	r6, #1
 80097f8:	e799      	b.n	800972e <__multiply+0x5e>
	...

080097fc <__pow5mult>:
 80097fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009800:	4615      	mov	r5, r2
 8009802:	f012 0203 	ands.w	r2, r2, #3
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	d007      	beq.n	800981c <__pow5mult+0x20>
 800980c:	4c21      	ldr	r4, [pc, #132]	; (8009894 <__pow5mult+0x98>)
 800980e:	3a01      	subs	r2, #1
 8009810:	2300      	movs	r3, #0
 8009812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009816:	f7ff fe8b 	bl	8009530 <__multadd>
 800981a:	4607      	mov	r7, r0
 800981c:	10ad      	asrs	r5, r5, #2
 800981e:	d035      	beq.n	800988c <__pow5mult+0x90>
 8009820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009822:	b93c      	cbnz	r4, 8009834 <__pow5mult+0x38>
 8009824:	2010      	movs	r0, #16
 8009826:	f7fc fd2f 	bl	8006288 <malloc>
 800982a:	6270      	str	r0, [r6, #36]	; 0x24
 800982c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009830:	6004      	str	r4, [r0, #0]
 8009832:	60c4      	str	r4, [r0, #12]
 8009834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800983c:	b94c      	cbnz	r4, 8009852 <__pow5mult+0x56>
 800983e:	f240 2171 	movw	r1, #625	; 0x271
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff3b 	bl	80096be <__i2b>
 8009848:	2300      	movs	r3, #0
 800984a:	4604      	mov	r4, r0
 800984c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009850:	6003      	str	r3, [r0, #0]
 8009852:	f04f 0800 	mov.w	r8, #0
 8009856:	07eb      	lsls	r3, r5, #31
 8009858:	d50a      	bpl.n	8009870 <__pow5mult+0x74>
 800985a:	4639      	mov	r1, r7
 800985c:	4622      	mov	r2, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff36 	bl	80096d0 <__multiply>
 8009864:	4681      	mov	r9, r0
 8009866:	4639      	mov	r1, r7
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff fe4a 	bl	8009502 <_Bfree>
 800986e:	464f      	mov	r7, r9
 8009870:	106d      	asrs	r5, r5, #1
 8009872:	d00b      	beq.n	800988c <__pow5mult+0x90>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	b938      	cbnz	r0, 8009888 <__pow5mult+0x8c>
 8009878:	4622      	mov	r2, r4
 800987a:	4621      	mov	r1, r4
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff ff27 	bl	80096d0 <__multiply>
 8009882:	6020      	str	r0, [r4, #0]
 8009884:	f8c0 8000 	str.w	r8, [r0]
 8009888:	4604      	mov	r4, r0
 800988a:	e7e4      	b.n	8009856 <__pow5mult+0x5a>
 800988c:	4638      	mov	r0, r7
 800988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009892:	bf00      	nop
 8009894:	0800b478 	.word	0x0800b478

08009898 <__lshift>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4607      	mov	r7, r0
 80098a0:	4616      	mov	r6, r2
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098a8:	eb0a 0903 	add.w	r9, sl, r3
 80098ac:	6849      	ldr	r1, [r1, #4]
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	f109 0501 	add.w	r5, r9, #1
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	db32      	blt.n	800991e <__lshift+0x86>
 80098b8:	4638      	mov	r0, r7
 80098ba:	f7ff fdee 	bl	800949a <_Balloc>
 80098be:	2300      	movs	r3, #0
 80098c0:	4680      	mov	r8, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	f100 0114 	add.w	r1, r0, #20
 80098c8:	4553      	cmp	r3, sl
 80098ca:	db2b      	blt.n	8009924 <__lshift+0x8c>
 80098cc:	6920      	ldr	r0, [r4, #16]
 80098ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098d2:	f104 0314 	add.w	r3, r4, #20
 80098d6:	f016 021f 	ands.w	r2, r6, #31
 80098da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098e2:	d025      	beq.n	8009930 <__lshift+0x98>
 80098e4:	2000      	movs	r0, #0
 80098e6:	f1c2 0e20 	rsb	lr, r2, #32
 80098ea:	468a      	mov	sl, r1
 80098ec:	681e      	ldr	r6, [r3, #0]
 80098ee:	4096      	lsls	r6, r2
 80098f0:	4330      	orrs	r0, r6
 80098f2:	f84a 0b04 	str.w	r0, [sl], #4
 80098f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80098fa:	459c      	cmp	ip, r3
 80098fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009900:	d814      	bhi.n	800992c <__lshift+0x94>
 8009902:	6048      	str	r0, [r1, #4]
 8009904:	b108      	cbz	r0, 800990a <__lshift+0x72>
 8009906:	f109 0502 	add.w	r5, r9, #2
 800990a:	3d01      	subs	r5, #1
 800990c:	4638      	mov	r0, r7
 800990e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009912:	4621      	mov	r1, r4
 8009914:	f7ff fdf5 	bl	8009502 <_Bfree>
 8009918:	4640      	mov	r0, r8
 800991a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991e:	3101      	adds	r1, #1
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	e7c7      	b.n	80098b4 <__lshift+0x1c>
 8009924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009928:	3301      	adds	r3, #1
 800992a:	e7cd      	b.n	80098c8 <__lshift+0x30>
 800992c:	4651      	mov	r1, sl
 800992e:	e7dc      	b.n	80098ea <__lshift+0x52>
 8009930:	3904      	subs	r1, #4
 8009932:	f853 2b04 	ldr.w	r2, [r3], #4
 8009936:	459c      	cmp	ip, r3
 8009938:	f841 2f04 	str.w	r2, [r1, #4]!
 800993c:	d8f9      	bhi.n	8009932 <__lshift+0x9a>
 800993e:	e7e4      	b.n	800990a <__lshift+0x72>

08009940 <__mcmp>:
 8009940:	6903      	ldr	r3, [r0, #16]
 8009942:	690a      	ldr	r2, [r1, #16]
 8009944:	b530      	push	{r4, r5, lr}
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	d10c      	bne.n	8009964 <__mcmp+0x24>
 800994a:	0092      	lsls	r2, r2, #2
 800994c:	3014      	adds	r0, #20
 800994e:	3114      	adds	r1, #20
 8009950:	1884      	adds	r4, r0, r2
 8009952:	4411      	add	r1, r2
 8009954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800995c:	4295      	cmp	r5, r2
 800995e:	d003      	beq.n	8009968 <__mcmp+0x28>
 8009960:	d305      	bcc.n	800996e <__mcmp+0x2e>
 8009962:	2301      	movs	r3, #1
 8009964:	4618      	mov	r0, r3
 8009966:	bd30      	pop	{r4, r5, pc}
 8009968:	42a0      	cmp	r0, r4
 800996a:	d3f3      	bcc.n	8009954 <__mcmp+0x14>
 800996c:	e7fa      	b.n	8009964 <__mcmp+0x24>
 800996e:	f04f 33ff 	mov.w	r3, #4294967295
 8009972:	e7f7      	b.n	8009964 <__mcmp+0x24>

08009974 <__mdiff>:
 8009974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009978:	460d      	mov	r5, r1
 800997a:	4607      	mov	r7, r0
 800997c:	4611      	mov	r1, r2
 800997e:	4628      	mov	r0, r5
 8009980:	4614      	mov	r4, r2
 8009982:	f7ff ffdd 	bl	8009940 <__mcmp>
 8009986:	1e06      	subs	r6, r0, #0
 8009988:	d108      	bne.n	800999c <__mdiff+0x28>
 800998a:	4631      	mov	r1, r6
 800998c:	4638      	mov	r0, r7
 800998e:	f7ff fd84 	bl	800949a <_Balloc>
 8009992:	2301      	movs	r3, #1
 8009994:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999c:	bfa4      	itt	ge
 800999e:	4623      	movge	r3, r4
 80099a0:	462c      	movge	r4, r5
 80099a2:	4638      	mov	r0, r7
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	bfa6      	itte	ge
 80099a8:	461d      	movge	r5, r3
 80099aa:	2600      	movge	r6, #0
 80099ac:	2601      	movlt	r6, #1
 80099ae:	f7ff fd74 	bl	800949a <_Balloc>
 80099b2:	f04f 0e00 	mov.w	lr, #0
 80099b6:	60c6      	str	r6, [r0, #12]
 80099b8:	692b      	ldr	r3, [r5, #16]
 80099ba:	6926      	ldr	r6, [r4, #16]
 80099bc:	f104 0214 	add.w	r2, r4, #20
 80099c0:	f105 0914 	add.w	r9, r5, #20
 80099c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80099c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80099cc:	f100 0114 	add.w	r1, r0, #20
 80099d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80099d4:	f859 5b04 	ldr.w	r5, [r9], #4
 80099d8:	fa1f f38a 	uxth.w	r3, sl
 80099dc:	4473      	add	r3, lr
 80099de:	b2ac      	uxth	r4, r5
 80099e0:	1b1b      	subs	r3, r3, r4
 80099e2:	0c2c      	lsrs	r4, r5, #16
 80099e4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80099e8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80099f2:	45c8      	cmp	r8, r9
 80099f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80099f8:	4694      	mov	ip, r2
 80099fa:	f841 4b04 	str.w	r4, [r1], #4
 80099fe:	d8e7      	bhi.n	80099d0 <__mdiff+0x5c>
 8009a00:	45bc      	cmp	ip, r7
 8009a02:	d304      	bcc.n	8009a0e <__mdiff+0x9a>
 8009a04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009a08:	b183      	cbz	r3, 8009a2c <__mdiff+0xb8>
 8009a0a:	6106      	str	r6, [r0, #16]
 8009a0c:	e7c4      	b.n	8009998 <__mdiff+0x24>
 8009a0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009a12:	b2a2      	uxth	r2, r4
 8009a14:	4472      	add	r2, lr
 8009a16:	1413      	asrs	r3, r2, #16
 8009a18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a1c:	b292      	uxth	r2, r2
 8009a1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a26:	f841 2b04 	str.w	r2, [r1], #4
 8009a2a:	e7e9      	b.n	8009a00 <__mdiff+0x8c>
 8009a2c:	3e01      	subs	r6, #1
 8009a2e:	e7e9      	b.n	8009a04 <__mdiff+0x90>

08009a30 <__ulp>:
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <__ulp+0x44>)
 8009a32:	400b      	ands	r3, r1
 8009a34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dd02      	ble.n	8009a42 <__ulp+0x12>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4770      	bx	lr
 8009a42:	425b      	negs	r3, r3
 8009a44:	151b      	asrs	r3, r3, #20
 8009a46:	2b13      	cmp	r3, #19
 8009a48:	f04f 0000 	mov.w	r0, #0
 8009a4c:	f04f 0100 	mov.w	r1, #0
 8009a50:	dc04      	bgt.n	8009a5c <__ulp+0x2c>
 8009a52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009a56:	fa42 f103 	asr.w	r1, r2, r3
 8009a5a:	4770      	bx	lr
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	3b14      	subs	r3, #20
 8009a60:	2b1e      	cmp	r3, #30
 8009a62:	bfce      	itee	gt
 8009a64:	4613      	movgt	r3, r2
 8009a66:	f1c3 031f 	rsble	r3, r3, #31
 8009a6a:	fa02 f303 	lslle.w	r3, r2, r3
 8009a6e:	4618      	mov	r0, r3
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	7ff00000 	.word	0x7ff00000

08009a78 <__b2d>:
 8009a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a7c:	6907      	ldr	r7, [r0, #16]
 8009a7e:	f100 0914 	add.w	r9, r0, #20
 8009a82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009a86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009a8a:	f1a7 0804 	sub.w	r8, r7, #4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff fdc7 	bl	8009622 <__hi0bits>
 8009a94:	f1c0 0320 	rsb	r3, r0, #32
 8009a98:	280a      	cmp	r0, #10
 8009a9a:	600b      	str	r3, [r1, #0]
 8009a9c:	491e      	ldr	r1, [pc, #120]	; (8009b18 <__b2d+0xa0>)
 8009a9e:	dc17      	bgt.n	8009ad0 <__b2d+0x58>
 8009aa0:	45c1      	cmp	r9, r8
 8009aa2:	bf28      	it	cs
 8009aa4:	2200      	movcs	r2, #0
 8009aa6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009aaa:	fa26 f30c 	lsr.w	r3, r6, ip
 8009aae:	bf38      	it	cc
 8009ab0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ab4:	ea43 0501 	orr.w	r5, r3, r1
 8009ab8:	f100 0315 	add.w	r3, r0, #21
 8009abc:	fa06 f303 	lsl.w	r3, r6, r3
 8009ac0:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ac4:	ea43 0402 	orr.w	r4, r3, r2
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad0:	45c1      	cmp	r9, r8
 8009ad2:	bf3a      	itte	cc
 8009ad4:	f1a7 0808 	subcc.w	r8, r7, #8
 8009ad8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009adc:	2200      	movcs	r2, #0
 8009ade:	f1b0 030b 	subs.w	r3, r0, #11
 8009ae2:	d015      	beq.n	8009b10 <__b2d+0x98>
 8009ae4:	409e      	lsls	r6, r3
 8009ae6:	f1c3 0720 	rsb	r7, r3, #32
 8009aea:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009aee:	fa22 f107 	lsr.w	r1, r2, r7
 8009af2:	45c8      	cmp	r8, r9
 8009af4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009af8:	ea46 0501 	orr.w	r5, r6, r1
 8009afc:	bf94      	ite	ls
 8009afe:	2100      	movls	r1, #0
 8009b00:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009b04:	fa02 f003 	lsl.w	r0, r2, r3
 8009b08:	40f9      	lsrs	r1, r7
 8009b0a:	ea40 0401 	orr.w	r4, r0, r1
 8009b0e:	e7db      	b.n	8009ac8 <__b2d+0x50>
 8009b10:	ea46 0501 	orr.w	r5, r6, r1
 8009b14:	4614      	mov	r4, r2
 8009b16:	e7d7      	b.n	8009ac8 <__b2d+0x50>
 8009b18:	3ff00000 	.word	0x3ff00000

08009b1c <__d2b>:
 8009b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b20:	461c      	mov	r4, r3
 8009b22:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009b26:	2101      	movs	r1, #1
 8009b28:	4690      	mov	r8, r2
 8009b2a:	f7ff fcb6 	bl	800949a <_Balloc>
 8009b2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009b32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009b36:	4607      	mov	r7, r0
 8009b38:	bb34      	cbnz	r4, 8009b88 <__d2b+0x6c>
 8009b3a:	9201      	str	r2, [sp, #4]
 8009b3c:	f1b8 0200 	subs.w	r2, r8, #0
 8009b40:	d027      	beq.n	8009b92 <__d2b+0x76>
 8009b42:	a802      	add	r0, sp, #8
 8009b44:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009b48:	f7ff fd8a 	bl	8009660 <__lo0bits>
 8009b4c:	9900      	ldr	r1, [sp, #0]
 8009b4e:	b1f0      	cbz	r0, 8009b8e <__d2b+0x72>
 8009b50:	9a01      	ldr	r2, [sp, #4]
 8009b52:	f1c0 0320 	rsb	r3, r0, #32
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	430b      	orrs	r3, r1
 8009b5c:	40c2      	lsrs	r2, r0
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf14      	ite	ne
 8009b68:	2102      	movne	r1, #2
 8009b6a:	2101      	moveq	r1, #1
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	6139      	str	r1, [r7, #16]
 8009b70:	b1c4      	cbz	r4, 8009ba4 <__d2b+0x88>
 8009b72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b76:	4404      	add	r4, r0
 8009b78:	6034      	str	r4, [r6, #0]
 8009b7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b7e:	6028      	str	r0, [r5, #0]
 8009b80:	4638      	mov	r0, r7
 8009b82:	b002      	add	sp, #8
 8009b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009b8c:	e7d5      	b.n	8009b3a <__d2b+0x1e>
 8009b8e:	6179      	str	r1, [r7, #20]
 8009b90:	e7e7      	b.n	8009b62 <__d2b+0x46>
 8009b92:	a801      	add	r0, sp, #4
 8009b94:	f7ff fd64 	bl	8009660 <__lo0bits>
 8009b98:	2101      	movs	r1, #1
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	6139      	str	r1, [r7, #16]
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	3020      	adds	r0, #32
 8009ba2:	e7e5      	b.n	8009b70 <__d2b+0x54>
 8009ba4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ba8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009bac:	6030      	str	r0, [r6, #0]
 8009bae:	6918      	ldr	r0, [r3, #16]
 8009bb0:	f7ff fd37 	bl	8009622 <__hi0bits>
 8009bb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009bb8:	e7e1      	b.n	8009b7e <__d2b+0x62>

08009bba <__ratio>:
 8009bba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbe:	4688      	mov	r8, r1
 8009bc0:	4669      	mov	r1, sp
 8009bc2:	4681      	mov	r9, r0
 8009bc4:	f7ff ff58 	bl	8009a78 <__b2d>
 8009bc8:	468b      	mov	fp, r1
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	4640      	mov	r0, r8
 8009bd0:	a901      	add	r1, sp, #4
 8009bd2:	f7ff ff51 	bl	8009a78 <__b2d>
 8009bd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009bde:	460d      	mov	r5, r1
 8009be0:	eba3 0c02 	sub.w	ip, r3, r2
 8009be4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009be8:	1a9b      	subs	r3, r3, r2
 8009bea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bfd5      	itete	le
 8009bf2:	460a      	movle	r2, r1
 8009bf4:	463a      	movgt	r2, r7
 8009bf6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bfa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009bfe:	bfd8      	it	le
 8009c00:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009c04:	462b      	mov	r3, r5
 8009c06:	4602      	mov	r2, r0
 8009c08:	4659      	mov	r1, fp
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f7f6 fda8 	bl	8000760 <__aeabi_ddiv>
 8009c10:	b003      	add	sp, #12
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c16 <__copybits>:
 8009c16:	3901      	subs	r1, #1
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	1149      	asrs	r1, r1, #5
 8009c1c:	6914      	ldr	r4, [r2, #16]
 8009c1e:	3101      	adds	r1, #1
 8009c20:	f102 0314 	add.w	r3, r2, #20
 8009c24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	4602      	mov	r2, r0
 8009c30:	d303      	bcc.n	8009c3a <__copybits+0x24>
 8009c32:	2300      	movs	r3, #0
 8009c34:	428a      	cmp	r2, r1
 8009c36:	d305      	bcc.n	8009c44 <__copybits+0x2e>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3e:	f840 2b04 	str.w	r2, [r0], #4
 8009c42:	e7f3      	b.n	8009c2c <__copybits+0x16>
 8009c44:	f842 3b04 	str.w	r3, [r2], #4
 8009c48:	e7f4      	b.n	8009c34 <__copybits+0x1e>

08009c4a <__any_on>:
 8009c4a:	f100 0214 	add.w	r2, r0, #20
 8009c4e:	6900      	ldr	r0, [r0, #16]
 8009c50:	114b      	asrs	r3, r1, #5
 8009c52:	4298      	cmp	r0, r3
 8009c54:	b510      	push	{r4, lr}
 8009c56:	db11      	blt.n	8009c7c <__any_on+0x32>
 8009c58:	dd0a      	ble.n	8009c70 <__any_on+0x26>
 8009c5a:	f011 011f 	ands.w	r1, r1, #31
 8009c5e:	d007      	beq.n	8009c70 <__any_on+0x26>
 8009c60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c64:	fa24 f001 	lsr.w	r0, r4, r1
 8009c68:	fa00 f101 	lsl.w	r1, r0, r1
 8009c6c:	428c      	cmp	r4, r1
 8009c6e:	d10b      	bne.n	8009c88 <__any_on+0x3e>
 8009c70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d803      	bhi.n	8009c80 <__any_on+0x36>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	bd10      	pop	{r4, pc}
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	e7f7      	b.n	8009c70 <__any_on+0x26>
 8009c80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d0f5      	beq.n	8009c74 <__any_on+0x2a>
 8009c88:	2001      	movs	r0, #1
 8009c8a:	e7f6      	b.n	8009c7a <__any_on+0x30>

08009c8c <_calloc_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	fb02 f401 	mul.w	r4, r2, r1
 8009c92:	4621      	mov	r1, r4
 8009c94:	f7fc fb7a 	bl	800638c <_malloc_r>
 8009c98:	4605      	mov	r5, r0
 8009c9a:	b118      	cbz	r0, 8009ca4 <_calloc_r+0x18>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f7fc fb1f 	bl	80062e2 <memset>
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}

08009ca8 <_realloc_r>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	4607      	mov	r7, r0
 8009cac:	4614      	mov	r4, r2
 8009cae:	460e      	mov	r6, r1
 8009cb0:	b921      	cbnz	r1, 8009cbc <_realloc_r+0x14>
 8009cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	f7fc bb68 	b.w	800638c <_malloc_r>
 8009cbc:	b922      	cbnz	r2, 8009cc8 <_realloc_r+0x20>
 8009cbe:	f7fc fb19 	bl	80062f4 <_free_r>
 8009cc2:	4625      	mov	r5, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc8:	f000 fe1e 	bl	800a908 <_malloc_usable_size_r>
 8009ccc:	42a0      	cmp	r0, r4
 8009cce:	d20f      	bcs.n	8009cf0 <_realloc_r+0x48>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7fc fb5a 	bl	800638c <_malloc_r>
 8009cd8:	4605      	mov	r5, r0
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0f2      	beq.n	8009cc4 <_realloc_r+0x1c>
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	f7fc faf3 	bl	80062cc <memcpy>
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7fc fb03 	bl	80062f4 <_free_r>
 8009cee:	e7e9      	b.n	8009cc4 <_realloc_r+0x1c>
 8009cf0:	4635      	mov	r5, r6
 8009cf2:	e7e7      	b.n	8009cc4 <_realloc_r+0x1c>

08009cf4 <__ssputs_r>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	688e      	ldr	r6, [r1, #8]
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	429e      	cmp	r6, r3
 8009cfe:	460c      	mov	r4, r1
 8009d00:	4690      	mov	r8, r2
 8009d02:	4699      	mov	r9, r3
 8009d04:	d837      	bhi.n	8009d76 <__ssputs_r+0x82>
 8009d06:	898a      	ldrh	r2, [r1, #12]
 8009d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d0c:	d031      	beq.n	8009d72 <__ssputs_r+0x7e>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	6825      	ldr	r5, [r4, #0]
 8009d12:	6909      	ldr	r1, [r1, #16]
 8009d14:	1a6f      	subs	r7, r5, r1
 8009d16:	6965      	ldr	r5, [r4, #20]
 8009d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d20:	f109 0301 	add.w	r3, r9, #1
 8009d24:	443b      	add	r3, r7
 8009d26:	429d      	cmp	r5, r3
 8009d28:	bf38      	it	cc
 8009d2a:	461d      	movcc	r5, r3
 8009d2c:	0553      	lsls	r3, r2, #21
 8009d2e:	d530      	bpl.n	8009d92 <__ssputs_r+0x9e>
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7fc fb2b 	bl	800638c <_malloc_r>
 8009d36:	4606      	mov	r6, r0
 8009d38:	b950      	cbnz	r0, 8009d50 <__ssputs_r+0x5c>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d40:	f8ca 3000 	str.w	r3, [sl]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d50:	463a      	mov	r2, r7
 8009d52:	6921      	ldr	r1, [r4, #16]
 8009d54:	f7fc faba 	bl	80062cc <memcpy>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	6126      	str	r6, [r4, #16]
 8009d66:	443e      	add	r6, r7
 8009d68:	6026      	str	r6, [r4, #0]
 8009d6a:	464e      	mov	r6, r9
 8009d6c:	6165      	str	r5, [r4, #20]
 8009d6e:	1bed      	subs	r5, r5, r7
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	454e      	cmp	r6, r9
 8009d74:	d900      	bls.n	8009d78 <__ssputs_r+0x84>
 8009d76:	464e      	mov	r6, r9
 8009d78:	4632      	mov	r2, r6
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	f7ff fb71 	bl	8009464 <memmove>
 8009d82:	68a3      	ldr	r3, [r4, #8]
 8009d84:	2000      	movs	r0, #0
 8009d86:	1b9b      	subs	r3, r3, r6
 8009d88:	60a3      	str	r3, [r4, #8]
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	441e      	add	r6, r3
 8009d8e:	6026      	str	r6, [r4, #0]
 8009d90:	e7dc      	b.n	8009d4c <__ssputs_r+0x58>
 8009d92:	462a      	mov	r2, r5
 8009d94:	f7ff ff88 	bl	8009ca8 <_realloc_r>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d1e2      	bne.n	8009d64 <__ssputs_r+0x70>
 8009d9e:	6921      	ldr	r1, [r4, #16]
 8009da0:	4650      	mov	r0, sl
 8009da2:	f7fc faa7 	bl	80062f4 <_free_r>
 8009da6:	e7c8      	b.n	8009d3a <__ssputs_r+0x46>

08009da8 <_svfiprintf_r>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	461d      	mov	r5, r3
 8009dae:	898b      	ldrh	r3, [r1, #12]
 8009db0:	b09d      	sub	sp, #116	; 0x74
 8009db2:	061f      	lsls	r7, r3, #24
 8009db4:	4680      	mov	r8, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	4616      	mov	r6, r2
 8009dba:	d50f      	bpl.n	8009ddc <_svfiprintf_r+0x34>
 8009dbc:	690b      	ldr	r3, [r1, #16]
 8009dbe:	b96b      	cbnz	r3, 8009ddc <_svfiprintf_r+0x34>
 8009dc0:	2140      	movs	r1, #64	; 0x40
 8009dc2:	f7fc fae3 	bl	800638c <_malloc_r>
 8009dc6:	6020      	str	r0, [r4, #0]
 8009dc8:	6120      	str	r0, [r4, #16]
 8009dca:	b928      	cbnz	r0, 8009dd8 <_svfiprintf_r+0x30>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	f8c8 3000 	str.w	r3, [r8]
 8009dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd6:	e0c8      	b.n	8009f6a <_svfiprintf_r+0x1c2>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	6163      	str	r3, [r4, #20]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9309      	str	r3, [sp, #36]	; 0x24
 8009de0:	2320      	movs	r3, #32
 8009de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009de6:	2330      	movs	r3, #48	; 0x30
 8009de8:	f04f 0b01 	mov.w	fp, #1
 8009dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009df0:	9503      	str	r5, [sp, #12]
 8009df2:	4637      	mov	r7, r6
 8009df4:	463d      	mov	r5, r7
 8009df6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dfa:	b10b      	cbz	r3, 8009e00 <_svfiprintf_r+0x58>
 8009dfc:	2b25      	cmp	r3, #37	; 0x25
 8009dfe:	d13e      	bne.n	8009e7e <_svfiprintf_r+0xd6>
 8009e00:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e04:	d00b      	beq.n	8009e1e <_svfiprintf_r+0x76>
 8009e06:	4653      	mov	r3, sl
 8009e08:	4632      	mov	r2, r6
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	f7ff ff71 	bl	8009cf4 <__ssputs_r>
 8009e12:	3001      	adds	r0, #1
 8009e14:	f000 80a4 	beq.w	8009f60 <_svfiprintf_r+0x1b8>
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	4453      	add	r3, sl
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	783b      	ldrb	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 809d 	beq.w	8009f60 <_svfiprintf_r+0x1b8>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e30:	9304      	str	r3, [sp, #16]
 8009e32:	9307      	str	r3, [sp, #28]
 8009e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e38:	931a      	str	r3, [sp, #104]	; 0x68
 8009e3a:	462f      	mov	r7, r5
 8009e3c:	2205      	movs	r2, #5
 8009e3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e42:	4850      	ldr	r0, [pc, #320]	; (8009f84 <_svfiprintf_r+0x1dc>)
 8009e44:	f7ff fb00 	bl	8009448 <memchr>
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	b9d0      	cbnz	r0, 8009e82 <_svfiprintf_r+0xda>
 8009e4c:	06d9      	lsls	r1, r3, #27
 8009e4e:	bf44      	itt	mi
 8009e50:	2220      	movmi	r2, #32
 8009e52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e56:	071a      	lsls	r2, r3, #28
 8009e58:	bf44      	itt	mi
 8009e5a:	222b      	movmi	r2, #43	; 0x2b
 8009e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e60:	782a      	ldrb	r2, [r5, #0]
 8009e62:	2a2a      	cmp	r2, #42	; 0x2a
 8009e64:	d015      	beq.n	8009e92 <_svfiprintf_r+0xea>
 8009e66:	462f      	mov	r7, r5
 8009e68:	2000      	movs	r0, #0
 8009e6a:	250a      	movs	r5, #10
 8009e6c:	9a07      	ldr	r2, [sp, #28]
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e74:	3b30      	subs	r3, #48	; 0x30
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d94d      	bls.n	8009f16 <_svfiprintf_r+0x16e>
 8009e7a:	b1b8      	cbz	r0, 8009eac <_svfiprintf_r+0x104>
 8009e7c:	e00f      	b.n	8009e9e <_svfiprintf_r+0xf6>
 8009e7e:	462f      	mov	r7, r5
 8009e80:	e7b8      	b.n	8009df4 <_svfiprintf_r+0x4c>
 8009e82:	4a40      	ldr	r2, [pc, #256]	; (8009f84 <_svfiprintf_r+0x1dc>)
 8009e84:	463d      	mov	r5, r7
 8009e86:	1a80      	subs	r0, r0, r2
 8009e88:	fa0b f000 	lsl.w	r0, fp, r0
 8009e8c:	4318      	orrs	r0, r3
 8009e8e:	9004      	str	r0, [sp, #16]
 8009e90:	e7d3      	b.n	8009e3a <_svfiprintf_r+0x92>
 8009e92:	9a03      	ldr	r2, [sp, #12]
 8009e94:	1d11      	adds	r1, r2, #4
 8009e96:	6812      	ldr	r2, [r2, #0]
 8009e98:	9103      	str	r1, [sp, #12]
 8009e9a:	2a00      	cmp	r2, #0
 8009e9c:	db01      	blt.n	8009ea2 <_svfiprintf_r+0xfa>
 8009e9e:	9207      	str	r2, [sp, #28]
 8009ea0:	e004      	b.n	8009eac <_svfiprintf_r+0x104>
 8009ea2:	4252      	negs	r2, r2
 8009ea4:	f043 0302 	orr.w	r3, r3, #2
 8009ea8:	9207      	str	r2, [sp, #28]
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	783b      	ldrb	r3, [r7, #0]
 8009eae:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb0:	d10c      	bne.n	8009ecc <_svfiprintf_r+0x124>
 8009eb2:	787b      	ldrb	r3, [r7, #1]
 8009eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009eb6:	d133      	bne.n	8009f20 <_svfiprintf_r+0x178>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	3702      	adds	r7, #2
 8009ebc:	1d1a      	adds	r2, r3, #4
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	9203      	str	r2, [sp, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bfb8      	it	lt
 8009ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eca:	9305      	str	r3, [sp, #20]
 8009ecc:	4d2e      	ldr	r5, [pc, #184]	; (8009f88 <_svfiprintf_r+0x1e0>)
 8009ece:	2203      	movs	r2, #3
 8009ed0:	7839      	ldrb	r1, [r7, #0]
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f7ff fab8 	bl	8009448 <memchr>
 8009ed8:	b138      	cbz	r0, 8009eea <_svfiprintf_r+0x142>
 8009eda:	2340      	movs	r3, #64	; 0x40
 8009edc:	1b40      	subs	r0, r0, r5
 8009ede:	fa03 f000 	lsl.w	r0, r3, r0
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	3701      	adds	r7, #1
 8009ee6:	4303      	orrs	r3, r0
 8009ee8:	9304      	str	r3, [sp, #16]
 8009eea:	7839      	ldrb	r1, [r7, #0]
 8009eec:	2206      	movs	r2, #6
 8009eee:	4827      	ldr	r0, [pc, #156]	; (8009f8c <_svfiprintf_r+0x1e4>)
 8009ef0:	1c7e      	adds	r6, r7, #1
 8009ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef6:	f7ff faa7 	bl	8009448 <memchr>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d038      	beq.n	8009f70 <_svfiprintf_r+0x1c8>
 8009efe:	4b24      	ldr	r3, [pc, #144]	; (8009f90 <_svfiprintf_r+0x1e8>)
 8009f00:	bb13      	cbnz	r3, 8009f48 <_svfiprintf_r+0x1a0>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	3307      	adds	r3, #7
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	9303      	str	r3, [sp, #12]
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	444b      	add	r3, r9
 8009f12:	9309      	str	r3, [sp, #36]	; 0x24
 8009f14:	e76d      	b.n	8009df2 <_svfiprintf_r+0x4a>
 8009f16:	fb05 3202 	mla	r2, r5, r2, r3
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	e7a6      	b.n	8009e6e <_svfiprintf_r+0xc6>
 8009f20:	2300      	movs	r3, #0
 8009f22:	250a      	movs	r5, #10
 8009f24:	4619      	mov	r1, r3
 8009f26:	3701      	adds	r7, #1
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f30:	3a30      	subs	r2, #48	; 0x30
 8009f32:	2a09      	cmp	r2, #9
 8009f34:	d903      	bls.n	8009f3e <_svfiprintf_r+0x196>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0c8      	beq.n	8009ecc <_svfiprintf_r+0x124>
 8009f3a:	9105      	str	r1, [sp, #20]
 8009f3c:	e7c6      	b.n	8009ecc <_svfiprintf_r+0x124>
 8009f3e:	fb05 2101 	mla	r1, r5, r1, r2
 8009f42:	2301      	movs	r3, #1
 8009f44:	4607      	mov	r7, r0
 8009f46:	e7f0      	b.n	8009f2a <_svfiprintf_r+0x182>
 8009f48:	ab03      	add	r3, sp, #12
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	4b11      	ldr	r3, [pc, #68]	; (8009f94 <_svfiprintf_r+0x1ec>)
 8009f50:	a904      	add	r1, sp, #16
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7fc fb06 	bl	8006564 <_printf_float>
 8009f58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f5c:	4681      	mov	r9, r0
 8009f5e:	d1d6      	bne.n	8009f0e <_svfiprintf_r+0x166>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	065b      	lsls	r3, r3, #25
 8009f64:	f53f af35 	bmi.w	8009dd2 <_svfiprintf_r+0x2a>
 8009f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f6a:	b01d      	add	sp, #116	; 0x74
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	4622      	mov	r2, r4
 8009f76:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <_svfiprintf_r+0x1ec>)
 8009f78:	a904      	add	r1, sp, #16
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	f7fc fd9e 	bl	8006abc <_printf_i>
 8009f80:	e7ea      	b.n	8009f58 <_svfiprintf_r+0x1b0>
 8009f82:	bf00      	nop
 8009f84:	0800b484 	.word	0x0800b484
 8009f88:	0800b48a 	.word	0x0800b48a
 8009f8c:	0800b48e 	.word	0x0800b48e
 8009f90:	08006565 	.word	0x08006565
 8009f94:	08009cf5 	.word	0x08009cf5

08009f98 <_sungetc_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	1c4b      	adds	r3, r1, #1
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	d103      	bne.n	8009fa8 <_sungetc_r+0x10>
 8009fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	8993      	ldrh	r3, [r2, #12]
 8009faa:	b2cd      	uxtb	r5, r1
 8009fac:	f023 0320 	bic.w	r3, r3, #32
 8009fb0:	8193      	strh	r3, [r2, #12]
 8009fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fb4:	6852      	ldr	r2, [r2, #4]
 8009fb6:	b18b      	cbz	r3, 8009fdc <_sungetc_r+0x44>
 8009fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	dd08      	ble.n	8009fd0 <_sungetc_r+0x38>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	1e5a      	subs	r2, r3, #1
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	6063      	str	r3, [r4, #4]
 8009fce:	e7e9      	b.n	8009fa4 <_sungetc_r+0xc>
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	f000 fc3f 	bl	800a854 <__submore>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d0f1      	beq.n	8009fbe <_sungetc_r+0x26>
 8009fda:	e7e1      	b.n	8009fa0 <_sungetc_r+0x8>
 8009fdc:	6921      	ldr	r1, [r4, #16]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	b151      	cbz	r1, 8009ff8 <_sungetc_r+0x60>
 8009fe2:	4299      	cmp	r1, r3
 8009fe4:	d208      	bcs.n	8009ff8 <_sungetc_r+0x60>
 8009fe6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009fea:	42a9      	cmp	r1, r5
 8009fec:	d104      	bne.n	8009ff8 <_sungetc_r+0x60>
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	6062      	str	r2, [r4, #4]
 8009ff6:	e7d5      	b.n	8009fa4 <_sungetc_r+0xc>
 8009ff8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a000:	6363      	str	r3, [r4, #52]	; 0x34
 800a002:	2303      	movs	r3, #3
 800a004:	63a3      	str	r3, [r4, #56]	; 0x38
 800a006:	4623      	mov	r3, r4
 800a008:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	2301      	movs	r3, #1
 800a010:	e7dc      	b.n	8009fcc <_sungetc_r+0x34>

0800a012 <__ssrefill_r>:
 800a012:	b510      	push	{r4, lr}
 800a014:	460c      	mov	r4, r1
 800a016:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a018:	b169      	cbz	r1, 800a036 <__ssrefill_r+0x24>
 800a01a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a01e:	4299      	cmp	r1, r3
 800a020:	d001      	beq.n	800a026 <__ssrefill_r+0x14>
 800a022:	f7fc f967 	bl	80062f4 <_free_r>
 800a026:	2000      	movs	r0, #0
 800a028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a02a:	6360      	str	r0, [r4, #52]	; 0x34
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	b113      	cbz	r3, 800a036 <__ssrefill_r+0x24>
 800a030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	bd10      	pop	{r4, pc}
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	2300      	movs	r3, #0
 800a040:	6063      	str	r3, [r4, #4]
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f043 0320 	orr.w	r3, r3, #32
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	e7f3      	b.n	800a034 <__ssrefill_r+0x22>

0800a04c <__ssvfiscanf_r>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	460c      	mov	r4, r1
 800a052:	2100      	movs	r1, #0
 800a054:	4606      	mov	r6, r0
 800a056:	4692      	mov	sl, r2
 800a058:	270a      	movs	r7, #10
 800a05a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a05e:	9144      	str	r1, [sp, #272]	; 0x110
 800a060:	9145      	str	r1, [sp, #276]	; 0x114
 800a062:	499e      	ldr	r1, [pc, #632]	; (800a2dc <__ssvfiscanf_r+0x290>)
 800a064:	f10d 0804 	add.w	r8, sp, #4
 800a068:	91a0      	str	r1, [sp, #640]	; 0x280
 800a06a:	499d      	ldr	r1, [pc, #628]	; (800a2e0 <__ssvfiscanf_r+0x294>)
 800a06c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800a2e4 <__ssvfiscanf_r+0x298>
 800a070:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a074:	91a1      	str	r1, [sp, #644]	; 0x284
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 812a 	beq.w	800a2d6 <__ssvfiscanf_r+0x28a>
 800a082:	4655      	mov	r5, sl
 800a084:	f7fc f8f2 	bl	800626c <__locale_ctype_ptr>
 800a088:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a08c:	4458      	add	r0, fp
 800a08e:	7843      	ldrb	r3, [r0, #1]
 800a090:	f013 0308 	ands.w	r3, r3, #8
 800a094:	d01c      	beq.n	800a0d0 <__ssvfiscanf_r+0x84>
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	dd12      	ble.n	800a0c2 <__ssvfiscanf_r+0x76>
 800a09c:	f7fc f8e6 	bl	800626c <__locale_ctype_ptr>
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	781a      	ldrb	r2, [r3, #0]
 800a0a4:	4410      	add	r0, r2
 800a0a6:	7842      	ldrb	r2, [r0, #1]
 800a0a8:	0712      	lsls	r2, r2, #28
 800a0aa:	d401      	bmi.n	800a0b0 <__ssvfiscanf_r+0x64>
 800a0ac:	46aa      	mov	sl, r5
 800a0ae:	e7e3      	b.n	800a078 <__ssvfiscanf_r+0x2c>
 800a0b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	3201      	adds	r2, #1
 800a0b6:	9245      	str	r2, [sp, #276]	; 0x114
 800a0b8:	6862      	ldr	r2, [r4, #4]
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	3a01      	subs	r2, #1
 800a0be:	6062      	str	r2, [r4, #4]
 800a0c0:	e7e9      	b.n	800a096 <__ssvfiscanf_r+0x4a>
 800a0c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4798      	blx	r3
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d0e6      	beq.n	800a09c <__ssvfiscanf_r+0x50>
 800a0ce:	e7ed      	b.n	800a0ac <__ssvfiscanf_r+0x60>
 800a0d0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a0d4:	f040 8082 	bne.w	800a1dc <__ssvfiscanf_r+0x190>
 800a0d8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a0da:	9341      	str	r3, [sp, #260]	; 0x104
 800a0dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e2:	d103      	bne.n	800a0ec <__ssvfiscanf_r+0xa0>
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f10a 0502 	add.w	r5, sl, #2
 800a0ea:	9341      	str	r3, [sp, #260]	; 0x104
 800a0ec:	46aa      	mov	sl, r5
 800a0ee:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a0f2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a0f6:	2a09      	cmp	r2, #9
 800a0f8:	d922      	bls.n	800a140 <__ssvfiscanf_r+0xf4>
 800a0fa:	2203      	movs	r2, #3
 800a0fc:	4879      	ldr	r0, [pc, #484]	; (800a2e4 <__ssvfiscanf_r+0x298>)
 800a0fe:	f7ff f9a3 	bl	8009448 <memchr>
 800a102:	b138      	cbz	r0, 800a114 <__ssvfiscanf_r+0xc8>
 800a104:	eba0 0309 	sub.w	r3, r0, r9
 800a108:	2001      	movs	r0, #1
 800a10a:	46aa      	mov	sl, r5
 800a10c:	4098      	lsls	r0, r3
 800a10e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a110:	4318      	orrs	r0, r3
 800a112:	9041      	str	r0, [sp, #260]	; 0x104
 800a114:	f89a 3000 	ldrb.w	r3, [sl]
 800a118:	f10a 0501 	add.w	r5, sl, #1
 800a11c:	2b67      	cmp	r3, #103	; 0x67
 800a11e:	d82b      	bhi.n	800a178 <__ssvfiscanf_r+0x12c>
 800a120:	2b65      	cmp	r3, #101	; 0x65
 800a122:	f080 809f 	bcs.w	800a264 <__ssvfiscanf_r+0x218>
 800a126:	2b47      	cmp	r3, #71	; 0x47
 800a128:	d810      	bhi.n	800a14c <__ssvfiscanf_r+0x100>
 800a12a:	2b45      	cmp	r3, #69	; 0x45
 800a12c:	f080 809a 	bcs.w	800a264 <__ssvfiscanf_r+0x218>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d06c      	beq.n	800a20e <__ssvfiscanf_r+0x1c2>
 800a134:	2b25      	cmp	r3, #37	; 0x25
 800a136:	d051      	beq.n	800a1dc <__ssvfiscanf_r+0x190>
 800a138:	2303      	movs	r3, #3
 800a13a:	9742      	str	r7, [sp, #264]	; 0x108
 800a13c:	9347      	str	r3, [sp, #284]	; 0x11c
 800a13e:	e027      	b.n	800a190 <__ssvfiscanf_r+0x144>
 800a140:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a142:	fb07 1303 	mla	r3, r7, r3, r1
 800a146:	3b30      	subs	r3, #48	; 0x30
 800a148:	9343      	str	r3, [sp, #268]	; 0x10c
 800a14a:	e7cf      	b.n	800a0ec <__ssvfiscanf_r+0xa0>
 800a14c:	2b5b      	cmp	r3, #91	; 0x5b
 800a14e:	d06a      	beq.n	800a226 <__ssvfiscanf_r+0x1da>
 800a150:	d80c      	bhi.n	800a16c <__ssvfiscanf_r+0x120>
 800a152:	2b58      	cmp	r3, #88	; 0x58
 800a154:	d1f0      	bne.n	800a138 <__ssvfiscanf_r+0xec>
 800a156:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15c:	9241      	str	r2, [sp, #260]	; 0x104
 800a15e:	2210      	movs	r2, #16
 800a160:	9242      	str	r2, [sp, #264]	; 0x108
 800a162:	2b6e      	cmp	r3, #110	; 0x6e
 800a164:	bf8c      	ite	hi
 800a166:	2304      	movhi	r3, #4
 800a168:	2303      	movls	r3, #3
 800a16a:	e010      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a16c:	2b63      	cmp	r3, #99	; 0x63
 800a16e:	d065      	beq.n	800a23c <__ssvfiscanf_r+0x1f0>
 800a170:	2b64      	cmp	r3, #100	; 0x64
 800a172:	d1e1      	bne.n	800a138 <__ssvfiscanf_r+0xec>
 800a174:	9742      	str	r7, [sp, #264]	; 0x108
 800a176:	e7f4      	b.n	800a162 <__ssvfiscanf_r+0x116>
 800a178:	2b70      	cmp	r3, #112	; 0x70
 800a17a:	d04b      	beq.n	800a214 <__ssvfiscanf_r+0x1c8>
 800a17c:	d826      	bhi.n	800a1cc <__ssvfiscanf_r+0x180>
 800a17e:	2b6e      	cmp	r3, #110	; 0x6e
 800a180:	d062      	beq.n	800a248 <__ssvfiscanf_r+0x1fc>
 800a182:	d84c      	bhi.n	800a21e <__ssvfiscanf_r+0x1d2>
 800a184:	2b69      	cmp	r3, #105	; 0x69
 800a186:	d1d7      	bne.n	800a138 <__ssvfiscanf_r+0xec>
 800a188:	2300      	movs	r3, #0
 800a18a:	9342      	str	r3, [sp, #264]	; 0x108
 800a18c:	2303      	movs	r3, #3
 800a18e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a190:	6863      	ldr	r3, [r4, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dd68      	ble.n	800a268 <__ssvfiscanf_r+0x21c>
 800a196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a198:	0659      	lsls	r1, r3, #25
 800a19a:	d407      	bmi.n	800a1ac <__ssvfiscanf_r+0x160>
 800a19c:	f7fc f866 	bl	800626c <__locale_ctype_ptr>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	781a      	ldrb	r2, [r3, #0]
 800a1a4:	4410      	add	r0, r2
 800a1a6:	7842      	ldrb	r2, [r0, #1]
 800a1a8:	0712      	lsls	r2, r2, #28
 800a1aa:	d464      	bmi.n	800a276 <__ssvfiscanf_r+0x22a>
 800a1ac:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	dc73      	bgt.n	800a29a <__ssvfiscanf_r+0x24e>
 800a1b2:	466b      	mov	r3, sp
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	a941      	add	r1, sp, #260	; 0x104
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f000 f897 	bl	800a2ec <_scanf_chars>
 800a1be:	2801      	cmp	r0, #1
 800a1c0:	f000 8089 	beq.w	800a2d6 <__ssvfiscanf_r+0x28a>
 800a1c4:	2802      	cmp	r0, #2
 800a1c6:	f47f af71 	bne.w	800a0ac <__ssvfiscanf_r+0x60>
 800a1ca:	e01d      	b.n	800a208 <__ssvfiscanf_r+0x1bc>
 800a1cc:	2b75      	cmp	r3, #117	; 0x75
 800a1ce:	d0d1      	beq.n	800a174 <__ssvfiscanf_r+0x128>
 800a1d0:	2b78      	cmp	r3, #120	; 0x78
 800a1d2:	d0c0      	beq.n	800a156 <__ssvfiscanf_r+0x10a>
 800a1d4:	2b73      	cmp	r3, #115	; 0x73
 800a1d6:	d1af      	bne.n	800a138 <__ssvfiscanf_r+0xec>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e7d8      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dd0c      	ble.n	800a1fc <__ssvfiscanf_r+0x1b0>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	455a      	cmp	r2, fp
 800a1e8:	d175      	bne.n	800a2d6 <__ssvfiscanf_r+0x28a>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	6862      	ldr	r2, [r4, #4]
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	6062      	str	r2, [r4, #4]
 800a1f8:	9345      	str	r3, [sp, #276]	; 0x114
 800a1fa:	e757      	b.n	800a0ac <__ssvfiscanf_r+0x60>
 800a1fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1fe:	4621      	mov	r1, r4
 800a200:	4630      	mov	r0, r6
 800a202:	4798      	blx	r3
 800a204:	2800      	cmp	r0, #0
 800a206:	d0ec      	beq.n	800a1e2 <__ssvfiscanf_r+0x196>
 800a208:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d159      	bne.n	800a2c2 <__ssvfiscanf_r+0x276>
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295
 800a212:	e05c      	b.n	800a2ce <__ssvfiscanf_r+0x282>
 800a214:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a216:	f042 0220 	orr.w	r2, r2, #32
 800a21a:	9241      	str	r2, [sp, #260]	; 0x104
 800a21c:	e79b      	b.n	800a156 <__ssvfiscanf_r+0x10a>
 800a21e:	2308      	movs	r3, #8
 800a220:	9342      	str	r3, [sp, #264]	; 0x108
 800a222:	2304      	movs	r3, #4
 800a224:	e7b3      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a226:	4629      	mov	r1, r5
 800a228:	4640      	mov	r0, r8
 800a22a:	f000 f9c9 	bl	800a5c0 <__sccl>
 800a22e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a230:	4605      	mov	r5, r0
 800a232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a236:	9341      	str	r3, [sp, #260]	; 0x104
 800a238:	2301      	movs	r3, #1
 800a23a:	e7a8      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a23c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a242:	9341      	str	r3, [sp, #260]	; 0x104
 800a244:	2300      	movs	r3, #0
 800a246:	e7a2      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a248:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a24a:	06c3      	lsls	r3, r0, #27
 800a24c:	f53f af2e 	bmi.w	800a0ac <__ssvfiscanf_r+0x60>
 800a250:	9b00      	ldr	r3, [sp, #0]
 800a252:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a254:	1d19      	adds	r1, r3, #4
 800a256:	9100      	str	r1, [sp, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	07c0      	lsls	r0, r0, #31
 800a25c:	bf4c      	ite	mi
 800a25e:	801a      	strhmi	r2, [r3, #0]
 800a260:	601a      	strpl	r2, [r3, #0]
 800a262:	e723      	b.n	800a0ac <__ssvfiscanf_r+0x60>
 800a264:	2305      	movs	r3, #5
 800a266:	e792      	b.n	800a18e <__ssvfiscanf_r+0x142>
 800a268:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a26a:	4621      	mov	r1, r4
 800a26c:	4630      	mov	r0, r6
 800a26e:	4798      	blx	r3
 800a270:	2800      	cmp	r0, #0
 800a272:	d090      	beq.n	800a196 <__ssvfiscanf_r+0x14a>
 800a274:	e7c8      	b.n	800a208 <__ssvfiscanf_r+0x1bc>
 800a276:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a278:	3201      	adds	r2, #1
 800a27a:	9245      	str	r2, [sp, #276]	; 0x114
 800a27c:	6862      	ldr	r2, [r4, #4]
 800a27e:	3a01      	subs	r2, #1
 800a280:	2a00      	cmp	r2, #0
 800a282:	6062      	str	r2, [r4, #4]
 800a284:	dd02      	ble.n	800a28c <__ssvfiscanf_r+0x240>
 800a286:	3301      	adds	r3, #1
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	e787      	b.n	800a19c <__ssvfiscanf_r+0x150>
 800a28c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a28e:	4621      	mov	r1, r4
 800a290:	4630      	mov	r0, r6
 800a292:	4798      	blx	r3
 800a294:	2800      	cmp	r0, #0
 800a296:	d081      	beq.n	800a19c <__ssvfiscanf_r+0x150>
 800a298:	e7b6      	b.n	800a208 <__ssvfiscanf_r+0x1bc>
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	dc06      	bgt.n	800a2ac <__ssvfiscanf_r+0x260>
 800a29e:	466b      	mov	r3, sp
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	a941      	add	r1, sp, #260	; 0x104
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	f000 f883 	bl	800a3b0 <_scanf_i>
 800a2aa:	e788      	b.n	800a1be <__ssvfiscanf_r+0x172>
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <__ssvfiscanf_r+0x29c>)
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f43f aefc 	beq.w	800a0ac <__ssvfiscanf_r+0x60>
 800a2b4:	466b      	mov	r3, sp
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	a941      	add	r1, sp, #260	; 0x104
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f3af 8000 	nop.w
 800a2c0:	e77d      	b.n	800a1be <__ssvfiscanf_r+0x172>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a2c8:	bf18      	it	ne
 800a2ca:	f04f 30ff 	movne.w	r0, #4294967295
 800a2ce:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a2d8:	e7f9      	b.n	800a2ce <__ssvfiscanf_r+0x282>
 800a2da:	bf00      	nop
 800a2dc:	08009f99 	.word	0x08009f99
 800a2e0:	0800a013 	.word	0x0800a013
 800a2e4:	0800b48a 	.word	0x0800b48a
 800a2e8:	00000000 	.word	0x00000000

0800a2ec <_scanf_chars>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	4615      	mov	r5, r2
 800a2f2:	688a      	ldr	r2, [r1, #8]
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	b932      	cbnz	r2, 800a308 <_scanf_chars+0x1c>
 800a2fa:	698a      	ldr	r2, [r1, #24]
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	bf14      	ite	ne
 800a300:	f04f 32ff 	movne.w	r2, #4294967295
 800a304:	2201      	moveq	r2, #1
 800a306:	608a      	str	r2, [r1, #8]
 800a308:	2600      	movs	r6, #0
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	06d1      	lsls	r1, r2, #27
 800a30e:	bf5f      	itttt	pl
 800a310:	681a      	ldrpl	r2, [r3, #0]
 800a312:	1d11      	addpl	r1, r2, #4
 800a314:	6019      	strpl	r1, [r3, #0]
 800a316:	6817      	ldrpl	r7, [r2, #0]
 800a318:	69a3      	ldr	r3, [r4, #24]
 800a31a:	b1db      	cbz	r3, 800a354 <_scanf_chars+0x68>
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d107      	bne.n	800a330 <_scanf_chars+0x44>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	6962      	ldr	r2, [r4, #20]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	5cd3      	ldrb	r3, [r2, r3]
 800a328:	b9a3      	cbnz	r3, 800a354 <_scanf_chars+0x68>
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d131      	bne.n	800a392 <_scanf_chars+0xa6>
 800a32e:	e006      	b.n	800a33e <_scanf_chars+0x52>
 800a330:	2b02      	cmp	r3, #2
 800a332:	d007      	beq.n	800a344 <_scanf_chars+0x58>
 800a334:	2e00      	cmp	r6, #0
 800a336:	d12c      	bne.n	800a392 <_scanf_chars+0xa6>
 800a338:	69a3      	ldr	r3, [r4, #24]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d129      	bne.n	800a392 <_scanf_chars+0xa6>
 800a33e:	2001      	movs	r0, #1
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a344:	f7fb ff92 	bl	800626c <__locale_ctype_ptr>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	4418      	add	r0, r3
 800a34e:	7843      	ldrb	r3, [r0, #1]
 800a350:	071b      	lsls	r3, r3, #28
 800a352:	d4ef      	bmi.n	800a334 <_scanf_chars+0x48>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	3601      	adds	r6, #1
 800a358:	06da      	lsls	r2, r3, #27
 800a35a:	bf5e      	ittt	pl
 800a35c:	682b      	ldrpl	r3, [r5, #0]
 800a35e:	781b      	ldrbpl	r3, [r3, #0]
 800a360:	703b      	strbpl	r3, [r7, #0]
 800a362:	682a      	ldr	r2, [r5, #0]
 800a364:	686b      	ldr	r3, [r5, #4]
 800a366:	f102 0201 	add.w	r2, r2, #1
 800a36a:	602a      	str	r2, [r5, #0]
 800a36c:	68a2      	ldr	r2, [r4, #8]
 800a36e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a372:	f102 32ff 	add.w	r2, r2, #4294967295
 800a376:	606b      	str	r3, [r5, #4]
 800a378:	bf58      	it	pl
 800a37a:	3701      	addpl	r7, #1
 800a37c:	60a2      	str	r2, [r4, #8]
 800a37e:	b142      	cbz	r2, 800a392 <_scanf_chars+0xa6>
 800a380:	2b00      	cmp	r3, #0
 800a382:	dcc9      	bgt.n	800a318 <_scanf_chars+0x2c>
 800a384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a388:	4629      	mov	r1, r5
 800a38a:	4640      	mov	r0, r8
 800a38c:	4798      	blx	r3
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0c2      	beq.n	800a318 <_scanf_chars+0x2c>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	f013 0310 	ands.w	r3, r3, #16
 800a398:	d105      	bne.n	800a3a6 <_scanf_chars+0xba>
 800a39a:	68e2      	ldr	r2, [r4, #12]
 800a39c:	3201      	adds	r2, #1
 800a39e:	60e2      	str	r2, [r4, #12]
 800a3a0:	69a2      	ldr	r2, [r4, #24]
 800a3a2:	b102      	cbz	r2, 800a3a6 <_scanf_chars+0xba>
 800a3a4:	703b      	strb	r3, [r7, #0]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	441e      	add	r6, r3
 800a3ac:	6126      	str	r6, [r4, #16]
 800a3ae:	e7c7      	b.n	800a340 <_scanf_chars+0x54>

0800a3b0 <_scanf_i>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	469a      	mov	sl, r3
 800a3b8:	4b74      	ldr	r3, [pc, #464]	; (800a58c <_scanf_i+0x1dc>)
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	4683      	mov	fp, r0
 800a3be:	4616      	mov	r6, r2
 800a3c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3c4:	ab03      	add	r3, sp, #12
 800a3c6:	68a7      	ldr	r7, [r4, #8]
 800a3c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3cc:	4b70      	ldr	r3, [pc, #448]	; (800a590 <_scanf_i+0x1e0>)
 800a3ce:	69a1      	ldr	r1, [r4, #24]
 800a3d0:	4a70      	ldr	r2, [pc, #448]	; (800a594 <_scanf_i+0x1e4>)
 800a3d2:	f104 091c 	add.w	r9, r4, #28
 800a3d6:	2903      	cmp	r1, #3
 800a3d8:	bf08      	it	eq
 800a3da:	461a      	moveq	r2, r3
 800a3dc:	1e7b      	subs	r3, r7, #1
 800a3de:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a3e2:	bf84      	itt	hi
 800a3e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a3e8:	60a3      	strhi	r3, [r4, #8]
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	bf88      	it	hi
 800a3ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a3f2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bf98      	it	ls
 800a3fa:	2700      	movls	r7, #0
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	9200      	str	r2, [sp, #0]
 800a404:	bf88      	it	hi
 800a406:	197f      	addhi	r7, r7, r5
 800a408:	6831      	ldr	r1, [r6, #0]
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	ab03      	add	r3, sp, #12
 800a40e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a412:	2202      	movs	r2, #2
 800a414:	7809      	ldrb	r1, [r1, #0]
 800a416:	f7ff f817 	bl	8009448 <memchr>
 800a41a:	9b01      	ldr	r3, [sp, #4]
 800a41c:	b330      	cbz	r0, 800a46c <_scanf_i+0xbc>
 800a41e:	f1b8 0f01 	cmp.w	r8, #1
 800a422:	d15a      	bne.n	800a4da <_scanf_i+0x12a>
 800a424:	6862      	ldr	r2, [r4, #4]
 800a426:	b92a      	cbnz	r2, 800a434 <_scanf_i+0x84>
 800a428:	2108      	movs	r1, #8
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	6061      	str	r1, [r4, #4]
 800a42e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a43a:	6022      	str	r2, [r4, #0]
 800a43c:	68a2      	ldr	r2, [r4, #8]
 800a43e:	1e51      	subs	r1, r2, #1
 800a440:	60a1      	str	r1, [r4, #8]
 800a442:	b19a      	cbz	r2, 800a46c <_scanf_i+0xbc>
 800a444:	6832      	ldr	r2, [r6, #0]
 800a446:	1c5d      	adds	r5, r3, #1
 800a448:	1c51      	adds	r1, r2, #1
 800a44a:	6031      	str	r1, [r6, #0]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
 800a450:	6873      	ldr	r3, [r6, #4]
 800a452:	3b01      	subs	r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	6073      	str	r3, [r6, #4]
 800a458:	dc07      	bgt.n	800a46a <_scanf_i+0xba>
 800a45a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a45e:	4631      	mov	r1, r6
 800a460:	4658      	mov	r0, fp
 800a462:	4798      	blx	r3
 800a464:	2800      	cmp	r0, #0
 800a466:	f040 8087 	bne.w	800a578 <_scanf_i+0x1c8>
 800a46a:	462b      	mov	r3, r5
 800a46c:	f108 0801 	add.w	r8, r8, #1
 800a470:	f1b8 0f03 	cmp.w	r8, #3
 800a474:	d1c8      	bne.n	800a408 <_scanf_i+0x58>
 800a476:	6862      	ldr	r2, [r4, #4]
 800a478:	b90a      	cbnz	r2, 800a47e <_scanf_i+0xce>
 800a47a:	220a      	movs	r2, #10
 800a47c:	6062      	str	r2, [r4, #4]
 800a47e:	6862      	ldr	r2, [r4, #4]
 800a480:	4945      	ldr	r1, [pc, #276]	; (800a598 <_scanf_i+0x1e8>)
 800a482:	6960      	ldr	r0, [r4, #20]
 800a484:	1a89      	subs	r1, r1, r2
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	f000 f89a 	bl	800a5c0 <__sccl>
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	461d      	mov	r5, r3
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d03b      	beq.n	800a514 <_scanf_i+0x164>
 800a49c:	6831      	ldr	r1, [r6, #0]
 800a49e:	6960      	ldr	r0, [r4, #20]
 800a4a0:	f891 c000 	ldrb.w	ip, [r1]
 800a4a4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d033      	beq.n	800a514 <_scanf_i+0x164>
 800a4ac:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a4b0:	d121      	bne.n	800a4f6 <_scanf_i+0x146>
 800a4b2:	0510      	lsls	r0, r2, #20
 800a4b4:	d51f      	bpl.n	800a4f6 <_scanf_i+0x146>
 800a4b6:	f108 0801 	add.w	r8, r8, #1
 800a4ba:	b117      	cbz	r7, 800a4c2 <_scanf_i+0x112>
 800a4bc:	3301      	adds	r3, #1
 800a4be:	3f01      	subs	r7, #1
 800a4c0:	60a3      	str	r3, [r4, #8]
 800a4c2:	6873      	ldr	r3, [r6, #4]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	6073      	str	r3, [r6, #4]
 800a4ca:	dd1c      	ble.n	800a506 <_scanf_i+0x156>
 800a4cc:	6833      	ldr	r3, [r6, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	60a3      	str	r3, [r4, #8]
 800a4d8:	e7dc      	b.n	800a494 <_scanf_i+0xe4>
 800a4da:	f1b8 0f02 	cmp.w	r8, #2
 800a4de:	d1ad      	bne.n	800a43c <_scanf_i+0x8c>
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a4e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a4ea:	d1bf      	bne.n	800a46c <_scanf_i+0xbc>
 800a4ec:	2110      	movs	r1, #16
 800a4ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f2:	6061      	str	r1, [r4, #4]
 800a4f4:	e7a1      	b.n	800a43a <_scanf_i+0x8a>
 800a4f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	780b      	ldrb	r3, [r1, #0]
 800a4fe:	3501      	adds	r5, #1
 800a500:	f805 3c01 	strb.w	r3, [r5, #-1]
 800a504:	e7dd      	b.n	800a4c2 <_scanf_i+0x112>
 800a506:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a50a:	4631      	mov	r1, r6
 800a50c:	4658      	mov	r0, fp
 800a50e:	4798      	blx	r3
 800a510:	2800      	cmp	r0, #0
 800a512:	d0de      	beq.n	800a4d2 <_scanf_i+0x122>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	05d9      	lsls	r1, r3, #23
 800a518:	d50c      	bpl.n	800a534 <_scanf_i+0x184>
 800a51a:	454d      	cmp	r5, r9
 800a51c:	d908      	bls.n	800a530 <_scanf_i+0x180>
 800a51e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a522:	1e6f      	subs	r7, r5, #1
 800a524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a528:	4632      	mov	r2, r6
 800a52a:	4658      	mov	r0, fp
 800a52c:	4798      	blx	r3
 800a52e:	463d      	mov	r5, r7
 800a530:	454d      	cmp	r5, r9
 800a532:	d029      	beq.n	800a588 <_scanf_i+0x1d8>
 800a534:	6822      	ldr	r2, [r4, #0]
 800a536:	f012 0210 	ands.w	r2, r2, #16
 800a53a:	d113      	bne.n	800a564 <_scanf_i+0x1b4>
 800a53c:	702a      	strb	r2, [r5, #0]
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	4649      	mov	r1, r9
 800a542:	4658      	mov	r0, fp
 800a544:	9e00      	ldr	r6, [sp, #0]
 800a546:	47b0      	blx	r6
 800a548:	f8da 3000 	ldr.w	r3, [sl]
 800a54c:	6821      	ldr	r1, [r4, #0]
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	f8ca 2000 	str.w	r2, [sl]
 800a554:	f011 0f20 	tst.w	r1, #32
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	d010      	beq.n	800a57e <_scanf_i+0x1ce>
 800a55c:	6018      	str	r0, [r3, #0]
 800a55e:	68e3      	ldr	r3, [r4, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60e3      	str	r3, [r4, #12]
 800a564:	2000      	movs	r0, #0
 800a566:	eba5 0509 	sub.w	r5, r5, r9
 800a56a:	44a8      	add	r8, r5
 800a56c:	6925      	ldr	r5, [r4, #16]
 800a56e:	4445      	add	r5, r8
 800a570:	6125      	str	r5, [r4, #16]
 800a572:	b007      	add	sp, #28
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	f04f 0800 	mov.w	r8, #0
 800a57c:	e7ca      	b.n	800a514 <_scanf_i+0x164>
 800a57e:	07ca      	lsls	r2, r1, #31
 800a580:	bf4c      	ite	mi
 800a582:	8018      	strhmi	r0, [r3, #0]
 800a584:	6018      	strpl	r0, [r3, #0]
 800a586:	e7ea      	b.n	800a55e <_scanf_i+0x1ae>
 800a588:	2001      	movs	r0, #1
 800a58a:	e7f2      	b.n	800a572 <_scanf_i+0x1c2>
 800a58c:	0800b160 	.word	0x0800b160
 800a590:	0800a719 	.word	0x0800a719
 800a594:	0800a831 	.word	0x0800a831
 800a598:	0800b4a5 	.word	0x0800b4a5

0800a59c <_read_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4605      	mov	r5, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4c05      	ldr	r4, [pc, #20]	; (800a5bc <_read_r+0x20>)
 800a5a8:	6022      	str	r2, [r4, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7fb fd66 	bl	800607c <_read>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_read_r+0x1e>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_read_r+0x1e>
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	2000344c 	.word	0x2000344c

0800a5c0 <__sccl>:
 800a5c0:	b570      	push	{r4, r5, r6, lr}
 800a5c2:	780b      	ldrb	r3, [r1, #0]
 800a5c4:	1e44      	subs	r4, r0, #1
 800a5c6:	2b5e      	cmp	r3, #94	; 0x5e
 800a5c8:	bf13      	iteet	ne
 800a5ca:	1c4a      	addne	r2, r1, #1
 800a5cc:	1c8a      	addeq	r2, r1, #2
 800a5ce:	784b      	ldrbeq	r3, [r1, #1]
 800a5d0:	2100      	movne	r1, #0
 800a5d2:	bf08      	it	eq
 800a5d4:	2101      	moveq	r1, #1
 800a5d6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a5da:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a5de:	42ac      	cmp	r4, r5
 800a5e0:	d1fb      	bne.n	800a5da <__sccl+0x1a>
 800a5e2:	b913      	cbnz	r3, 800a5ea <__sccl+0x2a>
 800a5e4:	3a01      	subs	r2, #1
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	f081 0401 	eor.w	r4, r1, #1
 800a5ee:	54c4      	strb	r4, [r0, r3]
 800a5f0:	1c51      	adds	r1, r2, #1
 800a5f2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a5f6:	1e4e      	subs	r6, r1, #1
 800a5f8:	2d2d      	cmp	r5, #45	; 0x2d
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	d006      	beq.n	800a60c <__sccl+0x4c>
 800a5fe:	2d5d      	cmp	r5, #93	; 0x5d
 800a600:	d0f1      	beq.n	800a5e6 <__sccl+0x26>
 800a602:	b90d      	cbnz	r5, 800a608 <__sccl+0x48>
 800a604:	4632      	mov	r2, r6
 800a606:	e7ee      	b.n	800a5e6 <__sccl+0x26>
 800a608:	462b      	mov	r3, r5
 800a60a:	e7f0      	b.n	800a5ee <__sccl+0x2e>
 800a60c:	780e      	ldrb	r6, [r1, #0]
 800a60e:	2e5d      	cmp	r6, #93	; 0x5d
 800a610:	d0fa      	beq.n	800a608 <__sccl+0x48>
 800a612:	42b3      	cmp	r3, r6
 800a614:	dcf8      	bgt.n	800a608 <__sccl+0x48>
 800a616:	3301      	adds	r3, #1
 800a618:	429e      	cmp	r6, r3
 800a61a:	54c4      	strb	r4, [r0, r3]
 800a61c:	dcfb      	bgt.n	800a616 <__sccl+0x56>
 800a61e:	3102      	adds	r1, #2
 800a620:	e7e7      	b.n	800a5f2 <__sccl+0x32>

0800a622 <_strtol_l.isra.0>:
 800a622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a626:	4680      	mov	r8, r0
 800a628:	4689      	mov	r9, r1
 800a62a:	4692      	mov	sl, r2
 800a62c:	461e      	mov	r6, r3
 800a62e:	460f      	mov	r7, r1
 800a630:	463d      	mov	r5, r7
 800a632:	9808      	ldr	r0, [sp, #32]
 800a634:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a638:	f7fb fe14 	bl	8006264 <__locale_ctype_ptr_l>
 800a63c:	4420      	add	r0, r4
 800a63e:	7843      	ldrb	r3, [r0, #1]
 800a640:	f013 0308 	ands.w	r3, r3, #8
 800a644:	d132      	bne.n	800a6ac <_strtol_l.isra.0+0x8a>
 800a646:	2c2d      	cmp	r4, #45	; 0x2d
 800a648:	d132      	bne.n	800a6b0 <_strtol_l.isra.0+0x8e>
 800a64a:	2201      	movs	r2, #1
 800a64c:	787c      	ldrb	r4, [r7, #1]
 800a64e:	1cbd      	adds	r5, r7, #2
 800a650:	2e00      	cmp	r6, #0
 800a652:	d05d      	beq.n	800a710 <_strtol_l.isra.0+0xee>
 800a654:	2e10      	cmp	r6, #16
 800a656:	d109      	bne.n	800a66c <_strtol_l.isra.0+0x4a>
 800a658:	2c30      	cmp	r4, #48	; 0x30
 800a65a:	d107      	bne.n	800a66c <_strtol_l.isra.0+0x4a>
 800a65c:	782b      	ldrb	r3, [r5, #0]
 800a65e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a662:	2b58      	cmp	r3, #88	; 0x58
 800a664:	d14f      	bne.n	800a706 <_strtol_l.isra.0+0xe4>
 800a666:	2610      	movs	r6, #16
 800a668:	786c      	ldrb	r4, [r5, #1]
 800a66a:	3502      	adds	r5, #2
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	bf14      	ite	ne
 800a670:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a674:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a678:	2700      	movs	r7, #0
 800a67a:	fbb1 fcf6 	udiv	ip, r1, r6
 800a67e:	4638      	mov	r0, r7
 800a680:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a684:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a688:	2b09      	cmp	r3, #9
 800a68a:	d817      	bhi.n	800a6bc <_strtol_l.isra.0+0x9a>
 800a68c:	461c      	mov	r4, r3
 800a68e:	42a6      	cmp	r6, r4
 800a690:	dd23      	ble.n	800a6da <_strtol_l.isra.0+0xb8>
 800a692:	1c7b      	adds	r3, r7, #1
 800a694:	d007      	beq.n	800a6a6 <_strtol_l.isra.0+0x84>
 800a696:	4584      	cmp	ip, r0
 800a698:	d31c      	bcc.n	800a6d4 <_strtol_l.isra.0+0xb2>
 800a69a:	d101      	bne.n	800a6a0 <_strtol_l.isra.0+0x7e>
 800a69c:	45a6      	cmp	lr, r4
 800a69e:	db19      	blt.n	800a6d4 <_strtol_l.isra.0+0xb2>
 800a6a0:	2701      	movs	r7, #1
 800a6a2:	fb00 4006 	mla	r0, r0, r6, r4
 800a6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6aa:	e7eb      	b.n	800a684 <_strtol_l.isra.0+0x62>
 800a6ac:	462f      	mov	r7, r5
 800a6ae:	e7bf      	b.n	800a630 <_strtol_l.isra.0+0xe>
 800a6b0:	2c2b      	cmp	r4, #43	; 0x2b
 800a6b2:	bf04      	itt	eq
 800a6b4:	1cbd      	addeq	r5, r7, #2
 800a6b6:	787c      	ldrbeq	r4, [r7, #1]
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	e7c9      	b.n	800a650 <_strtol_l.isra.0+0x2e>
 800a6bc:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a6c0:	2b19      	cmp	r3, #25
 800a6c2:	d801      	bhi.n	800a6c8 <_strtol_l.isra.0+0xa6>
 800a6c4:	3c37      	subs	r4, #55	; 0x37
 800a6c6:	e7e2      	b.n	800a68e <_strtol_l.isra.0+0x6c>
 800a6c8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a6cc:	2b19      	cmp	r3, #25
 800a6ce:	d804      	bhi.n	800a6da <_strtol_l.isra.0+0xb8>
 800a6d0:	3c57      	subs	r4, #87	; 0x57
 800a6d2:	e7dc      	b.n	800a68e <_strtol_l.isra.0+0x6c>
 800a6d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6d8:	e7e5      	b.n	800a6a6 <_strtol_l.isra.0+0x84>
 800a6da:	1c7b      	adds	r3, r7, #1
 800a6dc:	d108      	bne.n	800a6f0 <_strtol_l.isra.0+0xce>
 800a6de:	2322      	movs	r3, #34	; 0x22
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	f8c8 3000 	str.w	r3, [r8]
 800a6e6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ea:	d107      	bne.n	800a6fc <_strtol_l.isra.0+0xda>
 800a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f0:	b102      	cbz	r2, 800a6f4 <_strtol_l.isra.0+0xd2>
 800a6f2:	4240      	negs	r0, r0
 800a6f4:	f1ba 0f00 	cmp.w	sl, #0
 800a6f8:	d0f8      	beq.n	800a6ec <_strtol_l.isra.0+0xca>
 800a6fa:	b10f      	cbz	r7, 800a700 <_strtol_l.isra.0+0xde>
 800a6fc:	f105 39ff 	add.w	r9, r5, #4294967295
 800a700:	f8ca 9000 	str.w	r9, [sl]
 800a704:	e7f2      	b.n	800a6ec <_strtol_l.isra.0+0xca>
 800a706:	2430      	movs	r4, #48	; 0x30
 800a708:	2e00      	cmp	r6, #0
 800a70a:	d1af      	bne.n	800a66c <_strtol_l.isra.0+0x4a>
 800a70c:	2608      	movs	r6, #8
 800a70e:	e7ad      	b.n	800a66c <_strtol_l.isra.0+0x4a>
 800a710:	2c30      	cmp	r4, #48	; 0x30
 800a712:	d0a3      	beq.n	800a65c <_strtol_l.isra.0+0x3a>
 800a714:	260a      	movs	r6, #10
 800a716:	e7a9      	b.n	800a66c <_strtol_l.isra.0+0x4a>

0800a718 <_strtol_r>:
 800a718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a71a:	4c06      	ldr	r4, [pc, #24]	; (800a734 <_strtol_r+0x1c>)
 800a71c:	4d06      	ldr	r5, [pc, #24]	; (800a738 <_strtol_r+0x20>)
 800a71e:	6824      	ldr	r4, [r4, #0]
 800a720:	6a24      	ldr	r4, [r4, #32]
 800a722:	2c00      	cmp	r4, #0
 800a724:	bf08      	it	eq
 800a726:	462c      	moveq	r4, r5
 800a728:	9400      	str	r4, [sp, #0]
 800a72a:	f7ff ff7a 	bl	800a622 <_strtol_l.isra.0>
 800a72e:	b003      	add	sp, #12
 800a730:	bd30      	pop	{r4, r5, pc}
 800a732:	bf00      	nop
 800a734:	20000018 	.word	0x20000018
 800a738:	2000007c 	.word	0x2000007c

0800a73c <_strtoul_l.isra.0>:
 800a73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	4692      	mov	sl, r2
 800a746:	461e      	mov	r6, r3
 800a748:	460f      	mov	r7, r1
 800a74a:	463d      	mov	r5, r7
 800a74c:	9808      	ldr	r0, [sp, #32]
 800a74e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a752:	f7fb fd87 	bl	8006264 <__locale_ctype_ptr_l>
 800a756:	4420      	add	r0, r4
 800a758:	7843      	ldrb	r3, [r0, #1]
 800a75a:	f013 0308 	ands.w	r3, r3, #8
 800a75e:	d130      	bne.n	800a7c2 <_strtoul_l.isra.0+0x86>
 800a760:	2c2d      	cmp	r4, #45	; 0x2d
 800a762:	d130      	bne.n	800a7c6 <_strtoul_l.isra.0+0x8a>
 800a764:	2101      	movs	r1, #1
 800a766:	787c      	ldrb	r4, [r7, #1]
 800a768:	1cbd      	adds	r5, r7, #2
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d05c      	beq.n	800a828 <_strtoul_l.isra.0+0xec>
 800a76e:	2e10      	cmp	r6, #16
 800a770:	d109      	bne.n	800a786 <_strtoul_l.isra.0+0x4a>
 800a772:	2c30      	cmp	r4, #48	; 0x30
 800a774:	d107      	bne.n	800a786 <_strtoul_l.isra.0+0x4a>
 800a776:	782b      	ldrb	r3, [r5, #0]
 800a778:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a77c:	2b58      	cmp	r3, #88	; 0x58
 800a77e:	d14e      	bne.n	800a81e <_strtoul_l.isra.0+0xe2>
 800a780:	2610      	movs	r6, #16
 800a782:	786c      	ldrb	r4, [r5, #1]
 800a784:	3502      	adds	r5, #2
 800a786:	f04f 32ff 	mov.w	r2, #4294967295
 800a78a:	fbb2 f2f6 	udiv	r2, r2, r6
 800a78e:	2300      	movs	r3, #0
 800a790:	fb06 fc02 	mul.w	ip, r6, r2
 800a794:	4618      	mov	r0, r3
 800a796:	ea6f 0c0c 	mvn.w	ip, ip
 800a79a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a79e:	2f09      	cmp	r7, #9
 800a7a0:	d817      	bhi.n	800a7d2 <_strtoul_l.isra.0+0x96>
 800a7a2:	463c      	mov	r4, r7
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	dd23      	ble.n	800a7f0 <_strtoul_l.isra.0+0xb4>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	db1e      	blt.n	800a7ea <_strtoul_l.isra.0+0xae>
 800a7ac:	4282      	cmp	r2, r0
 800a7ae:	d31c      	bcc.n	800a7ea <_strtoul_l.isra.0+0xae>
 800a7b0:	d101      	bne.n	800a7b6 <_strtoul_l.isra.0+0x7a>
 800a7b2:	45a4      	cmp	ip, r4
 800a7b4:	db19      	blt.n	800a7ea <_strtoul_l.isra.0+0xae>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	fb00 4006 	mla	r0, r0, r6, r4
 800a7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7c0:	e7eb      	b.n	800a79a <_strtoul_l.isra.0+0x5e>
 800a7c2:	462f      	mov	r7, r5
 800a7c4:	e7c1      	b.n	800a74a <_strtoul_l.isra.0+0xe>
 800a7c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a7c8:	bf04      	itt	eq
 800a7ca:	1cbd      	addeq	r5, r7, #2
 800a7cc:	787c      	ldrbeq	r4, [r7, #1]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	e7cb      	b.n	800a76a <_strtoul_l.isra.0+0x2e>
 800a7d2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7d6:	2f19      	cmp	r7, #25
 800a7d8:	d801      	bhi.n	800a7de <_strtoul_l.isra.0+0xa2>
 800a7da:	3c37      	subs	r4, #55	; 0x37
 800a7dc:	e7e2      	b.n	800a7a4 <_strtoul_l.isra.0+0x68>
 800a7de:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7e2:	2f19      	cmp	r7, #25
 800a7e4:	d804      	bhi.n	800a7f0 <_strtoul_l.isra.0+0xb4>
 800a7e6:	3c57      	subs	r4, #87	; 0x57
 800a7e8:	e7dc      	b.n	800a7a4 <_strtoul_l.isra.0+0x68>
 800a7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ee:	e7e5      	b.n	800a7bc <_strtoul_l.isra.0+0x80>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da09      	bge.n	800a808 <_strtoul_l.isra.0+0xcc>
 800a7f4:	2322      	movs	r3, #34	; 0x22
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fa:	f8c8 3000 	str.w	r3, [r8]
 800a7fe:	f1ba 0f00 	cmp.w	sl, #0
 800a802:	d107      	bne.n	800a814 <_strtoul_l.isra.0+0xd8>
 800a804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a808:	b101      	cbz	r1, 800a80c <_strtoul_l.isra.0+0xd0>
 800a80a:	4240      	negs	r0, r0
 800a80c:	f1ba 0f00 	cmp.w	sl, #0
 800a810:	d0f8      	beq.n	800a804 <_strtoul_l.isra.0+0xc8>
 800a812:	b10b      	cbz	r3, 800a818 <_strtoul_l.isra.0+0xdc>
 800a814:	f105 39ff 	add.w	r9, r5, #4294967295
 800a818:	f8ca 9000 	str.w	r9, [sl]
 800a81c:	e7f2      	b.n	800a804 <_strtoul_l.isra.0+0xc8>
 800a81e:	2430      	movs	r4, #48	; 0x30
 800a820:	2e00      	cmp	r6, #0
 800a822:	d1b0      	bne.n	800a786 <_strtoul_l.isra.0+0x4a>
 800a824:	2608      	movs	r6, #8
 800a826:	e7ae      	b.n	800a786 <_strtoul_l.isra.0+0x4a>
 800a828:	2c30      	cmp	r4, #48	; 0x30
 800a82a:	d0a4      	beq.n	800a776 <_strtoul_l.isra.0+0x3a>
 800a82c:	260a      	movs	r6, #10
 800a82e:	e7aa      	b.n	800a786 <_strtoul_l.isra.0+0x4a>

0800a830 <_strtoul_r>:
 800a830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a832:	4c06      	ldr	r4, [pc, #24]	; (800a84c <_strtoul_r+0x1c>)
 800a834:	4d06      	ldr	r5, [pc, #24]	; (800a850 <_strtoul_r+0x20>)
 800a836:	6824      	ldr	r4, [r4, #0]
 800a838:	6a24      	ldr	r4, [r4, #32]
 800a83a:	2c00      	cmp	r4, #0
 800a83c:	bf08      	it	eq
 800a83e:	462c      	moveq	r4, r5
 800a840:	9400      	str	r4, [sp, #0]
 800a842:	f7ff ff7b 	bl	800a73c <_strtoul_l.isra.0>
 800a846:	b003      	add	sp, #12
 800a848:	bd30      	pop	{r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	20000018 	.word	0x20000018
 800a850:	2000007c 	.word	0x2000007c

0800a854 <__submore>:
 800a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a858:	460c      	mov	r4, r1
 800a85a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	4299      	cmp	r1, r3
 800a862:	d11b      	bne.n	800a89c <__submore+0x48>
 800a864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a868:	f7fb fd90 	bl	800638c <_malloc_r>
 800a86c:	b918      	cbnz	r0, 800a876 <__submore+0x22>
 800a86e:	f04f 30ff 	mov.w	r0, #4294967295
 800a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a87a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a87c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a880:	6360      	str	r0, [r4, #52]	; 0x34
 800a882:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a886:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a88a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a88e:	7043      	strb	r3, [r0, #1]
 800a890:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a894:	7003      	strb	r3, [r0, #0]
 800a896:	6020      	str	r0, [r4, #0]
 800a898:	2000      	movs	r0, #0
 800a89a:	e7ea      	b.n	800a872 <__submore+0x1e>
 800a89c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a89e:	0077      	lsls	r7, r6, #1
 800a8a0:	463a      	mov	r2, r7
 800a8a2:	f7ff fa01 	bl	8009ca8 <_realloc_r>
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d0e0      	beq.n	800a86e <__submore+0x1a>
 800a8ac:	eb00 0806 	add.w	r8, r0, r6
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	f7fb fd09 	bl	80062cc <memcpy>
 800a8ba:	f8c4 8000 	str.w	r8, [r4]
 800a8be:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a8c2:	e7e9      	b.n	800a898 <__submore+0x44>

0800a8c4 <_fstat_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4c06      	ldr	r4, [pc, #24]	; (800a8e4 <_fstat_r+0x20>)
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	f7fb fc17 	bl	8006104 <_fstat>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_fstat_r+0x1c>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_fstat_r+0x1c>
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000344c 	.word	0x2000344c

0800a8e8 <_isatty_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4c05      	ldr	r4, [pc, #20]	; (800a904 <_isatty_r+0x1c>)
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	6023      	str	r3, [r4, #0]
 800a8f4:	f7fb fc15 	bl	8006122 <_isatty>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_isatty_r+0x1a>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_isatty_r+0x1a>
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	2000344c 	.word	0x2000344c

0800a908 <_malloc_usable_size_r>:
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f18      	subs	r0, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfbc      	itt	lt
 800a912:	580b      	ldrlt	r3, [r1, r0]
 800a914:	18c0      	addlt	r0, r0, r3
 800a916:	4770      	bx	lr

0800a918 <log>:
 800a918:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a91c:	b08a      	sub	sp, #40	; 0x28
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	f000 f875 	bl	800aa10 <__ieee754_log>
 800a926:	4b34      	ldr	r3, [pc, #208]	; (800a9f8 <log+0xe0>)
 800a928:	4680      	mov	r8, r0
 800a92a:	f993 6000 	ldrsb.w	r6, [r3]
 800a92e:	4689      	mov	r9, r1
 800a930:	1c73      	adds	r3, r6, #1
 800a932:	d05b      	beq.n	800a9ec <log+0xd4>
 800a934:	4622      	mov	r2, r4
 800a936:	462b      	mov	r3, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	f7f6 f880 	bl	8000a40 <__aeabi_dcmpun>
 800a940:	2800      	cmp	r0, #0
 800a942:	d153      	bne.n	800a9ec <log+0xd4>
 800a944:	2200      	movs	r2, #0
 800a946:	2300      	movs	r3, #0
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f6 f86e 	bl	8000a2c <__aeabi_dcmpgt>
 800a950:	2800      	cmp	r0, #0
 800a952:	d14b      	bne.n	800a9ec <log+0xd4>
 800a954:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <log+0xe4>)
 800a956:	9008      	str	r0, [sp, #32]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a95e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a962:	b9a6      	cbnz	r6, 800a98e <log+0x76>
 800a964:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a968:	4b25      	ldr	r3, [pc, #148]	; (800aa00 <log+0xe8>)
 800a96a:	4620      	mov	r0, r4
 800a96c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a970:	4629      	mov	r1, r5
 800a972:	2200      	movs	r2, #0
 800a974:	2300      	movs	r3, #0
 800a976:	f7f6 f831 	bl	80009dc <__aeabi_dcmpeq>
 800a97a:	bb40      	cbnz	r0, 800a9ce <log+0xb6>
 800a97c:	2301      	movs	r3, #1
 800a97e:	2e02      	cmp	r6, #2
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	d119      	bne.n	800a9b8 <log+0xa0>
 800a984:	f7fb fc44 	bl	8006210 <__errno>
 800a988:	2321      	movs	r3, #33	; 0x21
 800a98a:	6003      	str	r3, [r0, #0]
 800a98c:	e019      	b.n	800a9c2 <log+0xaa>
 800a98e:	2200      	movs	r2, #0
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <log+0xec>)
 800a992:	4620      	mov	r0, r4
 800a994:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a998:	4629      	mov	r1, r5
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	f7f6 f81d 	bl	80009dc <__aeabi_dcmpeq>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d0ea      	beq.n	800a97c <log+0x64>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	429e      	cmp	r6, r3
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	d111      	bne.n	800a9d2 <log+0xba>
 800a9ae:	f7fb fc2f 	bl	8006210 <__errno>
 800a9b2:	2322      	movs	r3, #34	; 0x22
 800a9b4:	6003      	str	r3, [r0, #0]
 800a9b6:	e011      	b.n	800a9dc <log+0xc4>
 800a9b8:	4668      	mov	r0, sp
 800a9ba:	f000 f9db 	bl	800ad74 <matherr>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0e0      	beq.n	800a984 <log+0x6c>
 800a9c2:	4811      	ldr	r0, [pc, #68]	; (800aa08 <log+0xf0>)
 800a9c4:	f000 f9d8 	bl	800ad78 <nan>
 800a9c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9cc:	e006      	b.n	800a9dc <log+0xc4>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4668      	mov	r0, sp
 800a9d4:	f000 f9ce 	bl	800ad74 <matherr>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d0e8      	beq.n	800a9ae <log+0x96>
 800a9dc:	9b08      	ldr	r3, [sp, #32]
 800a9de:	b11b      	cbz	r3, 800a9e8 <log+0xd0>
 800a9e0:	f7fb fc16 	bl	8006210 <__errno>
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	6003      	str	r3, [r0, #0]
 800a9e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	b00a      	add	sp, #40	; 0x28
 800a9f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a9f6:	bf00      	nop
 800a9f8:	200001e8 	.word	0x200001e8
 800a9fc:	0800b4b0 	.word	0x0800b4b0
 800aa00:	c7efffff 	.word	0xc7efffff
 800aa04:	fff00000 	.word	0xfff00000
 800aa08:	0800b489 	.word	0x0800b489
 800aa0c:	00000000 	.word	0x00000000

0800aa10 <__ieee754_log>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800aa18:	b087      	sub	sp, #28
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	460d      	mov	r5, r1
 800aa20:	da24      	bge.n	800aa6c <__ieee754_log+0x5c>
 800aa22:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800aa26:	4304      	orrs	r4, r0
 800aa28:	d108      	bne.n	800aa3c <__ieee754_log+0x2c>
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	2000      	movs	r0, #0
 800aa30:	49cb      	ldr	r1, [pc, #812]	; (800ad60 <__ieee754_log+0x350>)
 800aa32:	f7f5 fe95 	bl	8000760 <__aeabi_ddiv>
 800aa36:	b007      	add	sp, #28
 800aa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	da04      	bge.n	800aa4a <__ieee754_log+0x3a>
 800aa40:	f7f5 fbac 	bl	800019c <__aeabi_dsub>
 800aa44:	2200      	movs	r2, #0
 800aa46:	2300      	movs	r3, #0
 800aa48:	e7f3      	b.n	800aa32 <__ieee754_log+0x22>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	4bc5      	ldr	r3, [pc, #788]	; (800ad64 <__ieee754_log+0x354>)
 800aa4e:	f7f5 fd5d 	bl	800050c <__aeabi_dmul>
 800aa52:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	49c2      	ldr	r1, [pc, #776]	; (800ad68 <__ieee754_log+0x358>)
 800aa5e:	428d      	cmp	r5, r1
 800aa60:	dd06      	ble.n	800aa70 <__ieee754_log+0x60>
 800aa62:	4610      	mov	r0, r2
 800aa64:	4619      	mov	r1, r3
 800aa66:	f7f5 fb9b 	bl	80001a0 <__adddf3>
 800aa6a:	e7e4      	b.n	800aa36 <__ieee754_log+0x26>
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	e7f5      	b.n	800aa5c <__ieee754_log+0x4c>
 800aa70:	152c      	asrs	r4, r5, #20
 800aa72:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800aa76:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800aa7a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aa7e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800aa82:	4426      	add	r6, r4
 800aa84:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800aa88:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800aa8c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800aa90:	ea41 0305 	orr.w	r3, r1, r5
 800aa94:	4610      	mov	r0, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4bb4      	ldr	r3, [pc, #720]	; (800ad6c <__ieee754_log+0x35c>)
 800aa9c:	f7f5 fb7e 	bl	800019c <__aeabi_dsub>
 800aaa0:	1cab      	adds	r3, r5, #2
 800aaa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800aaac:	4682      	mov	sl, r0
 800aaae:	468b      	mov	fp, r1
 800aab0:	f04f 0200 	mov.w	r2, #0
 800aab4:	dc53      	bgt.n	800ab5e <__ieee754_log+0x14e>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f7f5 ff90 	bl	80009dc <__aeabi_dcmpeq>
 800aabc:	b1d0      	cbz	r0, 800aaf4 <__ieee754_log+0xe4>
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	f000 8120 	beq.w	800ad04 <__ieee754_log+0x2f4>
 800aac4:	4620      	mov	r0, r4
 800aac6:	f7f5 fcb7 	bl	8000438 <__aeabi_i2d>
 800aaca:	a391      	add	r3, pc, #580	; (adr r3, 800ad10 <__ieee754_log+0x300>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	4606      	mov	r6, r0
 800aad2:	460f      	mov	r7, r1
 800aad4:	f7f5 fd1a 	bl	800050c <__aeabi_dmul>
 800aad8:	a38f      	add	r3, pc, #572	; (adr r3, 800ad18 <__ieee754_log+0x308>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	4604      	mov	r4, r0
 800aae0:	460d      	mov	r5, r1
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 fd11 	bl	800050c <__aeabi_dmul>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	e7b8      	b.n	800aa66 <__ieee754_log+0x56>
 800aaf4:	a38a      	add	r3, pc, #552	; (adr r3, 800ad20 <__ieee754_log+0x310>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	4650      	mov	r0, sl
 800aafc:	4659      	mov	r1, fp
 800aafe:	f7f5 fd05 	bl	800050c <__aeabi_dmul>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	2000      	movs	r0, #0
 800ab08:	4999      	ldr	r1, [pc, #612]	; (800ad70 <__ieee754_log+0x360>)
 800ab0a:	f7f5 fb47 	bl	800019c <__aeabi_dsub>
 800ab0e:	4652      	mov	r2, sl
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	465b      	mov	r3, fp
 800ab16:	4650      	mov	r0, sl
 800ab18:	4659      	mov	r1, fp
 800ab1a:	f7f5 fcf7 	bl	800050c <__aeabi_dmul>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	4630      	mov	r0, r6
 800ab24:	4639      	mov	r1, r7
 800ab26:	f7f5 fcf1 	bl	800050c <__aeabi_dmul>
 800ab2a:	4606      	mov	r6, r0
 800ab2c:	460f      	mov	r7, r1
 800ab2e:	b914      	cbnz	r4, 800ab36 <__ieee754_log+0x126>
 800ab30:	4632      	mov	r2, r6
 800ab32:	463b      	mov	r3, r7
 800ab34:	e0a0      	b.n	800ac78 <__ieee754_log+0x268>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7f5 fc7e 	bl	8000438 <__aeabi_i2d>
 800ab3c:	a374      	add	r3, pc, #464	; (adr r3, 800ad10 <__ieee754_log+0x300>)
 800ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab42:	4680      	mov	r8, r0
 800ab44:	4689      	mov	r9, r1
 800ab46:	f7f5 fce1 	bl	800050c <__aeabi_dmul>
 800ab4a:	a373      	add	r3, pc, #460	; (adr r3, 800ad18 <__ieee754_log+0x308>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	4640      	mov	r0, r8
 800ab56:	4649      	mov	r1, r9
 800ab58:	f7f5 fcd8 	bl	800050c <__aeabi_dmul>
 800ab5c:	e0a5      	b.n	800acaa <__ieee754_log+0x29a>
 800ab5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab62:	f7f5 fb1d 	bl	80001a0 <__adddf3>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	4659      	mov	r1, fp
 800ab6e:	f7f5 fdf7 	bl	8000760 <__aeabi_ddiv>
 800ab72:	e9cd 0100 	strd	r0, r1, [sp]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7f5 fc5e 	bl	8000438 <__aeabi_i2d>
 800ab7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab84:	4610      	mov	r0, r2
 800ab86:	4619      	mov	r1, r3
 800ab88:	f7f5 fcc0 	bl	800050c <__aeabi_dmul>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab94:	f7f5 fcba 	bl	800050c <__aeabi_dmul>
 800ab98:	a363      	add	r3, pc, #396	; (adr r3, 800ad28 <__ieee754_log+0x318>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	4680      	mov	r8, r0
 800aba0:	4689      	mov	r9, r1
 800aba2:	f7f5 fcb3 	bl	800050c <__aeabi_dmul>
 800aba6:	a362      	add	r3, pc, #392	; (adr r3, 800ad30 <__ieee754_log+0x320>)
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f7f5 faf8 	bl	80001a0 <__adddf3>
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	f7f5 fcaa 	bl	800050c <__aeabi_dmul>
 800abb8:	a35f      	add	r3, pc, #380	; (adr r3, 800ad38 <__ieee754_log+0x328>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 faef 	bl	80001a0 <__adddf3>
 800abc2:	4642      	mov	r2, r8
 800abc4:	464b      	mov	r3, r9
 800abc6:	f7f5 fca1 	bl	800050c <__aeabi_dmul>
 800abca:	a35d      	add	r3, pc, #372	; (adr r3, 800ad40 <__ieee754_log+0x330>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fae6 	bl	80001a0 <__adddf3>
 800abd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd8:	f7f5 fc98 	bl	800050c <__aeabi_dmul>
 800abdc:	a35a      	add	r3, pc, #360	; (adr r3, 800ad48 <__ieee754_log+0x338>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abe6:	4640      	mov	r0, r8
 800abe8:	4649      	mov	r1, r9
 800abea:	f7f5 fc8f 	bl	800050c <__aeabi_dmul>
 800abee:	a358      	add	r3, pc, #352	; (adr r3, 800ad50 <__ieee754_log+0x340>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 fad4 	bl	80001a0 <__adddf3>
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	f7f5 fc86 	bl	800050c <__aeabi_dmul>
 800ac00:	a355      	add	r3, pc, #340	; (adr r3, 800ad58 <__ieee754_log+0x348>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 facb 	bl	80001a0 <__adddf3>
 800ac0a:	4642      	mov	r2, r8
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	f7f5 fc7d 	bl	800050c <__aeabi_dmul>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac1a:	f7f5 fac1 	bl	80001a0 <__adddf3>
 800ac1e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800ac22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ac26:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800ac2a:	3551      	adds	r5, #81	; 0x51
 800ac2c:	4335      	orrs	r5, r6
 800ac2e:	2d00      	cmp	r5, #0
 800ac30:	4680      	mov	r8, r0
 800ac32:	4689      	mov	r9, r1
 800ac34:	dd48      	ble.n	800acc8 <__ieee754_log+0x2b8>
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b4d      	ldr	r3, [pc, #308]	; (800ad70 <__ieee754_log+0x360>)
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	f7f5 fc65 	bl	800050c <__aeabi_dmul>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fc61 	bl	800050c <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460f      	mov	r7, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 faa3 	bl	80001a0 <__adddf3>
 800ac5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac5e:	f7f5 fc55 	bl	800050c <__aeabi_dmul>
 800ac62:	4680      	mov	r8, r0
 800ac64:	4689      	mov	r9, r1
 800ac66:	b964      	cbnz	r4, 800ac82 <__ieee754_log+0x272>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	4639      	mov	r1, r7
 800ac70:	f7f5 fa94 	bl	800019c <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4650      	mov	r0, sl
 800ac7a:	4659      	mov	r1, fp
 800ac7c:	f7f5 fa8e 	bl	800019c <__aeabi_dsub>
 800ac80:	e6d9      	b.n	800aa36 <__ieee754_log+0x26>
 800ac82:	a323      	add	r3, pc, #140	; (adr r3, 800ad10 <__ieee754_log+0x300>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac8c:	f7f5 fc3e 	bl	800050c <__aeabi_dmul>
 800ac90:	a321      	add	r3, pc, #132	; (adr r3, 800ad18 <__ieee754_log+0x308>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	4604      	mov	r4, r0
 800ac98:	460d      	mov	r5, r1
 800ac9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac9e:	f7f5 fc35 	bl	800050c <__aeabi_dmul>
 800aca2:	4642      	mov	r2, r8
 800aca4:	464b      	mov	r3, r9
 800aca6:	f7f5 fa7b 	bl	80001a0 <__adddf3>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 fa73 	bl	800019c <__aeabi_dsub>
 800acb6:	4652      	mov	r2, sl
 800acb8:	465b      	mov	r3, fp
 800acba:	f7f5 fa6f 	bl	800019c <__aeabi_dsub>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	e7d9      	b.n	800ac7c <__ieee754_log+0x26c>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4650      	mov	r0, sl
 800acce:	4659      	mov	r1, fp
 800acd0:	f7f5 fa64 	bl	800019c <__aeabi_dsub>
 800acd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acd8:	f7f5 fc18 	bl	800050c <__aeabi_dmul>
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	2c00      	cmp	r4, #0
 800ace2:	f43f af25 	beq.w	800ab30 <__ieee754_log+0x120>
 800ace6:	a30a      	add	r3, pc, #40	; (adr r3, 800ad10 <__ieee754_log+0x300>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf0:	f7f5 fc0c 	bl	800050c <__aeabi_dmul>
 800acf4:	a308      	add	r3, pc, #32	; (adr r3, 800ad18 <__ieee754_log+0x308>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	4604      	mov	r4, r0
 800acfc:	460d      	mov	r5, r1
 800acfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad02:	e729      	b.n	800ab58 <__ieee754_log+0x148>
 800ad04:	2000      	movs	r0, #0
 800ad06:	2100      	movs	r1, #0
 800ad08:	e695      	b.n	800aa36 <__ieee754_log+0x26>
 800ad0a:	bf00      	nop
 800ad0c:	f3af 8000 	nop.w
 800ad10:	fee00000 	.word	0xfee00000
 800ad14:	3fe62e42 	.word	0x3fe62e42
 800ad18:	35793c76 	.word	0x35793c76
 800ad1c:	3dea39ef 	.word	0x3dea39ef
 800ad20:	55555555 	.word	0x55555555
 800ad24:	3fd55555 	.word	0x3fd55555
 800ad28:	df3e5244 	.word	0xdf3e5244
 800ad2c:	3fc2f112 	.word	0x3fc2f112
 800ad30:	96cb03de 	.word	0x96cb03de
 800ad34:	3fc74664 	.word	0x3fc74664
 800ad38:	94229359 	.word	0x94229359
 800ad3c:	3fd24924 	.word	0x3fd24924
 800ad40:	55555593 	.word	0x55555593
 800ad44:	3fe55555 	.word	0x3fe55555
 800ad48:	d078c69f 	.word	0xd078c69f
 800ad4c:	3fc39a09 	.word	0x3fc39a09
 800ad50:	1d8e78af 	.word	0x1d8e78af
 800ad54:	3fcc71c5 	.word	0x3fcc71c5
 800ad58:	9997fa04 	.word	0x9997fa04
 800ad5c:	3fd99999 	.word	0x3fd99999
 800ad60:	c3500000 	.word	0xc3500000
 800ad64:	43500000 	.word	0x43500000
 800ad68:	7fefffff 	.word	0x7fefffff
 800ad6c:	3ff00000 	.word	0x3ff00000
 800ad70:	3fe00000 	.word	0x3fe00000

0800ad74 <matherr>:
 800ad74:	2000      	movs	r0, #0
 800ad76:	4770      	bx	lr

0800ad78 <nan>:
 800ad78:	2000      	movs	r0, #0
 800ad7a:	4901      	ldr	r1, [pc, #4]	; (800ad80 <nan+0x8>)
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	7ff80000 	.word	0x7ff80000

0800ad84 <_init>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	bf00      	nop
 800ad88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8a:	bc08      	pop	{r3}
 800ad8c:	469e      	mov	lr, r3
 800ad8e:	4770      	bx	lr

0800ad90 <_fini>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr
